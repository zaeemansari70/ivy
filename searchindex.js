Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/adam_step", "array/array_methods/add", "array/array_methods/add_ivy_array_instance_methods", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argsort", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/cholesky", "array/array_methods/clip", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross", "array/array_methods/cross_entropy", "array/array_methods/det", "array/array_methods/diagonal", "array/array_methods/divide", "array/array_methods/eigh", "array/array_methods/eigvalsh", "array/array_methods/einsum", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/gather_nd", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/inv", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/layer_norm", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/matrix_norm", "array/array_methods/matrix_rank", "array/array_methods/matrix_transpose", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/min", "array/array_methods/multiply", "array/array_methods/negative", "array/array_methods/not_equal", "array/array_methods/outer", "array/array_methods/permute_dims", "array/array_methods/pinv", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/qr", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/solve", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/svd", "array/array_methods/svdvals", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tensordot", "array/array_methods/tile", "array/array_methods/trace", "array/array_methods/trunc", "array/array_methods/var", "array/array_methods/vecdot", "array/array_methods/vector_norm", "array/array_methods/vector_to_skew_symmetric_matrix", "array/array_methods/zero_pad", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_step", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/add_ivy_container_instance_methods", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/at_dev", "container/container_methods/at_devs", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/clip", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross_entropy", "container/container_methods/divide", "container/container_methods/einsum", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/gather_nd", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/is_variable", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/max", "container/container_methods/mean", "container/container_methods/min", "container/container_methods/multiply", "container/container_methods/negative", "container/container_methods/not_equal", "container/container_methods/optimizer_update", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/random_uniform", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stack", "container/container_methods/static_abs", "container/container_methods/static_adam_step", "container/container_methods/static_adam_update", "container/container_methods/static_add", "container/container_methods/static_all_equal", "container/container_methods/static_argsort", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_can_cast", "container/container_methods/static_clip", "container/container_methods/static_cross_entropy", "container/container_methods/static_divide", "container/container_methods/static_gather_nd", "container/container_methods/static_gradient_descent_update", "container/container_methods/static_is_variable", "container/container_methods/static_lamb_update", "container/container_methods/static_lars_update", "container/container_methods/static_multiply", "container/container_methods/static_optimizer_update", "container/container_methods/static_randint", "container/container_methods/static_random_uniform", "container/container_methods/static_roll", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_subtract", "container/container_methods/static_tan", "container/container_methods/static_tanh", "container/container_methods/std", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tile", "container/container_methods/trunc", "container/container_methods/var", "container/container_methods/zero_pad", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/adam_step.rst", "array/array_methods/add.rst", "array/array_methods/add_ivy_array_instance_methods.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argsort.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/cholesky.rst", "array/array_methods/clip.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/det.rst", "array/array_methods/diagonal.rst", "array/array_methods/divide.rst", "array/array_methods/eigh.rst", "array/array_methods/eigvalsh.rst", "array/array_methods/einsum.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/gather_nd.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/inv.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/layer_norm.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/matrix_norm.rst", "array/array_methods/matrix_rank.rst", "array/array_methods/matrix_transpose.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/min.rst", "array/array_methods/multiply.rst", "array/array_methods/negative.rst", "array/array_methods/not_equal.rst", "array/array_methods/outer.rst", "array/array_methods/permute_dims.rst", "array/array_methods/pinv.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/qr.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/solve.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/svd.rst", "array/array_methods/svdvals.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tensordot.rst", "array/array_methods/tile.rst", "array/array_methods/trace.rst", "array/array_methods/trunc.rst", "array/array_methods/var.rst", "array/array_methods/vecdot.rst", "array/array_methods/vector_norm.rst", "array/array_methods/vector_to_skew_symmetric_matrix.rst", "array/array_methods/zero_pad.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_step.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/add_ivy_container_instance_methods.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/at_dev.rst", "container/container_methods/at_devs.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/clip.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/divide.rst", "container/container_methods/einsum.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/gather_nd.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/is_variable.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/max.rst", "container/container_methods/mean.rst", "container/container_methods/min.rst", "container/container_methods/multiply.rst", "container/container_methods/negative.rst", "container/container_methods/not_equal.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/random_uniform.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stack.rst", "container/container_methods/static_abs.rst", "container/container_methods/static_adam_step.rst", "container/container_methods/static_adam_update.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_gather_nd.rst", "container/container_methods/static_gradient_descent_update.rst", "container/container_methods/static_is_variable.rst", "container/container_methods/static_lamb_update.rst", "container/container_methods/static_lars_update.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_optimizer_update.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_tan.rst", "container/container_methods/static_tanh.rst", "container/container_methods/std.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tile.rst", "container/container_methods/trunc.rst", "container/container_methods/var.rst", "container/container_methods/zero_pad.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array methods", "abs array", "acos array", "acosh array", "adam_step array", "add array", "add_ivy_array_instance_methods array", "all array", "all_equal array", "any array", "argsort array", "asin array", "asinh array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "can_cast array", "ceil array", "cholesky array", "clip array", "concat array", "constant_pad array", "cos array", "cosh array", "cross array", "cross_entropy array", "det array", "diagonal array", "divide array", "eigh array", "eigvalsh array", "einsum array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "flip array", "floor array", "floor_divide array", "gather_nd array", "greater array", "greater_equal array", "inv array", "isfinite array", "isinf array", "isnan array", "layer_norm array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "matrix_norm array", "matrix_rank array", "matrix_transpose array", "max array", "mean array", "min array", "multiply array", "negative array", "not_equal array", "outer array", "permute_dims array", "pinv array", "positive array", "pow array", "prod array", "qr array", "remainder array", "repeat array", "reshape array", "roll array", "round array", "sign array", "sin array", "sinh array", "solve array", "sort array", "sparse_cross_entropy array", "sqrt array", "square array", "squeeze array", "stack array", "std array", "subtract array", "sum array", "svd array", "svdvals array", "swapaxes array", "tan array", "tanh array", "tensordot array", "tile array", "trace array", "trunc array", "var array", "vecdot array", "vector_norm array", "vector_to_skew_symmetric_matrix array", "zero_pad array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Container methods", "abs container", "acos container", "acosh container", "adam_step container", "adam_update container", "add container", "add_ivy_container_instance_methods container", "all container", "all_equal container", "any container", "argsort container", "asin container", "asinh container", "at_dev container", "at_devs container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "can_cast container", "ceil container", "clip container", "clip_vector_norm container", "concat container", "constant_pad container", "cos container", "cosh container", "cross_entropy container", "divide container", "einsum container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "flip container", "floor container", "floor_divide container", "gather_nd container", "gradient_descent_update container", "greater container", "greater_equal container", "is_variable container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "max container", "mean container", "min container", "multiply container", "negative container", "not_equal container", "optimizer_update container", "permute_dims container", "positive container", "pow container", "prod container", "random_uniform container", "remainder container", "repeat container", "reshape container", "roll container", "round container", "sign container", "sin container", "sinh container", "sort container", "sparse_cross_entropy container", "sqrt container", "square container", "squeeze container", "stack container", "static_abs container", "static_adam_step container", "static_adam_update container", "static_add container", "static_all_equal container", "static_argsort container", "static_binary_cross_entropy container", "static_can_cast container", "static_clip container", "static_cross_entropy container", "static_divide container", "static_gather_nd container", "static_gradient_descent_update container", "static_is_variable container", "static_lamb_update container", "static_lars_update container", "static_multiply container", "static_optimizer_update container", "static_randint container", "static_random_uniform container", "static_roll container", "static_sort container", "static_sparse_cross_entropy container", "static_subtract container", "static_tan container", "static_tanh container", "std container", "subtract container", "sum container", "swapaxes container", "tan container", "tanh container", "tile container", "trunc container", "var container", "zero_pad container", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 2, 8, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 172, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 279, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 355, 356, 359, 360, 362, 366, 367, 368, 369, 371, 373, 374, 376, 377, 378, 388, 389, 390, 431, 454, 468, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 756, 763, 800, 806, 825, 830, 832, 834, 836, 866, 1031, 1033, 1043, 1066, 1069, 1129, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 359, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 528, 532, 537, 541, 545, 549, 553, 557, 561, 565, 569, 573, 577, 581, 585, 589, 593, 598, 602, 606, 610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662, 666, 670, 674, 678, 682, 686, 687, 688, 693, 697, 701, 705, 709, 713, 717, 721, 725, 729, 733, 737, 742, 747, 752, 756, 757, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 837, 841, 842, 846, 850, 854, 858, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 888, 891, 894, 897, 900, 903, 907, 910, 911, 914, 917, 920, 923, 926, 927, 930, 933, 936, 939, 942, 945, 948, 951, 952, 957, 962, 967, 968, 973, 977, 981, 985, 989, 993, 997, 1001, 1006, 1007, 1011, 1015, 1019, 1023, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1055, 1056, 1059, 1060, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1082, 1087, 1088, 1092, 1096, 1100, 1104, 1108, 1112, 1116, 1120, 1121, 1125, 1129, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1176], "arrai": [0, 1, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 179, 180, 181, 182, 183, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 353, 354, 355, 357, 358, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 374, 376, 377, 378, 390, 391, 399, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 438, 439, 440, 442, 443, 444, 449, 451, 454, 456, 457, 459, 463, 468, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 502, 506, 508, 512, 513, 518, 519, 521, 522, 523, 524, 527, 528, 531, 532, 534, 535, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 583, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 616, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 755, 756, 757, 759, 760, 761, 764, 765, 766, 768, 769, 771, 773, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 793, 795, 796, 797, 798, 799, 800, 802, 803, 805, 808, 809, 810, 812, 813, 818, 819, 822, 824, 825, 826, 828, 829, 830, 832, 834, 835, 836, 837, 839, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 863, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 970, 971, 972, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1043, 1044, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1132, 1134, 1150, 1158, 1161], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 366, 367, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1176], "base": [0, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 177, 178, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 354, 362, 365, 367, 373, 389, 412, 422, 431, 468, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 518, 606, 650, 653, 654, 657, 658, 661, 662, 665, 705, 708, 756, 791, 814, 821, 830, 1071, 1072, 1073, 1075, 1087, 1088, 1091, 1115, 1136, 1137, 1138, 1141, 1143, 1144, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173], "abc": [0, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 179, 180, 375, 468, 477, 483, 756, 781, 1162, 1163, 1166, 1170], "activ": [1, 2, 8, 158, 159, 178, 184, 191, 350, 351, 353, 354, 356, 358, 377, 402, 403, 404, 405, 406, 407, 408, 1129, 1137, 1138], "support": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 359, 360, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 378, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1133, 1134, 1135, 1137, 1138, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1176], "framework": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 357, 361, 363, 364, 365, 366, 369, 371, 372, 375, 378, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1133, 1134, 1135, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1176], "array_method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 440, 441, 519, 520, 525, 528, 529, 533, 537, 538, 541, 542, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 586, 590, 594, 599, 602, 603, 607, 610, 611, 615, 618, 619, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 682, 683, 688, 689, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 733, 734, 737, 739, 744, 749, 752, 753, 757, 758, 785, 786, 832, 833, 882, 883, 885, 886, 889, 891, 892, 894, 895, 897, 898, 901, 902, 903, 904, 907, 908, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 928, 931, 932, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 952, 953, 957, 958, 962, 963, 968, 969, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 998, 1001, 1002, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1020, 1023, 1024, 1050, 1051, 1077, 1078, 1082, 1083, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1113, 1116, 1117, 1121, 1122, 1125, 1126], "ab": [2, 128, 129, 184, 278, 320, 321, 362, 365, 518, 523, 705, 708, 881, 945, 947, 1129], "self": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 179, 180, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 366, 367, 373, 375, 376, 377, 378, 440, 441, 442, 468, 519, 520, 521, 525, 526, 527, 528, 529, 530, 533, 534, 535, 537, 538, 539, 541, 542, 543, 546, 547, 548, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 573, 574, 575, 577, 578, 579, 581, 582, 583, 586, 587, 588, 590, 591, 592, 594, 595, 596, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 678, 679, 680, 682, 683, 684, 688, 689, 690, 693, 694, 695, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 729, 730, 731, 733, 734, 735, 737, 739, 740, 744, 745, 746, 749, 750, 751, 752, 753, 754, 757, 758, 759, 769, 770, 785, 786, 787, 832, 833, 834, 837, 838, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 882, 883, 885, 886, 889, 891, 892, 894, 895, 897, 898, 901, 902, 903, 904, 905, 907, 908, 911, 912, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 928, 931, 932, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 952, 953, 954, 957, 958, 959, 962, 963, 964, 968, 969, 970, 973, 974, 975, 977, 978, 979, 981, 982, 983, 985, 986, 987, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1007, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1050, 1051, 1052, 1060, 1061, 1077, 1078, 1079, 1082, 1083, 1084, 1088, 1089, 1090, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1102, 1104, 1105, 1106, 1108, 1109, 1110, 1113, 1114, 1115, 1116, 1117, 1118, 1121, 1122, 1123, 1125, 1126, 1127, 1129, 1166, 1170], "out": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 174, 175, 176, 179, 180, 181, 182, 184, 185, 186, 187, 190, 192, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 284, 286, 287, 288, 289, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 320, 321, 322, 323, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 344, 345, 346, 347, 348, 349, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 375, 376, 377, 378, 389, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 437, 439, 468, 513, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 768, 769, 770, 771, 773, 774, 775, 778, 779, 780, 782, 784, 785, 786, 787, 788, 789, 796, 809, 812, 813, 830, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1070, 1071, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1150, 1158], "none": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 160, 162, 165, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 358, 360, 363, 367, 368, 369, 370, 371, 373, 375, 377, 378, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 437, 439, 440, 442, 444, 446, 447, 448, 451, 454, 468, 477, 478, 486, 487, 510, 511, 512, 513, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 761, 762, 768, 769, 770, 771, 773, 774, 775, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 794, 796, 797, 801, 807, 809, 812, 813, 814, 815, 820, 821, 827, 830, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1037, 1042, 1043, 1044, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1139, 1140, 1141, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173], "instanc": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 179, 180, 181, 182, 184, 185, 188, 190, 191, 193, 210, 211, 212, 227, 229, 267, 279, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 350, 351, 355, 359, 360, 362, 363, 366, 368, 370, 371, 376, 377, 378, 391, 399, 401, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 441, 442, 443, 468, 477, 509, 518, 519, 520, 521, 522, 532, 533, 534, 537, 540, 548, 553, 557, 560, 577, 580, 581, 582, 583, 584, 589, 601, 614, 615, 616, 618, 625, 626, 629, 666, 686, 687, 693, 696, 697, 700, 713, 716, 729, 732, 733, 736, 742, 744, 745, 747, 749, 750, 751, 756, 757, 758, 759, 773, 784, 785, 786, 787, 800, 824, 826, 832, 833, 834, 836, 868, 871, 874, 880, 881, 882, 884, 885, 887, 888, 951, 952, 955, 967, 968, 969, 970, 981, 984, 985, 988, 993, 996, 1001, 1002, 1003, 1004, 1006, 1015, 1018, 1049, 1050, 1053, 1054, 1059, 1060, 1062, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1088, 1091, 1092, 1095, 1115, 1120, 1121, 1124, 1139, 1140], "variant": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 359, 360, 440, 441, 442, 444, 519, 520, 521, 523, 533, 534, 536, 548, 553, 581, 582, 583, 615, 616, 618, 666, 743, 744, 745, 748, 749, 750, 751, 757, 758, 759, 761, 785, 786, 787, 789, 832, 833, 834, 836, 968, 969, 970, 972, 1001, 1002, 1003, 1005, 1056, 1058], "thi": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 389, 390, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 440, 441, 442, 443, 444, 468, 492, 496, 500, 507, 512, 517, 518, 519, 520, 521, 522, 523, 532, 533, 534, 536, 537, 540, 548, 553, 557, 560, 573, 576, 577, 580, 581, 582, 583, 584, 589, 610, 613, 614, 615, 616, 618, 666, 674, 677, 678, 681, 697, 700, 709, 712, 713, 716, 729, 732, 733, 736, 742, 743, 744, 745, 747, 748, 749, 750, 751, 756, 757, 758, 759, 761, 783, 784, 785, 786, 787, 789, 800, 811, 816, 830, 832, 833, 834, 836, 837, 839, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 866, 868, 871, 877, 880, 881, 888, 890, 907, 909, 926, 967, 968, 969, 970, 972, 981, 984, 985, 988, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1011, 1014, 1031, 1037, 1043, 1044, 1049, 1050, 1053, 1056, 1058, 1066, 1067, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1087, 1092, 1095, 1096, 1099, 1108, 1111, 1116, 1119, 1120, 1121, 1124, 1129, 1135, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171], "simpli": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 179, 180, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 354, 359, 360, 362, 363, 366, 367, 369, 370, 371, 373, 377, 378, 440, 441, 442, 444, 518, 519, 520, 521, 523, 533, 534, 536, 548, 553, 581, 582, 583, 610, 613, 615, 616, 618, 666, 743, 744, 745, 748, 749, 750, 751, 757, 758, 759, 761, 785, 786, 787, 789, 832, 833, 834, 836, 968, 969, 970, 972, 1001, 1002, 1003, 1005, 1056, 1058], "wrap": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 159, 179, 180, 181, 182, 183, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 351, 357, 359, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 375, 378, 390, 391, 399, 440, 441, 442, 444, 519, 520, 521, 523, 533, 534, 536, 548, 553, 581, 582, 583, 615, 616, 618, 666, 743, 744, 745, 748, 749, 750, 751, 756, 757, 758, 759, 761, 767, 785, 786, 787, 789, 830, 832, 833, 834, 836, 866, 968, 969, 970, 972, 1001, 1002, 1003, 1005, 1056, 1058], "function": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 160, 164, 165, 166, 174, 179, 180, 184, 185, 188, 190, 191, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 350, 351, 354, 356, 357, 358, 359, 360, 361, 362, 364, 366, 370, 372, 374, 375, 376, 377, 388, 389, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 531, 532, 533, 534, 535, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 582, 583, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 615, 616, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 839, 841, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 969, 970, 971, 972, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1132, 1134, 1136, 1137, 1138, 1166, 1169, 1171], "so": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 174, 175, 179, 180, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 353, 354, 358, 359, 360, 362, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 390, 391, 399, 440, 441, 442, 444, 519, 520, 521, 523, 533, 534, 536, 548, 553, 581, 582, 583, 615, 616, 618, 666, 743, 744, 745, 748, 749, 750, 751, 757, 758, 759, 761, 785, 786, 787, 789, 832, 833, 834, 836, 968, 969, 970, 972, 1001, 1002, 1003, 1005, 1031, 1032, 1042, 1056, 1058, 1129], "docstr": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 355, 356, 357, 358, 363, 367, 371, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 440, 441, 442, 443, 444, 518, 519, 520, 521, 522, 523, 532, 533, 534, 536, 537, 540, 548, 553, 557, 560, 577, 580, 581, 582, 583, 584, 589, 614, 615, 616, 618, 666, 697, 700, 713, 716, 729, 732, 733, 736, 742, 743, 744, 745, 747, 748, 749, 750, 751, 757, 758, 759, 761, 785, 786, 787, 789, 832, 833, 834, 836, 881, 888, 967, 968, 969, 970, 972, 981, 984, 985, 988, 1001, 1002, 1003, 1004, 1005, 1056, 1058, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1120, 1121, 1124], "also": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 174, 175, 179, 180, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 352, 353, 354, 357, 358, 359, 360, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 390, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 441, 442, 443, 444, 518, 519, 520, 521, 522, 523, 532, 533, 534, 536, 537, 540, 548, 553, 557, 560, 577, 580, 581, 582, 583, 584, 589, 614, 615, 616, 618, 666, 697, 700, 713, 716, 729, 732, 733, 736, 742, 743, 744, 745, 747, 748, 749, 750, 751, 756, 757, 758, 759, 761, 784, 785, 786, 787, 789, 800, 830, 832, 833, 834, 836, 837, 839, 868, 871, 877, 880, 881, 888, 967, 968, 969, 970, 972, 981, 984, 985, 988, 1001, 1002, 1003, 1004, 1005, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1041, 1042, 1043, 1049, 1050, 1053, 1056, 1058, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1120, 1121, 1124, 1150, 1160], "appli": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 179, 180, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 353, 354, 355, 359, 360, 362, 363, 365, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 388, 390, 401, 402, 403, 404, 405, 406, 407, 408, 431, 440, 441, 442, 444, 459, 519, 520, 521, 523, 533, 534, 536, 548, 553, 581, 582, 583, 615, 616, 618, 666, 743, 744, 745, 748, 749, 750, 751, 756, 757, 758, 759, 761, 778, 779, 780, 785, 786, 787, 789, 830, 832, 833, 834, 836, 850, 852, 854, 856, 868, 877, 879, 880, 881, 902, 911, 913, 920, 922, 951, 952, 955, 957, 960, 962, 965, 967, 968, 969, 970, 972, 1001, 1002, 1003, 1005, 1011, 1014, 1027, 1028, 1029, 1031, 1037, 1040, 1043, 1044, 1049, 1050, 1053, 1056, 1058, 1129, 1136, 1137, 1138, 1164, 1165], "minim": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 359, 370, 373, 440, 441, 442, 444, 519, 520, 521, 523, 533, 534, 536, 548, 553, 581, 582, 583, 615, 616, 618, 666, 743, 744, 745, 748, 749, 750, 751, 757, 758, 759, 761, 785, 786, 787, 789, 832, 833, 834, 836, 968, 969, 970, 972, 1001, 1002, 1003, 1005, 1056, 1058], "chang": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 176, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 353, 354, 355, 356, 359, 361, 362, 367, 373, 377, 390, 440, 441, 442, 444, 468, 519, 520, 521, 523, 533, 534, 536, 548, 553, 581, 582, 583, 615, 616, 618, 666, 743, 744, 745, 748, 749, 750, 751, 757, 758, 759, 761, 785, 786, 787, 789, 832, 833, 834, 836, 881, 885, 887, 967, 968, 969, 970, 972, 997, 1000, 1001, 1002, 1003, 1005, 1031, 1033, 1043, 1056, 1058, 1129, 1135], "exampl": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 160, 164, 165, 166, 172, 176, 181, 182, 184, 185, 188, 190, 191, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 350, 351, 353, 354, 355, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 375, 376, 377, 378, 389, 390, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 419, 420, 423, 425, 426, 429, 430, 431, 437, 440, 441, 442, 443, 444, 452, 453, 468, 487, 488, 490, 502, 503, 504, 505, 506, 509, 511, 513, 515, 516, 518, 519, 520, 521, 522, 523, 532, 533, 534, 536, 537, 540, 548, 553, 556, 557, 560, 561, 564, 573, 576, 577, 580, 581, 582, 583, 584, 585, 589, 601, 606, 614, 615, 616, 618, 622, 625, 626, 629, 642, 645, 666, 686, 687, 693, 696, 697, 700, 713, 716, 729, 732, 733, 736, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 756, 757, 758, 759, 760, 761, 764, 765, 773, 774, 781, 784, 785, 786, 787, 788, 789, 792, 803, 818, 819, 824, 825, 826, 830, 832, 833, 834, 835, 836, 868, 869, 871, 873, 874, 875, 880, 881, 882, 884, 885, 887, 888, 891, 893, 900, 911, 913, 917, 919, 930, 936, 938, 939, 941, 951, 952, 955, 957, 960, 962, 965, 967, 968, 969, 970, 971, 972, 973, 976, 981, 984, 985, 988, 993, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1088, 1091, 1108, 1111, 1112, 1115, 1120, 1121, 1124, 1129], "us": [2, 3, 8, 128, 129, 158, 159, 160, 165, 172, 175, 176, 179, 180, 181, 182, 183, 184, 185, 191, 320, 321, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 389, 390, 401, 403, 404, 405, 406, 407, 408, 411, 431, 450, 468, 477, 478, 503, 507, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 537, 540, 557, 560, 577, 580, 589, 601, 625, 626, 629, 686, 687, 693, 696, 697, 700, 713, 716, 729, 732, 756, 784, 791, 792, 806, 812, 813, 814, 815, 820, 821, 830, 832, 835, 837, 839, 850, 852, 854, 856, 868, 874, 876, 877, 879, 880, 881, 888, 891, 893, 907, 909, 951, 952, 955, 967, 981, 984, 985, 988, 993, 996, 1001, 1004, 1015, 1018, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1040, 1041, 1042, 1044, 1049, 1050, 1053, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1087, 1088, 1091, 1115, 1120, 1121, 1124, 1129, 1150, 1158, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169], "x": [2, 3, 7, 25, 26, 28, 47, 49, 88, 99, 106, 107, 117, 120, 121, 124, 125, 128, 129, 130, 131, 142, 143, 160, 164, 172, 179, 180, 181, 182, 184, 185, 190, 210, 211, 212, 227, 229, 267, 277, 278, 281, 283, 285, 286, 289, 291, 296, 298, 299, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 344, 345, 356, 358, 359, 360, 363, 364, 367, 370, 371, 373, 375, 376, 377, 378, 401, 402, 403, 404, 405, 406, 407, 408, 412, 414, 416, 418, 420, 423, 424, 426, 427, 428, 429, 430, 431, 437, 439, 440, 441, 442, 443, 444, 449, 468, 487, 488, 489, 490, 493, 494, 502, 506, 511, 513, 518, 519, 520, 521, 522, 523, 524, 527, 528, 531, 532, 533, 534, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 577, 580, 581, 582, 583, 584, 585, 588, 589, 592, 601, 602, 605, 606, 610, 613, 614, 615, 616, 618, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 650, 653, 654, 657, 658, 661, 662, 665, 666, 674, 677, 686, 687, 693, 696, 701, 704, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 764, 765, 766, 768, 769, 771, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 795, 796, 798, 799, 800, 802, 803, 804, 805, 809, 818, 819, 822, 824, 825, 826, 828, 829, 830, 841, 846, 848, 849, 863, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 930, 932, 933, 935, 936, 938, 939, 941, 945, 947, 951, 952, 955, 957, 960, 962, 965, 967, 968, 969, 970, 971, 972, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1031, 1032, 1037, 1041, 1042, 1043, 1049, 1050, 1053, 1054, 1056, 1057, 1058, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1082, 1085, 1086, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1150, 1161], "2": [2, 3, 6, 7, 10, 25, 26, 28, 36, 47, 49, 88, 106, 107, 108, 114, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 160, 164, 179, 180, 181, 182, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 353, 354, 356, 360, 364, 367, 371, 372, 373, 375, 376, 377, 378, 390, 401, 403, 404, 405, 406, 408, 411, 412, 419, 420, 423, 425, 426, 430, 431, 437, 440, 441, 442, 443, 444, 468, 487, 488, 490, 502, 504, 506, 513, 518, 519, 520, 521, 522, 523, 532, 533, 534, 536, 537, 540, 545, 548, 549, 552, 553, 557, 560, 561, 564, 573, 576, 577, 580, 581, 582, 583, 584, 585, 589, 601, 606, 614, 615, 616, 618, 622, 625, 626, 629, 642, 645, 662, 665, 666, 686, 687, 693, 696, 697, 700, 713, 716, 729, 732, 733, 736, 742, 743, 744, 745, 747, 748, 749, 750, 751, 756, 757, 758, 759, 760, 764, 765, 768, 769, 771, 774, 781, 784, 785, 786, 787, 788, 789, 803, 818, 819, 824, 830, 832, 833, 834, 835, 836, 868, 871, 872, 873, 874, 875, 880, 881, 882, 884, 885, 887, 888, 891, 892, 893, 900, 902, 903, 906, 907, 909, 911, 913, 917, 919, 920, 922, 923, 925, 930, 936, 937, 938, 939, 941, 945, 946, 947, 951, 952, 955, 962, 965, 967, 968, 969, 970, 971, 972, 973, 976, 981, 984, 985, 988, 993, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1015, 1018, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1088, 1091, 1092, 1095, 1115, 1120, 1121, 1124, 1129], "6": [2, 3, 6, 7, 26, 28, 128, 129, 132, 133, 142, 143, 181, 182, 184, 185, 190, 211, 278, 281, 289, 296, 320, 321, 322, 323, 338, 339, 356, 360, 364, 367, 375, 376, 377, 401, 403, 404, 406, 412, 420, 468, 490, 506, 518, 519, 520, 521, 522, 523, 532, 533, 534, 536, 537, 540, 557, 560, 561, 564, 577, 580, 581, 582, 583, 584, 589, 601, 614, 625, 626, 629, 666, 686, 687, 693, 696, 713, 716, 729, 732, 733, 736, 742, 747, 756, 765, 774, 784, 785, 788, 789, 819, 824, 830, 832, 833, 835, 868, 871, 874, 875, 880, 881, 885, 887, 888, 891, 893, 917, 919, 930, 936, 938, 951, 952, 955, 962, 965, 967, 968, 969, 971, 973, 976, 981, 984, 985, 988, 993, 996, 997, 1000, 1001, 1004, 1006, 1015, 1018, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1066, 1067, 1070, 1071, 1072, 1073, 1087, 1088, 1091, 1092, 1095, 1115], "1": [2, 3, 6, 7, 10, 12, 25, 26, 28, 33, 34, 36, 47, 49, 56, 88, 94, 95, 106, 107, 113, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 160, 166, 172, 175, 176, 179, 180, 181, 182, 184, 185, 188, 190, 193, 195, 210, 211, 212, 218, 227, 229, 239, 263, 267, 272, 273, 279, 281, 282, 283, 285, 286, 287, 289, 296, 297, 298, 299, 300, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 332, 333, 334, 335, 336, 337, 338, 339, 344, 345, 356, 360, 363, 367, 370, 371, 372, 373, 375, 376, 377, 378, 390, 401, 403, 404, 405, 406, 408, 412, 413, 420, 421, 422, 423, 425, 426, 430, 431, 437, 440, 441, 442, 443, 444, 451, 468, 472, 475, 477, 482, 487, 488, 490, 492, 496, 500, 502, 505, 506, 513, 518, 519, 520, 521, 522, 524, 527, 528, 531, 532, 533, 534, 536, 537, 540, 548, 549, 552, 553, 557, 560, 561, 564, 573, 576, 577, 580, 581, 582, 583, 584, 585, 588, 589, 592, 601, 606, 610, 613, 614, 615, 616, 618, 622, 625, 626, 629, 642, 645, 650, 653, 654, 657, 658, 661, 662, 665, 666, 686, 687, 693, 696, 697, 700, 705, 708, 713, 716, 717, 720, 721, 724, 729, 732, 733, 736, 742, 743, 744, 745, 747, 748, 749, 750, 751, 756, 757, 758, 759, 760, 761, 764, 765, 773, 774, 781, 784, 785, 786, 787, 788, 789, 803, 809, 812, 813, 818, 819, 821, 824, 825, 826, 828, 830, 832, 833, 834, 835, 836, 868, 869, 870, 871, 872, 873, 874, 875, 876, 880, 881, 882, 884, 885, 886, 887, 888, 891, 892, 893, 900, 911, 913, 917, 919, 927, 929, 930, 936, 938, 939, 941, 942, 943, 944, 945, 947, 951, 952, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1031, 1043, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1091, 1092, 1095, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1172, 1173], "0": [2, 3, 6, 10, 26, 28, 29, 30, 36, 44, 47, 56, 88, 99, 100, 106, 107, 110, 112, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 144, 145, 154, 155, 160, 164, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 193, 210, 211, 212, 214, 215, 224, 227, 237, 238, 239, 263, 267, 277, 278, 279, 280, 281, 282, 285, 286, 289, 292, 293, 296, 297, 298, 302, 303, 304, 308, 309, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 354, 358, 359, 360, 373, 375, 376, 377, 378, 401, 403, 404, 405, 406, 407, 408, 412, 413, 417, 421, 422, 426, 427, 428, 429, 430, 431, 437, 440, 442, 443, 444, 451, 468, 470, 473, 477, 480, 484, 487, 488, 490, 493, 494, 495, 496, 497, 498, 499, 500, 502, 506, 509, 511, 512, 516, 518, 519, 520, 522, 523, 524, 527, 528, 531, 532, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 565, 568, 573, 576, 577, 580, 581, 582, 583, 584, 585, 588, 589, 592, 601, 606, 610, 613, 614, 615, 616, 618, 625, 626, 629, 650, 653, 654, 657, 662, 665, 666, 686, 687, 688, 691, 693, 696, 697, 700, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 764, 765, 768, 769, 771, 773, 774, 775, 781, 784, 785, 788, 789, 794, 803, 809, 812, 813, 818, 824, 825, 826, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 850, 851, 852, 853, 854, 855, 856, 857, 868, 869, 871, 873, 874, 875, 880, 881, 882, 884, 885, 887, 888, 891, 892, 893, 900, 930, 936, 938, 939, 940, 941, 945, 947, 951, 952, 955, 957, 960, 962, 965, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 988, 989, 992, 993, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1023, 1025, 1031, 1043, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1108, 1109, 1110, 1111, 1112, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1124, 1129, 1141, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173], "y": [2, 3, 7, 10, 26, 28, 47, 49, 88, 106, 107, 128, 129, 130, 131, 142, 143, 181, 182, 184, 185, 190, 193, 211, 212, 227, 229, 267, 278, 281, 282, 286, 289, 296, 298, 302, 303, 308, 309, 320, 321, 322, 323, 334, 335, 338, 339, 358, 360, 364, 367, 373, 375, 401, 403, 404, 405, 406, 407, 408, 412, 419, 420, 423, 425, 426, 430, 431, 437, 468, 488, 502, 506, 511, 518, 519, 520, 521, 522, 523, 532, 533, 534, 536, 537, 540, 548, 549, 552, 553, 557, 560, 561, 564, 573, 576, 577, 580, 581, 582, 583, 584, 585, 589, 601, 606, 614, 615, 616, 618, 625, 626, 629, 666, 686, 687, 693, 696, 697, 700, 713, 716, 729, 732, 733, 736, 742, 743, 744, 745, 747, 748, 749, 750, 751, 756, 757, 758, 759, 760, 761, 764, 765, 773, 774, 781, 782, 784, 785, 786, 787, 788, 789, 818, 824, 825, 826, 830, 841, 868, 874, 875, 877, 881, 882, 884, 885, 887, 888, 900, 917, 919, 936, 938, 939, 941, 951, 952, 955, 957, 960, 962, 965, 967, 968, 969, 970, 971, 972, 973, 976, 981, 984, 985, 988, 993, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1015, 1018, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1076, 1077, 1080, 1087, 1088, 1091, 1092, 1095, 1108, 1111, 1112, 1115, 1120, 1121, 1124], "print": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 160, 164, 165, 166, 172, 179, 180, 181, 182, 183, 184, 185, 190, 191, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 350, 351, 353, 360, 367, 373, 375, 376, 377, 401, 403, 404, 405, 406, 407, 408, 412, 419, 420, 423, 425, 426, 429, 430, 431, 437, 440, 441, 442, 443, 444, 452, 453, 468, 488, 502, 503, 504, 505, 506, 508, 511, 515, 518, 519, 520, 521, 522, 523, 532, 533, 534, 536, 537, 540, 548, 553, 556, 557, 560, 561, 564, 573, 576, 577, 580, 581, 582, 583, 584, 585, 589, 601, 606, 614, 615, 616, 618, 622, 625, 626, 629, 642, 645, 666, 686, 687, 693, 696, 697, 700, 713, 716, 729, 732, 733, 736, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 756, 757, 758, 759, 760, 761, 764, 765, 773, 774, 781, 784, 785, 786, 787, 788, 789, 792, 810, 818, 819, 824, 825, 826, 830, 832, 833, 835, 836, 868, 869, 871, 873, 874, 875, 880, 881, 882, 884, 885, 887, 888, 891, 893, 900, 917, 919, 930, 936, 938, 939, 941, 951, 952, 955, 957, 960, 962, 965, 967, 968, 969, 970, 971, 972, 981, 984, 985, 988, 993, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1015, 1018, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1088, 1091, 1092, 1095, 1108, 1111, 1112, 1115, 1120, 1121, 1124, 1129], "return": [2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 160, 164, 165, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 320, 321, 322, 323, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 344, 345, 346, 347, 348, 349, 358, 359, 360, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 467, 468, 477, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1037, 1041, 1042, 1043, 1044, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1132, 1134, 1139, 1140, 1150, 1159, 1160, 1166, 1170], "type": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 320, 321, 322, 323, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 357, 358, 359, 360, 365, 366, 367, 369, 370, 371, 373, 375, 376, 378, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 463, 467, 468, 484, 485, 486, 487, 488, 490, 500, 501, 502, 503, 504, 505, 506, 507, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 764, 765, 767, 768, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 796, 798, 799, 800, 802, 803, 804, 805, 809, 812, 813, 814, 815, 818, 820, 821, 822, 824, 825, 826, 828, 829, 830, 832, 833, 834, 835, 836, 837, 839, 840, 842, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1037, 1041, 1042, 1043, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "aco": [2, 128, 129, 184, 320, 321, 518, 528, 1129], "acosh": [2, 128, 129, 184, 320, 321, 431, 452, 453, 518, 527, 588, 592, 1129], "adam_step": [2, 132, 133, 184, 279, 324, 325, 830, 836], "mw": [2, 6, 132, 133, 184, 188, 279, 324, 325, 377, 830, 832, 833, 834, 835, 836, 837, 839], "vw": [2, 6, 132, 133, 184, 188, 279, 324, 325, 377, 830, 832, 833, 834, 835, 836, 837, 839], "step": [2, 6, 132, 133, 176, 179, 180, 184, 188, 189, 237, 279, 280, 292, 324, 325, 353, 354, 356, 360, 364, 366, 367, 368, 369, 373, 376, 377, 378, 389, 412, 413, 421, 422, 468, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 850, 851, 852, 853, 854, 856, 858, 860, 1027, 1028, 1029, 1030, 1129, 1166, 1167, 1168, 1169, 1170, 1171], "beta1": [2, 6, 132, 133, 184, 188, 189, 237, 279, 280, 292, 324, 325, 377, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 850, 851, 852, 853, 1166, 1167, 1168], "9": [2, 6, 7, 28, 128, 129, 132, 133, 142, 143, 181, 182, 184, 188, 189, 190, 237, 279, 280, 281, 292, 296, 320, 321, 324, 325, 338, 339, 356, 360, 376, 377, 518, 532, 533, 534, 536, 557, 560, 561, 564, 666, 686, 687, 713, 716, 729, 732, 733, 736, 756, 784, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 850, 851, 852, 853, 868, 871, 874, 875, 881, 885, 887, 888, 891, 893, 917, 919, 930, 936, 938, 967, 968, 969, 971, 985, 988, 993, 996, 1001, 1004, 1006, 1054, 1055, 1056, 1057, 1058, 1066, 1070, 1071, 1072, 1087, 1088, 1091, 1115, 1166, 1167, 1168], "beta2": [2, 6, 132, 133, 184, 188, 189, 237, 279, 280, 292, 324, 325, 377, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 850, 851, 852, 853, 1166, 1167, 1168], "999": [2, 6, 132, 133, 184, 188, 189, 237, 279, 280, 292, 303, 309, 320, 321, 324, 325, 377, 518, 548, 553, 747, 748, 750, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 850, 851, 852, 853, 1166, 1167, 1168], "epsilon": [2, 6, 18, 34, 56, 95, 132, 133, 140, 141, 144, 145, 184, 188, 189, 203, 218, 237, 239, 273, 279, 280, 284, 287, 292, 300, 324, 325, 332, 333, 336, 337, 363, 367, 370, 377, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 850, 851, 852, 853, 881, 902, 911, 913, 920, 922, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 1049, 1050, 1051, 1052, 1053, 1164, 1165, 1166, 1167, 1168], "1e": [2, 6, 18, 34, 56, 95, 132, 133, 140, 141, 144, 145, 184, 188, 189, 203, 218, 237, 239, 273, 279, 280, 284, 287, 292, 300, 324, 325, 332, 333, 336, 337, 363, 367, 370, 377, 378, 756, 792, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 850, 851, 852, 853, 881, 930, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 1049, 1050, 1051, 1052, 1053, 1129, 1166, 1167, 1168, 1169, 1171], "07": [2, 6, 18, 34, 95, 132, 133, 140, 141, 184, 188, 189, 203, 218, 237, 273, 279, 280, 284, 287, 292, 300, 324, 325, 332, 333, 377, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 850, 851, 852, 853, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 1166, 1167, 1168], "With": [2, 6, 10, 130, 131, 132, 133, 175, 176, 179, 180, 181, 182, 184, 193, 278, 281, 282, 286, 289, 296, 298, 302, 303, 320, 321, 322, 323, 334, 335, 338, 339, 353, 360, 362, 373, 401, 403, 404, 405, 406, 407, 408, 412, 423, 431, 440, 443, 468, 490, 506, 518, 519, 522, 523, 532, 536, 537, 540, 548, 553, 557, 560, 577, 580, 581, 584, 589, 601, 614, 625, 626, 629, 666, 686, 687, 693, 696, 697, 700, 713, 716, 729, 732, 733, 736, 742, 743, 747, 748, 751, 756, 757, 758, 759, 760, 761, 765, 773, 774, 781, 784, 785, 788, 789, 819, 824, 825, 826, 830, 832, 833, 835, 868, 871, 874, 875, 880, 881, 882, 884, 885, 887, 888, 891, 893, 907, 909, 936, 938, 951, 952, 955, 962, 965, 967, 968, 971, 972, 981, 984, 985, 988, 993, 996, 1001, 1004, 1005, 1006, 1015, 1018, 1049, 1050, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1062, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1088, 1091, 1115, 1120, 1121, 1124], "input": [2, 6, 117, 120, 121, 132, 133, 179, 180, 181, 182, 183, 184, 188, 278, 279, 281, 282, 286, 289, 296, 298, 302, 303, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 390, 391, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 438, 439, 440, 443, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 463, 468, 477, 478, 487, 488, 489, 490, 492, 493, 496, 500, 506, 512, 513, 518, 519, 522, 523, 524, 527, 528, 531, 532, 535, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 743, 746, 747, 748, 751, 752, 755, 756, 757, 760, 761, 762, 764, 765, 766, 768, 769, 771, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 793, 795, 796, 798, 799, 800, 802, 803, 804, 805, 809, 812, 813, 818, 819, 822, 824, 825, 826, 828, 829, 830, 832, 833, 834, 835, 836, 841, 846, 848, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 972, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1165], "dcdw": [2, 6, 132, 133, 184, 188, 189, 230, 237, 238, 279, 280, 290, 292, 293, 324, 325, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 850, 851, 852, 853, 854, 855, 856, 857], "3": [2, 6, 7, 10, 25, 28, 47, 49, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 181, 182, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 353, 356, 360, 364, 367, 373, 375, 376, 377, 378, 401, 403, 404, 405, 406, 411, 412, 420, 423, 426, 429, 430, 431, 440, 441, 442, 443, 444, 468, 487, 490, 506, 513, 518, 519, 521, 522, 523, 532, 533, 534, 536, 537, 540, 548, 553, 557, 560, 573, 576, 577, 580, 581, 583, 584, 589, 601, 606, 614, 615, 616, 618, 622, 625, 626, 629, 642, 645, 666, 686, 687, 693, 696, 697, 700, 713, 716, 729, 732, 733, 736, 742, 743, 745, 747, 748, 750, 751, 756, 757, 758, 759, 764, 765, 774, 781, 784, 785, 786, 787, 788, 789, 818, 819, 824, 826, 830, 832, 833, 834, 835, 836, 868, 869, 870, 871, 873, 874, 875, 880, 881, 882, 884, 885, 887, 888, 891, 893, 900, 911, 913, 917, 919, 930, 936, 938, 939, 941, 948, 950, 951, 952, 955, 962, 965, 967, 968, 969, 970, 971, 972, 973, 976, 981, 984, 985, 988, 993, 996, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1015, 1018, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1088, 1091, 1092, 1095, 1112, 1115, 1120, 1121, 1124, 1129], "adam_step_delta": [2, 6, 132, 133, 184, 188, 279, 324, 325, 830, 832, 833, 834, 835, 836], "639": [2, 6, 132, 133, 830, 832, 833, 835], "11": [2, 6, 132, 133, 181, 182, 184, 190, 281, 296, 320, 321, 338, 339, 360, 367, 518, 532, 534, 536, 557, 560, 666, 713, 716, 756, 774, 784, 832, 833, 881, 891, 893, 917, 919, 951, 962, 965, 967, 985, 988, 993, 996, 1054, 1056, 1057, 1058, 1066, 1070, 1071, 1072, 1087, 1088, 1091, 1115], "32": [2, 6, 132, 133, 376, 401, 403, 518, 577, 580, 832, 833, 868, 871, 874, 881, 917, 919, 1066, 1070, 1087, 1088, 1091, 1115], "63": [2, 6, 132, 133, 518, 729, 732, 832, 833, 881, 882, 884, 917, 919, 1087, 1088, 1091, 1115], "00121": [2, 6, 132, 133, 832, 833], "0102": [2, 6, 132, 133, 832, 833], "0397": [2, 6, 132, 133, 832, 833], "add": [2, 8, 128, 129, 158, 159, 179, 180, 181, 182, 184, 191, 281, 282, 320, 321, 322, 323, 350, 351, 353, 354, 355, 357, 358, 359, 363, 364, 366, 367, 371, 373, 375, 390, 518, 519, 522, 536, 666, 757, 761, 1049, 1050, 1053, 1129, 1135, 1164, 1165], "x2": [2, 7, 10, 16, 19, 21, 22, 23, 24, 33, 37, 41, 48, 50, 51, 57, 58, 63, 64, 66, 67, 68, 75, 77, 78, 82, 85, 93, 101, 108, 113, 128, 129, 130, 131, 138, 139, 179, 180, 184, 190, 193, 201, 204, 206, 207, 208, 209, 219, 221, 228, 231, 232, 240, 241, 246, 247, 249, 250, 251, 255, 257, 261, 264, 281, 282, 288, 294, 301, 305, 320, 321, 322, 323, 330, 331, 360, 371, 431, 463, 468, 506, 518, 532, 533, 534, 535, 536, 549, 550, 551, 552, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 642, 643, 644, 645, 646, 647, 648, 649, 666, 667, 668, 669, 670, 671, 672, 673, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 697, 698, 699, 700, 705, 706, 707, 708, 709, 710, 711, 712, 737, 738, 739, 740, 741, 756, 757, 758, 759, 760, 761, 868, 873, 881, 885, 886, 887, 903, 904, 905, 906, 917, 918, 919, 927, 928, 929, 936, 937, 938, 942, 943, 944, 1066, 1070], "4": [2, 7, 28, 128, 129, 142, 143, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 210, 211, 212, 227, 229, 267, 278, 279, 281, 285, 286, 289, 296, 298, 302, 303, 308, 309, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 356, 360, 364, 367, 373, 375, 376, 377, 378, 401, 403, 404, 406, 412, 420, 423, 426, 430, 431, 440, 442, 443, 444, 468, 490, 506, 518, 519, 521, 522, 523, 532, 533, 534, 536, 537, 540, 548, 549, 552, 553, 557, 560, 577, 580, 581, 583, 584, 589, 601, 614, 616, 618, 625, 626, 629, 666, 686, 687, 693, 696, 697, 700, 713, 716, 729, 732, 733, 736, 742, 743, 745, 747, 748, 750, 751, 756, 765, 774, 783, 784, 785, 787, 788, 789, 819, 824, 830, 832, 834, 835, 836, 868, 871, 872, 873, 875, 878, 880, 881, 885, 887, 888, 891, 893, 900, 911, 913, 917, 919, 936, 938, 939, 941, 951, 962, 965, 967, 968, 969, 970, 971, 972, 973, 976, 981, 984, 985, 988, 993, 996, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1015, 1018, 1049, 1050, 1053, 1054, 1055, 1056, 1058, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1088, 1091, 1092, 1095, 1115, 1120, 1121, 1124, 1129, 1166, 1167, 1168, 1169, 1171], "5": [2, 7, 10, 26, 28, 47, 128, 129, 130, 131, 142, 143, 181, 182, 184, 185, 188, 190, 210, 211, 212, 227, 267, 278, 279, 281, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 354, 356, 360, 364, 371, 375, 376, 377, 401, 403, 404, 406, 412, 420, 423, 426, 429, 430, 431, 440, 442, 443, 444, 468, 490, 506, 518, 519, 521, 522, 523, 532, 533, 534, 536, 537, 540, 548, 553, 556, 557, 560, 573, 576, 577, 580, 581, 582, 583, 584, 589, 601, 614, 615, 616, 618, 625, 626, 629, 666, 686, 687, 693, 696, 697, 700, 713, 716, 729, 732, 733, 736, 742, 743, 745, 746, 747, 748, 750, 751, 756, 757, 758, 765, 774, 784, 785, 788, 789, 819, 824, 830, 832, 834, 835, 836, 868, 871, 873, 874, 880, 881, 882, 884, 885, 887, 888, 891, 893, 900, 917, 919, 936, 938, 939, 941, 951, 962, 965, 967, 968, 969, 970, 971, 972, 973, 976, 981, 984, 985, 988, 993, 996, 997, 1000, 1001, 1003, 1004, 1005, 1006, 1015, 1018, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1088, 1091, 1092, 1095, 1115, 1120, 1121, 1124, 1150, 1161], "z": [2, 7, 49, 128, 129, 130, 131, 181, 182, 184, 190, 229, 281, 289, 320, 321, 322, 323, 360, 364, 367, 373, 375, 468, 502, 518, 532, 533, 534, 536, 557, 560, 577, 580, 601, 625, 626, 629, 666, 686, 687, 756, 764, 765, 784, 785, 786, 787, 789, 818, 881, 885, 887, 951, 952, 955, 957, 960, 967, 968, 971, 1066, 1067, 1087, 1088, 1091, 1092, 1095, 1115], "7": [2, 7, 28, 128, 129, 142, 143, 181, 182, 184, 190, 281, 296, 320, 321, 338, 339, 354, 356, 360, 363, 367, 370, 401, 403, 404, 468, 490, 518, 519, 522, 532, 533, 534, 536, 557, 560, 561, 564, 577, 580, 581, 584, 589, 601, 606, 614, 625, 626, 629, 666, 686, 687, 713, 716, 729, 732, 742, 747, 756, 765, 774, 784, 830, 832, 835, 837, 839, 850, 852, 868, 874, 875, 880, 881, 885, 887, 888, 891, 893, 917, 919, 936, 938, 951, 952, 955, 957, 960, 962, 965, 967, 968, 969, 971, 981, 984, 985, 988, 993, 996, 1006, 1015, 1018, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1066, 1070, 1071, 1072, 1087, 1088, 1091, 1115], "add_ivy_array_instance_method": [2, 158], "cl": [2, 8, 158, 159, 184, 191, 350, 351], "modul": [2, 8, 158, 159, 160, 164, 165, 176, 179, 180, 181, 182, 183, 184, 191, 350, 351, 353, 356, 362, 363, 364, 366, 370, 373, 374, 376, 378, 389, 390, 756, 807, 1054, 1055, 1059, 1129, 1136, 1137, 1138, 1139, 1140, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1165, 1172, 1173], "to_ignor": [2, 8, 158, 159, 184, 191, 350, 351, 1031, 1042], "loop": [2, 8, 158, 159, 184, 191, 350, 351, 364, 390, 1027, 1028, 1029, 1030], "over": [2, 8, 158, 159, 160, 164, 174, 176, 179, 180, 184, 191, 350, 351, 353, 359, 360, 364, 370, 375, 390, 881, 907, 909, 936, 938, 942, 944, 945, 947, 1049, 1050, 1053, 1054, 1060, 1062, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1164, 1165], "all": [2, 8, 117, 118, 119, 120, 121, 156, 157, 158, 159, 174, 175, 176, 179, 180, 184, 191, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 389, 390, 391, 399, 409, 410, 412, 413, 427, 428, 468, 477, 502, 508, 756, 757, 760, 764, 765, 790, 810, 825, 868, 878, 881, 927, 929, 936, 938, 945, 947, 967, 985, 988, 1001, 1004, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1042, 1043, 1044, 1054, 1055, 1060, 1062, 1120, 1129, 1132, 1134], "gener": [2, 8, 131, 158, 159, 179, 180, 184, 191, 323, 350, 351, 354, 355, 356, 357, 358, 359, 360, 363, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 389, 390, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 537, 540, 577, 580, 581, 584, 589, 614, 697, 700, 709, 712, 729, 732, 733, 736, 757, 760, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 846, 848, 967, 981, 984, 1001, 1004, 1054, 1055, 1056, 1057, 1060, 1062, 1064, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1129, 1166, 1170], "etc": [2, 8, 158, 159, 176, 179, 180, 184, 191, 350, 351, 353, 354, 355, 358, 360, 362, 366, 367, 368, 371, 373, 375, 376, 390, 412, 421, 422, 756, 784, 785, 788, 809, 812, 813, 1054, 1055, 1056, 1057, 1060, 1062, 1071, 1072, 1073, 1075, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1172, 1173], "_wrap_funct": [2, 8, 158, 159, 184, 191, 350, 351, 363, 365], "paramet": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 164, 165, 179, 180, 181, 182, 183, 184, 191, 350, 351, 358, 359, 362, 375, 376, 389, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 468, 477, 478, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768, 769, 771, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 835, 837, 839, 841, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1132, 1134, 1139, 1140, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173], "we": [2, 8, 158, 159, 160, 165, 166, 172, 173, 174, 175, 176, 184, 191, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 389, 390, 830, 841, 1129, 1135], "want": [2, 8, 158, 159, 160, 165, 175, 184, 191, 350, 351, 352, 353, 354, 362, 376, 377, 378, 390], "list": [2, 8, 117, 118, 119, 120, 121, 158, 159, 179, 180, 184, 188, 191, 279, 324, 325, 350, 351, 353, 355, 356, 358, 360, 368, 369, 371, 373, 376, 377, 378, 390, 412, 413, 414, 415, 423, 424, 425, 429, 431, 438, 468, 477, 478, 487, 489, 490, 493, 494, 497, 498, 512, 756, 765, 819, 824, 828, 832, 834, 836, 868, 869, 870, 871, 872, 873, 874, 875, 881, 936, 938, 967, 973, 976, 985, 988, 1006, 1011, 1014, 1031, 1032, 1033, 1037, 1042, 1043, 1049, 1050, 1053, 1066, 1069, 1120, 1121, 1124, 1125, 1128, 1129, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "option": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 165, 179, 180, 181, 182, 184, 191, 350, 351, 353, 354, 358, 359, 360, 363, 367, 368, 369, 370, 371, 373, 378, 390, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 439, 445, 446, 447, 448, 455, 467, 468, 487, 511, 512, 513, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 762, 768, 769, 771, 774, 775, 776, 778, 779, 780, 782, 784, 785, 788, 796, 807, 809, 812, 813, 820, 821, 830, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1037, 1042, 1043, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1070, 1071, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "iter": [2, 8, 117, 118, 119, 120, 121, 158, 159, 176, 179, 180, 181, 182, 183, 184, 191, 350, 351, 367, 373, 376, 409, 410, 468, 490, 491, 493, 494, 495, 496, 499, 512, 756, 757, 760, 813, 818, 967, 977, 980, 993, 996, 1006, 1019, 1022, 1023, 1026, 1031, 1032, 1033, 1037, 1041, 1042, 1043], "ani": [2, 8, 117, 118, 119, 156, 157, 158, 159, 160, 164, 172, 174, 175, 176, 179, 180, 184, 191, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 390, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 440, 443, 468, 513, 518, 519, 522, 532, 537, 540, 581, 584, 598, 601, 614, 625, 626, 629, 646, 649, 697, 700, 729, 732, 733, 736, 742, 756, 757, 760, 777, 778, 779, 780, 781, 784, 795, 802, 803, 804, 805, 820, 821, 830, 841, 868, 871, 878, 880, 967, 1001, 1004, 1027, 1028, 1029, 1030, 1031, 1037, 1041, 1049, 1050, 1053, 1054, 1060, 1062, 1087, 1092, 1095, 1120, 1121, 1124, 1129], "item": [2, 8, 117, 121, 158, 159, 179, 180, 368, 373, 375, 376, 378, 431, 446, 468, 477, 478, 480, 487, 489, 491, 493, 495, 499, 756, 772, 794, 820, 821, 1031, 1036, 1037, 1038, 1039, 1043, 1047, 1048, 1129, 1162, 1163], "don": [2, 8, 158, 159, 176, 184, 191, 350, 351, 353, 354, 355, 368, 377, 390], "t": [2, 8, 158, 159, 160, 165, 175, 176, 184, 191, 350, 351, 353, 354, 355, 356, 360, 368, 373, 375, 376, 377, 378, 390, 756, 765, 868, 877, 878], "an": [2, 8, 117, 120, 121, 158, 159, 175, 176, 179, 180, 184, 191, 350, 351, 353, 354, 355, 356, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 390, 401, 404, 405, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 438, 439, 440, 443, 451, 456, 457, 459, 468, 490, 494, 513, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 767, 768, 769, 771, 773, 782, 783, 784, 796, 800, 802, 803, 804, 805, 825, 826, 827, 830, 846, 848, 863, 865, 866, 868, 871, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 910, 911, 913, 914, 916, 920, 922, 923, 925, 926, 927, 929, 930, 939, 941, 942, 944, 945, 947, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1031, 1037, 1049, 1050, 1053, 1054, 1056, 1057, 1065, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1139, 1140, 1162, 1163, 1166, 1167, 1168, 1170], "default": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 165, 179, 180, 181, 182, 183, 184, 191, 350, 351, 354, 359, 360, 363, 364, 367, 368, 369, 371, 377, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 439, 446, 447, 448, 449, 468, 477, 478, 487, 488, 492, 493, 494, 495, 496, 497, 498, 499, 500, 507, 509, 510, 511, 512, 513, 516, 517, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 757, 760, 762, 768, 769, 771, 774, 775, 778, 779, 780, 782, 783, 784, 785, 788, 793, 794, 795, 796, 797, 800, 801, 802, 803, 805, 806, 807, 809, 811, 812, 813, 816, 818, 820, 821, 828, 829, 830, 832, 835, 837, 839, 841, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 863, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1037, 1041, 1042, 1043, 1044, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1139, 1140, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173], "As": [2, 8, 158, 159, 174, 184, 191, 350, 351, 354, 362, 363, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 390, 1071, 1072, 1073, 1075], "shown": [2, 8, 158, 159, 179, 180, 184, 191, 350, 351, 354, 360, 371, 373, 375, 390, 518, 557, 560, 577, 580, 589, 713, 716, 747, 881, 888, 967, 981, 984, 985, 988, 1071, 1072, 1073, 1076, 1077, 1080], "appropri": [2, 8, 158, 159, 184, 191, 350, 351, 354, 365, 518, 532, 688, 691, 1066, 1067], "from": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 164, 165, 166, 174, 175, 176, 179, 180, 181, 182, 183, 184, 191, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 390, 412, 413, 414, 416, 418, 419, 420, 423, 424, 426, 430, 431, 440, 443, 459, 468, 477, 478, 487, 502, 506, 511, 512, 518, 622, 729, 732, 756, 777, 784, 785, 788, 824, 830, 837, 839, 850, 852, 868, 876, 879, 881, 891, 893, 930, 942, 944, 967, 985, 988, 997, 1000, 1007, 1010, 1027, 1028, 1029, 1030, 1031, 1033, 1043, 1044, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1066, 1070, 1071, 1072, 1074, 1087, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1135, 1139, 1140, 1150, 1158, 1161, 1166, 1170], "our": [2, 8, 158, 159, 174, 175, 184, 191, 350, 351, 352, 353, 354, 360, 367, 372, 375, 376, 377, 378, 390, 1129], "toi": [2, 8, 158, 159, 184, 191, 350, 351], "arrayexampl": [2, 8, 158, 159], "import": [2, 8, 158, 159, 160, 164, 175, 184, 191, 350, 351, 355, 358, 359, 360, 364, 366, 367, 368, 369, 370, 373, 375, 376, 378, 390, 468, 509, 1129, 1135], "pass": [2, 8, 158, 159, 160, 164, 179, 180, 181, 182, 183, 184, 191, 350, 351, 355, 359, 360, 361, 362, 363, 364, 366, 367, 370, 371, 375, 390, 431, 445, 468, 477, 512, 518, 549, 552, 756, 767, 800, 830, 866, 1027, 1028, 1029, 1139, 1140, 1162, 1163, 1166, 1170, 1172, 1173], "hasattr": [2, 8, 158, 159, 184, 191, 350, 351, 375], "relu": [2, 8, 158, 159, 181, 182, 376, 377, 401, 402, 403, 1129], "softmax": [2, 8, 158, 159, 181, 182, 401, 868, 879, 880, 1129], "true": [2, 8, 10, 12, 25, 94, 103, 124, 125, 130, 131, 138, 139, 152, 153, 158, 159, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 360, 362, 363, 367, 368, 370, 373, 375, 376, 377, 378, 401, 402, 409, 410, 412, 421, 431, 437, 440, 441, 442, 443, 444, 468, 487, 504, 508, 509, 518, 519, 521, 523, 526, 527, 528, 530, 534, 535, 536, 537, 539, 541, 543, 547, 548, 549, 551, 553, 555, 557, 559, 560, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 580, 581, 583, 587, 588, 591, 592, 595, 596, 597, 600, 601, 602, 604, 608, 609, 610, 612, 616, 617, 618, 620, 622, 624, 625, 626, 628, 629, 630, 632, 633, 634, 636, 637, 638, 640, 641, 642, 644, 645, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 677, 678, 680, 681, 682, 684, 688, 690, 692, 693, 695, 697, 699, 700, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 738, 740, 743, 745, 746, 748, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 764, 765, 766, 767, 769, 770, 774, 781, 783, 785, 787, 789, 795, 796, 803, 818, 824, 826, 829, 830, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 868, 876, 881, 882, 884, 903, 905, 907, 909, 930, 931, 933, 945, 947, 951, 952, 954, 955, 956, 957, 959, 960, 961, 962, 964, 965, 966, 967, 968, 970, 972, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1006, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1041, 1042, 1044, 1050, 1052, 1054, 1055, 1060, 1061, 1063, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1106, 1107, 1108, 1110, 1111, 1112, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1127, 1128, 1150, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171], "axi": [2, 9, 11, 12, 29, 33, 34, 44, 46, 72, 73, 74, 83, 86, 88, 94, 95, 98, 99, 100, 102, 112, 113, 114, 138, 139, 140, 141, 142, 143, 152, 153, 154, 155, 156, 157, 179, 180, 184, 192, 194, 195, 214, 218, 224, 226, 252, 253, 254, 262, 265, 267, 272, 273, 276, 277, 283, 287, 298, 299, 300, 304, 306, 312, 332, 333, 334, 335, 344, 345, 346, 347, 348, 349, 360, 363, 367, 368, 370, 371, 373, 375, 378, 389, 401, 406, 412, 421, 422, 468, 470, 473, 480, 493, 494, 495, 496, 497, 498, 499, 500, 512, 756, 774, 775, 784, 828, 881, 885, 886, 887, 891, 893, 942, 943, 944, 945, 946, 947, 951, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 985, 986, 987, 988, 993, 994, 995, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1054, 1065, 1066, 1067, 1068, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128], "keepdim": [2, 9, 11, 69, 72, 73, 74, 83, 100, 102, 112, 114, 138, 139, 154, 155, 156, 157, 179, 180, 184, 192, 194, 252, 253, 254, 262, 304, 306, 312, 346, 347, 348, 349, 756, 828, 881, 907, 908, 909, 945, 946, 947, 1066, 1067, 1068, 1087, 1088, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128], "fals": [2, 9, 10, 11, 12, 27, 69, 72, 73, 74, 83, 94, 100, 102, 112, 114, 117, 118, 119, 120, 121, 130, 131, 138, 139, 152, 153, 154, 155, 156, 157, 160, 167, 168, 169, 170, 171, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 360, 367, 370, 376, 377, 378, 431, 437, 440, 442, 443, 444, 449, 468, 487, 488, 499, 503, 504, 507, 512, 515, 517, 518, 519, 521, 523, 526, 527, 528, 530, 534, 535, 536, 537, 539, 541, 543, 547, 548, 549, 551, 553, 555, 557, 559, 560, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 587, 588, 591, 592, 595, 596, 597, 600, 601, 602, 604, 608, 609, 610, 612, 616, 617, 618, 620, 622, 624, 625, 626, 628, 629, 630, 632, 633, 634, 636, 637, 638, 640, 641, 642, 644, 645, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 677, 678, 680, 681, 682, 684, 688, 690, 692, 693, 695, 697, 699, 700, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 738, 740, 743, 745, 746, 748, 750, 751, 752, 754, 756, 757, 758, 759, 760, 761, 764, 765, 769, 770, 774, 777, 781, 783, 785, 787, 789, 793, 800, 802, 803, 805, 806, 818, 828, 830, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 881, 882, 883, 884, 903, 905, 907, 908, 909, 930, 945, 946, 947, 952, 954, 956, 957, 959, 961, 962, 964, 966, 967, 968, 970, 972, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1006, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1037, 1041, 1042, 1043, 1044, 1050, 1052, 1054, 1055, 1060, 1061, 1063, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1139, 1140, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171], "all_equ": [2, 130, 131, 184, 282, 322, 323, 756, 761], "equality_matrix": [2, 10, 130, 131, 184, 193, 282, 322, 323, 756, 757, 758, 759, 760, 761], "contain": [2, 10, 117, 120, 121, 130, 131, 174, 177, 178, 179, 180, 183, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 362, 363, 368, 370, 371, 372, 373, 374, 377, 378, 390, 401, 404, 405, 407, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 468, 489, 490, 493, 502, 506, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 757, 758, 760, 762, 765, 768, 769, 771, 773, 774, 781, 784, 785, 788, 795, 804, 824, 825, 826, 830, 832, 835, 837, 842, 846, 850, 854, 858, 868, 871, 874, 875, 880, 881, 882, 884, 885, 887, 888, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 977, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1001, 1004, 1006, 1007, 1011, 1015, 1018, 1019, 1023, 1027, 1028, 1029, 1030, 1031, 1044, 1049, 1050, 1053, 1054, 1055, 1056, 1059, 1060, 1062, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1166, 1170, 1172, 1173], "x1": [2, 10, 130, 131, 184, 193, 281, 282, 288, 294, 301, 320, 321, 322, 323, 360, 371, 431, 463, 468, 506, 518, 532, 535, 536, 549, 552, 557, 560, 565, 568, 569, 572, 573, 576, 577, 580, 593, 596, 597, 598, 601, 609, 617, 618, 621, 622, 625, 626, 629, 642, 645, 646, 649, 666, 669, 670, 673, 678, 681, 682, 685, 686, 687, 688, 691, 692, 697, 700, 705, 708, 709, 712, 737, 738, 741, 756, 757, 758, 759, 760, 761, 764, 868, 873, 881, 885, 887, 903, 906, 917, 919, 927, 929, 936, 938, 942, 944, 1066, 1070], "mix": [2, 10, 130, 131, 181, 182, 184, 357, 360, 362, 373, 431, 459, 468, 506, 518, 532, 557, 560, 577, 580, 601, 625, 626, 629, 686, 687, 697, 700, 756, 757, 758, 773, 781, 784, 785, 788, 824, 825, 826, 868, 871, 874, 875, 880, 881, 936, 938, 951, 952, 955, 962, 965, 967, 968, 971, 1049, 1050, 1053, 1066, 1070, 1087, 1088, 1091, 1096, 1099, 1115], "nativearrai": [2, 10, 49, 117, 120, 121, 130, 131, 358, 360, 363, 366, 367, 370, 371, 373, 375, 378, 391, 399, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 416, 420, 421, 422, 423, 424, 426, 427, 428, 430, 431, 437, 438, 439, 440, 443, 449, 451, 454, 456, 457, 459, 463, 468, 487, 488, 490, 506, 512, 513, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 757, 758, 760, 764, 765, 768, 769, 771, 773, 774, 775, 778, 779, 780, 782, 783, 784, 785, 786, 788, 793, 795, 796, 798, 799, 800, 809, 812, 813, 818, 819, 824, 825, 826, 828, 829, 830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 863, 865, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1031, 1033, 1043, 1049, 1050, 1053, 1054, 1055, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "native_arrai": [2, 10, 130, 131, 160, 166, 172, 181, 182, 184, 193, 282, 322, 323, 401, 403, 404, 405, 406, 407, 408, 412, 423, 431, 440, 443, 468, 490, 506, 518, 519, 522, 537, 540, 557, 560, 577, 580, 581, 584, 601, 614, 625, 626, 629, 686, 687, 693, 696, 697, 700, 729, 732, 733, 736, 747, 756, 757, 758, 759, 760, 761, 765, 773, 774, 781, 784, 785, 788, 819, 824, 825, 826, 830, 832, 835, 868, 871, 874, 875, 880, 881, 885, 887, 888, 891, 893, 936, 938, 951, 952, 955, 962, 965, 967, 968, 971, 981, 984, 985, 988, 993, 996, 1006, 1015, 1018, 1049, 1050, 1053, 1054, 1055, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1087, 1088, 1091, 1092, 1095, 1115, 1120, 1121, 1124], "argsort": [2, 152, 153, 184, 344, 345, 1076], "descend": [2, 12, 94, 152, 153, 184, 195, 272, 283, 299, 344, 345, 881, 930, 932, 933, 935, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086], "stabl": [2, 12, 94, 152, 153, 184, 195, 272, 283, 299, 344, 345, 353, 373, 390, 756, 791, 792, 814, 815, 820, 821, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086], "asin": [2, 128, 129, 184, 320, 321, 518, 1129], "asinh": [2, 128, 129, 184, 320, 321, 518, 1129], "atan": [2, 128, 129, 184, 320, 321, 518, 553, 1129], "atan2": [2, 128, 129, 184, 320, 321, 518, 1129], "atanh": [2, 128, 129, 184, 320, 321, 518, 548, 746, 751, 1129], "binary_cross_entropi": [2, 140, 141, 184, 332, 333, 951], "pred": [2, 18, 34, 95, 140, 141, 184, 203, 218, 273, 284, 287, 300, 332, 333, 363, 367, 370, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966], "bitwise_and": [2, 128, 129, 184, 320, 321, 518], "bitwise_invert": [2, 128, 129, 184, 320, 321, 518], "bitwise_left_shift": [2, 128, 129, 184, 320, 321, 518], "bitwise_or": [2, 128, 129, 184, 320, 321, 518], "bitwise_right_shift": [2, 128, 129, 184, 320, 321, 518], "bitwise_xor": [2, 128, 129, 184, 320, 321, 518], "can_cast": [2, 124, 125, 184, 285, 316, 317, 363, 368, 431, 444], "dtype": [2, 25, 83, 102, 124, 125, 154, 155, 179, 180, 184, 210, 262, 285, 306, 316, 317, 346, 347, 358, 360, 363, 368, 369, 375, 412, 413, 414, 415, 416, 417, 419, 420, 421, 424, 425, 426, 429, 430, 431, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 467, 468, 508, 518, 573, 576, 756, 764, 765, 809, 825, 868, 876, 967, 981, 984, 1049, 1050, 1053, 1054, 1060, 1062, 1066, 1067, 1068, 1076, 1082, 1085, 1087, 1088, 1104, 1105, 1106, 1107, 1108, 1111, 1112, 1113, 1114, 1120, 1121, 1124, 1129, 1141, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1172, 1173], "float32": [2, 25, 124, 125, 184, 210, 285, 316, 317, 360, 368, 431, 435, 436, 440, 441, 442, 443, 444, 452, 1049, 1050, 1053], "float64": [2, 25, 124, 125, 368, 431, 437, 440, 441, 443, 452], "bool": [2, 25, 117, 118, 119, 120, 121, 124, 125, 179, 180, 184, 191, 350, 351, 360, 367, 368, 370, 378, 409, 410, 412, 419, 431, 437, 440, 441, 443, 446, 447, 448, 449, 452, 455, 456, 457, 467, 468, 487, 488, 503, 512, 515, 518, 557, 560, 561, 564, 569, 572, 577, 580, 598, 601, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 670, 673, 674, 677, 678, 681, 697, 700, 756, 757, 760, 764, 765, 774, 777, 781, 783, 793, 795, 800, 802, 803, 804, 805, 818, 828, 829, 830, 863, 881, 882, 884, 907, 909, 930, 945, 947, 967, 1006, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1037, 1041, 1042, 1043, 1054, 1055, 1066, 1067, 1068, 1076, 1077, 1080, 1082, 1085, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "ceil": [2, 128, 129, 184, 320, 321, 412, 413, 518, 1129], "choleski": [2, 138, 139, 181, 182, 881], "upper": [2, 27, 138, 139, 179, 180, 412, 417, 428, 881, 882, 883, 884, 923, 925, 1054, 1060, 1062], "clip": [2, 142, 143, 179, 180, 184, 286, 334, 335, 363, 367, 370, 373, 376, 378, 518, 686, 687, 756, 768, 769, 771, 967, 972, 1129], "x_min": [2, 28, 142, 143, 179, 180, 184, 212, 286, 334, 335, 373, 378, 967, 968, 969, 970, 971, 972], "x_max": [2, 28, 142, 143, 179, 180, 184, 212, 286, 334, 335, 373, 378, 967, 968, 969, 970, 971, 972], "roll": [2, 28, 142, 143, 184, 298, 334, 335, 367, 371, 967, 968, 969, 1005], "8": [2, 28, 142, 143, 181, 182, 184, 281, 296, 320, 321, 338, 339, 353, 356, 360, 367, 372, 376, 401, 405, 468, 490, 518, 532, 536, 557, 560, 581, 584, 589, 601, 625, 626, 629, 666, 686, 687, 713, 716, 729, 732, 733, 736, 747, 756, 765, 784, 830, 832, 835, 868, 875, 881, 885, 887, 888, 891, 893, 917, 919, 936, 938, 951, 952, 955, 967, 968, 969, 971, 985, 988, 993, 996, 1006, 1054, 1055, 1056, 1057, 1058, 1066, 1070, 1071, 1072, 1087, 1088, 1091, 1115, 1129, 1150, 1161], "concat": [2, 142, 143, 179, 180, 184, 334, 335, 468, 497, 498, 499, 500, 512, 756, 783, 967, 1129], "xs": [2, 29, 142, 143, 184, 214, 334, 335, 367, 468, 491, 495, 497, 498, 499, 756, 757, 760, 765, 830, 841, 967, 973, 974, 975, 976], "constant_pad": [2, 142, 143, 184, 334, 335, 967], "pad_width": [2, 30, 116, 142, 143, 184, 215, 313, 334, 335, 967, 977, 978, 979, 980, 1023, 1024, 1025, 1026], "valu": [2, 30, 142, 143, 179, 180, 181, 182, 183, 184, 215, 313, 334, 335, 354, 360, 362, 363, 367, 368, 369, 370, 371, 373, 375, 378, 390, 412, 413, 417, 419, 420, 421, 422, 431, 437, 446, 447, 448, 468, 480, 511, 512, 518, 519, 522, 524, 532, 537, 540, 545, 581, 584, 596, 598, 601, 602, 605, 614, 617, 618, 621, 622, 625, 626, 629, 642, 645, 646, 649, 686, 687, 688, 691, 697, 700, 701, 704, 705, 708, 713, 716, 747, 752, 755, 756, 768, 769, 771, 772, 777, 783, 784, 785, 788, 794, 797, 801, 811, 812, 813, 814, 815, 816, 829, 830, 832, 835, 837, 839, 841, 850, 852, 863, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 880, 881, 890, 902, 911, 913, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 945, 947, 967, 968, 971, 977, 978, 979, 980, 993, 996, 997, 1000, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1035, 1036, 1037, 1038, 1039, 1044, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1064, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170], "co": [2, 128, 129, 175, 184, 320, 321, 373, 389, 518, 527, 528, 592, 756, 783, 1129], "cosh": [2, 128, 129, 184, 320, 321, 518, 527, 528, 1129], "cross": [2, 138, 139, 181, 182, 881, 951, 952, 955, 957, 960, 962, 965, 1129], "cross_entropi": [2, 140, 141, 184, 332, 333, 363, 367, 370, 951, 962, 965], "det": [2, 138, 139, 181, 182, 881, 926], "diagon": [2, 138, 139, 181, 182, 412, 417, 427, 428, 881, 939, 941], "offset": [2, 36, 56, 110, 138, 139, 144, 145, 184, 239, 336, 337, 881, 891, 892, 893, 939, 940, 941, 1049, 1050, 1051, 1052, 1053], "axis1": [2, 36, 105, 138, 139, 142, 143, 184, 307, 334, 335, 881, 891, 892, 893, 967, 1015, 1016, 1017, 1018], "axis2": [2, 36, 138, 139, 881, 891, 892, 893], "divid": [2, 128, 129, 179, 180, 184, 320, 321, 360, 366, 518, 617, 618, 621, 756, 820, 967, 1006], "eigh": [2, 138, 139, 181, 182, 881], "namedtupl": [2, 38, 84, 138, 139, 881, 894, 895, 896, 923, 924, 925, 930, 1071, 1072, 1073], "eigvalsh": [2, 138, 139, 181, 182, 881], "einsum": [2, 154, 155, 184, 346, 347, 1087, 1115], "equat": [2, 40, 154, 155, 184, 220, 346, 347, 881, 927, 929, 1087, 1088, 1089, 1090, 1091, 1115], "equal": [2, 128, 129, 179, 180, 184, 320, 321, 360, 367, 368, 412, 417, 419, 420, 431, 437, 518, 565, 568, 573, 576, 626, 630, 633, 634, 637, 705, 708, 713, 716, 756, 757, 760, 764, 765, 881, 891, 893, 902, 911, 913, 920, 922, 967, 968, 971, 977, 980, 1006, 1023, 1026, 1054, 1060, 1062, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1096, 1099, 1108, 1111, 1112, 1116, 1119], "erf": [2, 128, 129, 184, 320, 321, 518], "exp": [2, 128, 129, 184, 320, 321, 518, 535, 610, 613, 666, 669, 1129], "expand_dim": [2, 142, 143, 184, 334, 335, 373, 376, 967, 1129], "expm1": [2, 128, 129, 184, 320, 321, 518], "flip": [2, 142, 143, 184, 334, 335, 375, 376, 378, 518, 561, 564, 967, 993, 996, 1129], "floor": [2, 128, 129, 184, 320, 321, 518, 573, 576, 618, 756, 782, 1129], "floor_divid": [2, 128, 129, 184, 320, 321, 518, 596, 617], "gather_nd": [2, 130, 131, 179, 180, 184, 289, 322, 323, 756, 789, 1129], "indic": [2, 49, 130, 131, 179, 180, 184, 229, 289, 322, 323, 356, 374, 378, 401, 406, 518, 717, 720, 756, 784, 785, 786, 787, 788, 789, 796, 809, 812, 813, 868, 869, 870, 871, 872, 873, 874, 875, 881, 945, 947, 967, 1001, 1004, 1031, 1032, 1034, 1036, 1038, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1066, 1067, 1068, 1069, 1071, 1072, 1074, 1076, 1077, 1080, 1082, 1085, 1129, 1132, 1134, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1162, 1163], "union": [2, 49, 103, 117, 120, 121, 130, 131, 138, 139, 179, 180, 358, 360, 363, 366, 367, 368, 369, 370, 371, 373, 378, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 468, 484, 485, 486, 487, 488, 490, 493, 494, 495, 496, 501, 507, 509, 511, 512, 513, 514, 517, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 757, 760, 764, 765, 768, 769, 771, 774, 775, 778, 779, 780, 782, 783, 784, 785, 786, 788, 793, 795, 796, 798, 799, 800, 809, 812, 813, 818, 819, 824, 825, 826, 828, 829, 830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 863, 865, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 931, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1042, 1043, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "greater": [2, 128, 129, 179, 180, 184, 320, 321, 518, 524, 537, 540, 549, 552, 565, 568, 573, 576, 596, 601, 614, 617, 618, 621, 626, 705, 708, 709, 712, 717, 720, 752, 755, 881, 885, 887, 967, 1007, 1010, 1054, 1060, 1062], "greater_equ": [2, 128, 129, 184, 320, 321, 518, 601, 625], "inv": [2, 138, 139, 181, 182, 375, 881, 920, 1129], "isfinit": [2, 128, 129, 184, 320, 321, 518], "isinf": [2, 128, 129, 184, 320, 321, 518], "isnan": [2, 128, 129, 184, 320, 321, 518], "layer_norm": [2, 144, 145, 184, 336, 337, 1049], "normalized_idx": [2, 56, 144, 145, 184, 239, 336, 337, 1049, 1050, 1051, 1052, 1053], "05": [2, 56, 144, 145, 184, 239, 336, 337, 468, 830, 832, 835, 1049, 1050, 1051, 1052, 1053], "scale": [2, 56, 144, 145, 184, 239, 336, 337, 367, 468, 510, 511, 830, 854, 856, 868, 876, 879, 880, 1049, 1050, 1051, 1052, 1053, 1150, 1158, 1161, 1166, 1169], "new_std": [2, 56, 144, 145, 184, 239, 336, 337, 1049, 1050, 1051, 1052, 1053, 1164, 1165], "less": [2, 128, 129, 175, 179, 180, 184, 320, 321, 354, 360, 367, 371, 372, 373, 518, 524, 527, 528, 531, 537, 540, 549, 552, 581, 584, 588, 592, 650, 653, 654, 657, 662, 665, 705, 708, 709, 712, 717, 720, 729, 732, 881, 902, 911, 913, 920, 922, 945, 947, 1054, 1060, 1062, 1087, 1116, 1119], "less_equ": [2, 128, 129, 184, 320, 321, 518], "log": [2, 128, 129, 184, 320, 321, 353, 354, 363, 367, 370, 373, 376, 412, 422, 518, 535, 609, 658, 661, 666, 669, 881, 890, 926, 1129], "log10": [2, 128, 129, 184, 320, 321, 518], "log1p": [2, 128, 129, 184, 320, 321, 518], "log2": [2, 128, 129, 184, 320, 321, 518], "logaddexp": [2, 128, 129, 184, 320, 321, 518, 535, 609], "logical_and": [2, 128, 129, 184, 320, 321, 518, 1129], "logical_not": [2, 128, 129, 184, 320, 321, 518, 1129], "logical_or": [2, 128, 129, 184, 320, 321, 518, 1129], "logical_xor": [2, 128, 129, 184, 320, 321, 518], "matmul": [2, 138, 139, 184, 330, 331, 358, 364, 373, 881, 930, 1129], "matrix_norm": [2, 138, 139, 179, 180, 881], "ord": [2, 69, 114, 138, 139, 179, 180, 881, 907, 908, 909, 945, 946, 947], "fro": [2, 69, 138, 139, 881, 907, 908, 909], "matrix_rank": [2, 138, 139, 181, 182, 881], "rtol": [2, 70, 80, 138, 139, 881, 902, 911, 912, 913, 920, 921, 922], "matrix_transpos": [2, 138, 139, 181, 182, 375, 881], "max": [2, 154, 155, 179, 180, 184, 346, 347, 431, 451, 454, 518, 686, 756, 768, 769, 771, 779, 812, 813, 881, 902, 911, 913, 920, 922, 1087, 1166, 1168], "mean": [2, 154, 155, 179, 180, 184, 191, 346, 347, 350, 351, 353, 354, 357, 360, 363, 367, 368, 369, 370, 373, 375, 376, 377, 378, 389, 390, 468, 497, 498, 499, 500, 512, 756, 779, 1027, 1028, 1029, 1030, 1031, 1037, 1054, 1059, 1071, 1072, 1087, 1129, 1141], "min": [2, 154, 155, 179, 180, 184, 346, 347, 431, 451, 454, 518, 687, 756, 779, 812, 813, 820, 881, 923, 925, 930, 932, 933, 935, 945, 947, 1087], "multipli": [2, 128, 129, 184, 320, 321, 360, 364, 366, 518, 756, 774], "neg": [2, 128, 129, 184, 320, 321, 363, 367, 370, 401, 403, 412, 413, 417, 518, 630, 633, 634, 637, 688, 691, 705, 708, 709, 712, 881, 930, 942, 944, 945, 947, 967, 985, 988, 1001, 1004, 1120, 1121, 1124, 1125, 1128], "not_equ": [2, 128, 129, 184, 320, 321, 518], "outer": [2, 138, 139, 181, 182, 881, 1027, 1028, 1029, 1030], "permute_dim": [2, 142, 143, 184, 334, 335, 967], "ax": [2, 79, 108, 138, 139, 142, 143, 179, 180, 184, 259, 334, 335, 358, 360, 368, 375, 468, 512, 756, 774, 881, 907, 909, 927, 929, 936, 937, 938, 945, 947, 967, 977, 980, 985, 988, 989, 990, 991, 992, 1001, 1004, 1007, 1010, 1015, 1018, 1023, 1026, 1066, 1067, 1068, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "pinv": [2, 138, 139, 181, 182, 881, 902, 1129], "posit": [2, 117, 118, 119, 128, 129, 184, 320, 321, 371, 376, 389, 411, 412, 417, 431, 451, 468, 492, 496, 500, 518, 519, 522, 630, 633, 634, 637, 688, 691, 709, 712, 756, 783, 881, 882, 884, 967, 981, 984, 1001, 1004, 1054, 1064, 1066, 1069, 1120, 1121, 1124, 1125, 1128, 1139, 1140], "pow": [2, 128, 129, 184, 320, 321, 518], "prod": [2, 154, 155, 179, 180, 184, 346, 347, 360, 368, 756, 779, 1087], "qr": [2, 138, 139, 181, 182, 881], "mode": [2, 84, 138, 139, 179, 180, 353, 360, 367, 390, 409, 410, 468, 497, 498, 499, 500, 512, 518, 532, 688, 691, 881, 923, 924, 925], "reduc": [2, 84, 138, 139, 179, 180, 375, 468, 512, 756, 779, 881, 923, 924, 925, 1066, 1067, 1068, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "remaind": [2, 128, 129, 179, 180, 184, 320, 321, 518, 756, 782, 967, 1006], "repeat": [2, 142, 143, 179, 180, 184, 334, 335, 354, 359, 360, 364, 366, 367, 756, 780, 967, 1019, 1022], "reshap": [2, 142, 143, 179, 180, 184, 334, 335, 370, 373, 375, 378, 967, 1129], "shape": [2, 87, 142, 143, 179, 180, 184, 188, 266, 279, 296, 297, 324, 325, 334, 335, 338, 339, 354, 358, 359, 360, 368, 369, 370, 371, 373, 375, 376, 377, 378, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 437, 438, 439, 468, 480, 508, 513, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 768, 769, 771, 774, 778, 779, 780, 782, 785, 788, 793, 796, 809, 812, 813, 819, 830, 832, 834, 836, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 998, 999, 1000, 1001, 1004, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1065, 1066, 1067, 1069, 1070, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1115, 1120, 1121, 1124, 1125, 1128, 1129, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1164, 1165], "shift": [2, 88, 142, 143, 184, 267, 298, 334, 335, 360, 371, 518, 565, 568, 573, 576, 967, 1001, 1002, 1003, 1004, 1005], "round": [2, 128, 129, 174, 175, 176, 184, 320, 321, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 518, 532, 581, 584, 596, 614, 617, 618, 621, 688, 691, 729, 732, 752, 755, 1129], "sign": [2, 128, 129, 175, 184, 320, 321, 353, 374, 378, 412, 413, 518, 519, 522, 532, 549, 552, 573, 576, 688, 691, 709, 712, 881, 890, 926, 1071, 1072, 1073, 1075, 1087, 1104, 1107, 1112], "sin": [2, 128, 129, 184, 320, 321, 366, 373, 518, 756, 783, 1129], "sinh": [2, 128, 129, 184, 320, 321, 518, 1129], "solv": [2, 138, 139, 181, 182, 374, 389, 881], "sort": [2, 153, 179, 180, 181, 182, 183, 184, 345, 358, 881, 894, 896, 930, 932, 933, 935, 1077, 1080], "sparse_cross_entropi": [2, 140, 141, 184, 332, 333, 951], "sqrt": [2, 128, 129, 184, 320, 321, 518, 881, 945, 947], "squar": [2, 128, 129, 184, 320, 321, 518, 729, 732, 868, 871, 881, 882, 884, 888, 890, 894, 896, 897, 899, 900, 910, 926, 927, 929, 930], "squeez": [2, 142, 143, 184, 334, 335, 967, 1129], "stack": [2, 142, 143, 179, 180, 184, 334, 335, 373, 412, 427, 428, 881, 888, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 910, 911, 913, 914, 916, 920, 922, 923, 925, 930, 932, 933, 935, 939, 941, 967, 1031, 1032, 1041, 1042, 1129, 1150, 1159], "std": [2, 154, 155, 184, 346, 347, 360, 1054, 1059, 1071, 1072, 1087], "correct": [2, 100, 112, 154, 155, 184, 304, 312, 346, 347, 354, 355, 357, 363, 367, 368, 369, 371, 431, 463, 967, 968, 971, 1087, 1108, 1109, 1110, 1111, 1116, 1117, 1118, 1119, 1129], "subtract": [2, 128, 129, 184, 320, 321, 360, 366, 518], "sum": [2, 154, 155, 179, 180, 184, 346, 347, 363, 367, 368, 370, 373, 468, 497, 498, 499, 500, 512, 518, 532, 535, 609, 666, 669, 756, 775, 779, 812, 813, 868, 880, 881, 930, 939, 941, 945, 947, 1087, 1088, 1091, 1108, 1111], "svd": [2, 138, 139, 181, 182, 881, 933, 1129], "full_matric": [2, 103, 138, 139, 881, 930, 931, 933], "tupl": [2, 103, 117, 118, 119, 120, 121, 138, 139, 179, 180, 358, 367, 368, 369, 371, 375, 376, 377, 390, 412, 414, 415, 419, 424, 425, 429, 431, 439, 453, 468, 487, 756, 783, 819, 868, 871, 874, 875, 878, 881, 902, 911, 913, 920, 922, 930, 931, 933, 936, 938, 945, 947, 967, 973, 976, 977, 980, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1007, 1010, 1011, 1014, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1054, 1059, 1060, 1062, 1066, 1069, 1071, 1072, 1073, 1074, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "svdval": [2, 138, 139, 181, 182, 881, 932], "swapax": [2, 142, 143, 184, 334, 335, 967], "axis0": [2, 105, 142, 143, 184, 307, 334, 335, 967, 1015, 1016, 1017, 1018], "tan": [2, 128, 129, 184, 302, 320, 321, 359, 363, 367, 370, 371, 373, 518, 537, 540, 548, 553, 743, 751, 1071, 1072, 1073, 1076, 1077, 1080, 1129], "56": [2, 106, 128, 129, 184, 302, 308, 320, 321, 360, 518, 548, 553, 729, 732, 742, 743, 744, 745, 751, 830, 832, 835, 881, 917, 919, 1087, 1088, 1091, 1115], "19": [2, 106, 128, 129, 184, 302, 308, 320, 321, 360, 518, 548, 553, 577, 580, 742, 743, 744, 745, 751, 881, 891, 893], "tanh": [2, 128, 129, 184, 303, 320, 321, 373, 401, 518, 548, 553, 748, 1129], "762": [2, 107, 128, 129, 184, 309, 320, 321, 401, 408, 518, 548, 553, 747, 749, 750], "964": [2, 107, 128, 129, 184, 309, 320, 321, 401, 408, 518, 548, 553, 747, 749, 750], "tensordot": [2, 138, 139, 181, 182, 881], "tile": [2, 142, 143, 184, 334, 335, 967, 1129], "rep": [2, 109, 142, 143, 184, 310, 334, 335, 967, 1019, 1020, 1021, 1022], "trace": [2, 138, 139, 179, 180, 181, 182, 373, 390, 756, 802, 803, 805, 881], "trunc": [2, 128, 129, 184, 320, 321, 518], "var": [2, 154, 155, 184, 191, 346, 347, 350, 351, 360, 373, 1027, 1028, 1029, 1087], "vecdot": [2, 138, 139, 181, 182, 881], "vector_norm": [2, 138, 139, 179, 180, 881], "vector_to_skew_symmetric_matrix": [2, 138, 139, 181, 182, 881, 1129], "zero_pad": [2, 142, 143, 184, 334, 335, 967, 1129], "method": [3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 179, 180, 181, 182, 183, 185, 188, 190, 191, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 350, 351, 355, 358, 359, 360, 362, 363, 366, 371, 373, 374, 377, 378, 390, 401, 403, 404, 405, 406, 407, 408, 412, 418, 440, 441, 442, 444, 518, 519, 520, 521, 523, 533, 534, 536, 537, 540, 548, 553, 557, 560, 577, 580, 581, 582, 583, 584, 589, 601, 614, 615, 616, 618, 625, 626, 629, 666, 686, 687, 693, 696, 697, 700, 713, 716, 729, 732, 733, 736, 743, 744, 745, 747, 748, 749, 750, 751, 756, 757, 758, 759, 761, 772, 773, 784, 785, 786, 787, 789, 812, 813, 824, 826, 830, 832, 833, 834, 836, 850, 852, 854, 856, 868, 874, 880, 881, 882, 884, 885, 887, 888, 951, 952, 955, 967, 968, 969, 970, 972, 981, 984, 985, 988, 993, 996, 1001, 1002, 1003, 1005, 1006, 1015, 1018, 1031, 1032, 1042, 1043, 1044, 1049, 1050, 1053, 1054, 1056, 1058, 1059, 1060, 1062, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1088, 1091, 1092, 1095, 1115, 1120, 1121, 1124, 1129, 1150, 1161, 1162, 1163], "collect": [117, 179, 180, 362, 389, 401, 409, 468, 756, 830, 868, 951, 1031, 1044, 1049, 1054, 1136, 1150, 1164, 1166], "accept": [117, 353, 354, 359, 360, 362, 363, 366, 367, 369, 370, 371, 375, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 532, 537, 540, 557, 560, 577, 580, 581, 584, 589, 614, 674, 677, 678, 681, 697, 700, 709, 712, 713, 716, 729, 732, 733, 736, 742, 747, 756, 784, 868, 871, 880, 881, 888, 967, 981, 984, 985, 988, 1001, 1004, 1049, 1050, 1053, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1096, 1099, 1120, 1121, 1124, 1129], "args_to_ivi": 117, "arg": [117, 118, 119, 160, 164, 179, 180, 356, 373, 375, 377, 468, 477, 492, 496, 500, 512, 756, 813, 1139, 1140, 1162, 1163], "include_deriv": [117, 118, 119, 120, 121, 1031, 1033, 1043], "kwarg": [117, 118, 119, 160, 164, 177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 373, 375, 377, 468, 477, 492, 496, 500, 756, 806, 1139, 1140, 1162, 1163], "keyword": [117, 118, 119, 179, 180, 181, 182, 183, 358, 368, 369, 370, 371, 376, 412, 423, 468, 477, 478, 492, 496, 500, 756, 763, 806, 1031, 1037, 1087, 1112, 1162, 1163], "variabl": [117, 118, 119, 120, 121, 179, 180, 181, 182, 359, 364, 367, 368, 370, 371, 376, 377, 378, 390, 756, 766, 798, 799, 800, 801, 802, 803, 805, 822, 830, 837, 839, 841, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 863, 866, 868, 879, 881, 927, 929, 1027, 1028, 1029, 1030, 1049, 1050, 1053, 1129, 1139, 1140, 1141, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173], "form": [117, 118, 119, 120, 121, 175, 179, 180, 352, 363, 377, 378, 412, 414, 424, 427, 428, 756, 762, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 868, 881, 882, 884, 888, 891, 893, 894, 896, 897, 899, 900, 902, 911, 913, 914, 916, 920, 922, 923, 925, 927, 929, 930, 932, 933, 935, 939, 941, 1031, 1033, 1043], "nest": [117, 118, 119, 120, 121, 179, 180, 181, 182, 183, 358, 363, 366, 367, 375, 376, 377, 390, 468, 492, 496, 500, 756, 824, 1027, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171], "otherwis": [117, 118, 119, 120, 121, 160, 172, 179, 180, 366, 368, 369, 371, 373, 375, 412, 413, 431, 437, 440, 443, 446, 447, 448, 468, 487, 518, 630, 633, 634, 637, 638, 641, 756, 766, 827, 830, 846, 848, 863, 881, 882, 884, 888, 942, 944, 945, 947, 1027, 1028, 1029, 1031, 1044, 1066, 1067, 1068, 1070, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "argument": [117, 118, 119, 120, 121, 160, 164, 165, 174, 179, 180, 181, 182, 183, 355, 357, 358, 359, 360, 362, 363, 364, 366, 367, 373, 375, 376, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 459, 468, 477, 478, 492, 496, 500, 518, 519, 522, 532, 537, 540, 581, 584, 614, 697, 700, 729, 732, 733, 736, 742, 756, 762, 763, 767, 777, 784, 806, 813, 868, 871, 880, 967, 1001, 1004, 1031, 1037, 1049, 1050, 1053, 1087, 1092, 1095, 1112, 1120, 1121, 1124, 1132, 1134, 1139, 1140, 1162, 1163], "ar": [117, 118, 119, 174, 175, 176, 179, 180, 181, 182, 183, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 389, 390, 391, 399, 412, 413, 468, 477, 478, 502, 506, 508, 512, 518, 585, 674, 677, 678, 681, 713, 716, 721, 724, 742, 756, 757, 760, 764, 765, 766, 790, 796, 797, 801, 808, 810, 822, 868, 877, 881, 885, 887, 902, 903, 906, 907, 909, 911, 913, 920, 922, 930, 932, 933, 935, 942, 944, 967, 968, 971, 985, 988, 1001, 1004, 1031, 1033, 1037, 1043, 1054, 1059, 1060, 1062, 1066, 1067, 1068, 1069, 1071, 1072, 1129, 1172, 1173], "unchang": [117, 118, 119, 120, 121], "The": [117, 118, 119, 120, 121, 160, 164, 165, 173, 174, 176, 179, 180, 181, 182, 183, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 389, 401, 402, 403, 406, 408, 409, 410, 412, 413, 418, 422, 427, 428, 431, 435, 436, 437, 445, 450, 452, 453, 455, 458, 463, 467, 468, 477, 478, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 506, 507, 508, 509, 510, 511, 512, 514, 517, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 688, 691, 697, 700, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 742, 746, 747, 751, 752, 755, 756, 762, 764, 767, 768, 776, 777, 783, 785, 788, 798, 799, 800, 802, 803, 804, 805, 807, 812, 813, 814, 815, 816, 819, 820, 821, 829, 830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 863, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 951, 952, 955, 957, 960, 962, 965, 967, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1006, 1019, 1022, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1059, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1139, 1140, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170], "check": [117, 118, 119, 120, 121, 174, 175, 176, 179, 180, 353, 354, 367, 372, 373, 375, 376, 377, 378, 389, 431, 445, 452, 453, 455, 467, 468, 507, 517, 756, 766, 781, 795, 802, 803, 804, 805, 822, 829, 830, 846, 848, 881, 894, 896, 1031, 1032, 1041, 1042, 1043, 1129], "dict": [117, 118, 119, 120, 121, 160, 172, 179, 180, 181, 182, 183, 367, 376, 377, 468, 477, 478, 487, 490, 493, 494, 495, 496, 756, 762, 778, 779, 780, 1031, 1033, 1034, 1037, 1040, 1043, 1044], "whether": [117, 118, 119, 120, 121, 179, 180, 181, 182, 183, 184, 191, 350, 351, 352, 353, 368, 370, 371, 401, 402, 409, 410, 431, 437, 449, 455, 456, 457, 467, 468, 487, 488, 499, 503, 504, 507, 508, 512, 515, 517, 518, 638, 641, 756, 757, 760, 764, 765, 774, 777, 781, 783, 793, 795, 797, 800, 801, 802, 803, 804, 805, 806, 818, 822, 828, 829, 830, 837, 839, 841, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 863, 868, 876, 881, 894, 896, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1037, 1041, 1042, 1043, 1044, 1054, 1055, 1120, 1121, 1124, 1125, 1128, 1139, 1140, 1150, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171], "recurs": [117, 118, 119, 120, 121, 179, 180, 353, 356, 363, 367, 377, 390, 1031, 1032, 1033, 1041, 1042, 1043], "deriv": [117, 118, 119, 120, 121, 368, 369, 375, 377, 412, 416, 420, 426, 430, 830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 1031, 1033, 1043, 1162, 1166, 1170, 1172], "str": [117, 118, 119, 160, 165, 179, 180, 368, 369, 409, 410, 412, 423, 431, 435, 445, 446, 447, 450, 451, 454, 455, 456, 457, 460, 461, 462, 467, 468, 484, 487, 488, 490, 493, 494, 495, 496, 512, 756, 762, 776, 778, 779, 780, 807, 812, 813, 868, 869, 871, 873, 874, 875, 881, 923, 925, 1027, 1028, 1029, 1030, 1031, 1037, 1087, 1088, 1091, 1115], "kei": [117, 118, 119, 179, 180, 181, 182, 183, 367, 376, 468, 480, 756, 762, 772, 868, 879, 880, 1027, 1028, 1029, 1031, 1034, 1040, 1044, 1139, 1140, 1150, 1161, 1166, 1170], "word": [117, 118, 119, 412, 413, 1054, 1060, 1062, 1139, 1140], "ret": [117, 118, 119, 120, 121, 160, 164, 165, 172, 179, 180, 358, 359, 373, 378, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 443, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 467, 468, 477, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 512, 513, 514, 515, 517, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 757, 760, 762, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 812, 813, 818, 820, 821, 822, 824, 825, 826, 828, 829, 830, 832, 835, 837, 839, 841, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1037, 1041, 1042, 1043, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1132, 1134, 1139, 1140, 1166, 1170], "same": [117, 118, 119, 174, 176, 179, 180, 353, 354, 356, 358, 360, 362, 363, 366, 367, 369, 370, 371, 373, 375, 377, 378, 412, 413, 416, 420, 423, 426, 427, 428, 430, 431, 437, 438, 439, 468, 477, 478, 512, 518, 519, 522, 532, 561, 564, 581, 584, 614, 688, 691, 709, 712, 713, 716, 717, 720, 752, 755, 756, 782, 784, 785, 788, 809, 812, 813, 830, 846, 848, 863, 868, 869, 870, 871, 872, 873, 874, 875, 880, 881, 882, 884, 885, 887, 888, 891, 893, 894, 896, 897, 899, 900, 902, 914, 916, 920, 922, 923, 925, 927, 929, 930, 939, 941, 942, 944, 967, 973, 976, 985, 988, 989, 992, 1001, 1004, 1007, 1010, 1011, 1014, 1027, 1028, 1029, 1031, 1044, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1112, 1115, 1116, 1119, 1129, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "convert": [117, 118, 119, 120, 121, 176, 179, 180, 366, 373, 390, 391, 399, 412, 414, 424, 431, 435, 436, 468, 484, 485, 486, 487, 507, 514, 517, 756, 819, 825, 826, 881, 948, 950, 1031, 1033, 1043, 1044, 1140], "args_to_n": [117, 370, 375], "nativ": [117, 119, 120, 121, 160, 166, 179, 180, 368, 370, 375, 376, 412, 424, 431, 435, 436, 445, 468, 484, 485, 486, 487, 488, 507, 514, 517, 756, 800, 802, 805, 1139, 1140], "backend": [117, 119, 121, 164, 165, 166, 172, 174, 179, 180, 354, 355, 357, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 374, 375, 378, 431, 452, 453, 455, 467, 468, 503, 505, 515, 756, 797, 800, 801, 807, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 866, 1129, 1135, 1139, 1140, 1166, 1167, 1168, 1169, 1170, 1171], "to_ivi": [117, 179, 180, 375, 1031, 1044], "If": [117, 120, 121, 160, 164, 165, 166, 174, 179, 180, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 378, 390, 412, 413, 415, 416, 417, 419, 420, 423, 425, 426, 427, 428, 429, 430, 431, 437, 439, 459, 468, 487, 511, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 549, 552, 581, 584, 585, 588, 589, 592, 606, 609, 610, 613, 614, 650, 653, 654, 657, 662, 665, 666, 669, 674, 677, 678, 681, 688, 691, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 742, 747, 752, 755, 756, 800, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 881, 882, 884, 885, 887, 902, 907, 909, 911, 913, 920, 922, 923, 925, 927, 929, 930, 942, 944, 945, 947, 951, 952, 955, 957, 960, 962, 965, 967, 981, 984, 985, 988, 1001, 1004, 1006, 1007, 1010, 1011, 1014, 1027, 1028, 1029, 1031, 1043, 1044, 1054, 1059, 1060, 1062, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129], "set": [117, 120, 121, 151, 160, 164, 165, 166, 172, 174, 179, 180, 343, 352, 354, 357, 358, 363, 365, 366, 367, 368, 369, 370, 373, 375, 376, 468, 487, 497, 498, 509, 510, 511, 512, 518, 549, 552, 756, 757, 760, 814, 815, 816, 817, 830, 837, 839, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 881, 885, 887, 902, 907, 909, 911, 913, 920, 922, 927, 929, 1031, 1032, 1041, 1042, 1043, 1047, 1048, 1054, 1064, 1066, 1067, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1108, 1111, 1116, 1119, 1150, 1159, 1166, 1167, 1168, 1169, 1170, 1171], "leaf": [117, 120, 121, 179, 180, 363, 367, 376, 1031, 1032, 1041, 1042], "within": [117, 120, 121, 354, 362, 377, 390, 412, 413, 1054, 1060, 1062], "mayb": [117, 120, 121, 353, 373, 375], "manner": [117, 120, 121, 174, 179, 180, 358, 359, 369, 376, 389, 390, 1031, 1043], "travers": [117, 120, 121, 179, 180, 367, 373, 375, 1031, 1043], "lowest": [117, 120, 121, 179, 180, 363, 390, 1031, 1043, 1054, 1056, 1057], "leav": [117, 120, 121, 179, 180, 181, 182, 184, 359, 360, 362, 363, 367, 368, 370, 371, 376, 377, 967, 1011, 1014, 1031, 1032, 1033, 1041, 1042, 1043], "search": [117, 120, 121, 149, 174, 179, 180, 341, 353, 358, 360, 362, 1067, 1068, 1069, 1070], "s": [117, 120, 121, 160, 164, 165, 166, 172, 175, 176, 179, 180, 352, 353, 354, 356, 357, 359, 360, 362, 364, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 390, 411, 412, 423, 427, 428, 431, 452, 453, 468, 487, 511, 518, 709, 712, 756, 765, 830, 837, 839, 842, 844, 850, 852, 858, 860, 881, 930, 932, 933, 935, 1031, 1037, 1043, 1087, 1108, 1111, 1116, 1119, 1129, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1172, 1173], "case": [117, 120, 121, 175, 179, 180, 181, 182, 183, 353, 354, 355, 358, 359, 360, 363, 364, 366, 367, 368, 369, 370, 371, 373, 375, 377, 378, 390, 412, 423, 468, 507, 514, 517, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 549, 552, 577, 580, 581, 584, 585, 588, 589, 592, 606, 609, 610, 613, 614, 650, 653, 654, 657, 662, 665, 666, 669, 688, 691, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 742, 747, 752, 755, 756, 800, 812, 813, 881, 907, 909, 967, 997, 1000, 1031, 1034, 1040, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1108, 1111, 1112, 1116, 1119, 1150, 1161, 1162, 1163, 1166, 1170], "to_n": [117, 179, 180], "convers": [118, 119, 120, 121, 176, 179, 180, 372, 374, 378, 389, 390, 1129, 1135], "arraywithcr": 122, "creation": [123, 179, 180, 181, 182, 183, 315, 358, 368, 369, 373, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430], "data_typ": [124, 125, 316, 317, 358, 368, 431, 435, 436, 437, 438, 439, 440, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467], "arraywithdatatyp": 124, "arraywithdevic": [126, 375], "devic": [127, 175, 179, 180, 184, 263, 296, 297, 319, 338, 339, 354, 357, 358, 363, 365, 368, 375, 376, 390, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 756, 784, 785, 788, 809, 812, 813, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1139, 1140, 1141, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1172, 1173], "arraywithelementwis": [128, 355, 366], "elementwis": [129, 179, 180, 321, 358, 363, 373, 378, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755], "arraywithgener": [130, 375], "arraywithgradi": [132, 375], "gradient": [133, 179, 180, 325, 358, 367, 376, 377, 389, 390, 468, 512, 832, 835, 837, 839, 841, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 863, 864, 865, 866, 867, 1027, 1028, 1029, 1030, 1129, 1166, 1167, 1168, 1169, 1170, 1171], "arraywithimag": [134, 375], "imag": [135, 327, 353, 356, 358, 373, 374, 376, 378, 389, 868, 869, 870, 871, 872, 874, 875, 1129], "arraywithlay": 136, "layer": [137, 174, 329, 358, 359, 373, 374, 377, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 1049, 1050, 1053, 1129, 1141, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1172, 1173], "linear_algebra": [138, 139, 330, 331, 358, 375, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950], "arraywithlinearalgebra": 138, "arraywithloss": 140, "loss": [141, 333, 358, 363, 376, 377, 378, 952, 955, 957, 960, 962, 965, 1129], "arraywithmanipul": 142, "manipul": [143, 174, 335, 358, 378, 389, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026], "arraywithnorm": 144, "norm": [145, 179, 180, 337, 358, 756, 768, 769, 771, 881, 907, 909, 945, 947, 1050, 1053, 1129, 1165, 1166, 1168], "arraywithrandom": [146, 375], "random": [147, 179, 180, 339, 358, 369, 378, 389, 1055, 1056, 1057, 1059, 1060, 1062, 1064, 1065, 1129], "arraywithsearch": 148, "arraywithset": 150, "arraywithsort": 152, "arraywithstatist": 154, "statist": [155, 184, 191, 347, 350, 351, 358, 368, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119], "arraywithutil": 156, "util": [157, 349, 358, 369, 468, 501, 1121, 1124, 1125, 1128], "backend_handl": [160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 1129], "contextmanag": [160, 161], "object": [160, 179, 180, 181, 182, 183, 184, 375, 378, 412, 418, 431, 451, 468, 513, 830, 1031, 1034, 1036, 1038, 1039, 1040, 1045, 1046, 1047, 1048, 1054, 1065, 1141, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1162, 1163], "__init__": [160, 161, 164, 165, 179, 180, 181, 182, 183, 184, 358, 364, 368, 373, 375, 376, 377, 378, 431, 432, 433, 434, 468, 469, 476, 477, 478, 479, 480, 481, 482, 483, 830, 831, 1054, 1055, 1059, 1129, 1136, 1137, 1138, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173], "choose_random_backend": 160, "exclud": [160, 162, 360, 373, 412, 413, 1054, 1060, 1062], "clear_backend_stack": 160, "current_backend": [160, 181, 182, 358, 363], "current": [160, 164, 165, 172, 176, 179, 180, 181, 182, 183, 353, 354, 355, 356, 363, 369, 373, 378, 389, 390, 431, 452, 453, 455, 467, 468, 477, 501, 502, 506, 508, 756, 790, 797, 801, 808, 810, 1031, 1032, 1041, 1042, 1129], "prioriti": [160, 164, 179, 180, 354, 370], "global_backend": [160, 164], "which": [160, 164, 165, 174, 175, 176, 179, 180, 181, 182, 183, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 389, 390, 401, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 440, 443, 445, 449, 451, 454, 455, 467, 468, 477, 478, 488, 493, 494, 495, 496, 497, 498, 499, 500, 502, 506, 508, 510, 511, 512, 518, 709, 712, 756, 762, 774, 775, 777, 784, 785, 788, 790, 796, 800, 808, 809, 810, 812, 813, 828, 830, 837, 839, 841, 842, 844, 850, 852, 854, 856, 858, 860, 863, 865, 866, 868, 879, 881, 885, 887, 891, 893, 907, 909, 927, 929, 930, 942, 944, 945, 947, 951, 957, 960, 962, 965, 967, 973, 976, 985, 988, 993, 996, 1001, 1004, 1006, 1011, 1014, 1031, 1036, 1037, 1038, 1039, 1044, 1045, 1046, 1047, 1048, 1054, 1055, 1056, 1057, 1060, 1062, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1132, 1134, 1139, 1140, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1172, 1173], "try": [160, 164, 173, 175, 176, 179, 180, 353, 354, 355, 356, 366, 367, 375, 390, 756, 827, 1129], "infer": [160, 164, 357, 364, 368, 369, 373, 378, 409, 410, 412, 413, 414, 416, 419, 420, 424, 426, 430, 518, 622, 756, 793, 818, 967, 997, 1000], "when": [160, 164, 174, 175, 179, 180, 181, 182, 183, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 378, 390, 431, 437, 468, 518, 532, 610, 613, 705, 708, 756, 767, 800, 821, 951, 952, 955, 957, 960, 962, 965, 1031, 1042, 1066, 1067, 1068, 1070, 1087, 1092, 1095, 1100, 1103, 1108, 1111, 1116, 1119, 1129, 1162, 1163], "global": [160, 164, 165, 166, 172, 179, 180, 181, 182, 183, 363, 364, 368, 369, 373, 431, 446, 447, 448, 468, 477, 478, 510, 511, 512, 756, 791, 792, 811, 814, 815, 816, 820, 821, 1049, 1050, 1053, 1164, 1165], "numpi": [160, 164, 165, 166, 174, 175, 179, 180, 354, 355, 362, 364, 368, 369, 370, 371, 373, 375, 378, 756, 825, 1087, 1088, 1091, 1115, 1129], "np": [160, 164, 366, 368, 369, 370, 371, 375, 376, 378, 1129], "py": [160, 164, 165, 354, 358, 359, 363, 364, 368, 369, 371, 373, 375, 377, 378, 1054, 1055, 1059], "noqa": [160, 164, 165, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 532, 557, 560, 577, 580, 581, 584, 589, 697, 700, 713, 716, 729, 732, 733, 736, 742, 747, 881, 888, 967, 981, 984, 985, 988, 1001, 1004, 1087, 1092, 1095], "set_backend": [160, 164, 165, 172, 363, 364, 365, 368, 431, 452, 453, 468, 509, 756, 818, 1129], "ha": [160, 164, 165, 174, 175, 176, 179, 180, 354, 359, 360, 363, 364, 365, 368, 369, 373, 375, 377, 378, 389, 390, 412, 423, 468, 487, 518, 519, 522, 688, 691, 705, 708, 881, 890, 903, 906, 926, 927, 929, 930, 939, 941, 967, 981, 984, 1007, 1010, 1071, 1072, 1073, 1075, 1087, 1096, 1099, 1104, 1107, 1108, 1111, 1112, 1116, 1119], "jax": [160, 164, 165, 166, 175, 176, 354, 355, 364, 368, 369, 370, 371, 373, 375, 378, 390, 830, 846, 848, 1071, 1072, 1073, 1075, 1129], "get_backend": [160, 363, 364], "specifi": [160, 165, 179, 180, 357, 362, 363, 368, 369, 370, 371, 373, 376, 377, 378, 412, 413, 415, 419, 421, 422, 425, 427, 428, 429, 431, 437, 439, 468, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 502, 506, 508, 511, 512, 513, 518, 709, 712, 756, 762, 774, 784, 785, 788, 795, 828, 881, 891, 893, 907, 909, 936, 938, 939, 941, 942, 944, 945, 947, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 985, 988, 1001, 1004, 1007, 1010, 1011, 1014, 1023, 1026, 1031, 1036, 1038, 1039, 1045, 1046, 1047, 1048, 1066, 1067, 1068, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1087, 1088, 1091, 1104, 1107, 1112, 1115, 1120, 1121, 1124, 1125, 1128], "isn": [160, 165, 354, 376, 390], "associ": [160, 165, 354, 363, 365, 390, 518, 532, 688, 691, 881, 902, 911, 913, 920, 922, 948, 950], "retriev": [160, 165, 354, 756, 762], "i": [160, 165, 354, 356, 357, 373, 376, 378, 412, 413, 423, 518, 519, 522, 549, 552, 565, 568, 573, 576, 581, 584, 596, 614, 617, 618, 621, 630, 633, 686, 687, 693, 696, 705, 708, 709, 712, 756, 764, 765, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 881, 885, 887, 902, 903, 906, 911, 913, 920, 922, 927, 929, 930, 939, 941, 945, 947, 967, 1011, 1014, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1108, 1111, 1112, 1115, 1116, 1119], "e": [160, 165, 175, 176, 352, 354, 356, 357, 367, 376, 390, 411, 412, 423, 431, 436, 459, 468, 484, 518, 519, 522, 549, 552, 565, 568, 573, 576, 581, 584, 596, 606, 614, 617, 618, 621, 630, 633, 650, 653, 658, 661, 686, 687, 693, 696, 705, 708, 709, 712, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 881, 885, 887, 902, 903, 906, 911, 913, 920, 922, 927, 929, 930, 945, 947, 967, 1011, 1014, 1054, 1059, 1060, 1062, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119], "one": [160, 165, 175, 176, 179, 180, 184, 193, 278, 281, 282, 286, 289, 296, 298, 320, 321, 322, 323, 334, 335, 338, 339, 353, 354, 360, 363, 366, 367, 368, 370, 371, 372, 375, 376, 378, 390, 412, 413, 423, 431, 438, 440, 443, 468, 497, 498, 499, 500, 512, 519, 523, 536, 666, 756, 757, 759, 760, 761, 785, 789, 806, 809, 812, 813, 881, 903, 906, 907, 909, 917, 919, 923, 925, 942, 944, 945, 947, 967, 968, 972, 981, 984, 985, 988, 1001, 1004, 1005, 1007, 1010, 1056, 1058, 1066, 1067, 1069, 1071, 1072, 1073, 1074, 1075, 1087, 1088, 1091, 1115, 1129], "torch": [160, 165, 172, 354, 358, 363, 364, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 390, 409, 410, 431, 452, 453, 468, 509, 756, 818, 967, 981, 984, 1129], "tensorflow": [160, 165, 172, 175, 176, 354, 355, 368, 369, 370, 371, 373, 378, 390, 1129], "mxnet": [160, 165, 175, 355, 368, 369, 370, 373, 378, 1129], "either": [160, 165, 172, 179, 180, 353, 354, 356, 359, 360, 363, 364, 367, 368, 369, 373, 375, 376, 390, 412, 418, 518, 532, 535, 549, 552, 609, 634, 637, 650, 653, 654, 657, 662, 665, 666, 669, 688, 691, 709, 712, 717, 720, 721, 724, 742, 756, 777, 802, 806, 807, 881, 903, 906, 1027, 1028, 1029, 1030, 1087, 1104, 1107, 1112, 1150, 1161, 1162, 1163], "doesn": [160, 165, 353, 356, 360, 368, 373, 390], "matter": [160, 165, 174, 360], "been": [160, 165, 354, 359, 363, 364, 367, 368, 369, 371, 373, 389, 390, 468, 487, 756, 778, 779, 780, 1054, 1055], "ivy_np": [160, 165], "ivy_jax": [160, 165], "subsequ": [160, 166, 353, 360, 362, 363, 366, 370, 371, 377], "call": [160, 166, 172, 175, 181, 182, 184, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 390, 468, 512, 756, 811, 816, 827, 830, 841, 1031, 1032, 1037, 1041, 1042, 1150, 1161, 1162, 1163, 1166, 1170], "ndarrai": [160, 166, 366, 368, 369, 370, 371, 375, 412, 414, 424, 756, 825], "Or": [160, 166, 376], "jaxlib": [160, 166, 353, 368, 369, 371, 375], "xla_extens": [160, 166, 368, 369, 371, 375], "devicearrai": [160, 166, 375], "try_import_ivy_jax": 160, "warn": [160, 167, 168, 169, 170, 171], "try_import_ivy_mxnet": 160, "try_import_ivy_numpi": 160, "try_import_ivy_tf": 160, "try_import_ivy_torch": 160, "unset_backend": [160, 364], "unset": [160, 172, 364, 373, 375], "adjust": [160, 172, 1087, 1108, 1111, 1116, 1119], "previous": [160, 172, 353, 356, 362, 363, 373, 756, 767], "implement": [160, 172, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 390, 431, 437, 459, 468, 513, 518, 519, 522, 524, 527, 528, 531, 537, 540, 541, 544, 545, 549, 552, 585, 588, 589, 592, 606, 610, 613, 650, 653, 654, 657, 658, 661, 662, 665, 688, 691, 705, 708, 709, 712, 721, 724, 725, 728, 742, 747, 881, 894, 896, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1129], "wa": [160, 172, 175, 179, 180, 360, 373, 375, 756, 827, 1031, 1044, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "last": [160, 172, 176, 179, 180, 354, 360, 364, 390, 401, 406, 468, 487, 868, 878, 881, 885, 887, 891, 893, 907, 909, 939, 941, 942, 944, 951, 957, 960, 962, 965, 967, 985, 988, 1001, 1004, 1006, 1011, 1014, 1076, 1077, 1080, 1082, 1085, 1120, 1121, 1124, 1125, 1128, 1150, 1160], "henc": [160, 172, 1071, 1072, 1073, 1075], "here": [160, 172, 353, 354, 355, 358, 360, 367, 371, 373, 374, 375, 376, 377, 378, 389, 390], "tensor": [160, 172, 174, 179, 180, 358, 363, 364, 366, 368, 369, 370, 371, 373, 375, 376, 377, 378, 390, 412, 421, 422, 431, 449, 518, 557, 560, 686, 687, 756, 809, 812, 813, 868, 876, 878, 881, 936, 938, 967, 981, 984, 997, 1000, 1006, 1054, 1055, 1066, 1069, 1129, 1150, 1158, 1160], "howev": [160, 172, 175, 353, 355, 359, 362, 363, 364, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 390], "befor": [160, 172, 179, 180, 353, 354, 355, 359, 362, 366, 368, 369, 370, 373, 376, 390, 468, 512, 518, 752, 755, 868, 879, 880, 1027, 1028, 1029, 1031, 1043, 1071, 1072, 1073, 1075, 1087, 1104, 1107, 1112], "becom": [160, 172, 174, 176, 354, 360, 367, 373, 378, 390, 967, 968, 971], "swap": [160, 172, 967, 1015, 1018], "python": [160, 172, 173, 174, 175, 353, 354, 356, 373, 375, 376, 390, 412, 413, 468, 507, 517, 518, 709, 712, 1129, 1135], "op": [160, 172, 358, 373, 390], "eagertensor": [160, 172], "def": [161, 355, 358, 360, 363, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 432, 433, 434, 469, 476, 479, 831, 1129, 1142, 1145, 1148], "ml": [173, 175, 176, 352, 372, 373, 374, 376, 377, 378, 389, 1129, 1135], "explos": [173, 175, 1129], "A": [173, 174, 175, 176, 179, 180, 181, 182, 183, 356, 357, 362, 363, 367, 368, 369, 373, 376, 390, 412, 417, 424, 468, 477, 478, 512, 518, 701, 704, 756, 792, 824, 881, 890, 917, 919, 926, 927, 929, 930, 967, 1006, 1011, 1014, 1031, 1032, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1087, 1088, 1091, 1115, 1120, 1121, 1124, 1125, 1128, 1129, 1172, 1173], "huge": [173, 175, 376, 1129], "number": [173, 174, 179, 180, 181, 182, 183, 184, 353, 360, 367, 369, 370, 373, 376, 378, 409, 410, 411, 412, 413, 414, 417, 421, 422, 423, 424, 431, 438, 450, 451, 454, 456, 457, 459, 468, 504, 505, 506, 518, 532, 549, 552, 581, 584, 596, 614, 617, 618, 621, 686, 687, 688, 691, 705, 708, 709, 712, 713, 716, 717, 720, 752, 755, 756, 757, 760, 783, 792, 793, 808, 826, 829, 868, 879, 881, 890, 894, 896, 911, 913, 926, 930, 942, 944, 967, 968, 971, 977, 980, 989, 992, 993, 996, 1001, 1004, 1006, 1011, 1014, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1054, 1055, 1064, 1066, 1069, 1071, 1072, 1073, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161], "tool": [173, 176, 354, 374, 378, 389, 390, 1129], "have": [173, 174, 175, 176, 179, 180, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 389, 390, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 437, 438, 439, 451, 468, 513, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 768, 769, 771, 774, 778, 779, 780, 782, 785, 788, 796, 809, 812, 813, 830, 846, 848, 863, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129], "explod": [173, 174, 1129], "onto": [173, 174, 468, 497, 498, 1031, 1037, 1043, 1129], "scene": [173, 174, 357, 372, 374, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 1129], "b": [173, 176, 181, 182, 184, 185, 188, 190, 193, 210, 211, 212, 227, 229, 267, 278, 279, 281, 282, 285, 286, 289, 296, 298, 302, 303, 308, 309, 316, 317, 320, 321, 322, 323, 324, 325, 334, 335, 338, 339, 352, 357, 360, 363, 364, 367, 372, 373, 374, 376, 377, 378, 388, 431, 440, 442, 443, 444, 468, 490, 518, 519, 521, 522, 523, 532, 534, 536, 537, 540, 548, 553, 557, 560, 577, 580, 581, 583, 584, 589, 601, 614, 616, 618, 625, 626, 629, 666, 693, 696, 697, 700, 713, 716, 729, 732, 733, 736, 742, 743, 745, 747, 748, 750, 751, 756, 757, 759, 760, 761, 764, 765, 773, 774, 781, 784, 785, 787, 788, 789, 826, 830, 832, 834, 835, 836, 868, 871, 874, 875, 880, 881, 882, 884, 885, 887, 888, 917, 919, 927, 929, 936, 938, 948, 950, 951, 952, 955, 967, 968, 970, 971, 972, 981, 984, 985, 988, 993, 996, 1001, 1003, 1004, 1005, 1011, 1014, 1015, 1018, 1049, 1050, 1053, 1054, 1056, 1058, 1059, 1060, 1062, 1066, 1068, 1069, 1070, 1076, 1077, 1080, 1087, 1088, 1091, 1092, 1095, 1115, 1120, 1121, 1124, 1129, 1135], "why": [173, 175, 354, 367, 370, 371, 375, 1129], "unifi": [173, 175, 179, 180, 366, 373, 390, 468, 497, 498, 499, 500, 512, 1129], "should": [173, 175, 179, 180, 181, 182, 183, 184, 191, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 409, 410, 412, 423, 427, 428, 431, 439, 468, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 606, 609, 610, 613, 614, 630, 633, 634, 637, 638, 641, 642, 645, 650, 653, 654, 657, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 688, 691, 697, 700, 705, 708, 709, 712, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 767, 800, 809, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 868, 880, 881, 882, 884, 885, 887, 888, 891, 893, 900, 902, 903, 906, 911, 913, 917, 919, 920, 922, 923, 925, 927, 929, 930, 936, 938, 939, 941, 942, 944, 945, 947, 967, 997, 1000, 1054, 1065, 1066, 1067, 1068, 1071, 1072, 1073, 1075, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1129], "them": [173, 174, 175, 176, 362, 364, 366, 367, 373, 375, 376, 377, 390, 1129], "c": [173, 175, 176, 184, 296, 338, 339, 352, 357, 360, 363, 367, 372, 373, 374, 376, 390, 518, 697, 700, 756, 764, 765, 773, 826, 830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 868, 874, 967, 1011, 1014, 1056, 1058, 1066, 1069, 1087, 1088, 1091, 1108, 1111, 1115, 1116, 1119, 1129, 1135], "standard": [173, 357, 358, 359, 361, 362, 366, 370, 371, 390, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 451, 518, 519, 522, 532, 537, 540, 557, 560, 577, 580, 581, 584, 589, 614, 697, 700, 713, 716, 729, 732, 733, 736, 742, 747, 881, 888, 967, 981, 984, 985, 988, 1001, 1004, 1049, 1050, 1053, 1054, 1059, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1108, 1111, 1116, 1119, 1120, 1121, 1124, 1129, 1135, 1164, 1165], "re": [173, 174, 175, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 378, 390, 468, 512, 756, 778, 881, 936, 938, 967, 1001, 1004, 1066, 1070, 1129], "collabor": [173, 174, 175, 1129], "consortium": [173, 175, 1129, 1135], "data": [173, 175, 179, 180, 181, 182, 183, 357, 358, 359, 363, 365, 367, 369, 370, 371, 375, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 435, 436, 437, 439, 440, 443, 445, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 463, 467, 468, 470, 471, 472, 473, 474, 475, 480, 481, 482, 484, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 688, 691, 697, 700, 705, 708, 709, 712, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 764, 765, 802, 803, 805, 822, 830, 846, 848, 866, 868, 877, 881, 882, 884, 885, 887, 888, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 927, 929, 930, 936, 938, 939, 941, 942, 944, 945, 947, 967, 981, 984, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1007, 1010, 1011, 1014, 1054, 1065, 1066, 1067, 1068, 1069, 1076, 1077, 1080, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1135, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "api": [173, 174, 353, 354, 357, 359, 360, 362, 363, 365, 366, 368, 369, 370, 371, 372, 374, 376, 390, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 532, 537, 540, 557, 560, 577, 580, 581, 584, 589, 614, 697, 700, 713, 716, 729, 732, 733, 736, 742, 747, 881, 888, 967, 981, 984, 985, 988, 1001, 1004, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1120, 1121, 1124, 1129, 1135], "open": [174, 175, 176, 352, 353, 356, 359, 389, 412, 413, 1054, 1056, 1057, 1060, 1062, 1129], "project": [174, 175, 176, 353, 354, 356, 358, 364, 375, 377, 389, 390, 1054, 1055, 1059], "grown": 174, "consider": [174, 360, 371], "recent": [174, 175, 353, 354], "year": [174, 176, 390, 1129], "especi": [174, 353], "deep": [174, 179, 180, 352, 354, 355, 372, 376, 1129], "learn": [174, 175, 353, 355, 357, 363, 372, 378, 389, 518, 622, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 1027, 1028, 1029, 1030, 1129, 1166, 1167, 1168, 1169, 1170, 1171], "can": [174, 175, 176, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 389, 390, 412, 414, 424, 431, 440, 443, 468, 510, 511, 512, 881, 900, 967, 997, 1000, 1054, 1056, 1057, 1129, 1135], "seen": [174, 175, 360, 375, 376], "rapidli": 174, "increas": [174, 468, 492, 496, 500, 967, 977, 980, 1023, 1026, 1031, 1043], "github": [174, 354, 355, 359, 362], "repo": [174, 175, 176, 353, 354, 361, 373, 375, 376, 377, 378, 389, 1129, 1135], "term": [174, 354, 367, 868, 878, 1150, 1160], "time": [174, 175, 176, 353, 354, 355, 362, 363, 367, 368, 371, 373, 376, 378, 390, 830, 837, 839, 850, 852, 868, 878, 967, 1019, 1022, 1027, 1028, 1029, 1030, 1066, 1067, 1068, 1071, 1072, 1073, 1150, 1161, 1162, 1163], "These": [174, 175, 176, 354, 359, 360, 362, 363, 367, 368, 370, 371, 373, 374, 376, 377, 378, 390, 881, 894, 896, 1129, 1135], "written": [174, 353, 358, 359, 366, 370, 371, 373, 375, 378, 390], "mani": [174, 175, 176, 179, 180, 353, 354, 355, 359, 360, 363, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 390, 967, 1006], "differ": [174, 175, 176, 179, 180, 181, 182, 183, 353, 354, 357, 358, 359, 360, 362, 363, 366, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 390, 431, 451, 468, 489, 490, 493, 494, 518, 532, 688, 691, 737, 741, 868, 877, 967, 1011, 1014, 1087, 1104, 1107, 1112, 1129], "while": [174, 175, 179, 180, 181, 182, 183, 353, 354, 360, 364, 370, 377, 378, 390, 518, 674, 677, 678, 681, 1071, 1072, 1087, 1096, 1099], "wonder": [174, 176, 375], "thing": [174, 175, 176, 353, 354, 355, 364, 375, 376], "research": [174, 389], "develop": [174, 175, 176, 352, 353, 354, 355, 389, 390, 1129], "consid": [174, 175, 179, 180, 358, 363, 374, 375, 376, 518, 674, 677, 678, 681, 1071, 1072, 1073, 1075], "speed": 174, "evolv": 174, "sharabl": 174, "code": [174, 175, 176, 179, 180, 181, 182, 183, 184, 188, 279, 324, 325, 353, 354, 355, 356, 357, 359, 360, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 388, 390, 401, 403, 404, 405, 406, 407, 408, 468, 490, 513, 518, 577, 580, 733, 736, 830, 832, 834, 835, 836, 868, 874, 875, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1088, 1091, 1115, 1129, 1135], "significantli": 174, "hinder": [174, 371], "librari": [174, 175, 176, 373, 378, 388, 390, 468, 513, 518, 610, 613, 674, 677, 678, 681, 881, 894, 896, 1071, 1072, 1073, 1075, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1129], "outdat": 174, "month": 174, "rigor": 174, "maintain": [174, 354, 1076, 1077, 1080, 1082, 1085], "against": [174, 179, 180, 362, 390, 431, 438, 881, 902, 903, 906, 907, 909, 911, 913, 920, 922, 1066, 1067], "newest": 174, "version": [174, 175, 176, 353, 359, 373, 375, 881, 894, 896, 1129], "For": [174, 175, 176, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 390, 412, 413, 423, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 549, 552, 581, 584, 585, 588, 589, 592, 606, 609, 610, 613, 614, 650, 653, 654, 657, 662, 665, 666, 669, 688, 691, 705, 708, 709, 712, 713, 716, 721, 724, 725, 728, 729, 732, 742, 747, 752, 755, 830, 846, 848, 866, 881, 930, 939, 941, 967, 968, 971, 1011, 1014, 1071, 1072, 1073, 1075, 1087, 1092, 1095, 1100, 1103, 1112, 1139, 1140], "softwar": [174, 175, 353, 354], "pipelin": [174, 366, 378], "where": [174, 175, 176, 179, 180, 181, 182, 352, 353, 354, 355, 356, 359, 363, 364, 366, 367, 368, 369, 370, 373, 376, 377, 378, 390, 412, 419, 420, 423, 518, 549, 552, 606, 658, 661, 688, 691, 705, 708, 756, 796, 800, 809, 881, 894, 896, 902, 911, 913, 920, 922, 923, 925, 930, 932, 933, 935, 939, 941, 942, 944, 967, 968, 971, 977, 980, 981, 984, 989, 992, 1011, 1014, 1023, 1026, 1031, 1032, 1042, 1054, 1055, 1066, 1069, 1087, 1108, 1111, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129], "rapid": [174, 175, 353], "prototyp": 174, "vital": [174, 378], "signific": [174, 175, 390], "bottleneck": 174, "new": [174, 175, 176, 179, 180, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 365, 367, 368, 370, 372, 375, 378, 389, 412, 415, 418, 419, 420, 425, 426, 429, 430, 431, 463, 518, 548, 553, 556, 658, 661, 701, 704, 746, 751, 756, 778, 779, 780, 783, 784, 785, 788, 812, 813, 814, 815, 820, 821, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 967, 981, 984, 997, 1000, 1011, 1014, 1031, 1036, 1047, 1048, 1049, 1050, 1053, 1129, 1139, 1140, 1150, 1160, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171], "futur": [174, 176, 353, 354, 375, 390, 881, 894, 896], "avail": [174, 179, 180, 353, 354, 359, 369, 390, 468, 487, 503, 504, 505, 515, 756, 779], "specif": [174, 179, 180, 355, 363, 366, 367, 368, 369, 370, 371, 373, 374, 375, 377, 378, 389, 390, 431, 459, 468, 510, 513, 518, 674, 677, 678, 681, 756, 778, 779, 780, 807, 881, 894, 896, 936, 938, 967, 1011, 1014, 1027, 1028, 1029, 1030, 1054, 1055, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1129, 1132, 1134, 1135, 1162, 1163], "quickli": [174, 176, 353, 354, 376, 377], "obsolet": [174, 176], "user": [174, 175, 353, 354, 356, 357, 362, 364, 367, 370, 372, 390, 1150, 1161, 1162, 1163], "constantli": 174, "invent": 174, "wheel": 174, "desir": [174, 179, 180, 431, 437, 440, 443, 468, 513, 756, 796, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "provid": [174, 179, 180, 353, 354, 359, 360, 363, 366, 367, 368, 369, 370, 371, 373, 377, 389, 390, 409, 410, 412, 423, 431, 446, 447, 448, 455, 459, 467, 468, 487, 756, 777, 809, 813, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 881, 942, 944, 967, 985, 988, 1011, 1014, 1066, 1067, 1087, 1108, 1111, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1166, 1167, 1168, 1169, 1170, 1171], "simultan": [174, 176], "modern": [174, 175], "simpl": [174, 353, 354, 358, 359, 360, 362, 363, 366, 367, 368, 369, 370, 373, 375, 377, 378, 390, 756, 781], "scalabl": [174, 373], "must": [174, 176, 179, 180, 181, 182, 183, 353, 354, 355, 358, 359, 360, 363, 366, 367, 368, 369, 371, 373, 377, 378, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 437, 438, 439, 468, 497, 498, 499, 500, 512, 513, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 768, 769, 771, 774, 778, 779, 780, 782, 785, 788, 796, 809, 812, 813, 830, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1166, 1170], "determin": [174, 179, 180, 359, 363, 367, 368, 369, 431, 440, 443, 445, 450, 455, 456, 457, 467, 468, 503, 504, 505, 515, 518, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 565, 568, 569, 572, 573, 576, 577, 580, 585, 588, 589, 592, 593, 606, 609, 610, 613, 630, 633, 634, 637, 638, 641, 650, 653, 654, 657, 662, 665, 666, 669, 682, 685, 688, 691, 705, 708, 709, 712, 721, 724, 725, 728, 729, 732, 742, 746, 747, 751, 756, 757, 760, 764, 765, 795, 797, 801, 802, 803, 804, 805, 822, 829, 830, 846, 848, 868, 879, 881, 882, 884, 885, 887, 888, 890, 891, 893, 900, 902, 903, 906, 911, 913, 917, 919, 920, 922, 926, 927, 929, 939, 941, 942, 944, 945, 947, 1027, 1028, 1029, 1030, 1071, 1072, 1073, 1075, 1120, 1121, 1124, 1125, 1128], "exactli": [174, 176, 360, 367, 369, 1129, 1135], "common": [174, 179, 180, 355, 360, 363, 365, 367, 369, 390], "ground": [174, 362], "li": 174, "between": [174, 179, 180, 181, 182, 183, 360, 362, 363, 366, 367, 371, 372, 374, 375, 376, 378, 389, 412, 413, 431, 451, 518, 549, 552, 705, 708, 951, 952, 955, 957, 960, 962, 965, 967, 981, 984, 1011, 1014, 1031, 1037, 1054, 1056, 1057, 1071, 1072, 1073, 1075, 1129, 1166, 1168], "find": [174, 179, 180, 353, 354, 373, 376, 1071, 1072, 1073, 1075, 1129], "exist": [174, 175, 179, 180, 181, 182, 353, 355, 356, 359, 360, 361, 362, 363, 364, 365, 370, 373, 390, 756, 777, 1166, 1170], "essenti": [174, 175, 355, 360, 363, 369], "order": [174, 179, 180, 181, 182, 183, 353, 354, 356, 359, 360, 364, 366, 367, 368, 369, 371, 375, 376, 378, 390, 518, 549, 552, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 881, 894, 896, 907, 909, 930, 932, 933, 935, 945, 947, 967, 985, 988, 1027, 1028, 1029, 1066, 1069, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1172, 1173], "design": [174, 175, 357, 370, 373, 375, 390], "univers": 174, "abstract": [174, 367, 377, 390, 468, 483, 1166, 1170], "In": [174, 176, 353, 354, 358, 359, 360, 363, 364, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 390, 468, 507, 513, 514, 517, 518, 532, 688, 691, 709, 712, 756, 762, 800, 967, 997, 1000, 1054, 1060, 1062, 1129], "languag": [174, 176, 373], "first": [174, 175, 353, 354, 356, 360, 363, 366, 367, 371, 373, 375, 376, 378, 409, 410, 412, 421, 422, 431, 458, 463, 468, 487, 499, 518, 532, 535, 557, 560, 565, 568, 569, 572, 573, 576, 577, 580, 596, 598, 601, 609, 617, 618, 621, 625, 626, 629, 642, 645, 646, 649, 666, 669, 670, 673, 678, 681, 682, 685, 688, 691, 697, 700, 705, 708, 737, 741, 756, 764, 830, 841, 881, 885, 887, 891, 893, 894, 896, 903, 906, 917, 919, 923, 925, 930, 936, 938, 942, 944, 967, 973, 976, 1001, 1004, 1011, 1014, 1015, 1018, 1027, 1028, 1029, 1030, 1031, 1032, 1041, 1042, 1054, 1065, 1066, 1067, 1068, 1071, 1072, 1073, 1150, 1161, 1162, 1163, 1166, 1170], "see": [174, 352, 353, 354, 355, 361, 363, 367, 369, 371, 375, 376, 389, 390, 412, 413, 418, 421, 422, 431, 439, 459, 518, 532, 535, 557, 560, 565, 568, 569, 572, 573, 576, 577, 580, 593, 609, 610, 613, 642, 645, 666, 669, 678, 681, 682, 685, 688, 691, 697, 700, 705, 708, 709, 712, 737, 741, 881, 902, 911, 913, 920, 922, 927, 929, 942, 944, 945, 947, 1066, 1068, 1071, 1072, 1073, 1075, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129], "clear": [174, 175, 176, 354, 355, 360, 362, 368, 369, 373, 375, 468, 486], "front": [174, 372, 373, 376, 1129, 1135], "runner": 174, "look": [174, 353, 354, 356, 358, 360, 363, 364, 367, 368, 369, 371, 373, 375, 377, 378, 1129], "littl": [174, 375], "deeper": [174, 354, 357, 372, 468, 492, 496, 500, 1031, 1042, 1043], "follow": [174, 175, 179, 180, 353, 354, 355, 356, 358, 359, 360, 362, 364, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 390, 431, 454, 468, 512, 518, 709, 712, 756, 798, 799, 800, 820, 821, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 868, 879, 880, 881, 923, 925, 945, 947, 1031, 1037, 1043, 1071, 1072, 1073, 1075, 1129, 1150, 1160, 1166, 1170], "core": [174, 353, 355, 369, 373, 378, 468, 504, 1129], "principl": 174, "oper": [174, 179, 180, 181, 182, 184, 353, 355, 359, 360, 363, 366, 367, 369, 370, 376, 377, 412, 421, 422, 431, 459, 518, 532, 573, 576, 577, 580, 601, 625, 626, 629, 693, 696, 697, 700, 709, 712, 733, 736, 756, 766, 778, 779, 780, 822, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 868, 869, 870, 871, 872, 873, 874, 875, 877], "expos": [174, 373, 377, 756, 772], "almost": [174, 354, 367, 374, 376], "ident": [174, 176, 179, 180, 363, 365, 367, 375, 376, 390, 468, 502, 1031, 1044, 1129], "uniqu": [174, 363, 367, 390, 468, 477, 478, 1027, 1028, 1029, 1030, 1031, 1037, 1071, 1072, 1073, 1074, 1075], "syntax": [174, 175], "There": [174, 353, 354, 360, 363, 366, 367, 368, 373, 376, 390], "onli": [174, 179, 180, 352, 353, 354, 358, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 388, 390, 468, 508, 518, 674, 677, 678, 681, 881, 903, 906, 923, 925, 967, 985, 988, 1031, 1032, 1033, 1041, 1042, 1066, 1067, 1068, 1087, 1096, 1099, 1129, 1166, 1167, 1168, 1169, 1170, 1171], "wai": [174, 175, 353, 364, 370, 375, 376, 377, 378, 390], "unsurprisingli": [174, 360], "fundament": [174, 367, 373], "consist": [174, 179, 180, 366, 370, 468, 500, 881, 894, 896, 1087, 1088, 1091, 1115, 1162, 1163], "each": [174, 175, 176, 179, 180, 181, 182, 183, 184, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 372, 373, 375, 376, 378, 389, 390, 401, 404, 405, 407, 412, 423, 431, 438, 468, 477, 478, 489, 490, 491, 492, 493, 494, 495, 499, 512, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 757, 760, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 868, 869, 870, 871, 872, 873, 874, 875, 876, 881, 882, 884, 885, 887, 888, 894, 896, 902, 903, 906, 911, 913, 914, 916, 920, 922, 927, 929, 930, 967, 977, 980, 993, 996, 1001, 1004, 1006, 1011, 1014, 1019, 1022, 1023, 1026, 1031, 1037, 1044, 1054, 1055, 1066, 1069, 1071, 1072, 1073, 1087, 1088, 1091, 1115, 1129, 1135, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173], "veri": [174, 175, 353, 354, 358, 360, 362, 363, 367, 369, 370, 371, 374, 376, 377, 378, 390, 1129], "similar": [174, 358, 367, 368, 369, 376, 390, 518, 709, 712, 868, 879, 1150, 1161], "convent": [174, 389, 881, 903, 906, 1087, 1088, 1091, 1115], "those": [174, 179, 180, 353, 354, 355, 367, 373, 378, 412, 413, 830, 866, 881, 923, 925, 930, 967, 968, 971], "introduc": [174, 367, 376, 967, 1001, 1004, 1071, 1072], "2006": 174, "therefor": [174, 354, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 373, 375, 377, 390, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 532, 537, 540, 581, 584, 614, 697, 700, 729, 732, 733, 736, 742, 756, 784, 868, 871, 880, 967, 1001, 1004, 1049, 1050, 1053, 1087, 1092, 1095, 1120, 1121, 1124], "present": [174, 179, 180, 354, 361, 367, 368, 369, 370, 371, 373], "itself": [174, 353, 354, 367, 370, 371, 377, 389, 390, 756, 762, 1031, 1043], "cut": 174, "cloth": 174, "adher": [174, 175, 359, 361, 373, 378], "semant": [174, 373, 378, 518, 709, 712], "up": [174, 175, 176, 352, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 389, 390], "hopefulli": [174, 175, 176, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389], "paint": [174, 373], "pictur": [174, 373], "how": [174, 176, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 389, 390, 1129, 1135, 1150, 1161, 1162, 1163], "pleas": [174, 175, 176, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 1129], "discuss": [174, 175, 176, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 390, 1129], "faq": [174, 175, 176, 373, 375, 376, 377, 378, 389], "reach": [174, 175, 176, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 468, 492, 496, 500, 1031, 1043], "discord": [174, 175, 176, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 389, 1129], "you": [174, 175, 176, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 389, 390, 1129, 1135], "question": [174, 175, 176, 353, 354, 360, 362, 373, 375, 376, 377, 378, 389, 390, 1129], "central": 175, "goal": [175, 355], "being": [175, 176, 179, 180, 353, 354, 360, 362, 365, 366, 367, 368, 369, 370, 371, 373, 376, 389, 390, 412, 413, 756, 811, 816, 1071, 1074, 1129], "would": [175, 353, 354, 356, 357, 359, 360, 362, 364, 365, 366, 367, 370, 371, 372, 373, 375, 377, 378, 390, 401, 406, 468, 513, 1129], "entir": [175, 176, 179, 180, 354, 360, 361, 362, 366, 367, 370, 375, 376, 377, 378, 390, 468, 512, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1150, 1159], "forgiven": 175, "rais": [175, 179, 180, 354, 370, 373, 375, 431, 439, 518, 606, 705, 708, 756, 766, 791, 800, 814, 821, 827, 881, 903, 906, 910, 942, 944, 967, 1007, 1010, 1011, 1014, 1066, 1069, 1087, 1092, 1095, 1100, 1103, 1120, 1121, 1124, 1125, 1128, 1162, 1163, 1166, 1170], "eyebrow": 175, "somehow": 175, "pytorch": [175, 176, 355, 363, 368, 369, 370, 371, 373, 375, 378, 390, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 1129, 1166, 1167, 1168, 1169, 1170, 1171], "other": [175, 179, 180, 181, 182, 184, 353, 354, 358, 359, 360, 362, 363, 366, 367, 370, 373, 375, 377, 378, 388, 389, 390, 409, 410, 412, 413, 518, 610, 613, 756, 757, 760, 762, 830, 841, 1054, 1060, 1062, 1071, 1074, 1087, 1108, 1111, 1116, 1119, 1129], "strong": [175, 390], "industri": 175, "back": [175, 366, 372, 373, 375, 390, 1129, 1135, 1162, 1163, 1166, 1170], "momentum": 175, "won": [175, 176, 354, 378], "ad": [175, 184, 191, 350, 351, 353, 354, 355, 358, 359, 360, 362, 363, 365, 366, 367, 368, 370, 371, 373, 377, 390, 756, 820, 821, 881, 894, 896, 967, 981, 984, 1172, 1173], "just": [175, 176, 353, 354, 359, 360, 362, 363, 370, 373, 375, 376, 390, 1087, 1088, 1091, 1115, 1150, 1159], "make": [175, 176, 353, 354, 355, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 373, 375, 376, 378, 468], "problem": [175, 354, 366, 375], "even": [175, 176, 353, 354, 359, 363, 368, 369, 371, 375, 376, 377, 378, 390, 518, 705, 708, 713, 716], "wors": 175, "rather": [175, 179, 180, 358, 359, 362, 367, 378, 390, 412, 413, 468, 512, 756, 802, 803, 805, 830, 846, 848], "funni": 175, "comic": 175, "strip": 175, "easi": [175, 353, 354, 363, 367], "feasibl": 175, "space": [175, 412, 413, 421, 422, 756, 783], "unlik": [175, 360, 367, 468], "charger": 175, "charact": 175, "encod": [175, 376, 756, 783], "instant": [175, 1129], "messag": [175, 354, 373, 375, 1175, 1176], "much": [175, 354, 358, 366, 367, 370, 373, 375, 376], "doe": [175, 179, 180, 354, 356, 357, 358, 359, 360, 362, 363, 364, 368, 370, 371, 373, 375, 376, 390, 518, 577, 580, 756, 800, 967, 1006], "mandat": [175, 362, 370], "adopt": [175, 354, 366], "continu": [175, 176, 361, 362, 390], "own": [175, 176, 353, 359, 373, 390], "signatur": [175, 358, 359, 360, 367, 368, 369, 370, 371, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 537, 540, 577, 580, 581, 584, 589, 614, 697, 700, 729, 732, 733, 736, 967, 981, 984, 1001, 1004, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095], "replac": [175, 179, 180, 354, 356, 360, 362, 365, 367, 368, 369, 373, 375, 378, 390, 756, 812, 813, 967, 968, 971, 1054, 1055], "your": [175, 176, 352, 353, 355, 356, 358, 359, 376, 377, 390, 1129], "10": [175, 177, 178, 179, 180, 181, 182, 183, 184, 237, 292, 296, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 353, 356, 360, 367, 373, 375, 376, 412, 419, 422, 468, 518, 557, 560, 561, 564, 589, 601, 625, 626, 629, 654, 657, 729, 732, 756, 774, 784, 811, 816, 830, 850, 851, 852, 853, 868, 874, 881, 888, 891, 893, 917, 919, 936, 938, 967, 985, 988, 993, 996, 1006, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1066, 1069, 1071, 1072, 1087, 1088, 1091, 1092, 1095, 1115, 1166, 1168], "100": [175, 176, 184, 296, 338, 339, 376, 377, 378, 390, 518, 729, 732, 1056, 1058, 1129], "despit": [175, 367, 369], "distinct": [175, 359, 367, 370, 372, 1071, 1072, 1073, 1075, 1129], "still": [175, 179, 180, 359, 362, 368, 375, 377, 390, 1129], "believ": [175, 354], "share": [175, 179, 180, 360, 362, 363, 364, 367, 373, 431, 463], "bring": [175, 373, 374], "benefit": [175, 176, 353, 354, 366, 367, 370, 375, 376, 390], "unrel": [175, 354], "what": [175, 176, 354, 357, 359, 360, 365, 367, 371, 372, 373, 375, 376, 377, 378, 389, 390, 1129], "again": [175, 176, 354, 358, 360, 367, 370, 376, 378, 390], "contrari": 175, "bumpi": 175, "road": 175, "allud": [175, 376], "most": [175, 179, 180, 353, 354, 358, 362, 363, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 390, 881, 894, 896], "technolog": 175, "sector": [175, 518, 527, 528, 531, 541, 544, 548, 553, 556, 588, 592, 746, 751], "full": [175, 176, 181, 182, 354, 359, 368, 371, 373, 390, 412, 431, 451, 518, 601, 625, 626, 629, 868, 874, 881, 923, 925, 927, 929, 930, 1049, 1050, 1053], "success": 175, "reason": [175, 354, 358, 360, 363, 366, 367, 368, 370, 373, 375, 518, 709, 712], "build": [175, 352, 353, 363, 372, 374, 377, 378, 390, 1071, 1072, 1073, 1075, 1129, 1150, 1161, 1162, 1163], "custom": [175, 377], "comput": [175, 176, 179, 180, 353, 363, 367, 373, 376, 390, 468, 512, 518, 532, 557, 560, 569, 572, 577, 580, 598, 601, 602, 605, 622, 625, 626, 629, 642, 645, 646, 649, 670, 673, 674, 677, 678, 681, 682, 685, 688, 691, 693, 696, 697, 700, 756, 768, 769, 771, 774, 775, 830, 832, 835, 837, 839, 841, 842, 844, 850, 852, 854, 856, 858, 860, 863, 865, 868, 869, 870, 871, 872, 873, 874, 875, 877, 879, 881, 882, 884, 885, 887, 890, 894, 896, 897, 899, 900, 903, 906, 907, 909, 923, 925, 926, 927, 929, 930, 942, 944, 945, 947, 951, 952, 955, 957, 960, 962, 965, 1031, 1037, 1071, 1072, 1073, 1075, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119], "thank": [175, 376], "interoper": 175, "compon": [175, 373], "bio": [175, 353], "hardwar": [175, 353], "initi": [175, 179, 180, 181, 182, 183, 354, 364, 368, 369, 468, 868, 878, 1143, 1144, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1166, 1170], "pcie": 175, "interfac": [175, 378, 390], "motherboard": 175, "raid": 175, "storag": [175, 376], "virtual": [175, 354, 356], "bluetooth": 175, "wireless": 175, "exchang": 175, "btx": 175, "factor": [175, 468, 477, 510, 511, 512, 830, 832, 835, 837, 839, 850, 852, 854, 856, 868, 869, 870, 871, 872, 873, 874, 875, 881, 882, 884, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1166, 1167, 1168, 1169], "sata": 175, "connect": [175, 353, 377, 378, 1150, 1160, 1161], "host": [175, 390], "bu": 175, "adapt": [175, 830, 854, 856, 1166, 1169], "html": [175, 356, 359, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 537, 540, 577, 580, 581, 584, 589, 614, 697, 700, 729, 732, 733, 736, 967, 981, 984, 1001, 1004, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095], "enabl": [175, 179, 180, 181, 182, 183, 353, 354, 362, 363, 366, 367, 370, 372, 373, 374, 376, 378, 390], "anyon": [175, 352, 390], "websit": 175, "tcp": 175, "ip": 175, "node": [175, 179, 180, 367, 1031, 1032, 1041, 1042], "commun": [175, 352, 354, 355, 390, 1129, 1135], "network": [175, 363, 367, 373, 377, 389, 868, 877, 1129, 1136, 1150, 1162, 1163], "smtp": 175, "possibl": [175, 352, 353, 354, 355, 359, 360, 362, 367, 368, 370, 373, 376, 389, 390, 756, 806, 824, 1087, 1092, 1095, 1100, 1103], "send": 175, "gmail": 175, "outlook": 175, "pop": 175, "email": 175, "ieee": [175, 411, 431, 451, 518, 532, 610, 613, 688, 691, 709, 712, 729, 732], "754": [175, 411, 431, 451, 518, 532, 610, 613, 688, 691, 709, 712, 729, 732], "allow": [175, 373, 390, 412, 421, 422, 756, 806, 1162, 1163], "calcul": [175, 179, 180, 181, 182, 183, 359, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 549, 552, 585, 588, 589, 592, 593, 606, 609, 610, 613, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 688, 691, 705, 708, 721, 724, 725, 728, 729, 732, 737, 741, 742, 747, 951, 952, 955, 957, 960, 962, 965, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119], "live": [175, 176], "depend": [175, 353, 354, 359, 365, 367, 368, 373, 390, 431, 437, 518, 519, 522, 524, 527, 528, 531, 537, 540, 541, 544, 545, 549, 552, 585, 588, 589, 592, 606, 610, 613, 650, 653, 654, 657, 658, 661, 662, 665, 705, 708, 721, 724, 725, 728, 742, 747, 881, 894, 896, 923, 925, 927, 929, 930, 1066, 1070, 1076, 1077, 1080, 1082, 1085], "did": [175, 355, 378], "aris": [175, 390], "until": [175, 354, 390, 1129], "substanti": [175, 354, 362, 366], "innov": 175, "growth": 175, "usag": [175, 373, 468, 512], "relev": [175, 353, 355, 360, 367, 368, 376, 1166, 1167, 1168, 1169, 1170, 1171], "area": [175, 370, 388, 518, 527, 528, 531, 541, 544, 548, 553, 556, 588, 592, 746, 751, 1129], "necess": 175, "parti": [175, 390], "could": [175, 176, 353, 354, 360, 362, 367, 368, 370, 373, 375, 376, 377, 1071, 1072, 1073, 1075], "easili": [175, 354, 376, 377, 378, 390, 1129], "engag": [175, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "regard": [175, 367, 468], "effect": [175, 359, 366, 367, 371, 390, 412, 423, 830, 858, 860, 1087, 1108, 1111, 1116, 1119], "2015": 175, "sinc": [175, 353, 354, 390], "alongsid": 175, "machin": [175, 353, 363, 389, 431, 451, 454, 518, 622, 881, 902, 911, 913, 920, 922], "given": [175, 176, 179, 180, 353, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 375, 377, 378, 389, 412, 413, 415, 421, 422, 468, 501, 507, 509, 510, 511, 512, 514, 517, 756, 774, 775, 785, 788, 812, 813, 828, 830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 868, 869, 870, 871, 872, 873, 874, 875, 881, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 981, 984, 985, 988, 993, 996, 1001, 1004, 1006, 1019, 1022, 1031, 1038, 1039, 1054, 1056, 1057, 1059, 1060, 1062, 1065, 1076, 1082, 1085, 1139, 1140], "frame": [175, 389], "matur": [175, 390], "state": [175, 359, 371, 372, 373, 374, 376, 389, 518, 688, 691, 868, 878, 1129, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173], "than": [175, 179, 180, 354, 358, 360, 362, 367, 370, 373, 376, 377, 378, 390, 412, 413, 431, 451, 468, 512, 518, 524, 527, 528, 531, 537, 540, 549, 552, 565, 568, 573, 576, 581, 584, 588, 592, 596, 614, 617, 618, 621, 650, 653, 654, 657, 662, 665, 686, 705, 708, 709, 712, 717, 720, 729, 732, 752, 755, 756, 802, 803, 805, 830, 846, 848, 881, 885, 887, 902, 903, 906, 911, 913, 920, 922, 945, 947, 967, 968, 971, 985, 988, 1007, 1010, 1054, 1060, 1062, 1071, 1072, 1073, 1075, 1087, 1104, 1107, 1108, 1111, 1112, 1116, 1119], "preced": [175, 377], "mention": [175, 353, 354, 360, 363, 370, 371], "aros": 175, "70": [175, 881, 917, 919, 1087, 1088, 1091, 1115], "80": [175, 881, 917, 919, 1087, 1088, 1091, 1115], "90": [175, 184, 296, 338, 339, 518, 577, 580, 713, 716, 881, 917, 919, 1056, 1058, 1087, 1088, 1091, 1115], "effort": [175, 352, 390], "stage": [175, 352, 354, 356, 357, 1129], "complet": [175, 179, 180, 354, 355, 366, 367, 375, 376, 881, 923, 925], "natur": [175, 360, 366, 367, 389, 518, 606, 650, 653, 658, 661, 881, 890, 926], "like": [175, 353, 354, 356, 357, 358, 359, 360, 362, 369, 370, 371, 372, 373, 375, 376, 377, 378, 389, 390, 830, 846, 848, 1054, 1060, 1062, 1129], "certainli": 175, "mission": [175, 1129], "creat": [175, 179, 180, 352, 353, 354, 356, 368, 369, 370, 373, 374, 377, 388, 389, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 424, 425, 426, 429, 430, 468, 477, 478, 756, 784, 785, 788, 809, 812, 813, 824, 830, 865, 1054, 1055, 1056, 1057, 1060, 1062, 1129, 1135, 1139, 1140, 1141, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173], "At": [175, 355], "process": [175, 176, 352, 353, 354, 356, 363, 367, 373, 378, 468, 477, 478, 507, 517], "ourselv": 175, "lead": [175, 176, 179, 180, 181, 182, 183, 390, 881, 923, 925, 930], "quansight": 175, "compani": 175, "made": [175, 354, 355, 367, 370, 373, 375], "organ": [175, 358, 363, 366, 367], "panda": 175, "scipi": 175, "conda": [175, 353, 356], "dask": [175, 1071, 1072, 1073, 1075], "apach": 175, "onnx": 175, "scikit": 175, "jupyt": 175, "aw": 175, "cupi": 175, "net": [175, 176, 373, 378], "sympi": 175, "rai": [175, 518, 549, 552], "modin": 175, "spyder": 175, "includ": [175, 179, 180, 354, 355, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 389, 390, 412, 413, 414, 424, 756, 795, 829, 881, 945, 947, 1031, 1032, 1054, 1060, 1062, 1066, 1068, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1132, 1134, 1150, 1160, 1161, 1164, 1165], "member": [175, 354], "googl": [175, 1129], "octoml": 175, "einop": [175, 179, 180, 756, 778, 779, 780], "further": [175, 176, 354, 356, 360, 366, 372, 376, 377, 1129], "sponsor": 175, "lg": 175, "electron": 175, "microsoft": 175, "d": [175, 176, 184, 296, 338, 339, 352, 353, 357, 367, 376, 756, 765, 773, 868, 869, 870, 871, 872, 873, 874, 875, 881, 891, 893, 917, 919, 1056, 1058, 1129, 1135], "shaw": 175, "intel": 175, "togeth": [175, 179, 180, 366, 367, 377, 378, 390, 1172, 1173], "major": [175, 368, 369, 390, 1066, 1069], "involv": [175, 352, 356, 357, 368, 378, 431, 459, 518, 532, 688, 691, 1129, 1135], "anoth": [175, 179, 180, 353, 354, 363, 367, 368, 375, 378, 412, 418, 431, 438, 440, 443], "promis": 175, "pursuit": 175, "unif": [175, 352, 375, 1129, 1135], "clearli": [175, 355, 360], "lot": [175, 176, 365, 375, 390], "thought": [175, 353, 354, 371], "care": [175, 354, 378], "attent": [175, 354, 366, 367, 868, 879, 880, 1150, 1161], "gone": [175, 372], "simplifi": [175, 373, 374, 375, 377], "compat": [175, 371, 390, 431, 439, 518, 532, 535, 549, 552, 557, 560, 565, 568, 569, 572, 573, 576, 577, 580, 593, 596, 598, 601, 609, 617, 618, 621, 625, 626, 629, 642, 645, 646, 649, 666, 669, 670, 673, 678, 681, 682, 685, 688, 691, 697, 700, 705, 708, 709, 712, 737, 741, 881, 902, 911, 913, 920, 922, 927, 929, 936, 938, 942, 944, 945, 947, 967, 997, 1000, 1066, 1068, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129], "excit": [175, 352, 357, 1129], "complianc": 175, "hope": [175, 390], "due": [175, 353, 367, 370, 518, 688, 691], "suit": [175, 353, 357, 361, 362, 376, 389], "some": [175, 176, 179, 180, 353, 354, 355, 358, 359, 360, 363, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 389, 390, 518, 610, 613, 830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 866, 868, 876, 1129, 1150, 1158], "motiv": [175, 375], "great": [175, 176, 362, 373, 375], "convinc": 175, "celebr": 175, "encourag": [175, 389, 390, 1129, 1135], "foundat": 175, "point": [176, 354, 359, 360, 366, 370, 371, 373, 375, 376, 389, 411, 412, 413, 415, 417, 419, 425, 429, 431, 437, 451, 456, 459, 518, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 577, 580, 581, 584, 585, 588, 589, 592, 593, 606, 609, 610, 613, 614, 650, 653, 654, 657, 662, 665, 666, 669, 688, 691, 705, 708, 709, 712, 713, 716, 721, 724, 725, 728, 729, 732, 742, 746, 747, 751, 752, 755, 881, 882, 884, 888, 894, 896, 897, 899, 900, 902, 911, 913, 920, 922, 923, 925, 927, 929, 930, 945, 947, 1071, 1072, 1073, 1075, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119], "mai": [176, 353, 354, 367, 375, 377, 412, 413, 418, 468, 513, 518, 598, 601, 625, 626, 629, 646, 649, 674, 677, 678, 681, 756, 777, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1092, 1095, 1096, 1099, 1100, 1103], "ask": [176, 373, 375, 390, 1129], "perfectli": 176, "happi": [176, 353, 390], "abund": 176, "better": [176, 357, 372, 375, 376, 377], "ll": [176, 352, 354, 360, 367, 370, 376], "give": [176, 353, 354, 357, 359, 360, 364, 371, 375, 967, 997, 1000], "two": [176, 181, 182, 184, 359, 360, 362, 366, 367, 372, 376, 378, 412, 413, 417, 423, 427, 428, 431, 458, 463, 518, 573, 576, 713, 716, 756, 764, 881, 882, 884, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 926, 927, 929, 930, 932, 933, 935, 939, 941, 942, 944, 967, 1015, 1018, 1071, 1072, 1073, 1074, 1075, 1129], "streamlin": 176, "workflow": [176, 354, 376, 388, 1129], "save": [176, 179, 180, 390, 756, 817, 1162, 1163], "week": [176, 354, 355, 1129], "let": [176, 359, 360, 367, 368, 369, 373, 375, 376, 377, 378, 1087, 1096, 1099, 1108, 1111, 1112, 1116, 1119, 1129], "sai": [176, 353, 365, 375], "deepmind": 176, "releas": [176, 353, 355, 1129], "awesom": 176, "paper": 176, "love": 176, "choic": [176, 353, 370, 376, 1087, 1108, 1111, 1116, 1119], "perceiverio": 176, "happen": [176, 353, 354, 376], "slew": 176, "rush": 176, "f": [176, 356, 357, 367, 373, 376, 378, 518, 622, 756, 797, 801], "g": [176, 357, 367, 390, 431, 436, 459, 468, 484, 1054, 1059, 1060, 1062, 1071, 1072, 1073, 1075, 1087, 1092, 1095, 1100, 1103, 1104, 1107, 1112], "inevit": 176, "deviat": [176, 1049, 1050, 1053, 1054, 1059, 1087, 1108, 1111, 1164, 1165], "origin": [176, 179, 180, 181, 182, 183, 364, 365, 368, 373, 375, 518, 549, 552, 881, 907, 909, 967, 997, 1000, 1001, 1004], "often": [176, 363, 390], "erron": 176, "train": [176, 363, 367, 369, 376, 377, 378, 388, 389, 390, 830, 832, 835, 837, 839, 850, 852, 1129], "poor": 176, "converg": 176, "perform": [176, 179, 180, 358, 360, 362, 363, 364, 366, 367, 369, 370, 371, 373, 376, 390, 401, 406, 412, 421, 422, 468, 756, 774, 778, 779, 780, 798, 799, 800, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 868, 876, 878, 881, 930, 1027, 1028, 1029, 1030, 1031, 1038, 1039, 1120, 1121, 1124, 1125, 1128], "issu": [176, 352, 355, 373, 375, 377, 390], "publish": [176, 390], "manag": [176, 352, 370, 390, 468], "get": [176, 179, 180, 352, 353, 355, 357, 363, 368, 369, 370, 373, 374, 375, 376, 377, 431, 449, 450, 451, 454, 468, 477, 478, 487, 488, 501, 502, 507, 511, 514, 517, 756, 763, 790, 791, 792, 811, 1129, 1135, 1150, 1159], "work": [176, 353, 354, 355, 357, 362, 367, 368, 369, 372, 373, 374, 375, 377, 378, 1129, 1135], "repositori": [176, 353, 354, 356, 361], "pull": [176, 352, 353, 356, 358, 390], "request": [176, 352, 358, 468, 504], "confus": [176, 370], "do": [176, 179, 180, 353, 354, 355, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 390, 518, 709, 712, 756, 800, 830, 846, 848, 866, 1031, 1032, 1041, 1042, 1043], "expect": [176, 390, 756, 763, 1129], "codebas": [176, 352, 357, 358, 370, 372, 468, 510, 511, 1129], "total": [176, 179, 180, 181, 182, 183, 352, 354, 360, 362, 369, 376, 377, 390, 468, 514, 1066, 1069, 1087, 1108, 1111, 1116, 1119], "hour": 176, "spent": 176, "spin": 176, "off": [176, 372, 881, 891, 893, 939, 941], "test": [176, 353, 355, 357, 360, 390, 431, 456, 457, 518, 630, 633, 634, 637, 638, 641, 1120, 1121, 1124, 1125, 1128], "error": [176, 179, 180, 353, 362, 366, 369, 371, 375, 390, 401, 402, 468, 518, 602, 605, 1087, 1092, 1095, 1100, 1103, 1162, 1163, 1166, 1170], "address": [176, 354, 355, 366, 373], "sake": 176, "singl": [176, 179, 180, 354, 358, 360, 362, 363, 365, 367, 370, 371, 373, 376, 377, 378, 390, 468, 477, 478, 497, 498, 499, 500, 756, 826, 829, 1054, 1059, 1060, 1062, 1071, 1072], "multipl": [176, 179, 180, 184, 193, 281, 282, 286, 289, 296, 298, 320, 321, 322, 323, 334, 335, 338, 339, 354, 360, 363, 367, 390, 518, 536, 666, 688, 691, 756, 757, 759, 760, 761, 785, 789, 806, 881, 900, 967, 968, 971, 972, 1001, 1004, 1005, 1006, 1049, 1050, 1053, 1056, 1058, 1066, 1067, 1068, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1150, 1160], "line": [176, 353, 360, 366, 374, 375, 376, 377, 388, 1129, 1135], "directli": [176, 354, 358, 359, 363, 366, 367, 368, 369, 370, 371, 373, 375, 377, 378, 389, 390, 1031, 1043], "graph": [176, 363, 367, 374, 390, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 1071, 1072, 1073, 1075, 1162, 1163], "guarante": [176, 366, 390, 1071, 1072], "turn": [176, 360, 367], "take": [176, 352, 353, 354, 359, 360, 362, 367, 368, 369, 373, 375, 377, 378, 390, 518, 577, 580, 1129, 1135], "few": [176, 354, 355, 363, 367, 368, 369, 370, 374, 375, 376, 377, 388, 1129, 1135], "second": [176, 353, 360, 370, 375, 431, 458, 463, 468, 499, 518, 532, 535, 557, 560, 565, 568, 569, 572, 573, 576, 577, 580, 596, 598, 601, 609, 617, 618, 621, 625, 626, 629, 642, 645, 646, 649, 666, 669, 670, 673, 678, 681, 682, 685, 688, 691, 697, 700, 705, 708, 737, 741, 756, 764, 811, 816, 830, 832, 835, 837, 839, 850, 852, 881, 885, 887, 891, 893, 894, 896, 903, 906, 917, 919, 923, 925, 930, 936, 938, 942, 944, 967, 1011, 1014, 1015, 1018, 1027, 1029, 1071, 1072, 1073, 1166, 1167, 1168], "automat": [176, 353, 354, 363, 367, 371, 372, 373, 374, 377, 378, 1129], "everyon": [176, 352, 354, 390], "regardless": [176, 179, 180, 352, 375, 378, 409, 410], "wouldn": 176, "nice": [176, 362], "write": [176, 179, 180, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 370, 373, 375, 378, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 437, 439, 468, 513, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 768, 769, 771, 774, 775, 778, 779, 780, 782, 784, 785, 788, 796, 809, 812, 813, 830, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1065, 1066, 1070, 1071, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "onc": [176, 353, 354, 367, 368, 369, 373, 376, 390, 468, 512, 881, 900, 930, 1054, 1055], "know": [176, 354, 1071, 1072, 1073, 1075], "among": [176, 179, 180, 362], "frantic": 176, "port": 176, "lucid": 176, "honk": 176, "improv": [176, 354, 363, 373], "understand": [176, 353, 354, 355, 356, 357, 359, 360, 361, 371, 372], "pattern": [176, 179, 180, 359, 368, 756, 778, 779, 780], "hasn": 176, "now": [176, 179, 180, 353, 356, 358, 365, 367, 368, 371, 375, 376, 378, 389, 390, 1150, 1161, 1162, 1163], "spend": 176, "torchvis": 176, "probabl": [176, 868, 876, 1054, 1055, 1150, 1158], "sonnet": 176, "about": [176, 353, 354, 361, 372, 373, 377, 378, 390, 431, 451, 454], "next": [176, 353, 354, 355, 356, 359, 360, 364, 365, 375, 376, 431, 451, 1129, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171], "everyth": [176, 354, 355, 374, 390], "zero": [176, 179, 180, 181, 182, 360, 366, 367, 368, 369, 371, 373, 376, 377, 401, 403, 404, 412, 415, 417, 423, 427, 428, 430, 431, 437, 518, 532, 537, 540, 565, 568, 589, 610, 613, 614, 674, 677, 678, 681, 686, 687, 688, 691, 693, 696, 697, 700, 705, 708, 709, 712, 713, 716, 729, 732, 733, 736, 742, 747, 756, 774, 809, 812, 813, 830, 832, 835, 837, 839, 850, 852, 854, 856, 868, 876, 881, 888, 902, 903, 906, 911, 913, 920, 922, 942, 944, 945, 947, 967, 981, 984, 985, 988, 993, 996, 1001, 1004, 1023, 1026, 1049, 1050, 1053, 1054, 1056, 1057, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1075, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1141, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1166, 1167, 1168, 1169], "need": [176, 353, 354, 355, 356, 358, 359, 360, 361, 363, 366, 367, 370, 373, 375, 376, 389, 390, 756, 768, 769, 771, 967, 968, 971, 981, 984], "said": 176, "high": [176, 179, 180, 184, 263, 296, 297, 338, 339, 355, 376, 1054, 1056, 1057, 1058, 1060, 1061, 1062, 1063], "level": [176, 352, 355, 363, 372, 373, 376, 377, 378, 390], "optim": [176, 370, 374, 376, 378, 389, 468, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 1027, 1028, 1029, 1030, 1129, 1167, 1168, 1169, 1171], "trainer": [176, 388, 390, 1129], "statu": 176, "quo": 176, "kera": 176, "dopamin": 176, "ignit": 176, "catalyst": 176, "lightn": 176, "fastai": 176, "haiku": [176, 378], "flax": [176, 378, 390], "trax": [176, 378], "objax": [176, 378], "idea": [176, 389], "fulli": [176, 366, 367, 371, 373, 374, 375, 376, 377, 378, 390, 1150, 1160, 1161], "offer": [176, 377], "containerwithactiv": [177, 181, 182], "dict_in": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "queue": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 376, 468, 477, 478, 756, 811, 816], "queue_load_s": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "container_combine_method": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "list_join": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "queue_timeout": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 756], "print_limit": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "key_length_limit": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "print_ind": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "print_line_spac": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "ivyh": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "default_key_color": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "green": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 353, 354, 1175, 1176], "keyword_color_dict": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "rebuild_child_contain": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "types_to_iteratively_nest": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "alphabetical_kei": [177, 178, 179, 180, 181, 182, 183, 184, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "containerbas": [177, 178, 179, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 367], "__getitem__": [179, 180, 367], "queri": [179, 180, 367, 368, 375, 468, 501, 511, 868, 879, 880, 1150, 1161], "slice": [179, 180, 756, 784, 785, 788, 1031, 1040], "chain": [179, 180, 366, 367, 377, 378, 390, 1027, 1028, 1029, 1031, 1044, 1172, 1173], "element": [179, 180, 359, 373, 378, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 419, 420, 427, 428, 468, 491, 495, 499, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 764, 765, 768, 769, 771, 774, 775, 782, 796, 825, 826, 868, 876, 881, 885, 887, 894, 896, 903, 906, 923, 925, 930, 967, 968, 971, 985, 988, 993, 996, 1001, 1004, 1006, 1007, 1010, 1054, 1055, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1150, 1158], "represent": [179, 180, 181, 182, 183, 389, 411, 431, 435, 436, 451, 454, 468, 484, 485, 518, 519, 522, 532, 557, 560, 569, 572, 577, 580, 682, 685, 688, 691, 756, 762, 819, 824], "dictionari": [179, 180, 181, 182, 183, 376, 390, 468, 511], "around": [179, 180, 181, 182, 183, 354, 363, 366, 371, 375, 390], "sequenc": [179, 180, 181, 182, 183, 360, 368, 389, 409, 410, 468, 477, 478, 756, 765, 806, 967, 1006, 1011, 1014, 1054, 1056, 1057, 1087, 1092, 1095, 1150, 1159, 1164, 1165, 1172, 1173], "multiprocess": [179, 180, 181, 182, 183, 376, 390, 468, 477, 756], "asynchron": [179, 180, 181, 182, 183], "wait": [179, 180, 181, 182, 183, 354], "size": [179, 180, 181, 182, 183, 375, 376, 412, 421, 422, 468, 510, 511, 512, 756, 812, 818, 868, 880, 881, 891, 893, 907, 909, 917, 919, 923, 925, 930, 942, 944, 967, 981, 984, 1001, 1004, 1006, 1007, 1010, 1054, 1055, 1059, 1060, 1062, 1066, 1067, 1069, 1120, 1121, 1124, 1125, 1128, 1150, 1151, 1152], "dimens": [179, 180, 181, 182, 183, 360, 373, 376, 401, 406, 412, 427, 428, 468, 499, 756, 778, 779, 780, 783, 793, 809, 828, 868, 869, 870, 871, 872, 873, 874, 875, 878, 881, 882, 884, 885, 887, 888, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 920, 922, 923, 925, 927, 929, 930, 932, 933, 935, 939, 941, 942, 944, 945, 947, 951, 957, 960, 962, 965, 967, 973, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1006, 1007, 1010, 1011, 1014, 1027, 1028, 1029, 1030, 1054, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1075, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1160, 1161], "combin": [179, 180, 181, 182, 183, 354, 360, 362, 363, 366, 367, 378, 881, 885, 887], "arriv": [179, 180, 181, 182, 183], "timeout": [179, 180, 181, 182, 183, 468, 477, 478, 756, 811, 816], "limit": [179, 180, 181, 182, 183, 354, 360, 362, 373, 376, 378, 390, 431, 451, 454, 756, 768, 769, 771, 967, 968, 971], "maximum": [179, 180, 181, 182, 183, 360, 373, 376, 378, 468, 492, 496, 500, 512, 518, 756, 768, 769, 771, 783, 830, 850, 852, 967, 968, 971, 1031, 1043, 1066, 1067, 1087, 1092, 1095, 1100, 1103, 1129], "length": [179, 180, 181, 182, 183, 376, 412, 413, 423, 881, 930, 932, 933, 935, 967, 997, 1000], "whitespac": [179, 180, 181, 182, 183], "indent": [179, 180, 181, 182, 183, 376], "extra": [179, 180, 181, 182, 183, 360, 365, 366, 373, 830, 841], "newlin": [179, 180, 181, 182, 183, 359], "handl": [179, 180, 181, 182, 183, 357, 362, 363, 365, 367, 368, 369, 370, 371, 377, 390, 409, 410, 468, 484, 485, 486, 487, 488, 502, 506, 507, 514, 517, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 1166, 1167, 1168, 1169, 1170, 1171], "result": [179, 180, 181, 182, 183, 358, 359, 360, 362, 366, 367, 368, 370, 371, 376, 390, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 437, 439, 459, 468, 477, 513, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 768, 769, 771, 774, 775, 778, 779, 780, 782, 784, 785, 788, 796, 809, 812, 813, 830, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1031, 1044, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1075, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129], "color": [179, 180, 181, 182, 183, 1175, 1176], "termin": [179, 180, 181, 182, 183, 353, 354, 356, 367, 373, 376], "map": [179, 180, 181, 182, 183, 362, 363, 367, 371, 376, 389, 390, 468, 477, 1031, 1038, 1039, 1043, 1044, 1150, 1161], "termcolor": [179, 180, 181, 182, 183], "rebuild": [179, 180, 181, 182, 183], "found": [179, 180, 181, 182, 183, 353, 354, 359, 366, 367, 468, 502], "constructor": [179, 180, 181, 182, 183, 368, 369, 375, 756, 763, 1172, 1173], "param": [179, 180, 181, 182, 183, 184, 289, 322, 323, 373, 378, 756, 762, 784, 785, 788, 789], "kept": [179, 180, 181, 182, 183, 354, 370, 1027, 1028, 1029], "structur": [179, 180, 181, 182, 183, 356, 358, 363, 366, 367, 376, 377, 756, 772, 1031, 1044], "alphabet": [179, 180, 181, 182, 183], "preserv": [179, 180, 181, 182, 183, 378, 390, 830, 863, 967, 985, 988], "__setitem__": [179, 180, 366, 367, 375], "val": [179, 180, 370, 375, 756, 798, 799, 800, 814, 815], "after": [179, 180, 360, 367, 368, 372, 431, 463, 518, 729, 732, 830, 837, 839, 841, 842, 844, 850, 852, 854, 856, 858, 860, 1049, 1050, 1053, 1166, 1167, 1168, 1169, 1170, 1171], "updat": [179, 180, 353, 354, 355, 356, 357, 360, 361, 365, 366, 367, 368, 371, 373, 375, 376, 378, 390, 468, 477, 756, 800, 812, 813, 830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 868, 878, 1027, 1028, 1029, 1031, 1038, 1039, 1047, 1048, 1139, 1140, 1166, 1167, 1168, 1169, 1170, 1171], "all_fals": [179, 180], "assert_is_bool": [179, 180], "key_chain": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 320, 321, 322, 323, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 344, 345, 346, 347, 348, 349, 440, 442, 444, 519, 521, 523, 526, 527, 528, 530, 534, 535, 536, 537, 539, 541, 543, 547, 548, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 587, 588, 591, 592, 595, 596, 597, 600, 601, 602, 604, 608, 609, 610, 612, 616, 617, 618, 620, 624, 625, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 688, 690, 692, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 738, 740, 743, 745, 746, 748, 750, 751, 752, 754, 757, 759, 761, 769, 770, 785, 787, 789, 837, 838, 840, 842, 843, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 861, 903, 905, 952, 954, 956, 957, 959, 961, 962, 964, 966, 968, 970, 972, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1031, 1044, 1050, 1052, 1056, 1058, 1060, 1061, 1063, 1077, 1079, 1081, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1114, 1115, 1116, 1118, 1121, 1123, 1125, 1127], "to_appli": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 320, 321, 322, 323, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 344, 345, 346, 347, 348, 349, 440, 442, 444, 519, 521, 523, 526, 527, 528, 530, 534, 535, 536, 537, 539, 541, 543, 547, 548, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 587, 588, 591, 592, 595, 596, 597, 600, 601, 602, 604, 608, 609, 610, 612, 616, 617, 618, 620, 624, 625, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 688, 690, 692, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 738, 740, 743, 745, 746, 748, 750, 751, 752, 754, 757, 759, 761, 769, 770, 785, 787, 789, 837, 838, 840, 842, 843, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 861, 903, 905, 952, 954, 956, 957, 959, 961, 962, 964, 966, 968, 970, 972, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1031, 1044, 1050, 1052, 1060, 1061, 1063, 1077, 1079, 1081, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1114, 1115, 1116, 1118, 1121, 1123, 1125, 1127], "prune_unappli": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 320, 321, 322, 323, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 344, 345, 346, 347, 348, 349, 440, 442, 444, 519, 521, 523, 526, 527, 528, 530, 534, 535, 536, 537, 539, 541, 543, 547, 548, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 587, 588, 591, 592, 595, 596, 597, 600, 601, 602, 604, 608, 609, 610, 612, 616, 617, 618, 620, 624, 625, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 688, 690, 692, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 738, 740, 743, 745, 746, 748, 750, 751, 752, 754, 757, 759, 761, 769, 770, 785, 787, 789, 837, 838, 840, 842, 843, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 861, 903, 905, 952, 954, 956, 957, 959, 961, 962, 964, 966, 968, 970, 972, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1031, 1044, 1050, 1052, 1060, 1061, 1063, 1077, 1079, 1081, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1114, 1115, 1116, 1118, 1121, 1123, 1125, 1127], "map_sequ": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 239, 242, 243, 244, 245, 248, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 320, 321, 322, 323, 324, 325, 332, 333, 334, 335, 336, 337, 338, 339, 344, 345, 346, 347, 348, 349, 440, 442, 444, 519, 521, 523, 526, 527, 528, 530, 534, 535, 536, 537, 539, 541, 543, 547, 548, 553, 555, 561, 563, 581, 583, 587, 588, 591, 592, 595, 597, 602, 604, 608, 610, 612, 616, 617, 618, 630, 632, 634, 636, 638, 640, 650, 652, 654, 656, 658, 660, 662, 664, 666, 674, 676, 688, 690, 692, 693, 695, 701, 703, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 738, 740, 743, 745, 746, 748, 750, 751, 752, 754, 757, 759, 761, 769, 770, 785, 787, 789, 837, 838, 840, 842, 843, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 861, 952, 954, 956, 957, 959, 961, 962, 964, 966, 968, 970, 972, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1015, 1017, 1019, 1021, 1023, 1025, 1050, 1052, 1060, 1061, 1063, 1077, 1079, 1081, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1114, 1115, 1116, 1118, 1121, 1123, 1125, 1127], "entri": [179, 180, 412, 421, 422, 967, 1006, 1031, 1044], "boolean": [179, 180, 367, 412, 419, 431, 437, 455, 467, 468, 503, 515, 518, 557, 560, 561, 564, 569, 572, 577, 580, 670, 673, 674, 677, 678, 681, 682, 685, 756, 757, 760, 764, 765, 795, 796, 797, 801, 802, 803, 804, 805, 822, 829, 830, 846, 848, 1027, 1028, 1029, 1031, 1041, 1087, 1100, 1103], "evalu": [179, 180, 367, 518, 606, 610, 613, 650, 653, 654, 657, 658, 661, 662, 665, 693, 696, 717, 720, 733, 736, 1031, 1032, 1041, 1042, 1120, 1121, 1124, 1125, 1128], "assert": [179, 180, 375, 376, 756, 766], "skip": [179, 180, 356, 362, 1031, 1044], "prune": [179, 180, 1031, 1044, 1045, 1046], "all_key_chain": [179, 180], "include_empti": [179, 180], "all_tru": [179, 180, 367, 376], "arrays_as_list": [179, 180], "intermedi": [179, 180], "as_arrai": [179, 180, 756, 793, 818], "as_bool": [179, 180], "as_on": [179, 180], "ones": [179, 180, 181, 182, 362, 373, 375, 376, 412, 417, 426, 518, 581, 584, 756, 809, 1129], "sub": [179, 180, 354, 355, 357, 362, 367, 375, 376, 377, 468, 493, 494, 497, 498, 499, 500, 881, 891, 893, 967, 1006, 1027, 1028, 1029, 1030, 1129], "fill": [179, 180, 412, 415, 419, 420, 425, 426, 429, 430, 1054, 1056, 1057], "as_random_uniform": [179, 180], "low": [179, 180, 184, 263, 296, 297, 338, 339, 373, 1054, 1056, 1057, 1058, 1060, 1061, 1062, 1063], "uniform": [179, 180, 377, 1054, 1055, 1056, 1057, 1060, 1062, 1141, 1143, 1144, 1147, 1148], "lower": [179, 180, 354, 360, 373, 390, 412, 417, 427, 518, 686, 881, 882, 884, 1054, 1060, 1062], "boundari": [179, 180, 1054, 1060, 1062], "output": [179, 180, 353, 357, 358, 359, 360, 362, 363, 366, 367, 369, 370, 371, 373, 375, 377, 378, 390, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 437, 439, 468, 477, 478, 512, 513, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 767, 768, 769, 771, 774, 775, 778, 779, 780, 782, 784, 785, 788, 796, 809, 812, 813, 830, 841, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1031, 1044, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1065, 1066, 1070, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1160, 1161], "interv": [179, 180, 373, 378, 412, 413, 421, 422, 881, 942, 944, 967, 968, 971, 1011, 1014, 1054, 1056, 1057, 1060, 1062, 1120, 1121, 1124, 1125, 1128], "as_vari": [179, 180], "as_zero": [179, 180], "assert_contains_sub_contain": [179, 180], "sub_cont": [179, 180], "partial": [179, 180, 354, 1162, 1163], "except": [179, 180, 359, 366, 370, 375, 390, 431, 439, 756, 766, 777, 800, 827, 881, 902, 920, 922, 967, 973, 976, 1011, 1014, 1066, 1069, 1120, 1121, 1124, 1125, 1128], "diff": [179, 180, 367, 376], "screen": [179, 180, 376], "assert_contains_sub_structur": [179, 180], "check_shap": [179, 180], "static": [179, 180, 184, 191, 278, 281, 282, 285, 286, 289, 296, 298, 302, 303, 316, 317, 320, 321, 322, 323, 324, 325, 332, 333, 334, 335, 338, 339, 344, 345, 350, 351, 355, 359, 360, 363, 390, 409, 410, 440, 444, 519, 523, 536, 548, 553, 666, 743, 748, 751, 757, 761, 785, 789, 968, 972, 1001, 1005, 1056, 1058], "assert_ident": [179, 180], "check_typ": [179, 180], "same_arrai": [179, 180, 376], "arrays_equ": [179, 180, 181, 182, 756], "datatyp": [179, 180, 412, 414, 424, 431, 445, 456, 457, 458], "exact": [179, 180, 354, 373, 1071, 1072], "assert_identical_structur": [179, 180], "at_key_chain": [179, 180], "ignore_key_error": [179, 180], "ignore_non": [179, 180], "at_kei": [179, 180], "ignor": [179, 180, 360, 390, 412, 423, 1031, 1042, 1166, 1170], "substr": [179, 180], "access": [179, 180, 354, 356, 368], "clip_min": [179, 180], "clip_max": [179, 180], "minimum": [179, 180, 373, 378, 468, 518, 519, 522, 756, 791, 792, 814, 815, 820, 821, 967, 968, 971, 1066, 1068, 1087, 1092, 1095, 1100, 1103, 1129], "config": [179, 180, 376, 1031, 1044], "right": [179, 180, 352, 353, 354, 357, 360, 376, 518, 565, 568, 573, 576, 881, 930], "duplic": [179, 180, 359, 364, 365, 375, 377], "compar": [179, 180, 362, 376, 756, 757, 760, 764, 765, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1082, 1085], "configur": [179, 180, 353, 354, 356, 368, 468, 511, 1031, 1044], "container_rightmost": [179, 180], "common_key_chain": [179, 180, 367], "across": [179, 180, 355, 360, 362, 363, 367, 368, 371, 468, 477, 478, 489, 490, 492, 493, 494, 495, 496, 500, 510, 511, 756, 764, 765, 1031, 1037, 1066, 1068], "properti": [179, 180, 360, 362, 363, 367, 375, 376, 377, 468, 480, 1162, 1163, 1166, 1167, 1168, 1169, 1171], "contains_sub_contain": [179, 180], "match": [179, 180, 367, 431, 437, 518, 709, 712, 756, 806], "contains_sub_structur": [179, 180], "copi": [179, 180, 356, 359, 364, 368, 373, 375, 376, 389, 390, 412, 414, 418, 431, 437, 468, 513, 756, 773, 825, 826, 967, 997, 1000, 1031, 1033, 1076, 1082, 1085], "create_if_abs": [179, 180], "inplac": [179, 180, 184, 189, 230, 237, 238, 258, 280, 290, 292, 293, 295, 324, 325, 357, 360, 365, 366, 371, 375, 377, 756, 766, 797, 800, 801, 822, 830, 837, 838, 839, 840, 842, 843, 844, 845, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 1139, 1140, 1166, 1167, 1168, 1169, 1170, 1171], "correspond": [179, 180, 181, 182, 184, 354, 359, 360, 361, 363, 366, 367, 368, 371, 431, 438, 518, 549, 552, 705, 708, 881, 885, 887, 894, 896, 927, 929, 967, 973, 976, 1001, 1004, 1054, 1055, 1066, 1067, 1068, 1071, 1072, 1073, 1075, 1087, 1104, 1107, 1108, 1111, 1112, 1116, 1119], "alreadi": [179, 180, 353, 354, 364, 367, 371, 375, 390, 468, 518, 581, 584, 614, 688, 691, 713, 716, 752, 755, 881, 917, 919, 1129], "noth": [179, 180, 354], "cutoff_at_depth": [179, 180], "depth_cutoff": [179, 180], "summari": [179, 180, 354, 431, 446, 447, 448, 460, 461, 462, 468, 481, 482, 756, 772, 776, 794, 830, 862, 867], "cutoff_at_height": [179, 180], "height_cutoff": [179, 180], "deep_copi": [179, 180, 376], "intern": [179, 180, 359, 366, 367, 369, 370, 468, 830, 866, 1031, 1032, 1041, 1042, 1141, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1172, 1173], "dev": [179, 180, 181, 183, 184, 198, 353, 363, 369, 373, 375, 377, 468, 477, 502], "belong": [179, 180, 377], "dev_clon": [179, 180, 468], "clone": [179, 180, 354, 356, 468, 489, 490, 491, 492], "dev_dist": [179, 180, 468], "distribut": [179, 180, 355, 369, 390, 468, 489, 493, 494, 495, 496, 868, 876, 951, 952, 955, 957, 960, 962, 965, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1150, 1158, 1162, 1163], "along": [179, 180, 358, 370, 412, 421, 422, 468, 493, 494, 495, 496, 497, 498, 499, 500, 512, 756, 774, 775, 784, 828, 881, 907, 909, 939, 941, 942, 944, 945, 947, 951, 957, 960, 962, 965, 967, 973, 976, 985, 988, 993, 996, 1001, 1004, 1006, 1011, 1014, 1019, 1022, 1027, 1028, 1029, 1030, 1054, 1065, 1066, 1067, 1068, 1076, 1077, 1080, 1082, 1085, 1087, 1088, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "split": [179, 180, 352, 354, 372, 373, 390, 468, 477, 493, 494, 495, 496, 510, 511, 512, 756, 806, 967, 1129], "dev_str": [179, 180], "diff_kei": [179, 180], "detect_key_diff": [179, 180], "detect_value_diff": [179, 180], "detect_shape_diff": [179, 180], "thei": [179, 180, 355, 357, 358, 360, 363, 365, 367, 368, 369, 370, 375, 376, 377, 378, 390, 431, 458, 1027, 1028, 1029, 1054, 1055, 1129, 1172, 1173], "treat": [179, 180, 374, 378, 409, 410], "detect": [179, 180, 371, 376, 377, 1031, 1032, 1042], "without": [179, 180, 354, 358, 363, 366, 367, 369, 371, 373, 375, 376, 377, 389, 390, 756, 811, 816, 967, 997, 1000, 1031, 1033, 1071, 1072, 1073, 1075], "flag": [179, 180, 354, 370, 375, 468, 487, 830, 846, 848], "container0": [179, 180], "einops_rearrang": [179, 180, 756], "axes_length": [179, 180, 756, 778, 779, 780], "rearrang": [179, 180, 756, 778, 780], "addit": [179, 180, 353, 354, 358, 359, 362, 367, 368, 375, 376, 378, 468, 513, 518, 532, 756, 778, 779, 780, 1049, 1050, 1053, 1150, 1160], "einops_reduc": [179, 180, 756], "reduct": [179, 180, 368, 375, 756, 779, 812, 813, 1120, 1121, 1124, 1125, 1128, 1129], "One": [179, 180, 368, 373, 375, 376, 756, 779, 967, 997, 1000, 1054, 1056, 1057], "callabl": [179, 180, 367, 373, 391, 392, 393, 394, 395, 396, 397, 398, 399, 409, 410, 431, 452, 453, 468, 512, 756, 762, 767, 777, 779, 1027, 1028, 1029, 1030, 1031, 1037, 1041, 1042, 1043], "einops_repeat": [179, 180, 756], "find_sub_contain": [179, 180], "sub_cont_to_find": [179, 180], "exsit": [179, 180], "find_sub_structur": [179, 180], "sub_struc_to_find": [179, 180], "flatten_key_chain": [179, 180, 376, 1162, 1163], "__": [179, 180, 360, 376], "above_height": [179, 180, 376], "below_depth": [179, 180, 376], "format_key_chain": [179, 180], "format_fn": [179, 180], "format": [179, 180, 356, 359, 368, 369, 373, 375, 376, 431, 449, 468, 488, 1087, 1088, 1091, 1115, 1129], "string": [179, 180, 364, 368, 369, 373, 376, 431, 435, 436, 449, 455, 467, 468, 484, 485, 486, 487, 501, 507, 513, 514, 517, 756, 776], "from_disk_as_hdf5": [179, 180, 376], "h5_obj_or_filepath": [179, 180], "slice_obj": [179, 180], "load": [179, 180, 390], "disk": [179, 180, 376], "h5py": [179, 180], "file": [179, 180, 353, 354, 356, 358, 359, 363, 364, 366, 367, 373, 376, 756, 817, 1162, 1163], "hdf5": [179, 180, 376, 1162, 1163], "filepath": [179, 180, 354], "h5": [179, 180], "from_disk_as_json": [179, 180, 376], "json_filepath": [179, 180], "json": [179, 180, 376], "were": [179, 180, 354, 358, 362, 367], "abl": [179, 180, 353, 354, 363, 368, 370, 375, 378], "dure": [179, 180, 363, 367, 368, 369, 370, 390, 409, 410, 468, 513, 756, 827, 830, 832, 835, 837, 839, 850, 852, 881, 903, 906, 1027, 1028, 1029, 1030, 1087, 1108, 1111, 1116, 1119, 1162, 1163, 1166, 1167, 1168, 1170], "from_disk_as_pickl": [179, 180, 376], "pickle_filepath": [179, 180], "pickl": [179, 180, 367, 376], "from_flat_list": [179, 180], "flat_list": [179, 180], "hierarchi": [179, 180, 376], "flat": [179, 180, 756, 812, 967, 993, 996], "popul": [179, 180, 368, 369, 373, 1054, 1055, 1087, 1108, 1111, 1116, 1119], "from_numpi": [179, 180, 376], "gather": [179, 180, 756, 785, 788], "accord": [179, 180, 353, 356, 363, 368, 431, 440, 443, 451, 518, 532, 573, 576, 688, 691, 756, 784, 812, 813, 881, 942, 944, 967, 977, 980, 1023, 1026, 1087, 1108, 1111, 1116, 1119], "index": [179, 180, 356, 363, 367, 375, 411, 412, 417, 423, 468, 509, 756, 762, 784, 785, 788, 967, 1011, 1014, 1031, 1034, 1035, 1038, 1039, 1040, 1045, 1047, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1076, 1077, 1080, 1132, 1134], "h5_file_s": [179, 180], "content": [179, 180, 355, 356, 370, 373, 376], "batch": [179, 180, 363, 367, 376, 468, 510, 511, 756, 783, 868, 877, 881, 945, 947, 1027, 1028, 1029, 1030, 1049, 1050, 1053, 1164, 1165], "handle_inplac": [179, 180], "prime": [179, 180], "overwritten": [179, 180, 364, 366], "has_kei": [179, 180], "query_kei": [179, 180], "somewher": [179, 180], "has_key_chain": [179, 180], "has_nan": [179, 180, 756], "include_inf": [179, 180, 756, 795, 829], "leafwis": [179, 180], "nan": [179, 180, 358, 359, 411, 431, 437, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 549, 552, 581, 584, 585, 588, 589, 592, 606, 609, 610, 613, 614, 630, 633, 638, 641, 650, 653, 654, 657, 662, 665, 666, 669, 688, 691, 705, 708, 709, 712, 713, 716, 721, 724, 725, 728, 729, 732, 742, 747, 752, 755, 756, 795, 829, 868, 880, 1071, 1072, 1073, 1075, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "well": [179, 180, 362, 370, 377, 378, 389, 756, 795, 881, 927, 929], "inf": [179, 180, 411, 756, 795, 829, 881, 945, 947], "wise": [179, 180, 373, 378, 401, 402, 403, 404, 405, 406, 407, 408, 518, 519, 522, 524, 532, 535, 537, 540, 545, 549, 552, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 593, 596, 598, 601, 602, 605, 609, 617, 618, 621, 622, 625, 626, 629, 642, 645, 646, 649, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 697, 700, 705, 708, 709, 712, 737, 741, 756, 782, 967, 968, 971], "identical_array_shap": [179, 180], "exclus": [179, 180, 184, 233, 291, 324, 325, 363, 367, 378, 412, 413, 756, 774, 802, 803, 805, 830, 846, 847, 848, 849, 1054, 1056, 1057], "identical_config": [179, 180], "identical_structur": [179, 180], "if_exist": [179, 180], "inplace_upd": [179, 180, 370, 756, 1139, 1140], "key_chains_contain": [179, 180], "sub_str": [179, 180], "join": [179, 180, 967, 973, 976, 1011, 1014, 1129], "list_stack": [179, 180, 376], "dim": [179, 180, 368, 756, 809, 1150, 1161], "func": [179, 180, 367, 409, 410, 468, 512, 756, 767, 830, 841, 1031, 1044], "map_cont": [179, 180], "include_self": [179, 180], "possibi": [179, 180], "place": [179, 180, 354, 357, 358, 359, 360, 362, 363, 367, 369, 371, 378, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 440, 443, 468, 513, 518, 519, 522, 532, 537, 540, 557, 560, 577, 580, 581, 584, 589, 614, 697, 700, 713, 716, 729, 732, 733, 736, 742, 747, 756, 784, 798, 799, 800, 868, 871, 880, 881, 888, 967, 981, 984, 985, 988, 1001, 1004, 1049, 1050, 1053, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1120, 1121, 1124, 1166, 1167, 1168, 1169, 1170, 1171], "matrix": [179, 180, 412, 423, 427, 428, 756, 757, 760, 768, 868, 877, 881, 882, 884, 888, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 907, 909, 910, 911, 913, 914, 916, 920, 922, 923, 925, 927, 929, 930, 932, 933, 935, 939, 941, 948, 950, 1150, 1160], "p": [179, 180, 184, 213, 322, 323, 353, 354, 412, 423, 756, 768, 769, 770, 771, 868, 876, 881, 907, 909, 945, 947, 1150, 1158], "integ": [179, 180, 367, 368, 375, 412, 413, 419, 431, 454, 457, 459, 518, 519, 522, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 596, 614, 617, 618, 621, 682, 685, 705, 708, 709, 712, 713, 716, 752, 755, 881, 910, 942, 944, 945, 947, 967, 1006, 1054, 1056, 1057, 1064, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "flatten": [179, 180, 756, 783, 881, 917, 919, 945, 947, 967, 993, 996, 1001, 1004, 1066, 1067, 1068, 1071, 1072, 1073, 1075], "left": [179, 180, 353, 354, 360, 368, 518, 565, 568, 881, 894, 896, 907, 909, 930, 1066, 1067, 1129], "broadcast": [179, 180, 358, 359, 360, 367, 368, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 437, 438, 439, 468, 513, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 768, 769, 771, 774, 778, 779, 780, 782, 785, 788, 796, 809, 812, 813, 830, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1065, 1066, 1067, 1068, 1070, 1071, 1075, 1076, 1082, 1085, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "correctli": [179, 180, 353, 362, 367, 368, 371, 377, 390, 881, 907, 909, 1066, 1067], "max_depth": [179, 180, 468, 472, 475, 482, 492, 496, 500, 756, 794, 1031, 1043], "multi_map": [179, 180, 367], "map_nest": [179, 180, 184, 201, 204, 206, 207, 208, 209, 214, 221, 228, 231, 232, 240, 241, 246, 247, 249, 250, 251, 257, 261, 264, 277, 320, 321, 330, 331, 334, 335, 535, 549, 551, 557, 559, 565, 567, 569, 571, 573, 575, 577, 579, 596, 600, 601, 609, 617, 618, 620, 624, 625, 626, 628, 642, 644, 646, 648, 666, 668, 670, 672, 678, 680, 682, 684, 697, 699, 705, 707, 709, 711, 903, 905, 973, 975, 1011, 1013], "leftmost": [179, 180, 1031, 1044], "multi_map_in_static_method": [179, 180, 367], "fn_name": [179, 180], "num_arrai": [179, 180], "overwrite_at_key_chain": [179, 180], "overwrit": [179, 180, 370, 373, 468, 512], "target_dict": [179, 180], "return_dict": [179, 180], "prune_empti": [179, 180], "keep_non": [179, 180], "empti": [179, 180, 181, 182, 366, 368, 369, 412, 413, 1087, 1108, 1111, 1112, 1120, 1121, 1124, 1125, 1128], "prune_key_chain": [179, 180], "key1": [179, 180, 377], "key2": [179, 180], "key3": [179, 180], "prune_key_from_key_chain": [179, 180], "absolut": [179, 180, 352, 518, 519, 522, 881, 890, 926], "certain": [179, 180, 353, 390, 412, 413, 421, 422], "decid": [179, 180, 353, 1031, 1042], "remov": [179, 180, 354, 355, 356, 359, 362, 363, 368, 370, 378, 881, 891, 893, 903, 906, 939, 941, 967, 1007, 1010, 1027, 1028, 1029], "prune_kei": [179, 180], "prune_keys_from_key_chain": [179, 180], "remove_key_length_limit": [179, 180], "remove_print_limit": [179, 180], "reshape_lik": [179, 180], "leading_shap": [179, 180], "return_cont": [179, 180], "restructur": [179, 180], "keep_orig": [179, 180], "transpos": [179, 180, 375, 378, 468, 499, 868, 870, 872, 874, 881, 902, 914, 916, 920, 922, 1129, 1150, 1152, 1154, 1156], "old": [179, 180, 353, 370], "keep": [179, 180, 353, 354, 361, 367, 374, 376, 378, 756, 828], "start": [179, 180, 352, 353, 354, 355, 356, 357, 359, 360, 368, 372, 373, 375, 376, 377, 389, 390, 412, 413, 421, 422, 468, 483], "restructure_key_chain": [179, 180], "keychain_map": [179, 180], "set_at_key_chain": [179, 180], "set_at_kei": [179, 180], "set_framework": [179, 180, 373, 375, 376, 378], "set_ivy_backend": [179, 180], "ivy_backend": [179, 180], "attribut": [179, 180, 359, 367, 368, 374, 375, 376, 377, 431, 451, 452, 453, 454, 468, 508], "show": [179, 180, 353, 354, 360, 370, 389, 390, 1129], "show_sub_contain": [179, 180], "sub_cont_or_keychain": [179, 180], "shuffl": [179, 180, 1054, 1129], "seed_valu": [179, 180, 1054, 1064], "align": [179, 180, 353, 373, 375, 1129, 1135], "seed": [179, 180, 181, 182, 1054, 1129], "shuffle_h5_fil": [179, 180], "dataset": [179, 180, 376, 388, 1129], "size_ordered_arrai": [179, 180], "keychain": [179, 180], "smallest": [179, 180, 431, 451, 454, 518, 581, 584], "largest": [179, 180, 389, 431, 451, 454, 881, 930], "slice_kei": [179, 180], "key_slic": [179, 180], "all_depth": [179, 180], "slice_via_kei": [179, 180], "sort_by_kei": [179, 180], "num_or_size_split": [179, 180, 373, 967, 1006], "with_remaind": [179, 180, 967, 1006], "constitu": [179, 180, 378], "dimension": [179, 180, 412, 413, 417, 423, 881, 885, 887, 888, 902, 903, 906, 911, 913, 917, 919, 920, 922, 942, 944, 945, 947, 967, 1006, 1066, 1067, 1068, 1069, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "evenli": [179, 180, 412, 413, 421, 422, 967, 1006], "store": [179, 180, 359, 364, 366, 367, 373, 375, 376, 377, 756, 783, 830, 866, 881, 939, 941, 967, 1006, 1162, 1163], "stop_gradi": [179, 180, 181, 182, 184, 189, 230, 237, 238, 258, 280, 290, 292, 293, 295, 324, 325, 377, 468, 512, 830, 837, 838, 839, 840, 842, 843, 844, 845, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 1027, 1028, 1029, 1030, 1129, 1166, 1167, 1168, 1169, 1170, 1171], "preserve_typ": [179, 180, 830, 863], "stop": [179, 180, 373, 390, 412, 413, 421, 422, 468, 483, 512, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 863, 1027, 1028, 1029, 1030, 1166, 1167, 1168, 1169, 1170, 1171], "alwai": [179, 180, 354, 355, 358, 359, 363, 364, 366, 367, 370, 371, 373, 375, 390, 431, 437, 518, 532, 688, 691, 756, 800, 830, 846, 848, 863], "structural_diff": [179, 180], "to_devic": [179, 180, 468, 487], "move": [179, 180, 354, 358, 468, 513], "cuda": [179, 180, 373, 376, 390, 412, 421, 422, 468, 477, 484, 509, 756, 784, 785, 788, 809, 812, 813, 1054, 1055, 1056, 1057, 1060, 1062, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1172, 1173], "cpu": [179, 180, 354, 369, 390, 412, 421, 422, 468, 487, 488, 490, 504, 507, 509, 513, 514, 516, 517, 756, 784, 785, 788, 809, 812, 813, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1172, 1173], "target": [179, 180, 357, 372, 376, 377, 378, 468, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 1129], "to_dict": [179, 180], "to_disk_as_hdf5": [179, 180, 376], "starting_index": [179, 180], "max_batch_s": [179, 180], "read": [179, 180, 356, 1129], "r": [179, 180, 353, 756, 765, 828, 881, 923, 925, 948, 950], "w": [179, 180, 184, 280, 290, 292, 293, 295, 324, 325, 373, 376, 377, 756, 765, 830, 832, 835, 837, 839, 840, 842, 844, 845, 850, 852, 853, 854, 856, 857, 858, 860, 861, 868, 869, 870, 871, 872, 873, 874, 875], "later": [179, 180, 756, 767], "append": [179, 180, 356, 362, 373, 376, 518, 565, 568, 881, 891, 893, 903, 906], "to_disk_as_json": [179, 180, 376], "to_disk_as_pickl": [179, 180, 376], "to_flat_list": [179, 180], "to_iter": [179, 180, 367], "leaf_keys_onli": [179, 180], "to_iterator_kei": [179, 180], "to_iterator_valu": [179, 180], "to_json": [179, 180], "to_list": [179, 180, 756, 1129], "to_multi_dev": [179, 180], "multidevcontain": [179, 180, 181], "distributedarrai": [179, 180], "to_numpi": [179, 180, 376, 756, 1129], "update_backend": [179, 180], "to_raw": [179, 180], "raw": [179, 180, 359], "trim_kei": [179, 180], "max_length": [179, 180], "try_kc": [179, 180], "tri": [179, 180], "arbitrari": [179, 180, 362, 363, 367, 370, 371, 377, 390, 412, 423, 431, 438, 459, 468, 497, 498, 500], "concatten": [179, 180, 468, 497, 498, 499, 500, 512], "unstack": [179, 180, 373, 376, 756, 1129], "dim_siz": [179, 180, 468], "update_config": [179, 180], "global_norm": [179, 180, 184, 213, 322, 323, 769, 770], "vector": [179, 180, 389, 412, 423, 756, 769, 771, 868, 877, 881, 885, 887, 894, 896, 903, 906, 917, 919, 930, 932, 933, 935, 942, 944, 945, 947, 948, 950, 1150, 1160], "with_default_key_color": [179, 180], "with_entries_as_list": [179, 180], "with_ivy_backend": [179, 180], "with_key_length_limit": [179, 180, 376], "with_print_ind": [179, 180, 376], "with_print_limit": [179, 180, 376], "with_print_line_spac": [179, 180], "containerwithcr": [181, 182, 314], "containerwithdatatyp": [181, 182, 316], "containerwithdevic": [181, 182, 318], "containerwithelementwis": [181, 182, 320, 367], "containerwithgener": [181, 182, 322], "containerwithgradi": [181, 182, 324], "containerwithimag": [181, 182, 326], "containerwithlay": [181, 182, 328], "containerwithlinearalgebra": [181, 182, 330], "containerwithloss": [181, 182, 332], "containerwithmanipul": [181, 182, 334, 355], "containerwithnorm": [181, 182, 336], "containerwithrandom": [181, 182, 338], "containerwithsearch": [181, 182, 340], "containerwithset": [181, 182, 342], "containerwithsort": [181, 182, 344], "containerwithstatist": [181, 182, 346], "containerwithutil": [181, 182, 348], "__add__": [181, 182, 184, 359, 360, 366, 367, 371, 375], "special": [181, 182, 184, 355, 358, 359, 360, 366, 371, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 549, 552, 577, 580, 581, 584, 585, 588, 589, 592, 606, 609, 610, 613, 614, 650, 653, 654, 657, 662, 665, 666, 669, 688, 691, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 742, 747, 752, 755, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1108, 1111, 1112, 1116, 1119], "__radd__": [181, 182, 184, 359, 360], "revers": [181, 182, 184, 355, 359, 360, 378, 390, 756, 777, 967, 985, 988], "arang": [181, 182, 368, 412, 421, 422, 1087, 1088, 1091, 1115, 1129], "arg_info": [181, 182, 756], "arg_nam": [181, 182, 756], "argmax": [181, 182, 1066, 1129], "argmin": [181, 182, 1066, 1129], "array_equ": [181, 182, 756], "as_ivy_dev": [181, 182, 375, 468], "as_ivy_dtyp": [181, 182, 431], "as_native_dev": [181, 182, 468], "as_native_dtyp": [181, 182, 431], "asarrai": [181, 182, 370, 412, 868, 869, 1071, 1073], "assert_supports_inplac": [181, 182, 756], "astyp": [181, 182, 368, 370, 431], "broadcast_arrai": [181, 182, 431], "broadcast_to": [181, 182, 368, 431], "cache_fn": [181, 182, 363, 756], "clear_mem_on_dev": [181, 182, 468], "clip_matrix_norm": [181, 182, 756], "closest_valid_dtyp": [181, 182, 431], "container_typ": [181, 182, 756], "conv1d": [181, 182, 868, 1150], "conv1d_transpos": [181, 182, 868], "conv2d": [181, 182, 868, 1129, 1150], "conv2d_transpos": [181, 182, 868], "conv3d": [181, 182, 868, 1150], "conv3d_transpos": [181, 182, 868], "copy_arrai": [181, 182, 756], "cumprod": [181, 182, 378, 756], "cumsum": [181, 182, 756, 1129], "current_backend_str": [181, 182, 756], "default_devic": [181, 182, 369, 373, 468, 506, 509, 516], "default_dtyp": [181, 182, 363, 368, 431], "default_float_dtyp": [181, 182, 368, 431], "default_int_dtyp": [181, 182, 368, 431], "depthwise_conv2d": [181, 182, 868, 1129], "dev_clone_arrai": [181, 182, 468], "dev_clone_it": [181, 182, 468], "dev_clone_nest": [181, 182, 468], "dev_dist_arrai": [181, 182, 468], "dev_dist_it": [181, 182, 468], "dev_dist_nest": [181, 182, 468], "dev_unifi": [181, 182, 468], "dev_unify_arrai": [181, 182, 468], "dev_unify_it": [181, 182, 468], "dev_unify_nest": [181, 182, 468], "dev_util": [181, 182, 369, 468], "dropout": [181, 182, 376, 868, 1150, 1161], "dtype_bit": [181, 182, 431], "empty_lik": [181, 182, 412], "execute_with_gradi": [181, 182, 367, 376, 377, 378, 390, 830, 1129], "ey": [181, 182, 378, 412, 868, 871, 875], "finfo": [181, 182, 431], "floormod": [181, 182, 756, 1129], "fourier_encod": [181, 182, 756], "from_dlpack": [181, 182, 412], "full_lik": [181, 182, 412], "function_supported_dtyp": [181, 182, 431], "function_unsupported_dtyp": [181, 182, 431], "gelu": [181, 182, 401, 1136], "get_all_arrays_in_memori": [181, 182, 756], "get_all_ivy_arrays_on_dev": [181, 182, 369, 468], "get_min_bas": [181, 182, 756], "get_min_denomin": [181, 182, 756], "get_num_dim": [181, 182, 756, 1129], "get_referrers_recurs": [181, 182, 756], "gpu_is_avail": [181, 182, 468], "handle_nest": [181, 182, 363, 367, 391], "handle_out_argu": [181, 182, 365, 368, 369, 370, 371, 391], "iinfo": [181, 182, 431], "indices_wher": [181, 182, 756, 1129], "infer_devic": [181, 182, 368, 369, 371, 391], "infer_dtyp": [181, 182, 368, 369, 371, 391], "inplace_arrays_support": [181, 182, 756], "inplace_decr": [181, 182, 756], "inplace_incr": [181, 182, 756], "inplace_variables_support": [181, 182, 756], "inputs_to_native_arrai": [181, 182, 366, 391], "invalid_dtyp": [181, 182, 431], "is_float_dtyp": [181, 182, 431], "is_int_dtyp": [181, 182, 431, 756, 826], "is_ivy_contain": [181, 182, 756], "leaky_relu": [181, 182, 401, 1129], "linear": [181, 182, 359, 373, 376, 377, 378, 401, 402, 403, 404, 756, 783, 868, 876, 927, 929, 1129, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "linspac": [181, 182, 373, 412, 413, 1129], "logspac": [181, 182, 373, 412], "lstm_updat": [181, 182, 373, 868], "match_kwarg": [181, 182, 756], "matrix_pow": [181, 182, 881], "meshgrid": [181, 182, 412], "multi_head_attent": [181, 182, 367, 370, 868], "multinomi": [181, 182, 1054], "nonzero": [181, 182, 518, 532, 688, 691, 1066], "num_arrays_in_memori": [181, 182, 756], "num_cpu_cor": [181, 182, 369, 468], "num_gpu": [181, 182, 362, 369, 468], "num_ivy_arrays_on_dev": [181, 182, 468], "one_hot": [181, 182, 378, 756, 1129], "ones_lik": [181, 182, 378, 412, 1129], "outputs_to_ivy_arrai": [181, 182, 366, 368, 369, 371, 391], "percent_used_mem_on_dev": [181, 182, 468], "print_all_arrays_in_memori": [181, 182, 756], "print_all_ivy_arrays_on_dev": [181, 182, 468], "promote_typ": [181, 182, 431], "randint": [181, 182, 184, 296, 338, 339, 1054, 1058, 1129], "random_norm": [181, 182, 868, 871, 874, 875, 881, 930, 1054, 1071, 1072], "result_typ": [181, 182, 368, 431], "scaled_dot_product_attent": [181, 182, 868], "scatter_flat": [181, 182, 756], "scatter_nd": [181, 182, 375, 756, 1129], "set_default_devic": [181, 182, 369, 468, 516], "set_default_dtyp": [181, 182, 363, 368, 431], "set_default_float_dtyp": [181, 182, 368, 431], "set_default_int_dtyp": [181, 182, 368, 431], "set_min_bas": [181, 182, 756], "set_min_denomin": [181, 182, 756], "set_queue_timeout": [181, 182, 756], "set_split_factor": [181, 182, 468], "set_tmp_dir": [181, 182, 756], "set_with_grad": [181, 182, 830], "shape_to_tupl": [181, 182, 368, 756], "sigmoid": [181, 182, 373, 376, 377, 401, 1129], "slogdet": [181, 182, 881, 890], "softplu": [181, 182, 401, 1129], "split_factor": [181, 182, 468, 477], "split_func_cal": [181, 182, 468], "stable_divid": [181, 182, 363, 756], "stable_pow": [181, 182, 756], "static_aco": [181, 182], "static_acosh": [181, 182], "static_al": [181, 182], "static_ani": [181, 182], "static_arang": [181, 182], "static_arg_info": [181, 182], "static_arg_nam": [181, 182], "static_argmax": [181, 182], "static_argmin": [181, 182], "static_arrai": [181, 182], "static_array_equ": [181, 182], "static_arrays_equ": [181, 182], "static_as_ivy_dev": [181, 182], "static_as_ivy_dtyp": [181, 182], "static_as_native_dev": [181, 182], "static_as_native_dtyp": [181, 182], "static_asarrai": [181, 182], "static_asin": [181, 182], "static_asinh": [181, 182], "static_assert_supports_inplac": [181, 182], "static_astyp": [181, 182], "static_atan": [181, 182], "static_atan2": [181, 182], "static_atanh": [181, 182], "static_bitwise_and": [181, 182], "static_bitwise_invert": [181, 182], "static_bitwise_left_shift": [181, 182], "static_bitwise_or": [181, 182], "static_bitwise_right_shift": [181, 182], "static_bitwise_xor": [181, 182], "static_broadcast_arrai": [181, 182], "static_broadcast_to": [181, 182], "static_cache_fn": [181, 182], "static_ceil": [181, 182], "static_choleski": [181, 182], "static_clear_mem_on_dev": [181, 182], "static_clip_matrix_norm": [181, 182], "static_clip_vector_norm": [181, 182], "static_closest_valid_dtyp": [181, 182], "static_concat": [181, 182], "static_constant_pad": [181, 182], "static_container_typ": [181, 182], "static_conv1d": [181, 182], "static_conv1d_transpos": [181, 182], "static_conv2d": [181, 182], "static_conv2d_transpos": [181, 182], "static_conv3d": [181, 182], "static_conv3d_transpos": [181, 182], "static_copy_arrai": [181, 182], "static_co": [181, 182], "static_cosh": [181, 182], "static_cross": [181, 182], "static_cumprod": [181, 182], "static_cumsum": [181, 182], "static_current_backend": [181, 182], "static_current_backend_str": [181, 182], "static_default": [181, 182], "static_default_devic": [181, 182], "static_default_dtyp": [181, 182], "static_default_float_dtyp": [181, 182], "static_default_int_dtyp": [181, 182], "static_depthwise_conv2d": [181, 182], "static_det": [181, 182], "static_dev": [181, 182], "static_dev_clon": [181, 182], "static_dev_clone_arrai": [181, 182], "static_dev_clone_it": [181, 182], "static_dev_clone_nest": [181, 182], "static_dev_dist": [181, 182], "static_dev_dist_arrai": [181, 182], "static_dev_dist_it": [181, 182], "static_dev_dist_nest": [181, 182], "static_dev_unifi": [181, 182], "static_dev_unify_arrai": [181, 182], "static_dev_unify_it": [181, 182], "static_dev_unify_nest": [181, 182], "static_dev_util": [181, 182], "static_diagon": [181, 182], "static_dropout": [181, 182], "static_dtyp": [181, 182], "static_dtype_bit": [181, 182], "static_eigh": [181, 182], "static_eigvalsh": [181, 182], "static_einops_rearrang": [181, 182], "static_einops_reduc": [181, 182], "static_einops_repeat": [181, 182], "static_einsum": [181, 182], "static_empti": [181, 182], "static_empty_lik": [181, 182], "static_equ": [181, 182], "static_erf": [181, 182], "static_execute_with_gradi": [181, 182], "static_exist": [181, 182], "static_exp": [181, 182], "static_expand_dim": [181, 182], "static_expm1": [181, 182], "static_ey": [181, 182], "static_finfo": [181, 182], "static_flip": [181, 182], "static_floor": [181, 182], "static_floor_divid": [181, 182], "static_floormod": [181, 182], "static_fourier_encod": [181, 182], "static_from_dlpack": [181, 182], "static_ful": [181, 182], "static_full_lik": [181, 182], "static_function_supported_dtyp": [181, 182], "static_function_unsupported_dtyp": [181, 182], "static_gath": [181, 182], "static_gelu": [181, 182], "static_get_all_arrays_in_memori": [181, 182], "static_get_all_ivy_arrays_on_dev": [181, 182], "static_get_min_bas": [181, 182], "static_get_min_denomin": [181, 182], "static_get_num_dim": [181, 182], "static_get_referrers_recurs": [181, 182], "static_gpu_is_avail": [181, 182], "static_great": [181, 182], "static_greater_equ": [181, 182], "static_handle_nest": [181, 182], "static_handle_out_argu": [181, 182], "static_has_nan": [181, 182], "static_iinfo": [181, 182], "static_indices_wher": [181, 182], "static_infer_devic": [181, 182], "static_infer_dtyp": [181, 182], "static_inplace_arrays_support": [181, 182], "static_inplace_decr": [181, 182], "static_inplace_incr": [181, 182], "static_inplace_upd": [181, 182], "static_inplace_variables_support": [181, 182], "static_inputs_to_native_arrai": [181, 182], "static_inv": [181, 182], "static_invalid_dtyp": [181, 182], "static_is_arrai": [181, 182], "static_is_float_dtyp": [181, 182], "static_is_int_dtyp": [181, 182], "static_is_ivy_arrai": [181, 182], "static_is_ivy_contain": [181, 182], "static_is_native_arrai": [181, 182], "static_isfinit": [181, 182], "static_isinf": [181, 182], "static_isnan": [181, 182], "static_layer_norm": [181, 182], "static_leaky_relu": [181, 182], "static_less": [181, 182], "static_less_equ": [181, 182], "static_linear": [181, 182], "static_linspac": [181, 182], "static_log": [181, 182], "static_log10": [181, 182], "static_log1p": [181, 182], "static_log2": [181, 182], "static_logaddexp": [181, 182], "static_logical_and": [181, 182], "static_logical_not": [181, 182], "static_logical_or": [181, 182], "static_logical_xor": [181, 182], "static_logspac": [181, 182], "static_lstm_upd": [181, 182], "static_match_kwarg": [181, 182], "static_matmul": [181, 182], "static_matrix_norm": [181, 182], "static_matrix_pow": [181, 182], "static_matrix_rank": [181, 182], "static_matrix_transpos": [181, 182], "static_max": [181, 182], "static_maximum": [181, 182], "static_mean": [181, 182], "static_meshgrid": [181, 182], "static_min": [181, 182], "static_minimum": [181, 182], "static_multi_head_attent": [181, 182], "static_multinomi": [181, 182], "static_multiprocess": [181, 182], "static_native_arrai": [181, 182], "static_neg": [181, 182], "static_nonzero": [181, 182], "static_not_equ": [181, 182], "static_num_arrays_in_memori": [181, 182], "static_num_cpu_cor": [181, 182], "static_num_gpu": [181, 182], "static_num_ivy_arrays_on_dev": [181, 182], "static_one_hot": [181, 182], "static_on": [181, 182], "static_ones_lik": [181, 182], "static_out": [181, 182], "static_outputs_to_ivy_arrai": [181, 182], "static_percent_used_mem_on_dev": [181, 182], "static_permute_dim": [181, 182], "static_pinv": [181, 182], "static_posit": [181, 182], "static_pow": [181, 182], "static_print_all_arrays_in_memori": [181, 182], "static_print_all_ivy_arrays_on_dev": [181, 182], "static_prod": [181, 182], "static_promote_typ": [181, 182], "static_qr": [181, 182], "static_queue_timeout": [181, 182], "static_random_norm": [181, 182], "static_relu": [181, 182], "static_remaind": [181, 182], "static_repeat": [181, 182], "static_reshap": [181, 182], "static_result_typ": [181, 182], "static_round": [181, 182], "static_scaled_dot_product_attent": [181, 182], "static_scatter_flat": [181, 182], "static_scatter_nd": [181, 182], "static_se": [181, 182], "static_set_default_devic": [181, 182], "static_set_default_dtyp": [181, 182], "static_set_default_float_dtyp": [181, 182], "static_set_default_int_dtyp": [181, 182], "static_set_min_bas": [181, 182], "static_set_min_denomin": [181, 182], "static_set_queue_timeout": [181, 182], "static_set_split_factor": [181, 182], "static_set_tmp_dir": [181, 182], "static_set_with_grad": [181, 182], "static_shap": [181, 182], "static_shape_to_tupl": [181, 182], "static_shuffl": [181, 182], "static_sigmoid": [181, 182], "static_sign": [181, 182], "static_sin": [181, 182], "static_sinh": [181, 182], "static_slogdet": [181, 182], "static_softmax": [181, 182], "static_softplu": [181, 182], "static_solv": [181, 182], "static_split": [181, 182], "static_split_factor": [181, 182], "static_split_func_cal": [181, 182], "static_sqrt": [181, 182], "static_squar": [181, 182], "static_squeez": [181, 182], "static_stable_divid": [181, 182], "static_stable_pow": [181, 182], "static_stack": [181, 182], "static_std": [181, 182], "static_stop_gradi": [181, 182], "static_sum": [181, 182], "static_supports_inplac": [181, 182], "static_svd": [181, 182], "static_svdv": [181, 182], "static_swapax": [181, 182], "static_tensordot": [181, 182], "static_til": [181, 182], "static_tmp_dir": [181, 182], "static_to_devic": [181, 182], "static_to_list": [181, 182], "static_to_native_arrays_and_back": [181, 182], "static_to_numpi": [181, 182], "static_to_scalar": [181, 182], "static_total_mem_on_dev": [181, 182], "static_tpu_is_avail": [181, 182], "static_trac": [181, 182], "static_tril": [181, 182], "static_triu": [181, 182], "static_trunc": [181, 182], "static_try_else_non": [181, 182], "static_type_promote_arrai": [181, 182], "static_unique_al": [181, 182], "static_unique_count": [181, 182], "static_unique_invers": [181, 182], "static_unique_valu": [181, 182], "static_unset_default_devic": [181, 182], "static_unset_default_dtyp": [181, 182], "static_unset_default_float_dtyp": [181, 182], "static_unset_default_int_dtyp": [181, 182], "static_unset_with_grad": [181, 182], "static_unstack": [181, 182], "static_used_mem_on_dev": [181, 182], "static_valid_dtyp": [181, 182], "static_value_is_nan": [181, 182], "static_var": [181, 182], "static_vari": [181, 182], "static_variable_data": [181, 182], "static_vecdot": [181, 182], "static_vector_norm": [181, 182], "static_vector_to_skew_symmetric_matrix": [181, 182], "static_wher": [181, 182], "static_with_grad": [181, 182], "static_zero_pad": [181, 182], "static_zero": [181, 182], "static_zeros_lik": [181, 182], "supports_inplac": [181, 182, 756], "tmp_dir": [181, 182, 756], "to_native_arrays_and_back": [181, 182, 365, 371, 391], "to_scalar": [181, 182, 756], "total_mem_on_dev": [181, 182, 369, 468], "tpu_is_avail": [181, 182, 468], "tril": [181, 182, 412], "triu": [181, 182, 412], "try_else_non": [181, 182, 756], "type_promote_arrai": [181, 182, 431], "unique_al": [181, 182, 1071], "unique_count": [181, 182, 1071], "unique_invers": [181, 182, 1071], "unique_valu": [181, 182, 1071], "unset_default_devic": [181, 182, 468], "unset_default_dtyp": [181, 182, 431], "unset_default_float_dtyp": [181, 182, 431], "unset_default_int_dtyp": [181, 182, 431], "unset_with_grad": [181, 182, 830], "used_mem_on_dev": [181, 182, 468], "valid_dtyp": [181, 182, 431], "value_is_nan": [181, 182, 756], "variable_data": [181, 182, 830], "with_grad": [181, 182, 830, 862], "zeros_lik": [181, 182, 412, 967, 968, 971, 1129], "at_dev": [181, 183, 184, 468, 481, 482], "container_method": [184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 440, 442, 444, 519, 521, 523, 526, 527, 528, 530, 534, 535, 536, 537, 539, 541, 543, 547, 548, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 587, 588, 591, 592, 595, 596, 597, 600, 601, 602, 604, 608, 609, 610, 612, 616, 617, 618, 620, 624, 625, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 688, 690, 692, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 738, 740, 743, 745, 746, 748, 750, 751, 752, 754, 757, 759, 761, 769, 770, 785, 787, 789, 832, 834, 836, 837, 838, 840, 842, 843, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 861, 903, 905, 952, 954, 956, 957, 959, 961, 962, 964, 966, 968, 970, 972, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1050, 1052, 1056, 1058, 1060, 1061, 1063, 1077, 1079, 1081, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1114, 1115, 1116, 1118, 1121, 1123, 1125, 1127], "adam_upd": [184, 324, 325, 377, 830], "lr": [184, 189, 230, 237, 238, 258, 280, 290, 292, 293, 295, 324, 325, 376, 377, 830, 837, 838, 839, 840, 842, 843, 844, 845, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 1166, 1167, 1168, 1169, 1170, 1171], "mw_tm1": [184, 189, 237, 280, 292, 324, 325, 830, 837, 838, 839, 840, 850, 851, 852, 853], "vw_tm1": [184, 189, 237, 280, 292, 324, 325, 830, 837, 838, 839, 840, 850, 851, 852, 853], "add_ivy_container_instance_method": [184, 350], "containerexampl": [184, 191, 350, 351], "static_all_equ": [184, 193, 322, 323, 757, 759], "int32": [184, 210, 285, 316, 317, 368, 431, 440, 442, 443, 444, 452, 756, 825, 967, 981, 984, 1087, 1104, 1107, 1112], "int64": [184, 210, 285, 316, 317, 368, 431, 440, 442, 443, 444, 452, 518, 573, 576, 1066, 1067, 1068, 1087, 1104, 1107, 1112], "clip_vector_norm": [184, 322, 323, 756], "max_norm": [184, 213, 322, 323, 756, 768, 769, 770, 771], "gradient_descent_upd": [184, 324, 325, 830, 1027, 1028, 1029, 1030, 1129], "is_vari": [184, 324, 325, 370, 830], "lamb_upd": [184, 324, 325, 830], "max_trust_ratio": [184, 237, 292, 324, 325, 830, 850, 851, 852, 853, 1166, 1168], "decay_lambda": [184, 237, 238, 292, 293, 324, 325, 830, 850, 851, 852, 853, 854, 855, 856, 857, 1166, 1168, 1169], "lars_upd": [184, 324, 325, 830], "optimizer_upd": [184, 324, 325, 830], "effective_grad": [184, 258, 295, 324, 325, 830, 858, 859, 860, 861], "random_uniform": [184, 338, 339, 369, 377, 1054, 1129], "static_ab": [184, 320, 321, 519], "static_adam_step": [184, 324, 325, 832], "87": [184, 279, 296, 324, 325, 338, 339, 830, 832, 835, 836, 1056, 1058], "976": [184, 279, 324, 325, 518, 747, 830, 832, 835, 836], "static_adam_upd": [184, 324, 325, 837], "static_add": [184, 320, 321, 359, 360, 367, 666], "static_argsort": [184, 344, 345, 1077], "static_binary_cross_entropi": [184, 332, 333, 952], "static_can_cast": [184, 316, 317, 440], "from_": [184, 285, 316, 317, 431, 440, 443, 444], "static_clip": [184, 334, 335, 968], "static_rol": [184, 286, 334, 335, 360, 367, 968, 972, 1001], "static_cross_entropi": [184, 332, 333, 957], "static_divid": [184, 320, 321, 367, 617, 618], "static_gather_nd": [184, 322, 323, 785], "static_gradient_descent_upd": [184, 324, 325, 842], "static_is_vari": [184, 324, 325, 846], "static_lamb_upd": [184, 324, 325, 850], "static_lars_upd": [184, 324, 325, 854], "static_multipli": [184, 320, 321, 367, 688], "static_optimizer_upd": [184, 324, 325, 858], "static_randint": [184, 338, 339, 1056], "20": [184, 296, 338, 339, 375, 518, 577, 580, 606, 713, 716, 729, 732, 881, 891, 893, 917, 919, 936, 938, 1054, 1056, 1057, 1058, 1066, 1069, 1070, 1087, 1088, 1091, 1115], "15": [184, 296, 338, 339, 353, 360, 518, 557, 560, 713, 716, 868, 871, 881, 891, 893, 917, 919, 936, 938, 967, 1001, 1004, 1049, 1050, 1053, 1054, 1056, 1057, 1058, 1066, 1069, 1071, 1072, 1087, 1088, 1091, 1115], "16": [184, 296, 302, 308, 320, 321, 338, 339, 354, 360, 376, 518, 548, 553, 742, 743, 745, 751, 868, 874, 881, 891, 893, 917, 919, 1056, 1058, 1066, 1070, 1087, 1088, 1091, 1115], "12": [184, 296, 338, 339, 353, 360, 367, 518, 557, 560, 577, 580, 589, 713, 716, 756, 774, 792, 830, 832, 835, 881, 891, 893, 917, 919, 936, 938, 967, 985, 988, 993, 996, 1001, 1004, 1049, 1050, 1053, 1054, 1056, 1057, 1058, 1066, 1070, 1071, 1072, 1087, 1088, 1091, 1115], "40": [184, 296, 338, 339, 518, 589, 729, 732, 881, 917, 919, 1056, 1058, 1087, 1088, 1091, 1115], "gpu": [184, 296, 338, 339, 354, 369, 375, 390, 468, 487, 490, 503, 505, 509, 511, 516, 1056, 1058], "62": [184, 296, 338, 339, 1056, 1058], "52": [184, 296, 338, 339, 830, 832, 835, 881, 917, 919, 1056, 1058, 1071, 1072, 1087, 1088, 1091, 1115], "95": [184, 296, 338, 339, 830, 832, 835, 1056, 1058], "37": [184, 296, 338, 339, 518, 742, 1049, 1050, 1053, 1056, 1058], "42": [184, 296, 338, 339, 378, 401, 407, 830, 832, 835, 881, 917, 919, 1054, 1056, 1058, 1064, 1087, 1088, 1091, 1115], "14": [184, 296, 338, 339, 356, 360, 367, 518, 577, 580, 830, 832, 835, 868, 880, 881, 891, 893, 917, 919, 1056, 1058, 1071, 1072, 1087, 1088, 1091, 1115], "13": [184, 296, 338, 339, 360, 367, 518, 557, 560, 577, 580, 589, 729, 732, 756, 774, 830, 832, 835, 868, 880, 881, 891, 893, 917, 919, 1049, 1050, 1053, 1056, 1058, 1066, 1070, 1071, 1072, 1087, 1088, 1091, 1115], "static_random_uniform": [184, 338, 339, 1060], "static_sort": [184, 344, 345, 1082], "static_sparse_cross_entropi": [184, 332, 333, 962], "static_subtract": [184, 320, 321, 367, 737], "static_tan": [184, 320, 321, 360, 367, 548, 553, 751], "143": [184, 302, 308, 320, 321, 360, 518, 548, 553, 742, 743, 745, 751], "38": [184, 302, 308, 320, 321, 360, 518, 548, 553, 742, 743, 745, 751], "static_tanh": [184, 320, 321, 553], "76": [184, 303, 320, 321, 518, 553, 589, 748, 830, 832, 835, 881, 936, 938, 1087, 1088, 1091, 1115], "96": [184, 303, 320, 321, 518, 553, 742, 748, 830, 832, 835, 881, 917, 919, 1087, 1088, 1091, 1115], "995": [184, 303, 309, 320, 321, 518, 548, 553, 747, 748, 750], "9999": [184, 303, 320, 321, 553, 748], "strongli": [352, 353, 1129, 1135], "welcom": [352, 353, 354, 1129, 1135], "skill": 352, "vetern": 352, "beginn": 352, "aspect": [352, 376, 1129], "guid": [352, 353, 354, 362, 1129], "through": [352, 354, 355, 357, 360, 363, 364, 367, 372, 373, 375, 376, 377, 378, 389, 518, 549, 552], "journei": [352, 1129, 1135], "inclusvi": 352, "big": [352, 390], "team": [352, 353, 354], "board": 352, "contributor": [352, 353, 354, 372, 1129], "section": [352, 354, 355, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 1071, 1072, 1073, 1075], "below": [352, 353, 355, 356, 357, 358, 360, 363, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 389, 412, 427, 428, 518, 557, 560, 577, 580, 589, 713, 716, 747, 881, 888, 891, 893, 939, 941, 967, 981, 984, 985, 988, 1071, 1072, 1073, 1076, 1077, 1080, 1129], "best": [352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 756, 806], "go": [352, 353, 354, 355, 357, 358, 360, 367, 372, 376, 390, 1031, 1042], "finish": [352, 353, 357, 1129], "dive": [352, 354, 355, 372, 375, 376, 390, 1129], "environ": [352, 354, 356, 389], "basic": [352, 355, 356], "fork": [352, 353, 756, 807], "doc": [352, 355, 359, 371, 373, 376, 377, 1129], "document": [352, 354, 374, 376, 378], "local": [352, 353, 356, 363], "task": [352, 354, 389, 1027, 1028, 1029, 1030, 1129], "help": [352, 353, 360, 364, 366, 367, 375, 376, 377, 388, 756, 762, 1087, 1112, 1129], "video": [352, 354, 359, 360, 371], "realli": [353, 367, 390], "contribut": [353, 354, 355, 373, 1135], "toward": [353, 373, 967, 1001, 1004, 1129, 1135], "page": [353, 354, 374, 378, 388, 1129, 1135], "explain": [353, 354, 355, 358, 359, 360, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 1129, 1135], "main": [353, 356, 365, 367, 412, 417, 427, 428, 881, 891, 893, 939, 941], "prefer": [353, 367], "git": [353, 354], "submodul": [353, 354, 355, 356, 361, 362, 363, 369, 372, 373, 377, 1129, 1164, 1165, 1172, 1173], "com": 353, "unifyai": [353, 356], "http": [353, 359, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 537, 540, 577, 580, 581, 584, 589, 614, 697, 700, 729, 732, 733, 736, 830, 832, 835, 837, 839, 967, 981, 984, 1001, 1004, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095], "gh": 353, "your_fold": 353, "id": [353, 366, 367, 468, 487, 1162, 1163], "cours": [353, 354, 360, 376, 390], "whatev": [353, 390], "integr": [353, 362, 431, 437], "familiar": [353, 355], "sure": [353, 355, 361], "elig": 353, "free": [353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 389, 1129], "student": 353, "licenc": 353, "peopl": [353, 354, 357], "seem": [353, 377, 390], "miss": [353, 360, 362, 366, 367, 1166, 1170], "explicit": [353, 356, 367, 368, 370, 373, 390], "remind": 353, "channel": [353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 756, 783, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160], "pace": 353, "suggest": [353, 354, 358], "latest": [353, 355, 356, 359, 390, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 537, 540, 577, 580, 581, 584, 589, 614, 697, 700, 729, 732, 733, 736, 967, 981, 984, 1001, 1004, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1150, 1159], "packag": [353, 356, 390], "ensur": [353, 354, 362, 366, 368, 371, 756, 800], "pypi": [353, 355, 390], "person": [353, 354], "experi": [353, 374, 376, 390], "avoid": [353, 354, 362, 364, 365, 367, 375, 468, 518, 610, 613], "pip": [353, 389, 1129], "instal": [353, 356, 389, 1129], "abil": [353, 374, 390], "perhap": [353, 375, 376, 377, 390], "track": [353, 354, 468, 1031, 1043, 1162, 1163], "run": [353, 356, 361, 362, 364, 371, 373, 374, 375, 376, 377, 378, 389, 390, 468, 477, 830, 832, 835, 837, 839, 850, 852, 1027, 1028, 1029, 1030, 1150, 1161, 1162, 1163], "command": [353, 356, 1129], "ivy_dev": [353, 354, 356], "name": [353, 354, 356, 359, 362, 373, 375, 376, 378, 409, 410, 756, 762, 881, 894, 896, 923, 925, 930, 1071, 1072, 1073], "setup": 353, "click": [353, 354, 359, 1129], "icon": [353, 354], "side": [353, 354], "choos": [353, 354, 378, 468, 513, 518, 674, 677, 678, 681, 1066, 1070, 1071, 1072, 1073, 1075, 1087, 1092, 1095, 1096, 1099, 1100, 1103], "panel": 353, "select": [353, 354, 362, 373, 375, 378, 390], "drop": [353, 390], "down": [353, 375], "path": [353, 356], "manual": [353, 354, 362, 377, 1031, 1032, 1041, 1042], "builtin": [353, 356, 375, 377], "requir": [353, 356, 358, 359, 360, 362, 365, 366, 368, 369, 371, 375, 390, 409, 410, 518, 729, 732, 881, 894, 896, 967, 1011, 1014, 1139, 1140], "cmd": [353, 356], "directori": [353, 354, 356, 756, 817], "folder": [353, 354, 356, 358, 361, 362, 363], "abov": [353, 354, 356, 359, 360, 363, 364, 366, 367, 370, 371, 375, 376, 377, 378, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 532, 537, 540, 557, 560, 577, 580, 581, 584, 589, 614, 688, 691, 697, 700, 713, 716, 729, 732, 733, 736, 742, 747, 756, 784, 868, 871, 880, 881, 888, 891, 893, 894, 896, 939, 941, 967, 981, 984, 985, 988, 1001, 1004, 1049, 1050, 1053, 1054, 1056, 1057, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1104, 1107, 1108, 1111, 1112, 1120, 1121, 1124], "m": [353, 354, 356, 357, 373, 412, 423, 427, 428, 756, 765, 881, 882, 884, 888, 891, 893, 894, 896, 897, 899, 900, 902, 903, 906, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 927, 929, 930, 932, 933, 935, 939, 941, 1054, 1059, 1060, 1062], "python3": [353, 356], "script": [353, 354, 356, 360, 373, 390], "bat": [353, 354, 356], "OR": [353, 354, 356, 518, 569, 572, 678, 681, 1120, 1125, 1128], "bin": [353, 354, 356], "mac": [353, 354, 356], "linux": [353, 354, 356], "virtualenv": 353, "os": 353, "note": [353, 354, 358, 359, 360, 367, 518, 709, 712, 881, 894, 896, 930, 967, 1011, 1014, 1071, 1073, 1087, 1096, 1099], "tick": [353, 354], "To": [353, 360, 363, 367, 376, 377, 378, 1129], "ivy_test": [353, 354], "test_array_api": [353, 354, 361, 362], "cd": [353, 354, 356], "txt": 353, "visual": [353, 390], "jetbrain": 353, "remot": 353, "mitig": 353, "potenti": [353, 372, 518, 610, 613], "conflict": [353, 354, 376], "yet": [353, 355, 367], "particular": [353, 354, 358, 370, 518, 519, 522], "system": [353, 390, 881, 927, 929], "instruct": [353, 355], "desktop": 353, "wsl": 353, "powershel": 353, "admin": 353, "visit": 353, "link": 353, "profession": 353, "execut": [353, 356, 367, 370, 373, 375, 378, 390, 756, 827], "deploy": 353, "top": [353, 354, 362, 376, 377, 1129], "press": [353, 376, 1129], "ok": 353, "caus": [353, 354, 360, 362, 367, 370, 390], "earlier": [353, 354], "might": [353, 354, 358, 362, 365, 373, 375, 376, 756, 777], "necessari": [353, 360, 364, 367, 370], "virtualis": 353, "detail": [353, 354, 355, 358, 361, 362, 363, 364, 365, 367, 371, 376, 377, 412, 418, 1071, 1072, 1073, 1075], "sudo": 353, "apt": 353, "ca": 353, "certif": 353, "curl": 353, "gnupg": 353, "lsb": 353, "mkdir": 353, "keyr": 353, "fssl": 353, "download": [353, 362], "gpg": 353, "dearmor": 353, "o": [353, 373, 756, 765], "echo": 353, "deb": 353, "arch": 353, "dpkg": 353, "architectur": [353, 378, 390], "lsb_releas": 353, "cs": 353, "tee": 353, "null": 353, "ce": 353, "cli": 353, "containerd": 353, "io": 353, "compos": [353, 367, 390], "plugin": 353, "systemctl": 353, "permiss": 353, "relat": [353, 354, 389, 468], "post": [353, 378, 1049, 1050, 1053, 1129, 1135], "It": [353, 354, 356, 357, 358, 359, 360, 364, 366, 367, 370, 373, 375, 376, 377, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 437, 439, 468, 513, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 685, 686, 687, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 737, 741, 742, 746, 747, 751, 752, 755, 756, 768, 769, 771, 774, 778, 779, 780, 782, 785, 788, 796, 809, 812, 813, 830, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 887, 888, 890, 891, 893, 897, 899, 900, 902, 903, 906, 907, 909, 911, 913, 914, 916, 917, 919, 920, 922, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 960, 962, 965, 967, 968, 971, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1065, 1066, 1067, 1070, 1071, 1075, 1076, 1077, 1080, 1082, 1085, 1120, 1121, 1124, 1125, 1128], "headach": 353, "arm": [353, 354], "m1": 353, "instead": [353, 354, 355, 359, 360, 362, 363, 367, 370, 371, 373, 375, 376, 390], "featur": [353, 358, 371, 376, 1129], "vm": 353, "azur": 353, "cloud": [353, 389], "defin": [353, 355, 358, 359, 368, 371, 375, 377, 390, 518, 688, 691, 709, 712, 756, 809, 881, 885, 887, 894, 896, 927, 929, 1054, 1056, 1057, 1087, 1092, 1095, 1096, 1099, 1100, 1103], "dockerfil": [353, 356], "longer": [353, 368, 370], "worri": 353, "platform": 353, "agnost": [353, 366, 371, 373, 375, 378, 390, 1129], "usual": 353, "studio": 353, "favourit": 353, "extens": [353, 354, 359, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 532, 537, 540, 557, 560, 577, 580, 581, 584, 589, 614, 697, 700, 713, 716, 729, 732, 733, 736, 742, 747, 881, 888, 967, 981, 984, 985, 988, 1001, 1004, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1120, 1121, 1124], "theme": 353, "too": [353, 354, 390, 518, 532, 688, 691], "done": [353, 354, 360, 362, 376], "unsupport": [353, 368, 431, 452, 453], "slow": 353, "ipad": 353, "long": [353, 354, 360, 868, 878], "browser": 353, "cool": [353, 358], "requisit": 353, "head": [353, 367, 868, 879, 1129, 1150, 1161], "pane": [353, 354], "readi": [353, 355], "begin": [353, 1031, 1032, 1042], "outlin": [353, 354, 355, 357, 359, 362, 363, 367, 370, 375], "dropdown": 353, "tab": [353, 376, 1129], "master": [353, 354, 367], "vs": 353, "view": [353, 354, 412, 418, 868, 871, 875], "built": [353, 374, 412, 413, 468, 1150, 1161, 1162, 1163], "bottom": 353, "box": 353, "patient": 353, "upto": 353, "minut": 353, "launch": 353, "That": [353, 354, 375, 376, 377, 518, 709, 712], "refer": [353, 354, 362, 363, 368, 371, 390, 412, 417, 518, 610, 613, 658, 661, 830, 832, 835, 837, 839, 881, 942, 944, 948, 950, 1087, 1108, 1111, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1150, 1160], "approach": [353, 354, 362, 363, 367, 375, 376, 390], "colour": 353, "applic": [353, 368, 369, 377, 868, 879, 880, 1031, 1037, 1043], "good": [353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 377], "chanc": 353, "vscode": 353, "explor": [353, 374, 378, 389], "troubleshoot": 353, "sometim": [353, 354], "ever": [353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "64": [353, 376, 377, 518, 729, 732, 733, 736, 868, 874, 875, 881, 917, 919, 1087, 1088, 1091, 1115, 1129, 1150, 1161], "bit": [353, 360, 363, 367, 375, 431, 450, 451, 454, 518, 561, 564, 565, 568, 573, 576, 1087, 1104, 1107, 1112], "usr": 353, "more": [353, 354, 355, 357, 358, 360, 362, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 389, 390, 412, 413, 431, 438, 518, 610, 613, 881, 903, 906, 967, 985, 988, 1071, 1072, 1073, 1075, 1129], "nutshel": [353, 371], "hook": 353, "lint": 353, "fix": [353, 354], "fail": [353, 355, 361, 362, 373, 375], "attempt": [353, 390], "succe": 353, "problemat": 353, "proce": [353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "modifi": [353, 354, 359, 363, 368, 369, 373], "properli": [353, 357], "enter": [353, 354, 366, 368, 369, 371, 468], "unsur": [353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371], "feel": [353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 1129], "server": [354, 1129], "context": [354, 360, 367, 368, 369, 468, 756, 807, 868, 879, 1150, 1161], "suitabl": [354, 358, 367], "quick": [354, 357, 377], "tendenc": 354, "land": 354, "end": [354, 367, 370, 372, 389, 390, 412, 413, 518, 549, 552, 1129, 1135], "world": 354, "come": [354, 355, 377, 388, 1129, 1135], "fly": 354, "hard": [354, 375], "receiv": [354, 362, 368, 369, 468, 477, 478, 756, 763, 806, 1150, 1160], "respons": [354, 356], "internship": 354, "comment": 354, "trigger": 354, "unansw": 354, "label": [354, 373, 374, 378, 951, 952, 955, 957, 960, 962, 965], "respond": 354, "someon": [354, 390], "els": [354, 355, 358, 363, 364, 370, 373, 375, 377, 378, 390, 756, 766, 777, 781, 1031, 1041], "strive": [354, 390], "repli": 354, "newli": [354, 370, 409, 410, 431, 437, 756, 767], "bug": [354, 362], "serv": [354, 362, 363, 366, 367, 371, 372, 1129], "suspect": 354, "behaviour": [354, 359, 362, 366, 367, 370, 371, 375], "observ": 354, "confid": 354, "wrong": 354, "someth": [354, 358, 376, 377, 390], "bet": 354, "act": [354, 360, 390], "placehold": [354, 366, 371, 1031, 1043], "mark": [354, 362], "ii": [354, 1087, 1088, 1091, 1115], "iii": 354, "titl": [354, 1129], "issue_numb": 354, "delet": [354, 356], "No": [354, 373], "progress": [354, 367, 374, 378], "pr": 354, "soon": [354, 367, 388, 390, 1129, 1135], "solut": [354, 362, 367, 881, 927, 929], "review": [354, 358], "merg": 354, "everi": [354, 355, 356, 360, 361, 362, 363, 364, 365, 367, 370, 371, 373, 375, 377, 412, 419, 420, 756, 757, 760], "dai": 354, "close": [354, 359, 518, 610, 613, 713, 716, 881, 930], "likewis": [354, 359, 363, 367, 368, 371, 376], "freed": 354, "purpos": [354, 356, 360, 362, 363, 365, 366, 367, 371, 372, 375, 518, 610, 613, 1129], "remain": [354, 360, 390, 518, 532, 688, 691, 709, 712, 967, 997, 1000, 1031, 1037], "short": [354, 377, 868, 878], "basi": [354, 361, 376], "situat": [354, 378], "alloc": [354, 390, 412, 427, 428, 431, 437, 468], "upon": [354, 360, 362, 370, 390], "period": 354, "prevent": [354, 370, 375, 830, 832, 835, 837, 839, 850, 852, 1087, 1112, 1166, 1167, 1168], "unabl": 354, "obvious": 354, "never": [354, 367], "reflect": [354, 366], "qualiti": 354, "hypothet": 354, "frustrat": 354, "delai": 354, "busi": 354, "fine": [354, 375, 378], "becaus": [354, 359, 362, 363, 364, 366, 368, 369, 370, 371, 373, 377, 378, 390], "inact": 354, "me": 354, "unfairli": 354, "definit": [354, 363, 368, 375, 881, 882, 884, 885, 887], "investig": 354, "Then": [354, 356, 375, 390], "practic": [354, 362], "separ": [354, 362, 366, 373, 375, 376], "branch": [354, 367, 390, 409, 410, 518, 549, 552], "role": [354, 374], "date": 354, "upstream": [354, 361], "complic": [354, 373], "root": [354, 356, 376, 518, 729, 732, 1054, 1055, 1059], "merge_with_upstream": 354, "sh": 354, "name_of_your_branch": 354, "resolv": [354, 1087, 1104, 1107, 1112], "push": [354, 361], "both": [354, 359, 360, 363, 367, 369, 370, 371, 373, 375, 376, 377, 378, 389, 390, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 458, 518, 519, 522, 532, 537, 540, 581, 584, 614, 697, 700, 705, 708, 729, 732, 733, 736, 742, 756, 784, 830, 832, 835, 868, 871, 880, 881, 885, 887, 903, 906, 942, 944, 967, 1001, 1004, 1049, 1050, 1053, 1087, 1092, 1095, 1120, 1121, 1124], "abort": 354, "tediou": 354, "resolut": 354, "stash": 354, "reinstat": 354, "fetch": 354, "uncommit": 354, "unstag": 354, "untrack": 354, "comprehens": 354, "explan": [354, 359, 367, 371, 375], "atlassian": 354, "tutori": 354, "wrote": 354, "piec": [354, 363, 365, 366, 373], "inform": [354, 431, 451, 454, 756, 762, 830, 863], "tag": 354, "usu": 354, "describ": [354, 374, 378, 1087, 1088, 1091, 1104, 1107, 1108, 1111, 1112, 1115], "navig": [354, 357], "blame": 354, "revis": 354, "author": [354, 1129], "eg": 354, "past": 354, "l": [354, 357, 881, 882, 884, 894, 896, 903, 906, 939, 941], "grep": 354, "v": [354, 373, 376, 377, 378, 868, 880, 1129, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1170, 1172, 1173], "commit_id": 354, "handi": 354, "histori": 354, "toggl": 354, "vertic": 354, "highlight": [354, 360], "previou": [354, 362, 371, 378, 390, 830, 837, 839, 850, 852], "whenev": [354, 375, 376], "think": [354, 360], "interact": [354, 1129], "gain": [354, 372, 377, 1141], "quit": [354, 355, 359, 363, 365, 366], "yourself": [354, 355, 389], "simpler": [354, 375], "cannot": [354, 364, 368, 378], "least": [354, 360, 363, 366, 881, 903, 906], "final": [354, 359, 360, 363, 366, 368, 370, 373, 375, 376, 412, 421, 422, 756, 783, 1150, 1161], "tickbox": 354, "corner": 354, "span": 354, "intent": [354, 370], "larg": [354, 376, 518, 532, 688, 691], "discourag": 354, "philosophi": 354, "increment": [354, 756, 799], "frequent": [354, 355], "valuabl": 354, "infrequ": 354, "earli": [354, 1129], "wast": 354, "spot": [354, 363], "mistak": 354, "propos": 354, "mountain": 354, "advoc": [354, 390], "individu": [354, 355, 363], "per": [354, 376, 468, 868, 869, 870, 871, 872, 873, 874, 875, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "style": [354, 1066, 1069], "ve": [354, 372, 375, 1054, 1055, 1129], "actual": [354, 357, 363, 370, 372, 375, 377, 390], "aim": [354, 372], "part": [354, 358, 361, 362, 363, 373, 374, 378, 389, 390, 412, 427, 428, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 1162, 1163], "subsect": 354, "session": [354, 1129], "block": [354, 363, 372, 374, 378, 390, 468, 1129], "smaller": [354, 373, 378, 967, 968, 971, 1001, 1004, 1087, 1104, 1107, 1112], "edit": 354, "beauti": 354, "particularli": [354, 376, 390], "concern": [354, 357, 360, 367, 370, 372], "effici": [354, 362, 363, 367, 370, 371, 373, 376, 390], "difficult": [354, 362, 390, 1071, 1072, 1073, 1075], "undo": 354, "stress": 354, "frequenc": [354, 756, 783], "pycharm": 354, "pytest": [354, 362], "button": 354, "declar": 354, "insid": [354, 356, 358, 368], "exec": 354, "rm": 354, "rf": 354, "cp": 354, "ivy_contain": 354, "bash": [354, 356], "test_ivi": [354, 362], "test_funct": 354, "test_cor": 354, "test_imag": 354, "test_random_crop": 354, "header": 354, "q": [354, 390, 868, 880, 881, 894, 896, 923, 925], "array_api_test": 354, "test_creation_funct": 354, "test_arang": 354, "window": [354, 356, 868, 869, 870, 871, 872, 873, 874, 875, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "variou": [354, 359, 365, 371, 389], "wherebi": [355, 367, 1031, 1043], "broad": 355, "todo": [355, 362], "commit": [355, 362], "NOT": [355, 518, 674, 677], "resourc": 355, "hypothesi": 355, "cover": [355, 359, 360, 363, 365, 372], "lambda": [355, 373, 376, 1166, 1169, 1171], "direct": [355, 377, 378, 389, 1076, 1082, 1085], "bind": [355, 367], "aforement": 355, "categori": [355, 358, 366, 367, 368, 372, 1129], "parent": [355, 375], "hint": [355, 358, 359, 363, 366, 370, 371, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 532, 537, 540, 557, 560, 577, 580, 581, 584, 589, 614, 697, 700, 713, 716, 729, 732, 733, 736, 742, 747, 756, 784, 868, 871, 880, 881, 888, 967, 981, 984, 985, 988, 1001, 1004, 1049, 1050, 1053, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1120, 1121, 1124], "its": [355, 356, 359, 431, 438, 468, 512, 881, 903, 906, 967, 981, 984, 997, 1000, 1001, 1004, 1015, 1018], "thorough": [355, 359, 362, 371], "transpil": [355, 372, 374, 1129, 1135], "builder": [356, 388, 390, 1129], "maco": 356, "ubuntu": 356, "uid": 356, "make_docs_without_dock": 356, "rel": [356, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 881, 891, 893, 902, 911, 913, 920, 922, 939, 941, 967, 985, 988, 1001, 1004, 1076, 1077, 1080, 1082, 1085, 1129], "synchron": 356, "rest": [356, 374, 378], "remove_doc": 356, "_": [356, 359, 367, 370, 375, 376, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 537, 540, 577, 580, 581, 584, 589, 614, 697, 700, 729, 732, 733, 736, 830, 832, 835, 837, 839, 881, 948, 950, 967, 981, 984, 1001, 1004, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095], "privat": [356, 1166, 1170], "fulfil": [356, 372, 1129], "autogenerated_sourc": 356, "png": [356, 376], "_imag": 356, "lastli": 356, "rst": 356, "partial_sourc": 356, "conf": 356, "create_rst_fil": 356, "filter": [356, 868, 869, 870, 871, 872, 873, 874, 875, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "repres": [356, 375, 412, 423, 431, 450, 518, 527, 528, 531, 532, 541, 544, 548, 553, 556, 588, 589, 592, 688, 691, 725, 728, 746, 747, 751, 868, 877, 881, 890, 926, 927, 929], "overal": [356, 359, 367, 368, 369, 378], "markup": 356, "extract": [356, 358], "get_functions_and_class": 356, "doctr": 356, "readm": [356, 390], "module_nam": 356, "copy_readme_to_rst": 356, "tabl": 356, "toc": 356, "tree": 356, "append_toctree_to_rst": 356, "create_index_rst": 356, "\u03c0": [356, 518, 524, 537, 540, 545, 549, 552], "namespac": [356, 358, 368, 373, 378], "who": [357, 372, 390], "mainli": [357, 374, 376], "under": [357, 359, 360, 361, 362, 363, 367, 372, 373, 376, 378], "hood": [357, 360, 362, 363, 367, 372, 373, 376, 378], "weed": [357, 372], "behind": [357, 372, 374, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860], "tour": 357, "primari": [357, 362, 364, 370, 390], "composit": [357, 362, 364, 366, 367, 370, 373, 377, 378, 390], "nestabl": [357, 359, 360, 362, 370, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 532, 537, 540, 581, 584, 614, 697, 700, 729, 732, 733, 736, 742, 756, 784, 868, 871, 880, 967, 1001, 1004, 1049, 1050, 1053, 1087, 1092, 1095, 1120, 1121, 1124], "dynam": [357, 368, 369, 370, 373, 409, 410], "runtim": [357, 362, 468], "h": [357, 367, 868, 871, 872, 873, 874, 875], "j": [357, 756, 764, 765, 881, 939, 941, 1087, 1088, 1091, 1115], "k": [357, 373, 412, 417, 427, 428, 756, 764, 868, 880, 881, 903, 906, 923, 925, 927, 929, 930, 932, 933, 935, 939, 941, 1054, 1059, 1060, 1062, 1066, 1069], "borrow": 357, "n": [357, 412, 423, 427, 428, 756, 765, 868, 876, 881, 891, 893, 902, 903, 906, 910, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 930, 932, 933, 935, 939, 941, 942, 944, 945, 947, 948, 950, 967, 977, 980, 981, 984, 989, 992, 1011, 1014, 1023, 1026, 1054, 1059, 1060, 1062, 1066, 1069, 1087, 1096, 1099, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "taken": [358, 378, 881, 891, 893], "constant": [358, 363, 377, 378, 390, 468, 477, 478, 967, 977, 980, 1031, 1037, 1049, 1050, 1053, 1141, 1142, 1146, 1149, 1162, 1163, 1164, 1165], "compil": [358, 367, 372, 374, 390, 1129, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171], "meta": [358, 366, 1028, 1029, 1030], "overlap": 358, "sever": [358, 390, 881, 900], "judgement": 358, "locat": [358, 362, 364, 369, 1054, 1055], "some_namespac": 358, "some_backend": 358, "another_backend": 358, "break": [358, 371, 375, 390, 1129], "anyth": [358, 1129], "refactor": 358, "ongo": 358, "subfold": [358, 362], "via": [358, 367, 368, 369, 370, 373, 375, 376, 389, 1031, 1032, 1041, 1042], "file_nam": 358, "my_func": [358, 360], "int": [358, 360, 363, 367, 368, 369, 370, 371, 378, 401, 406, 409, 410, 412, 415, 417, 419, 420, 421, 422, 425, 427, 428, 429, 431, 439, 448, 450, 451, 454, 457, 468, 490, 493, 494, 495, 496, 504, 505, 506, 512, 513, 518, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 756, 762, 774, 775, 778, 779, 780, 783, 784, 793, 809, 812, 813, 818, 819, 828, 830, 832, 835, 837, 839, 850, 852, 868, 869, 871, 873, 874, 875, 881, 885, 887, 891, 893, 936, 938, 939, 941, 942, 944, 945, 947, 951, 957, 960, 962, 965, 967, 973, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1006, 1007, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1043, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1062, 1064, 1066, 1067, 1068, 1076, 1077, 1080, 1082, 1085, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "nativedtyp": [358, 368, 369, 371, 412, 413, 414, 415, 416, 417, 419, 420, 424, 425, 426, 429, 430, 431, 436, 437, 447, 448, 449, 458, 1087, 1112], "nativedevic": [358, 368, 369, 371, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 424, 425, 426, 429, 430, 468, 485, 486, 487, 501, 507, 509, 511, 513, 514, 517, 756, 809, 1054, 1055, 1056, 1057, 1059, 1060, 1062], "my": 358, "numer": [358, 377, 412, 423, 431, 437, 518, 519, 522, 532, 581, 584, 593, 596, 610, 613, 614, 617, 618, 621, 630, 633, 634, 637, 638, 641, 642, 645, 674, 677, 678, 681, 688, 691, 693, 696, 697, 700, 705, 708, 709, 712, 717, 720, 733, 736, 737, 741, 752, 755, 756, 791, 792, 814, 815, 820, 821, 881, 885, 887, 903, 906, 917, 919, 930, 936, 938, 939, 941, 942, 944, 1054, 1065, 1066, 1067, 1068, 1087, 1092, 1095, 1104, 1107, 1112, 1141], "cooler": 358, "produc": [358, 468, 477, 478, 868, 880], "something_cool": 358, "category_nam": [359, 363, 368, 369, 371], "contrast": [359, 371], "backend_nam": [359, 363, 364, 365, 368, 369, 371], "account": 359, "instanti": 359, "firstli": [359, 360, 363, 366, 368, 370, 376], "templat": [359, 1129], "spec": [359, 360], "api_specif": [359, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 537, 540, 577, 580, 581, 584, 589, 614, 697, 700, 729, 732, 733, 736, 967, 981, 984, 1001, 1004, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095], "array_api": 359, "preview": 359, "render": 359, "incorrectli": 359, "onlin": [359, 1129], "approxim": [359, 401, 402, 518, 524, 527, 528, 531, 537, 540, 541, 544, 545, 549, 552, 585, 588, 589, 592, 606, 610, 613, 650, 653, 654, 657, 658, 661, 662, 665, 705, 708, 721, 724, 725, 728, 742, 747, 881, 902, 911, 913, 920, 922], "tangent": [359, 401, 408, 518, 545, 548, 549, 552, 553, 556, 742, 746, 747, 751], "domain": [359, 518, 524, 527, 528, 531, 537, 540, 541, 544, 545, 549, 552, 585, 588, 589, 592, 606, 610, 613, 650, 653, 654, 657, 662, 665, 721, 724, 725, 728, 729, 732, 742, 747], "infin": [359, 411, 431, 437, 518, 519, 522, 527, 528, 531, 532, 535, 541, 544, 545, 549, 552, 581, 584, 585, 588, 589, 592, 596, 606, 609, 610, 613, 614, 617, 618, 621, 630, 633, 634, 637, 650, 653, 654, 657, 662, 665, 666, 669, 688, 691, 705, 708, 709, 712, 713, 716, 721, 724, 725, 728, 729, 732, 742, 747, 752, 755, 881, 945, 947, 1087, 1092, 1095, 1100, 1103, 1120, 1121, 1124, 1125, 1128], "codomain": [359, 518, 524, 527, 528, 531, 537, 540, 541, 544, 545, 549, 552, 585, 588, 589, 592, 606, 610, 613, 650, 653, 654, 657, 662, 665, 721, 724, 725, 728, 729, 732, 742, 747], "x_i": [359, 518, 519, 522, 524, 527, 528, 531, 537, 540, 541, 544, 545, 561, 564, 581, 584, 585, 588, 589, 592, 606, 610, 613, 614, 630, 633, 634, 637, 638, 641, 650, 653, 654, 657, 662, 665, 674, 677, 693, 696, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 736, 742, 747, 752, 755, 1071, 1072, 1073, 1075, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1108, 1111, 1112, 1116, 1119], "assum": [359, 364, 368, 375, 376, 390, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 532, 537, 540, 557, 560, 577, 580, 581, 584, 585, 589, 614, 697, 700, 713, 716, 721, 724, 729, 732, 733, 736, 742, 747, 756, 784, 868, 871, 880, 881, 888, 967, 981, 984, 985, 988, 1001, 1004, 1049, 1050, 1053, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1120, 1121, 1124], "express": [359, 373, 378, 518, 524, 537, 540, 545, 549, 552, 585, 721, 724, 742], "radian": [359, 518, 524, 537, 540, 545, 549, 552, 585, 721, 724, 742], "float": [359, 363, 367, 368, 370, 371, 375, 377, 401, 403, 411, 412, 413, 415, 417, 419, 420, 421, 422, 425, 429, 431, 437, 447, 451, 456, 459, 468, 501, 507, 511, 514, 517, 518, 519, 522, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 577, 580, 581, 584, 585, 588, 589, 592, 593, 596, 598, 601, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 642, 645, 646, 649, 650, 653, 654, 657, 662, 665, 666, 669, 688, 691, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 721, 724, 725, 728, 729, 732, 737, 741, 742, 746, 747, 751, 752, 755, 756, 768, 769, 771, 783, 791, 792, 814, 815, 820, 821, 830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 868, 871, 875, 880, 881, 882, 884, 888, 894, 896, 897, 899, 900, 902, 911, 913, 920, 922, 923, 925, 927, 929, 930, 945, 947, 951, 952, 955, 957, 960, 962, 965, 1027, 1028, 1029, 1030, 1049, 1050, 1053, 1054, 1059, 1060, 1062, 1071, 1072, 1073, 1075, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119], "operand": [359, 518, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 549, 552, 577, 580, 581, 584, 585, 588, 589, 592, 606, 609, 610, 613, 614, 650, 653, 654, 657, 662, 665, 666, 669, 688, 691, 705, 708, 709, 712, 713, 716, 721, 724, 725, 728, 729, 732, 742, 747, 752, 755, 1087, 1088, 1091, 1092, 1095, 1100, 1103, 1112, 1115], "whose": [359, 412, 427, 428, 518, 527, 528, 531, 541, 544, 548, 553, 556, 585, 588, 589, 592, 705, 708, 721, 724, 725, 728, 742, 746, 747, 751, 756, 767, 881, 882, 884, 888, 891, 893, 894, 896, 897, 899, 900, 902, 911, 913, 914, 916, 917, 919, 920, 922, 923, 925, 927, 929, 930, 932, 933, 935, 939, 941, 967, 985, 988, 1001, 1004, 1071, 1072, 1073, 1087, 1088, 1091, 1115], "ref": [359, 518, 573, 576, 642, 645, 688, 691, 697, 700, 709, 712, 737, 741, 967, 1011, 1014], "promot": [359, 363, 368, 431, 437, 440, 443, 458, 459, 463, 518, 524, 527, 528, 531, 532, 535, 537, 540, 541, 544, 545, 548, 553, 556, 557, 560, 565, 568, 569, 572, 573, 576, 577, 580, 585, 588, 589, 592, 593, 606, 609, 610, 613, 650, 653, 654, 657, 662, 665, 666, 669, 682, 685, 688, 691, 705, 708, 709, 712, 721, 724, 725, 728, 729, 732, 742, 746, 747, 751, 881, 882, 884, 885, 887, 900, 902, 903, 906, 911, 913, 917, 919, 920, 922, 927, 929, 942, 944, 945, 947, 967, 1011, 1014, 1087, 1096, 1099], "But": [359, 367, 378], "needless": 359, "info": [359, 1129], "subset": [359, 362, 371, 373], "extend": [359, 362, 364, 371], "renam": 359, "conform": [359, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 532, 537, 540, 557, 560, 577, 580, 581, 584, 589, 610, 613, 614, 697, 700, 713, 716, 729, 732, 733, 736, 742, 747, 881, 888, 967, 981, 984, 985, 988, 1001, 1004, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1120, 1121, 1124], "org": [359, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 537, 540, 577, 580, 581, 584, 589, 614, 697, 700, 729, 732, 733, 736, 830, 832, 835, 837, 839, 967, 981, 984, 1001, 1004, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095], "elementwise_funct": [359, 518, 519, 522, 537, 540, 577, 580, 581, 584, 589, 614, 697, 700, 729, 732, 733, 736, 967, 1001, 1004, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095], "descript": [359, 367, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 532, 537, 540, 557, 560, 577, 580, 581, 584, 589, 614, 697, 700, 713, 716, 729, 732, 733, 736, 742, 747, 756, 784, 868, 871, 880, 881, 888, 945, 947, 967, 981, 984, 985, 988, 1001, 1004, 1049, 1050, 1053, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095, 1120, 1121, 1124], "simplic": [359, 377, 389, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 440, 443, 518, 519, 522, 532, 537, 540, 557, 560, 577, 580, 581, 584, 589, 614, 697, 700, 713, 716, 729, 732, 733, 736, 742, 747, 756, 784, 868, 871, 880, 881, 888, 967, 981, 984, 985, 988, 1001, 1004, 1049, 1050, 1053, 1071, 1072, 1073, 1076, 1077, 1080, 1087, 1092, 1095], "judgment": 359, "beyond": [359, 967, 1001, 1004], "text": 359, "func_nam": [359, 360, 363], "pure": [359, 375, 378, 390], "themselv": [359, 363, 367, 368, 369, 377, 1031, 1032], "operator_nam": 359, "succinct": 359, "contstructor": 359, "though": [359, 363, 368, 376, 390], "forward": [359, 378, 389, 390, 1162, 1163, 1166, 1170], "_forward": [359, 373, 376, 377, 1129], "former": 359, "trainabl": [359, 374, 376, 377, 830, 846, 848, 1139, 1140, 1162, 1163, 1172], "explicitli": [359, 363, 364, 366, 367, 370, 373, 390, 881, 894, 896, 1150, 1159, 1161, 1162, 1163], "latter": [359, 364], "implicit": [359, 367, 373], "docst": 359, "eight": 360, "static_": 360, "op_nam": 360, "__r": 360, "four": [360, 363, 368, 371, 376], "__sub__": [360, 366, 367, 371, 375], "__mul__": [360, 366, 367, 371, 375], "__truediv__": [360, 366, 367], "respect": [360, 366, 367, 368, 371, 412, 423, 518, 519, 522, 532, 535, 549, 552, 557, 560, 565, 568, 569, 572, 573, 576, 577, 580, 593, 596, 598, 601, 609, 617, 618, 621, 622, 625, 626, 629, 642, 645, 646, 649, 666, 669, 670, 673, 678, 681, 682, 685, 688, 691, 697, 700, 709, 712, 737, 741, 830, 832, 835, 837, 839, 841, 842, 844, 850, 852, 854, 856, 858, 860, 881, 923, 925, 1027, 1028, 1029, 1030], "recap": [360, 367, 377], "independ": [360, 361, 365, 367, 373, 378, 881, 885, 887, 927, 929, 1054, 1055], "combinatorili": 360, "variat": [360, 362], "grid": [360, 362, 389, 412, 423], "vari": [360, 362, 367, 375, 1071, 1072, 1073, 1075], "simplest": 360, "small": [360, 363, 373, 377, 390, 518, 688, 691, 881, 902, 911, 913, 920, 922, 1049, 1050, 1053, 1164, 1165], "unus": [360, 370, 409, 410], "18": [360, 367, 518, 577, 580, 881, 891, 893, 917, 919, 1087, 1088, 1091, 1115], "excess": [360, 364, 375], "showcas": [360, 389], "demonstr": [360, 375], "replic": [360, 368], "meant": 360, "imaginari": 360, "some_flag": 360, "another_flag": 360, "54": [360, 518, 585, 589, 729, 732, 868, 880, 881, 917, 919, 1054, 1059, 1087, 1088, 1091, 1115], "jointli": 360, "three": [360, 367, 372, 412, 423, 1129], "x0": [360, 756, 764], "procedur": 360, "sens": [360, 367, 375], "5574077": 360, "1850398": 360, "5463025": 360, "8422884": 360, "91601413": 360, "9647598": 360, "3738229": 360, "1597457": 360, "0963247": 360, "9955841": 360, "3278579": 360, "multi": [360, 367, 372, 390, 868, 879, 881, 885, 887, 1129, 1135, 1150, 1161], "seper": [360, 756, 783], "pars": [360, 390], "satisfi": [360, 881, 948, 950], "far": [360, 369, 374, 375, 1031, 1032, 1042], "asid": [360, 389], "irrelev": [360, 368], "increasingli": 360, "complex": [360, 376, 377, 378, 390, 881, 894, 896, 930], "rule": [360, 362, 363, 366, 367, 368, 431, 437, 440, 443, 459, 518, 548, 553, 556, 573, 576, 593, 688, 691, 709, 712, 746, 751, 881, 882, 884, 885, 887, 917, 919, 927, 929], "count": [360, 376, 468, 506, 881, 942, 944, 967, 985, 988, 1071, 1072, 1073, 1120, 1121, 1124, 1125, 1128], "14254655": 360, "1578213": 360, "380515": 360, "17": [360, 367, 401, 403, 881, 891, 893, 1054, 1059], "trivial": 360, "By": [360, 363, 367, 370, 377, 378, 756, 774, 775, 881, 942, 944, 967, 993, 996, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "non": [360, 367, 368, 373, 409, 410, 431, 437, 455, 518, 674, 677, 678, 681, 868, 871, 881, 888, 911, 913, 930, 936, 938, 942, 944, 945, 947, 1066, 1067, 1068, 1069, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1116, 1119, 1120, 1121, 1124, 1125, 1128, 1162, 1163, 1166, 1170], "dictat": [360, 366, 370, 371], "exlud": 360, "unit": [361, 362, 390, 401, 402, 403, 404, 468], "thoroughli": [361, 362], "ci": [361, 362, 390], "failur": 361, "On": [362, 374, 378], "fixtur": 362, "consum": [362, 367, 371, 468], "300": [362, 518, 713, 716], "hit": [362, 373], "permit": [362, 366, 371], "action": 362, "eleg": 362, "intellig": 362, "sampl": [362, 868, 876, 1054, 1055, 1059, 1060, 1062, 1087, 1108, 1111, 1116, 1119, 1150, 1158], "rang": [362, 376, 377, 378, 412, 413, 421, 422, 1071, 1072, 1087, 1104, 1107, 1112, 1129], "cach": [362, 363, 468, 486, 756, 767], "unexplor": 362, "known": 362, "repeatedli": [362, 367, 1031, 1040], "upload": 362, "artifact": 362, "parametr": 362, "strategi": 362, "statement": [362, 390], "plai": [362, 378], "helper": [362, 376], "verifi": [362, 368, 369, 375, 1129, 1135], "truth": [362, 518, 598, 601, 622, 625, 626, 629, 642, 645, 646, 649, 697, 700], "opt": [362, 364, 370, 375], "defer": [362, 363, 366, 367, 368, 369, 370], "suffic": [362, 365], "catch": [362, 756, 777], "systemat": 362, "safeguard": 362, "inabl": 362, "fact": [362, 376], "categor": [363, 369], "mutual": [363, 367], "constitut": [363, 373, 1087, 1108, 1111, 1116, 1119], "venn": 363, "diagram": 363, "light": [363, 390], "wherea": [363, 366, 368, 369, 371, 378], "hand": [363, 390], "log_pr": [363, 367, 370], "array_arg": 363, "typic": 363, "whatsoev": [363, 367], "commonli": [363, 1087, 1108, 1111, 1116, 1119], "outsid": [363, 369, 373, 375, 378, 967, 968, 971, 1011, 1014], "denomin": [363, 390, 756, 782, 792, 815, 820, 821, 1049, 1050, 1053, 1164, 1165], "divis": [363, 518, 573, 576, 593, 596, 617, 618, 621, 709, 712, 756, 782, 792, 815, 820, 821, 830, 832, 835, 837, 839, 850, 852, 1166, 1167, 1168], "deal": [363, 390], "concurr": [363, 367], "weight": [363, 367, 377, 378, 830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 868, 877, 878, 880, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1162, 1163, 1166, 1168, 1169], "modif": 363, "decor": [363, 365, 367, 368, 369, 370], "group": [363, 367], "briefli": [363, 376], "cast": [363, 368, 431, 437, 440, 443, 967, 973, 976, 1087, 1104, 1107, 1112, 1129], "get_all_arrays_on_dev": 363, "nested_map": [363, 1031], "index_nest": [363, 1031], "implicit_backend": 364, "unless": [364, 369, 370, 390, 518, 688, 691, 756, 809], "__dict__": [364, 373, 375], "ivy_original_dict": [364, 373], "unmodifi": [364, 368], "moment": [364, 390, 830, 832, 835, 837, 839, 850, 852, 1166, 1167, 1168], "fallback": 364, "freedom": [364, 1087, 1108, 1111, 1116, 1119], "recommend": [364, 518, 674, 677, 678, 681, 709, 712, 1087, 1096, 1099], "achiev": [365, 376, 378], "wrapper": [365, 366, 367, 368, 370, 371, 375], "logic": [365, 366, 368, 369, 375, 468, 504, 518, 670, 673, 674, 677, 678, 681, 1120, 1121, 1124, 1125, 1128, 1129], "topic": [365, 375], "tf": [366, 368, 369, 370, 371, 373, 378, 390, 1129], "_data": [366, 375], "organiz": [366, 367], "inherit": [366, 367, 375], "bear": [366, 367, 368], "mind": [366, 367], "necessarili": [366, 367], "although": [366, 367], "underpin": [366, 367, 373], "programmat": [366, 367], "backup": [366, 367], "accident": [366, 367], "readabl": [366, 367, 371, 375, 376], "absent": [366, 367], "perk": [366, 367], "auto": [366, 367, 376], "throw": [366, 375], "imposs": 366, "coupl": [366, 367, 375, 377], "anywai": 366, "secondli": [366, 368], "easier": 366, "five": [367, 376], "decis": [367, 373, 375], "displai": [367, 376], "arbitrarili": [367, 376], "__repr__": 367, "control": [367, 368, 370, 375, 376, 389], "__getattr__": 367, "underli": [367, 518, 557, 560, 569, 572, 577, 580, 682, 685], "__setattr__": 367, "__contains__": 367, "__getstate__": 367, "__setstate__": 367, "unpickl": 367, "expand": [367, 756, 783, 967, 981, 984], "children": 367, "shallowest": 367, "deepest": 367, "67": [367, 518, 577, 580, 589], "22": [367, 518, 577, 580, 881, 891, 893, 917, 919, 1066, 1070, 1087, 1088, 1091, 1115], "25": [367, 518, 729, 732, 733, 736, 881, 891, 893, 900, 951, 957, 960, 1049, 1050, 1053, 1087, 1088, 1091, 1115], "retain_grad": [367, 830, 841], "dy": [367, 830, 841], "dx": [367, 830, 841], "technic": [367, 370, 371, 390], "autograd": [367, 390], "grad": [367, 376, 377, 378, 1129, 1166, 1170], "redund": 367, "num_head": [367, 868, 879, 1150, 1161], "mask": [367, 868, 879, 880], "to_q_fn": [367, 868, 879], "to_kv_fn": [367, 868, 879], "to_out_fn": [367, 370, 868, 879], "to_q_v": [367, 868, 879], "to_kv_v": [367, 868, 879], "to_out_v": [367, 868, 879], "measur": [367, 868, 879, 1150, 1161], "dot": [367, 868, 879, 880, 881, 936, 938, 942, 944, 1150, 1161], "product": [367, 518, 688, 691, 756, 774, 868, 879, 880, 881, 885, 887, 903, 906, 917, 919, 936, 938, 942, 944, 1087, 1088, 1091, 1104, 1107, 1115, 1150, 1161], "implicitli": 367, "intuit": [367, 376, 377], "debug": [367, 376], "chronolog": 367, "had": [367, 370], "sequenti": [367, 377], "flow": [367, 389], "implic": 367, "slightli": [367, 373, 377], "eager": [367, 390], "int8": [368, 431, 452], "int16": [368, 431, 440, 443, 452, 1087, 1104, 1107, 1112], "uint8": [368, 431, 440, 443, 452], "uint16": [368, 431, 453, 1087, 1104, 1107, 1112], "uint32": [368, 431, 453, 1087, 1104, 1107, 1112], "uint64": [368, 431, 453, 1087, 1104, 1107, 1112], "bfloat16": [368, 431, 452], "float16": [368, 431, 453], "all_dtyp": 368, "all_numeric_dtyp": 368, "all_int_dtyp": 368, "all_float_dtyp": 368, "fall": [368, 372, 1129, 1162, 1163, 1166, 1170], "valid": [368, 373, 431, 445, 868, 869, 870, 871, 872, 873, 874, 875, 967, 1011, 1014, 1120, 1121, 1124, 1125, 1128, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "invalid": [368, 881, 942, 944, 1120, 1121, 1124, 1125, 1128], "thirdli": 368, "native_float32": 368, "importantli": [368, 375, 378, 389], "varieti": [368, 369], "conveni": [368, 369, 371, 374, 376, 377], "arguabl": [368, 369], "compound": 368, "overflow": [368, 518, 532, 1087, 1112], "arr": [368, 369, 1049, 1050, 1053], "scalar": [368, 373, 378, 390, 412, 420, 756, 809, 826, 829, 881, 945, 947], "settabl": [368, 369], "jnp": [368, 369, 370, 371, 378, 1129], "jaxarrai": [368, 369, 370, 371], "mx": [368, 369, 370, 1129], "nd": [368, 369, 370, 373, 378, 1129], "deleg": 368, "fill_valu": [368, 412, 419, 420, 518, 601, 625, 626, 629], "as_n": [368, 431, 446, 447, 448, 449, 468, 487, 488, 509], "idx": [369, 375, 756, 762], "tpu": [369, 468, 490, 515], "aliv": [369, 468, 502, 506, 508, 756, 790, 808, 810], "amount": [369, 468, 514, 951, 952, 955, 957, 960, 962, 965], "memori": [369, 370, 388, 390, 468, 486, 507, 512, 514, 517, 868, 878, 1129], "dual": 369, "thrown": [369, 390, 756, 800], "rare": [369, 390], "program": 370, "strictli": 370, "ration": 370, "speak": 370, "subtli": 370, "ensure_in_backend": [370, 756, 800], "x_nativ": 370, "val_n": 370, "is_ivy_arrai": [370, 375, 756], "assign": [370, 375], "elif": 370, "irrespect": [370, 375, 431, 437], "inclus": [370, 412, 413, 1054, 1056, 1057], "omit": [370, 371, 1071, 1072, 1073, 1075], "unspecifi": [370, 518, 705, 708, 709, 712, 881, 894, 896, 967, 1011, 1014], "predominantli": [370, 389], "math": [370, 378, 1129], "presenc": 370, "altern": [370, 376], "_wrap_fn": 370, "maxim": [370, 373], "inner": [370, 375, 881, 894, 896, 903, 906, 1027, 1028, 1029, 1030], "third": [370, 390, 881, 930, 1071, 1072], "addition": [370, 371], "leverag": 370, "equival": [370, 376, 378, 412, 413, 518, 573, 576, 674, 677, 678, 681, 709, 712, 881, 902, 911, 913, 920, 922, 927, 929, 945, 947], "input_arrai": 370, "adress": 371, "revisit": [371, 378], "dedic": [371, 375, 377, 830, 866, 1139, 1140], "__div__": 371, "dicat": 371, "futher": 371, "absenc": 371, "pep": 371, "484": 371, "annot": 371, "brittl": 371, "intend": [371, 1087, 1112], "freeli": 371, "inde": [371, 390], "flexibl": 371, "original_typ": 371, "cumbersom": 371, "sound": 372, "higher": [372, 373, 378, 390, 830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860], "overview": [372, 389], "handler": [372, 374, 378, 1129], "fledg": [373, 374], "syntact": [373, 378], "clip_by_valu": [373, 378], "clamp": [373, 378], "behavior": [373, 390, 518, 705, 708, 709, 712, 1071, 1072, 1073, 1075], "fit": [373, 967, 993, 996], "construct": [373, 374, 377, 378, 967, 1019, 1022, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173], "num": [373, 412, 421, 422], "power_seq": 373, "okai": 373, "bound": 373, "resid": [373, 377], "edg": [373, 378, 967, 968, 971, 977, 980, 1023, 1026, 1129], "larger": [373, 378, 431, 451, 967, 968, 971, 1001, 1004, 1087, 1108, 1111, 1116, 1119], "ml_framework": [373, 378, 412, 413], "current_framework": [373, 378], "furthermor": 373, "concaten": [373, 376, 468, 497, 756, 783, 967, 973, 976, 1129], "framework_handl": 373, "face": 373, "verbos": [373, 1129, 1176], "cprint": [373, 1175], "framework_stack": 373, "_determine_framework_from_arg": 373, "valueerror": [373, 967, 1007, 1010], "get_framework": 373, "neither": [373, 518, 532, 688, 691], "illustr": [373, 389], "un": [373, 431, 455], "nn": [373, 378, 412, 423, 1129], "init_h": [373, 868, 878], "init_c": [373, 868, 878], "kernel": [373, 390, 868, 878], "recurrent_kernel": [373, 868, 878], "bia": [373, 377, 868, 877, 878, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1160], "recurrent_bia": [373, 868, 878], "x_shape": 373, "batch_shap": [373, 375, 378, 756, 809, 868, 878, 879, 880, 881, 948, 950, 1054, 1055, 1150, 1159], "timestep": [373, 868, 878, 1150, 1159], "input_channel": [373, 377, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1159, 1160], "x_flat": 373, "wi": 373, "wi_x": 373, "wii_x": 373, "wif_x": 373, "wig_x": 373, "wio_x": 373, "recurr": [373, 868, 878], "wh": 373, "lstm": [373, 868, 878, 1150], "ht": 373, "ct": 373, "hts_list": 373, "unrol": [373, 376, 868, 878], "wii_xt": 373, "wif_xt": 373, "wig_xt": 373, "wio_xt": 373, "zip": 373, "htm1": 373, "ctm1": 373, "wh_htm1": 373, "whi_htm1": 373, "whf_htm1": 373, "whg_htm1": 373, "who_htm1": 373, "ft": 373, "gt": 373, "ot": 373, "offici": 373, "reliabl": 373, "sacrific": 373, "hear": 373, "virtu": 373, "pure_ivi": 373, "reduce_mean": [373, 376, 377, 378, 1129], "reduce_sum": [373, 1129], "reduce_var": 373, "compile_graph": [373, 378], "pure_torch": 373, "cat": [373, 378], "backbon": [373, 376], "_layer": 373, "super": [373, 376, 377, 378], "clean": [373, 374, 376], "random_unifrom": 373, "unclean": 373, "wx": 373, "temp": 373, "torchscript": 373, "fn": [373, 375, 391, 392, 393, 394, 395, 396, 397, 398, 399, 431, 452, 453, 468, 477, 478, 756, 762, 827, 1031, 1032, 1037, 1038, 1039, 1041, 1042, 1043, 1132, 1134], "example_input": [373, 409, 410], "static_argnum": [373, 409, 410], "static_argnam": [373, 409, 410], "jit": [373, 390], "frontend": 374, "primit": [374, 390], "hierarch": [374, 376, 377], "straight": [375, 1129], "arraywithlinalg": 375, "arraywithlog": 375, "arraywithmath": 375, "arraywithmeta": 375, "arraywithreduct": 375, "is_native_arrai": [375, 756], "_shape": 375, "_size": 375, "functool": 375, "mul": 375, "len": [375, 378, 412, 423], "_dtype": 375, "_devic": 375, "_dev_str": 375, "_pre_repr": 375, "_post_repr": 375, "ndim": [375, 881, 923, 925, 930], "mt": 375, "answer": [375, 390], "consol": 375, "typeerror": 375, "immut": 375, "behav": 375, "claim": 375, "truli": 375, "_native_wrapp": 375, "attributeerror": 375, "genuin": 375, "some_method": 375, "similarli": [375, 412, 423], "rewritten": 375, "__pow__": 375, "strang": 375, "power": [375, 376, 377, 518, 573, 576, 606, 705, 708, 756, 791, 814, 821, 881, 910, 1141], "enforc": 375, "notic": 375, "appear": [375, 967, 981, 984], "invers": [375, 389, 518, 524, 527, 528, 531, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 588, 592, 746, 751, 881, 900, 902, 920, 922], "_wrap_method": 375, "func_wrapp": [375, 391, 392, 393, 394, 395, 396, 397, 398, 399], "__name__": 375, "non_wrapped_method": 375, "_method_wrap": 375, "native_arg": 375, "native_kwarg": 375, "inner_fn": 375, "whist": 375, "unwrap": 375, "transit": 375, "needlessli": 375, "randn": 375, "_unwrap_method": 375, "method_wrap": 375, "compartment": 375, "public": [375, 756, 772], "newshap": 375, "new_shap": 375, "tidi": 375, "shorter": 375, "crystal": 375, "41": [375, 518, 577, 580, 729, 732, 881, 882, 884, 1087, 1112], "enough": [375, 376, 377], "ton": 376, "ado": [376, 377], "incred": [376, 390], "hash": 376, "soup": 376, "walk": [376, 377], "dct": 376, "cnt": 376, "combo": [376, 1129, 1135], "hold": [376, 756, 812, 813], "1000": [376, 518, 729, 732], "uda": 376, "3333": 376, "6667": 376, "178": 376, "new_weight": 376, "0600": 376, "3100": 376, "2400": 376, "6900": 376, "delimit": 376, "autocomplet": 376, "midwai": 376, "agent": 376, "total_spe": 376, "total_height": 376, "total_width": 376, "ag": 376, "tot": 376, "total_": 376, "total_h": 376, "batch_siz": [376, 868, 869, 870, 871, 872, 873, 874, 875, 1054, 1055], "dir": 376, "adam": [376, 377, 378, 830, 832, 835, 837, 839, 850, 852, 1129, 1166, 1168], "cnt0": 376, "cnt1": 376, "diff_0": 376, "diff_1": 376, "config0": 376, "config1": 376, "Not": [376, 377, 390, 411], "decod": 376, "l0": 376, "l1": [376, 881, 945, 947], "depth": [376, 377, 378, 389, 468, 492, 496, 500, 756, 794, 809, 1031, 1043, 1162, 1163], "clearer": 376, "truncat": 376, "decoder__l0": 376, "decoder__l1": 376, "encoder__l0": 376, "encoder__l1": 376, "height": 376, "l0__b": 376, "l0__w": 376, "l1__b": 376, "l1__w": 376, "printabl": 376, "obviou": 376, "foresight": 376, "untidili": 376, "update_ag": 376, "normalize_img": 376, "img": 376, "img_max": 376, "reduce_max": [376, 1129], "img_min": 376, "reduce_min": [376, 1129], "img_rang": 376, "agent_posit": 376, "agent_veloc": 376, "agent_cam_front_rgb": 376, "agent_cam_front_depth": 376, "agent_cam_rear_rgb": 376, "agent_cam_rear_depth": 376, "agent_cam_lidar": 376, "normal": [376, 967, 1011, 1014, 1049, 1050, 1053, 1054, 1059, 1164, 1165], "cleaner": 376, "camera": 376, "front_rgb": 376, "front_depth": 376, "rear_rgb": 376, "rear_depth": 376, "lidar": 376, "rgb": 376, "rear": 376, "veloc": 376, "cam": 376, "cam_max": 376, "cam_min": 376, "cam_rang": 376, "Of": 376, "ideal": 376, "perman": 376, "afterward": 376, "thread": 376, "incorpor": 376, "pretti": 376, "straightforward": 376, "dataload": [376, 388, 1129], "_cnt": 376, "img_": 376, "_dataset_s": 376, "_batch_siz": 376, "_count": [376, 377], "__next__": 376, "filenam": 376, "img_fnam": 376, "fname": 376, "loaded_img": 376, "cv2": 376, "imread": 376, "loader": [376, 390], "batch_slic": 376, "model": [376, 377, 1129], "mymodel": [376, 1129], "linear0": [376, 377, 1129], "linear1": [376, 377, 1129], "x_in": [376, 377, 378, 1129], "001": [376, 377, 830, 832, 835, 1049, 1050, 1053], "loss_fn": [376, 377, 378, 1129], "0145": 376, "grad_fn": 376, "addbackward0": 376, "_create_vari": 377, "output_channel": [377, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1159, 1160], "with_bia": [377, 1150, 1160], "_input_channel": 377, "_output_channel": 377, "_w_shape": 377, "_b_shape": 377, "_with_bia": 377, "8979": 377, "3198": 377, "0196": 377, "3126": 377, "3717": 377, "9687": 377, "6958": 377, "5122": 377, "3902": 377, "8800": 377, "5613": 377, "1982": 377, "nightmar": 377, "overcom": 377, "fc": 377, "9563": 377, "impact": 377, "v0": 377, "v1": 377, "6440": 377, "key0": 377, "1823": 377, "8075": 377, "linear3": 377, "v2": 377, "2346": 377, "counter": 377, "hidden": [377, 868, 878, 1150, 1159], "fed": [377, 468, 512], "1300": 377, "decoupl": 377, "scheme": 377, "weight_initi": [377, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160], "glorotuniform": [377, 1141, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160], "bias_initi": [377, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1160], "_w_init": 377, "_b_init": 377, "create_vari": [377, 1141], "var_shap": [377, 1141], "fan_out": [377, 1141], "fan_in": [377, 1141], "fan_mod": [377, 1141], "fan_sum": 377, "slight": 377, "misnom": 377, "saw": 377, "vanilla": [377, 1027, 1029], "descent": [377, 830, 842, 844, 1166, 1171], "lar": [377, 830, 850, 852, 854, 856, 1166], "lamb": [377, 830, 850, 852, 1166], "compile_on_next_step": [377, 1162, 1163, 1166, 1167, 1168, 1169, 1170, 1171], "_beta1": 377, "_beta2": 377, "_epsilon": 377, "_mw": 377, "_vw": 377, "_first_pass": 377, "_should_compil": 377, "_step": [377, 1166, 1170], "new_v": 377, "_lr": 377, "isinst": [377, 378, 756, 824], "_inplac": 377, "_stop_gradi": 377, "set_stat": [377, 1166, 1167, 1168, 1169, 1170, 1171], "pre": [378, 390, 468], "captur": 378, "sparse_funct": 378, "num_class": [378, 1054, 1055], "num_dim": 378, "new_axi": 378, "_linear": 378, "to_backend": 378, "jax_graph": 378, "learnabl": [378, 1049, 1050, 1053, 1164, 1165], "to_ivy_modul": [378, 1139], "thinli": 378, "whilst": 378, "to_haiku_modul": 378, "hk": 378, "loss_fn_t": 378, "transform": [378, 389, 868, 876, 877], "without_apply_rng": 378, "rng": 378, "prngkei": 378, "init": 378, "update_rul": 378, "01": [378, 518, 713, 716], "tree_multimap": 378, "mechan": [388, 390, 1129], "vision": [388, 1129], "robot": [388, 1129], "focus": 389, "field": [389, 881, 894, 896, 923, 925, 930, 1071, 1072, 1073], "perfect": 389, "3d": [389, 1150, 1155, 1156], "differenti": 389, "demo": [389, 1129], "orient": 389, "pose": 389, "euler": [389, 411], "quaternion": 389, "rotat": 389, "matric": [389, 412, 423, 427, 428, 868, 877, 881, 882, 884, 888, 891, 893, 894, 896, 897, 899, 900, 902, 910, 911, 913, 914, 916, 920, 922, 923, 925, 927, 929, 930, 932, 933, 935, 939, 941], "angl": [389, 518, 549, 552, 589, 725, 728, 747], "ivy_mech": 389, "target_facing_rotation_matrix": 389, "polar_to_cartesian_coord": 389, "ordin": [389, 881, 927, 929], "warp": 389, "optic": 389, "voxel": 389, "ivy_vis": 389, "coords_to_voxel_grid": 389, "render_pixel_coord": 389, "neural": [389, 868, 1129, 1136, 1150], "radianc": 389, "nerf": 389, "trajectori": 389, "motion": 389, "plan": [389, 1129], "mobil": 389, "ivy_robot": 389, "sample_spline_path": 389, "rigidmobil": 389, "sample_bodi": 389, "drone": 389, "sample_link": 389, "openai": 389, "swimmer": 389, "cumul": [389, 756, 774, 775], "reward": 389, "supervis": 389, "reinforc": 389, "door": [389, 390], "intersect": 389, "cartpol": 389, "mountain_car": 389, "pendulum": 389, "reacher": 389, "polici": 389, "condit": [389, 409, 410, 1031, 1041, 1042, 1066, 1070], "learnt": 389, "ture": 389, "ntm": 389, "egospher": 389, "spatial": 389, "esm": 389, "ivy_memori": 389, "egocentr": 389, "room": 389, "inspir": 389, "doubt": 390, "grate": 390, "put": 390, "probe": 390, "undergo": 390, "remark": 390, "surpris": 390, "backward": [390, 518, 709, 712, 881, 942, 944, 1120, 1121, 1124, 1125, 1128], "lock": 390, "contunu": 390, "minor": 390, "xla": 390, "buffer": 390, "kind": [390, 431, 451, 454, 518, 705, 708, 1087, 1104, 1107, 1112], "gold": 390, "dex": 390, "phase": 390, "lax": 390, "scan": 390, "tricki": 390, "predictor": 390, "tight": 390, "driver": 390, "schedul": 390, "algorithm": [390, 868, 869, 870, 871, 872, 873, 874, 875, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "dispatch": 390, "Will": 390, "ast": 390, "dynamic": 390, "cond": 390, "jacobian": 390, "checkpoint": 390, "autodiff": 390, "shine": 390, "merci": 390, "superset": 390, "cluster": 390, "compet": 390, "paradigm": 390, "parallelis": [390, 468, 477, 478], "spmd": 390, "mixtur": [390, 830, 832, 835], "expert": 390, "sophist": 390, "depart": 390, "routin": 390, "hundr": 390, "thousand": 390, "deepli": [390, 1031, 1033], "broadli": 390, "heavili": 390, "supplementari": 390, "Is": 390, "reusabl": 390, "fanci": 390, "fusion": 390, "lose": 390, "vmap": 390, "pmap": 390, "overhead": 390, "ineffici": 390, "eventu": 390, "supplement": 390, "backdoor": 390, "callback": 390, "record": 390, "metric": 390, "somewhat": 390, "outsourc": 390, "inputs_to_ivy_arrai": 391, "gaussian": [401, 402], "leaki": [401, 402, 403], "alpha": [401, 403], "rectifi": [401, 403, 404], "slope": [401, 403], "39": [401, 403, 518, 606, 830, 832, 835, 881, 917, 919, 1087, 1088, 1091, 1115], "85": [401, 403, 518, 577, 580], "48": [401, 403, 518, 729, 732, 830, 832, 835, 881, 917, 919, 1087, 1088, 1091, 1115], "88": [401, 403, 518, 577, 580, 881, 917, 919, 1087, 1088, 1091, 1115], "269": [401, 405], "731": [401, 405], "881": [401, 405], "214": [401, 405], "978": [401, 405], "891": [401, 405], "422": [401, 406], "155": [401, 406], "0768": [401, 406], "231": [401, 406], "693": [401, 406, 951, 962, 965], "49": [401, 406, 518, 729, 732, 1087, 1088, 1091, 1115], "147": [401, 406], "363": [401, 406], "3461": [401, 407], "6491": [401, 407], "535": [401, 407], "hyperbol": [401, 408, 518, 527, 528, 531, 541, 544, 548, 553, 556, 588, 589, 592, 725, 728, 746, 747, 751], "55": [401, 408, 868, 874, 881, 917, 919, 1087, 1088, 1091, 1115], "501": [401, 408], "faster": [409, 410], "invoc": [409, 410], "718281828459045": 411, "newaxi": 411, "alia": 411, "pi": 411, "141592653589793": 411, "mathemat": [411, 518, 532, 549, 552, 610, 613, 688, 691, 881, 945, 947], "half": [412, 413, 1054, 1056, 1057, 1060, 1062], "chosen": [412, 413, 518, 549, 552, 1066, 1070], "distanc": [412, 413], "adjac": [412, 413], "creation_funct": [412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430], "interpret": [412, 414, 424], "uniniti": [412, 415, 416], "n_row": [412, 417], "n_col": [412, 417], "elsewher": [412, 417, 1066, 1070], "row": [412, 417, 881, 927, 929, 930, 1054, 1055, 1066, 1069], "column": [412, 417, 881, 894, 896, 923, 925, 927, 929, 930], "__dlpack__": [412, 418, 468, 513], "interchang": [412, 418, 967, 1015, 1018], "endpoint": [412, 421], "xy": [412, 423], "coordin": [412, 423, 518, 549, 552], "cartesian": [412, 423], "ij": [412, 423, 1087, 1088, 1091, 1115], "rank": [412, 423, 756, 828, 881, 885, 887, 911, 913, 923, 925, 927, 929, 939, 941, 942, 944, 945, 947, 967, 977, 980, 981, 984, 1011, 1014, 1023, 1026, 1066, 1069, 1120, 1121, 1124, 1125, 1128], "ni": [412, 423], "xi": [412, 423], "n1": [412, 423], "n2": [412, 423], "n3": [412, 423], "accordingli": [412, 423, 518, 610, 613, 881, 945, 947, 1066, 1068, 1071, 1072, 1073, 1075, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "xv": [412, 423], "yv": [412, 423], "triangular": [412, 427, 428, 881, 882, 884, 923, 925], "innermost": [412, 427, 428, 881, 882, 884, 888, 891, 893, 894, 896, 897, 899, 900, 902, 911, 913, 914, 916, 920, 922, 923, 925, 927, 929, 930, 932, 933, 935, 939, 941], "mxn": [412, 427, 428, 881, 891, 893, 902, 911, 913, 914, 916, 920, 922, 923, 925, 932, 933, 935, 939, 941], "defaultdtyp": [431, 432], "defaultfloatdtyp": [431, 433], "float_dtyp": [431, 447, 461], "defaultintdtyp": [431, 434], "dtype_in": [431, 435, 436, 450, 455, 456, 457, 467], "incompat": [431, 439], "occur": [431, 440, 443, 1066, 1067, 1068, 1071, 1072, 1073, 1075], "data_type_funct": [431, 440, 443], "closest": [431, 445, 518, 581, 584, 596, 614, 617, 618, 621, 713, 716, 752, 755], "floatdtyp": [431, 447], "int_dtyp": [431, 448, 462], "intdtyp": [431, 448], "followng": [431, 451], "occupi": [431, 451, 454, 756, 812, 813], "ep": [431, 451, 881, 902, 911, 913, 920, 922], "smallest_norm": [431, 451], "precis": [431, 451, 518, 688, 691, 729, 732], "encapsul": [431, 454], "type1": [431, 458], "type2": [431, 458], "arrays_and_dtyp": [431, 459], "ret1": [431, 463], "ret2": [431, 463], "noinspect": [432, 433, 434, 469, 831], "pyshadowingnam": [432, 433, 434, 469, 831], "defaultdevic": [468, 469], "__enter__": 468, "_dev": 468, "initialis": 468, "devcloneditem": [468, 490], "multidevitem": [468, 470, 473], "devclonedit": 468, "multidevit": [468, 471, 474, 477, 478, 482], "devclonednest": 468, "multidevnest": [468, 472, 475], "devdistitem": 468, "devdistit": 468, "devdistnest": 468, "devmanag": [468, 476], "dev_mapp": 468, "da_dim_s": 468, "safety_factor": 468, "min_dev_dim_s": 468, "max_dev_dim_step_ratio": 468, "min_unit_dev_tune_step": 468, "min_sf_tune_step": 468, "starting_split_factor": 468, "max_split_factor_step_s": 468, "tune_dev_alloc": 468, "tune_dev_split": 468, "mapper": [468, 477, 478], "receivess": 468, "ratio": [468, 830, 850, 852, 1166, 1168], "safe": [468, 477], "oom": 468, "tune": 468, "da_tune_step": 468, "ds_tune_step": 468, "to_clon": 468, "to_distribut": 468, "multidevic": [468, 477], "parallel": [468, 477, 478], "mutlidevic": [468, 477], "repeated_config_check": 468, "tune_step": 468, "devmapp": [468, 478], "ret_fn": [468, 477, 478], "queue_class": [468, 477, 478], "worker_class": [468, 477, 478], "worker": [468, 477, 478], "used_dev": [468, 477], "sf": [468, 477], "devmappermultiproc": 468, "multidev": [468, 479, 480, 481, 500], "profil": 468, "save_dir": [468, 483], "deviceic": [468, 489], "spread": [468, 500], "139740789224448": [468, 502], "physic": [468, 504], "x3": [468, 506], "x4": [468, 506], "process_specif": [468, 507, 517], "percentag": [468, 507], "ram": [468, 507, 514, 517], "alon": [468, 507, 517], "attr_onli": [468, 508], "chunk": [468, 510, 511, 512], "max_chunk_s": [468, 512], "chunk_siz": [468, 512], "input_ax": [468, 512], "output_ax": [468, 512], "feed": [468, 512], "fist": [468, 512], "stream": [468, 513], "caveat": [468, 513], "portabl": [468, 513, 1129], "gb": [468, 514, 517], "reset": [468, 516], "magnitud": [518, 519, 522, 532, 688, 691, 881, 930, 932, 933, 935], "princip": [518, 524, 537, 540, 545], "cosin": [518, 524, 527, 528, 531, 585, 588, 589, 592], "x1_i": [518, 532, 535, 549, 552, 557, 560, 565, 568, 569, 572, 573, 576, 577, 580, 593, 596, 598, 601, 609, 617, 618, 621, 622, 625, 626, 629, 642, 645, 646, 649, 666, 669, 670, 673, 678, 681, 682, 685, 688, 691, 697, 700, 705, 708, 709, 712, 737, 741], "x2_i": [518, 532, 535, 549, 552, 557, 560, 565, 568, 569, 572, 573, 576, 577, 580, 593, 596, 598, 601, 609, 617, 618, 621, 622, 625, 626, 629, 642, 645, 646, 649, 666, 669, 670, 673, 678, 681, 682, 685, 688, 691, 697, 700, 705, 708, 709, 712, 737, 741], "finit": [518, 532, 549, 552, 630, 633, 688, 691, 705, 708, 709, 712], "nor": [518, 532, 688, 691], "nearest": [518, 532, 688, 691, 713, 716], "2019": [518, 532, 610, 613, 688, 691], "commut": [518, 532], "sine": [518, 537, 540, 541, 544, 721, 724, 725, 728], "57": [518, 537, 540, 577, 580, 589], "524": [518, 537, 540], "644": [518, 537, 540], "201": [518, 537, 540, 713, 716], "305": [518, 537, 540], "412": [518, 537, 540], "quotient": [518, 549, 552], "notat": [518, 549, 552, 1087, 1088, 1091, 1115], "denot": [518, 549, 552], "pair": [518, 549, 552, 868, 880, 881, 885, 887], "quadrant": [518, 549, 552], "3\u03c0": [518, 549, 552], "549": [518, 548, 553, 556, 746, 751], "bitwis": [518, 557, 560, 569, 572, 577, 580, 682, 685], "AND": [518, 557, 560, 670, 673, 1120, 1121, 1124], "binari": [518, 557, 560, 569, 572, 577, 580, 682, 685, 951, 952, 955], "invert": [518, 561, 564], "arithmet": [518, 573, 576, 1087, 1096, 1099], "propag": [518, 573, 576, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1108, 1111, 1112, 1116, 1119], "thu": [518, 573, 576, 705, 708, 709, 712, 881, 894, 896], "lh": [518, 573, 576], "rh": [518, 573, 576], "xor": [518, 577, 580, 682, 685], "78": [518, 577, 580, 881, 917, 919, 1087, 1088, 1091, 1115], "91": [518, 577, 580, 881, 917, 919, 1087, 1088, 1091, 1115], "23": [518, 577, 580, 868, 874, 881, 891, 893, 1066, 1070], "66": [518, 577, 580, 881, 917, 919, 1087, 1088, 1091, 1115], "77": [518, 577, 580, 881, 917, 919, 1087, 1088, 1091, 1115], "79": [518, 577, 580], "89": [518, 577, 580, 881, 936, 938, 1087, 1112], "98": [518, 577, 580, 881, 917, 919, 1066, 1070, 1087, 1088, 1091, 1115], "26": [518, 577, 580, 830, 832, 835, 868, 875, 881, 891, 893, 917, 919, 936, 938, 1087, 1088, 1091, 1115], "21": [518, 577, 580, 756, 774, 881, 891, 893, 917, 919, 951, 962, 965, 1087, 1088, 1091, 1115], "34": [518, 577, 580, 729, 732], "24": [518, 577, 580, 729, 732, 756, 774, 830, 832, 835, 881, 891, 893, 917, 919, 1087, 1088, 1091, 1115], "51": [518, 577, 580], "27": [518, 577, 580, 589, 729, 732, 868, 880, 881, 917, 919, 1087, 1088, 1091, 1115], "74": [518, 577, 580], "59": [518, 577, 580], "416": [518, 585], "122": [518, 589], "368": [518, 589], "670": [518, 589], "202": [518, 589, 713, 716], "548": [518, 589], "1490": [518, 589], "dividend": [518, 593, 709, 712], "divisor": [518, 593, 709, 712, 830, 832, 835, 837, 839, 850, 852, 1087, 1108, 1111, 1116, 1119, 1166, 1167, 1168], "gauss": [518, 602, 605], "exponenti": [518, 535, 602, 605, 606, 609, 666, 669, 705, 708], "logarithm": [518, 535, 606, 609, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 881, 890, 926], "72": [518, 606, 830, 832, 835, 881, 917, 919, 1087, 1088, 1091, 1115], "accur": [518, 610, 613], "fdlibm": [518, 610, 613], "compliant": [518, 610, 613, 674, 677, 678, 681, 1087, 1092, 1095, 1096, 1099, 1100, 1103], "greatest": [518, 596, 614, 617, 618, 621], "out_i": [518, 630, 633, 634, 637, 638, 641], "threshold": [518, 686, 687], "exce": [518, 687], "y_i": [518, 693, 696], "expon": [518, 705, 708, 756, 821], "versu": [518, 705, 708], "odd": [518, 705, 708], "modulu": [518, 709, 712], "primarili": [518, 709, 712], "5654": [518, 713, 716], "034": [518, 713, 716], "433": [518, 713, 716], "343": [518, 713, 716], "44": [518, 713, 716, 729, 732, 733, 736, 881, 917, 919, 1066, 1070, 1087, 1088, 1091, 1115], "30": [518, 713, 716, 881, 917, 919, 1087, 1088, 1091, 1115, 1141, 1147], "81": [518, 713, 716, 733, 736, 1087, 1088, 1091, 1115], "527": [518, 713, 716], "301": [518, 713, 716], "indistinguish": [518, 729, 732], "infinit": [518, 729, 732], "83": [518, 729, 732], "32455532": [518, 729, 732], "89897949": [518, 729, 732], "50": [518, 729, 732, 881, 917, 919, 1066, 1069, 1087, 1088, 1091, 1115], "31": [518, 729, 732], "169": [518, 729, 732], "47": [518, 729, 732], "73": [518, 729, 732, 881, 882, 884, 1049, 1050, 1053], "93": [518, 729, 732], "35": [518, 729, 732, 868, 880, 881, 885, 887, 1066, 1070, 1087, 1088, 1091, 1115], "09": [518, 733, 736, 868, 880], "61": [518, 733, 736, 951, 952, 955], "546": [518, 742], "842": [518, 742], "916": [518, 742, 951, 952, 955], "996": [518, 742], "328": [518, 742], "real": [518, 747], "462": [518, 747], "604": [518, 747], "984": [518, 747], "997": [518, 747, 1049, 1050, 1053], "decim": [518, 752, 755], "inspect": [756, 762, 1133, 1134], "downscal": [756, 768, 769, 771], "60": [756, 774, 881, 917, 919, 1087, 1088, 1091, 1115], "default_v": [756, 777], "catch_except": [756, 777], "rev": [756, 777], "with_cal": [756, 777], "arrang": [756, 778], "123": [756, 781], "mod": [756, 782], "max_freq": [756, 783], "num_band": [756, 783], "pad": [756, 783, 868, 869, 870, 871, 872, 873, 874, 875, 967, 977, 980, 1023, 1026, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "fourier": [756, 783], "band": [756, 783], "linearli": [756, 783, 881, 927, 929], "oppos": [756, 783], "geometr": [756, 783], "seen_set": [756, 794], "local_set": [756, 794], "decrement": [756, 798], "is_arrai": 756, "allow_dupl": [756, 806], "forkserv": [756, 807], "spawn": [756, 807], "hot": [756, 809], "scatter": [756, 809, 812, 813], "overrid": [756, 809], "tmp_dr": [756, 817], "temporari": [756, 817], "min_denomin": [756, 820], "stabil": [756, 820, 821, 1076, 1077, 1080, 1082, 1085], "_min_denomin": [756, 820], "min_bas": [756, 821], "_min_bas": [756, 821, 1049, 1050, 1053, 1164, 1165], "100000023841858": [756, 824], "200000047683716": [756, 824], "299999952316284": [756, 824], "400000095367432": [756, 824], "599999904632568": [756, 824], "101": [756, 825], "unpack": [756, 828], "gradienttrack": [830, 831], "delta": [830, 832, 835], "cost": [830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 1027, 1028, 1029, 1030], "ws": [830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860], "en": [830, 832, 835, 837, 839], "wikipedia": [830, 832, 835, 837, 839], "wiki": [830, 832, 835, 837, 839], "stochastic_gradient_desc": [830, 832, 835, 837, 839], "dc": [830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860], "dw": [830, 832, 835, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860], "averag": [830, 832, 835, 837, 839, 850, 852, 1027, 1028, 1029], "forget": [830, 832, 835, 837, 839, 850, 852, 1166, 1167, 1168], "004": [830, 832, 835], "009": [830, 832, 835], "86": [830, 832, 835], "28": [830, 832, 835, 868, 871, 874, 875, 881, 917, 919, 1087, 1088, 1091, 1115], "45": [830, 832, 835, 881, 917, 919, 967, 1006, 1049, 1050, 1053, 1087, 1088, 1091, 1115], "0125": [830, 832, 835], "601": [830, 832, 835], "581": [830, 832, 835], "025": [830, 832, 835], "992": [830, 832, 835], "209": [830, 832, 835, 1071, 1072], "271": [830, 832, 835], "0717": [830, 832, 835], "142": [830, 832, 835], "182": [830, 832, 835], "624": [830, 832, 835, 1054, 1060, 1062], "06": [830, 832, 835], "02": [830, 832, 835], "744": [830, 832, 835], "626": [830, 832, 835], "65": [830, 832, 835, 881, 917, 919, 1087, 1088, 1091, 1115], "024": [830, 832, 835], "096": [830, 832, 835], "216": [830, 832, 835], "384": [830, 832, 835], "rate": [830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860, 1027, 1028, 1029, 1030, 1150, 1161, 1166, 1167, 1168, 1169, 1170, 1171], "ws_new": [830, 837, 839, 842, 844, 850, 852, 854, 856, 858, 860], "retain": [830, 841], "trust": [830, 850, 852, 1166, 1168], "decai": [830, 850, 852, 854, 856, 1166, 1168, 1169], "layerwis": [830, 854, 856, 1166, 1169], "stride": [868, 869, 870, 871, 872, 873, 874, 875, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "data_format": [868, 869, 870, 871, 872, 873, 874, 875, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "nwc": [868, 869, 870, 1150, 1151, 1152], "dilat": [868, 869, 870, 871, 872, 873, 874, 875, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "convolut": [868, 869, 870, 871, 872, 873, 874, 875, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "d_in": [868, 869, 870, 871, 872, 873, 874], "fw": [868, 869, 870, 871, 872, 873, 874, 875], "d_out": [868, 869, 870, 871, 872, 873, 874], "slide": [868, 869, 870, 871, 872, 873, 874, 875, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "ncw": [868, 869, 870, 1150, 1151, 1152], "wio": [868, 869], "output_shap": [868, 870, 872, 874, 1150, 1152, 1154, 1156], "nhwc": [868, 871, 872, 875, 1150, 1153, 1154, 1157], "fh": [868, 871, 872, 873, 874, 875], "nchw": [868, 871, 872, 875, 1150, 1153, 1154, 1157], "hwio": [868, 871], "unequ": [868, 871], "unsqueez": [868, 871, 875], "ndhwc": [868, 873, 874, 1150, 1155, 1156], "volum": [868, 873], "fd": [868, 873, 874], "ncdhw": [868, 873, 874, 1150, 1155, 1156], "dhwio": [868, 873], "256": [868, 874], "258": [868, 874], "128": [868, 874, 881, 917, 919], "depthwis": [868, 875, 1150, 1157], "333": [868, 875], "inp": [868, 875], "prob": [868, 876, 1054, 1055, 1150, 1158], "randomli": [868, 876, 1150, 1158], "bernoulli": [868, 876], "out_featur": [868, 876, 877], "incom": [868, 877], "outer_batch_shap": [868, 877], "inner_batch_shap": [868, 877], "in_featur": [868, 877], "cell": [868, 878, 1150, 1159], "num_queri": [868, 879, 880], "x_feat_dim": [868, 879], "num_kei": [868, 879, 880], "cont_feat_dim": [868, 879], "numhead": [868, 879], "feat_dim": [868, 879, 880], "out_feat_dim": [868, 879], "score": [868, 880], "04": [868, 880], "03": [868, 880, 1049, 1050, 1053], "08": [868, 880], "decomposit": [881, 882, 884, 923, 925, 930], "symmetr": [881, 882, 884, 894, 896, 897, 899, 948, 950], "u": [881, 882, 884, 930], "577": [881, 882, 884], "707": [881, 882, 884], "vif": [881, 885, 887], "92": [881, 888], "293": [881, 888], "46997": [881, 888], "eigendecomposit": [881, 894, 896], "qlq\u1d40": [881, 894, 896], "orthogon": [881, 894, 896], "eig": [881, 894, 896], "eigenvalu": [881, 894, 896, 897, 899], "eigenvector": [881, 894, 896], "75": [881, 900, 917, 919], "prepend": [881, 903, 906], "singular": [881, 902, 911, 913, 920, 922, 930, 932, 933, 935], "toler": [881, 902, 911, 913, 920, 922], "largest_singular_valu": [881, 902, 911, 913, 920, 922], "array_lik": [881, 917, 919], "33": [881, 917, 919, 1049, 1050, 1053, 1087, 1088, 1091, 1115], "36": [881, 917, 919, 1087, 1088, 1091, 1115], "84": [881, 917, 919, 1087, 1088, 1091, 1115], "105": [881, 917, 919, 951, 952, 955], "112": [881, 917, 919, 1087, 1088, 1091, 1115], "104": [881, 917, 919, 1087, 1088, 1091, 1115], "120": [881, 917, 919], "moor": [881, 902, 920, 922], "penros": [881, 902, 920, 922], "pseudo": [881, 902, 920, 922], "orthonorm": [881, 923, 925, 930], "2d": [881, 890, 926, 1150, 1153, 1154, 1157], "logdet": [881, 890, 926], "coeffici": [881, 927, 929], "usvh": [881, 930], "vh": [881, 930], "hermitian": [881, 930], "et": [881, 930], "cetera": [881, 930], "adjoint": [881, 930], "reconstruct": [881, 930, 1071, 1072, 1074], "reconstructed_x": [881, 930], "contract": [881, 936, 938, 1087, 1088, 1091, 1115], "doubl": [881, 936, 938], "singleton": [881, 945, 947, 967, 1007, 1010, 1066, 1068, 1087, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1116, 1119, 1120, 1121, 1124, 1125, 1128], "liter": [881, 945, 947], "manhattan": [881, 945, 947], "l2": [881, 945, 947], "euclidean": [881, 945, 947], "mathbf": [881, 948, 950], "mathbb": [881, 948, 950], "skew": [881, 948, 950], "entropi": [951, 952, 955, 957, 960, 962, 965], "predict": [951, 952, 955, 957, 960, 962, 965], "smooth": [951, 952, 955, 957, 960, 962, 965], "223": [951, 952, 955], "357": [951, 952, 955, 962, 965], "511": [951, 952, 955], "discret": [951, 957, 960], "3862944": [951, 957, 960], "35667497": [951, 957, 960], "spars": [951, 962, 965], "logit": [951, 962, 965], "793291": [951, 962, 965], "512926": [951, 962, 965], "before_1": [967, 977, 980, 1023, 1026], "after_1": [967, 977, 980, 1023, 1026], "before_n": [967, 977, 980, 1023, 1026], "after_n": [967, 977, 980, 1023, 1026], "insert": [967, 981, 984, 1031, 1036, 1066, 1067], "manipulation_funct": [967, 981, 984], "reorder": [967, 985, 988], "permut": [967, 989, 992, 1015, 1018], "repetit": [967, 993, 996, 1019, 1022], "restor": [967, 1001, 1004], "classivi": [967, 1006], "famili": [967, 1011, 1014], "intxx": [967, 1011, 1014], "floatxx": [967, 1011, 1014], "fomaml_step": 1027, "inner_cost_fn": [1027, 1028, 1029], "outer_cost_fn": [1027, 1028, 1029], "inner_grad_step": [1027, 1028, 1029, 1030], "inner_learning_r": [1027, 1028, 1029, 1030], "inner_optimization_step": [1027, 1028, 1029, 1030], "inner_batch_fn": [1027, 1028, 1029], "outer_batch_fn": [1027, 1028, 1029], "average_across_step": [1027, 1028, 1029], "inner_v": [1027, 1028, 1029], "keep_inner_v": [1027, 1028, 1029], "outer_v": [1027, 1028, 1029], "keep_outer_v": [1027, 1028, 1029], "return_inner_v": [1027, 1028, 1029, 1030], "num_task": [1027, 1028, 1029, 1030], "maml": [1027, 1028, 1029], "recev": [1027, 1028, 1029], "0x7f9925f279d0": [1027, 1028, 1029, 1030], "maml_step": 1027, "rece": [1027, 1029], "reptile_step": 1027, "cost_fn": [1027, 1030], "reptil": [1027, 1030], "receivng": [1027, 1030], "all_nested_indic": 1031, "include_nest": [1031, 1032], "_index": [1031, 1032, 1042], "_base": [1031, 1032, 1041, 1042], "copy_nest": 1031, "to_mut": [1031, 1033, 1043], "mutabl": [1031, 1033, 1043], "insert_into_nest_at_index": 1031, "insert_into_nest_at_indic": 1031, "map_nest_at_index": 1031, "map_nest_at_indic": 1031, "multi_index_nest": 1031, "nested_ani": 1031, "check_nest": [1031, 1041, 1042], "conditon": [1031, 1041, 1042], "nested_indices_wher": 1031, "stop_after_n_found": [1031, 1042], "_depth": [1031, 1043], "_tuple_check_fn": [1031, 1043], "_list_check_fn": [1031, 1043], "_dict_check_fn": [1031, 1043], "nested_multi_map": 1031, "nest0": [1031, 1044], "ivy_arrai": [1031, 1044], "funciton": [1031, 1044], "prune_nest_at_index": 1031, "prune_nest_at_indic": 1031, "set_nest_at_index": 1031, "set_nest_at_indic": 1031, "mini": [1049, 1050, 1053, 1164, 1165], "gamma": [1049, 1050, 1053], "beta": [1049, 1050, 1053], "0976": [1049, 1050, 1053], "3452": [1049, 1050, 1053], "2740": [1049, 1050, 1053], "1047": [1049, 1050, 1053], "5886": [1049, 1050, 1053], "2732": [1049, 1050, 1053], "7696": [1049, 1050, 1053], "7024": [1049, 1050, 1053], "2518": [1049, 1050, 1053], "58": [1049, 1050, 1053, 1071, 1072], "283": [1049, 1050, 1053], "585": [1049, 1050, 1053], "909": [1049, 1050, 1053], "628": [1049, 1050, 1053], "225": [1049, 1050, 1053], "425": [1049, 1050, 1053], "norm_idx": [1049, 1050, 1053], "228": [1049, 1050, 1053], "0285": [1049, 1050, 1053], "199": [1049, 1050, 1053], "204": [1049, 1050, 1053], "population_s": [1054, 1055], "num_sampl": [1054, 1055], "draw": [1054, 1055, 1059, 1060, 1062], "unnorm": [1054, 1055], "drawn": [1054, 1055, 1056, 1057, 1059, 1060, 1062], "home": [1054, 1055, 1059], "uniformli": [1054, 1056, 1057, 1060, 1062], "highest": [1054, 1056, 1057], "parameter": [1054, 1059, 1060, 1062], "6444774682897879": [1054, 1059], "811": [1054, 1059], "508": [1054, 1059], "564": [1054, 1059], "7268672": [1054, 1059], "968": [1054, 1059], "175": [1054, 1059, 1071, 1072], "064": [1054, 1059], "40935726": [1054, 1059], "556": [1054, 1059], "26431865": [1054, 1060, 1062], "475": [1054, 1060, 1062], "878": [1054, 1060, 1062], "861": [1054, 1060, 1062], "89150229": [1054, 1060, 1062], "89629126": [1054, 1060, 1062], "94198485": [1054, 1060, 1062], "91405606": [1054, 1060, 1062], "72848724": [1054, 1060, 1062], "7550739": [1054, 1060, 1062], "00109": [1054, 1060, 1062], "occurr": [1066, 1067, 1068, 1071, 1072], "yield": [1066, 1070], "43": [1066, 1070], "x_j": [1071, 1072, 1073, 1075], "impli": [1071, 1072, 1073, 1075], "inverse_indic": [1071, 1072, 1074], "aggreg": [1071, 1072], "fourth": [1071, 1072], "607": [1071, 1072], "735": [1071, 1072], "667": [1071, 1072], "381": [1071, 1072], "857": [1071, 1072], "0396": [1071, 1072], "166": [1071, 1072], "828": [1071, 1072], "144": [1071, 1072], "40501155": [1071, 1072], "77361575": [1071, 1072], "97776199": [1071, 1072], "36831157": [1071, 1072], "89148434": [1071, 1072], "9512272": [1071, 1072], "67542176": [1071, 1072], "41985657": [1071, 1072], "23478023": [1071, 1072], "1141": [1071, 1072], "8101": [1071, 1072], "9298": [1071, 1072], "8460": [1071, 1072], "2119": [1071, 1072], "3519": [1071, 1072], "6252": [1071, 1072], "4033": [1071, 1072], "7443": [1071, 1072], "2577": [1071, 1072], "3707": [1071, 1072], "0545": [1071, 1072], "3238": [1071, 1072], "5944": [1071, 1072], "0775": [1071, 1072], "4327": [1071, 1072], "176": [1071, 1072], "889": [1071, 1072], "763": [1071, 1072], "071": [1071, 1072], "262": [1071, 1072], "456": [1071, 1072], "114": [1071, 1072], "349": [1071, 1072], "615": [1071, 1072], "594": [1071, 1072], "335": [1071, 1072], "212": [1071, 1072], "457": [1071, 1072], "827": [1071, 1072], "ascend": [1076, 1077, 1080], "einstein": [1087, 1088, 1091, 1115], "summat": [1087, 1088, 1091, 1115], "seq": [1087, 1088, 1091, 1115], "jk": [1087, 1088, 1091, 1115], "ik": [1087, 1088, 1091, 1115], "126": [1087, 1088, 1091, 1115], "510": [1087, 1088, 1091, 1115], "99": [1087, 1088, 1091, 1115], "108": [1087, 1088, 1091, 1115], "117": [1087, 1088, 1091, 1115], "sentinel": [1087, 1092, 1095, 1100, 1103], "unsign": [1087, 1104, 1107, 1112], "degre": [1087, 1108, 1111, 1116, 1119], "bessel": [1087, 1108, 1111, 1116, 1119], "8164966": [1087, 1108, 1111], "varianc": [1087, 1116, 1119], "unbias": [1087, 1116, 1119], "simplicit": [1120, 1121, 1124], "autom": 1129, "grow": 1129, "ai": 1129, "got": 1129, "colab": 1129, "sharp": 1129, "weekli": 1129, "event": 1129, "immedi": 1129, "favorit": 1129, "jax_concat": 1129, "tf_concat": 1129, "np_concat": 1129, "mx_concat": 1129, "torch_concat": 1129, "prompt": 1129, "get_devic": 1129, "reduce_prod": 1129, "gradient_imag": 1129, "linalg": 1129, "bilinear_resampl": 1129, "stack_imag": 1129, "neural_net": 1129, "ecosystem": [1129, 1135], "popular": [1129, 1135], "acceler": 1129, "articl": 1129, "lenton2021ivi": 1129, "inter": 1129, "lenton": 1129, "daniel": 1129, "pardo": 1129, "fabio": 1129, "falck": 1129, "fabian": 1129, "jame": 1129, "stephen": 1129, "clark": 1129, "ronald": 1129, "journal": 1129, "arxiv": 1129, "preprint": 1129, "2102": 1129, "02886": 1129, "2021": 1129, "add_array_spec": 1132, "fn_array_spec": 1132, "geglu": 1136, "native_modul": [1139, 1140], "native_module_class": [1139, 1140], "firstlayersiren": 1141, "kaimingnorm": [1141, 1145], "negative_slop": 1141, "Ones": 1141, "siren": 1141, "w0": [1141, 1147], "filter_s": [1150, 1151, 1152], "1d": [1150, 1151, 1152], "conv1dtranspos": 1150, "filter_shap": [1150, 1153, 1154, 1155, 1156, 1157], "conv2dtranspos": 1150, "conv3dtranspos": 1150, "depthwiseconv2d": 1150, "num_channel": [1150, 1157], "bernoul": [1150, 1158], "num_lay": [1150, 1159], "return_sequ": [1150, 1159], "return_st": [1150, 1159], "get_initial_st": [1150, 1159], "dens": [1150, 1160], "multiheadattent": 1150, "query_dim": [1150, 1161], "head_dim": [1150, 1161], "dropout_r": [1150, 1161], "context_dim": [1150, 1161], "with_to_q_fn": [1150, 1161], "with_to_kv_fn": [1150, 1161], "with_to_out_fn": [1150, 1161], "build_mod": [1150, 1161, 1162, 1163], "on_init": [1150, 1161, 1162, 1163], "__call__": [1150, 1161, 1162, 1163], "store_var": [1162, 1163], "arg_stateful_idx": [1162, 1163], "kwarg_stateful_idx": [1162, 1163], "fallback_to_non_compil": [1162, 1163, 1166, 1170], "with_partial_v": [1162, 1163], "initialz": [1162, 1163], "from_cal": [1162, 1163], "check_submod_ret": [1162, 1163], "get_mod_kei": [1162, 1163], "top_mod": [1162, 1163], "mod_depth": [1162, 1163], "mod_height": [1162, 1163], "mod_with_top_mod_key_chain": [1162, 1163], "save_weight": [1162, 1163], "weights_path": [1162, 1163], "show_mod_in_top_mod": [1162, 1163], "upper_depth": [1162, 1163], "lower_depth": [1162, 1163], "show_structur": [1162, 1163], "show_v_in_top_v": [1162, 1163], "sub_mod": [1162, 1163], "show_v": [1162, 1163], "track_submod_call_ord": [1162, 1163], "track_submod_ret": [1162, 1163], "v_with_top_v_key_chain": [1162, 1163], "layernorm": 1164, "normalized_shap": [1164, 1165], "elementwise_affin": [1164, 1165], "trail": [1164, 1165], "affin": [1164, 1165], "0001": [1166, 1167, 1168], "init_on_first_step": [1166, 1170], "ignore_miss": [1166, 1170], "overriden": [1166, 1170], "sgd": 1166, "stochast": [1166, 1171], "sub_modul": [1172, 1173]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "array_methods"], [117, 0, 0, "-", "conversions"], [122, 0, 0, "-", "creation"], [124, 0, 0, "-", "data_type"], [126, 0, 0, "-", "device"], [128, 0, 0, "-", "elementwise"], [130, 0, 0, "-", "general"], [132, 0, 0, "-", "gradients"], [134, 0, 0, "-", "image"], [136, 0, 0, "-", "layers"], [138, 0, 0, "-", "linear_algebra"], [140, 0, 0, "-", "losses"], [142, 0, 0, "-", "manipulation"], [144, 0, 0, "-", "norms"], [146, 0, 0, "-", "random"], [148, 0, 0, "-", "searching"], [150, 0, 0, "-", "set"], [152, 0, 0, "-", "sorting"], [154, 0, 0, "-", "statistical"], [156, 0, 0, "-", "utility"], [158, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[520, 2, 1, "", "abs"], [528, 2, 1, "", "acos"], [529, 2, 1, "", "acosh"], [833, 2, 1, "", "adam_step"], [666, 2, 1, "", "add"], [8, 2, 1, "", "add_ivy_array_instance_methods"], [1122, 2, 1, "", "all"], [758, 2, 1, "", "all_equal"], [1126, 2, 1, "", "any"], [1078, 2, 1, "", "argsort"], [538, 2, 1, "", "asin"], [542, 2, 1, "", "asinh"], [553, 2, 1, "", "atan"], [550, 2, 1, "", "atan2"], [554, 2, 1, "", "atanh"], [953, 2, 1, "", "binary_cross_entropy"], [558, 2, 1, "", "bitwise_and"], [562, 2, 1, "", "bitwise_invert"], [566, 2, 1, "", "bitwise_left_shift"], [570, 2, 1, "", "bitwise_or"], [574, 2, 1, "", "bitwise_right_shift"], [578, 2, 1, "", "bitwise_xor"], [441, 2, 1, "", "can_cast"], [582, 2, 1, "", "ceil"], [883, 2, 1, "", "cholesky"], [969, 2, 1, "", "clip"], [974, 2, 1, "", "concat"], [978, 2, 1, "", "constant_pad"], [586, 2, 1, "", "cos"], [590, 2, 1, "", "cosh"], [886, 2, 1, "", "cross"], [958, 2, 1, "", "cross_entropy"], [926, 2, 1, "", "det"], [892, 2, 1, "", "diagonal"], [618, 2, 1, "", "divide"], [895, 2, 1, "", "eigh"], [898, 2, 1, "", "eigvalsh"], [1089, 2, 1, "", "einsum"], [626, 2, 1, "", "equal"], [603, 2, 1, "", "erf"], [666, 2, 1, "", "exp"], [982, 2, 1, "", "expand_dims"], [611, 2, 1, "", "expm1"], [986, 2, 1, "", "flip"], [618, 2, 1, "", "floor"], [619, 2, 1, "", "floor_divide"], [786, 2, 1, "", "gather_nd"], [626, 2, 1, "", "greater"], [627, 2, 1, "", "greater_equal"], [920, 2, 1, "", "inv"], [631, 2, 1, "", "isfinite"], [635, 2, 1, "", "isinf"], [639, 2, 1, "", "isnan"], [1051, 2, 1, "", "layer_norm"], [643, 2, 1, "", "less"], [647, 2, 1, "", "less_equal"], [651, 2, 1, "", "log"], [655, 2, 1, "", "log10"], [659, 2, 1, "", "log1p"], [663, 2, 1, "", "log2"], [667, 2, 1, "", "logaddexp"], [671, 2, 1, "", "logical_and"], [675, 2, 1, "", "logical_not"], [679, 2, 1, "", "logical_or"], [683, 2, 1, "", "logical_xor"], [904, 2, 1, "", "matmul"], [908, 2, 1, "", "matrix_norm"], [912, 2, 1, "", "matrix_rank"], [915, 2, 1, "", "matrix_transpose"], [1093, 2, 1, "", "max"], [1097, 2, 1, "", "mean"], [1101, 2, 1, "", "min"], [689, 2, 1, "", "multiply"], [694, 2, 1, "", "negative"], [698, 2, 1, "", "not_equal"], [918, 2, 1, "", "outer"], [990, 2, 1, "", "permute_dims"], [921, 2, 1, "", "pinv"], [702, 2, 1, "", "positive"], [706, 2, 1, "", "pow"], [1105, 2, 1, "", "prod"], [924, 2, 1, "", "qr"], [710, 2, 1, "", "remainder"], [994, 2, 1, "", "repeat"], [998, 2, 1, "", "reshape"], [1002, 2, 1, "", "roll"], [714, 2, 1, "", "round"], [718, 2, 1, "", "sign"], [722, 2, 1, "", "sin"], [726, 2, 1, "", "sinh"], [928, 2, 1, "", "solve"], [1083, 2, 1, "", "sort"], [963, 2, 1, "", "sparse_cross_entropy"], [730, 2, 1, "", "sqrt"], [734, 2, 1, "", "square"], [1008, 2, 1, "", "squeeze"], [1012, 2, 1, "", "stack"], [1109, 2, 1, "", "std"], [739, 2, 1, "", "subtract"], [1113, 2, 1, "", "sum"], [933, 2, 1, "", "svd"], [934, 2, 1, "", "svdvals"], [1016, 2, 1, "", "swapaxes"], [744, 2, 1, "", "tan"], [749, 2, 1, "", "tanh"], [937, 2, 1, "", "tensordot"], [1020, 2, 1, "", "tile"], [940, 2, 1, "", "trace"], [753, 2, 1, "", "trunc"], [1117, 2, 1, "", "var"], [943, 2, 1, "", "vecdot"], [946, 2, 1, "", "vector_norm"], [949, 2, 1, "", "vector_to_skew_symmetric_matrix"], [1024, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[118, 2, 1, "", "args_to_ivy"], [119, 2, 1, "", "args_to_native"], [120, 2, 1, "", "to_ivy"], [121, 2, 1, "", "to_native"]], "ivy.array.creation": [[123, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[125, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[125, 3, 1, "", "can_cast"]], "ivy.array.device": [[127, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[129, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[129, 3, 1, "", "abs"], [129, 3, 1, "", "acos"], [129, 3, 1, "", "acosh"], [129, 3, 1, "", "add"], [129, 3, 1, "", "asin"], [129, 3, 1, "", "asinh"], [129, 3, 1, "", "atan"], [129, 3, 1, "", "atan2"], [129, 3, 1, "", "atanh"], [129, 3, 1, "", "bitwise_and"], [129, 3, 1, "", "bitwise_invert"], [129, 3, 1, "", "bitwise_left_shift"], [129, 3, 1, "", "bitwise_or"], [129, 3, 1, "", "bitwise_right_shift"], [129, 3, 1, "", "bitwise_xor"], [129, 3, 1, "", "ceil"], [129, 3, 1, "", "cos"], [129, 3, 1, "", "cosh"], [129, 3, 1, "", "divide"], [129, 3, 1, "", "equal"], [129, 3, 1, "", "erf"], [129, 3, 1, "", "exp"], [129, 3, 1, "", "expm1"], [129, 3, 1, "", "floor"], [129, 3, 1, "", "floor_divide"], [129, 3, 1, "", "greater"], [129, 3, 1, "", "greater_equal"], [129, 3, 1, "", "isfinite"], [129, 3, 1, "", "isinf"], [129, 3, 1, "", "isnan"], [129, 3, 1, "", "less"], [129, 3, 1, "", "less_equal"], [129, 3, 1, "", "log"], [129, 3, 1, "", "log10"], [129, 3, 1, "", "log1p"], [129, 3, 1, "", "log2"], [129, 3, 1, "", "logaddexp"], [129, 3, 1, "", "logical_and"], [129, 3, 1, "", "logical_not"], [129, 3, 1, "", "logical_or"], [129, 3, 1, "", "logical_xor"], [129, 3, 1, "", "multiply"], [129, 3, 1, "", "negative"], [129, 3, 1, "", "not_equal"], [129, 3, 1, "", "positive"], [129, 3, 1, "", "pow"], [129, 3, 1, "", "remainder"], [129, 3, 1, "", "round"], [129, 3, 1, "", "sign"], [129, 3, 1, "", "sin"], [129, 3, 1, "", "sinh"], [129, 3, 1, "", "sqrt"], [129, 3, 1, "", "square"], [129, 3, 1, "", "subtract"], [129, 3, 1, "", "tan"], [129, 3, 1, "", "tanh"], [129, 3, 1, "", "trunc"]], "ivy.array.general": [[131, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[131, 3, 1, "", "all_equal"], [131, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[133, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[133, 3, 1, "", "adam_step"]], "ivy.array.image": [[135, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[137, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[139, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[139, 3, 1, "", "cholesky"], [139, 3, 1, "", "cross"], [139, 3, 1, "", "det"], [139, 3, 1, "", "diagonal"], [139, 3, 1, "", "eigh"], [139, 3, 1, "", "eigvalsh"], [139, 3, 1, "", "inv"], [139, 3, 1, "", "matmul"], [139, 3, 1, "", "matrix_norm"], [139, 3, 1, "", "matrix_rank"], [139, 3, 1, "", "matrix_transpose"], [139, 3, 1, "", "outer"], [139, 3, 1, "", "pinv"], [139, 3, 1, "", "qr"], [139, 3, 1, "", "solve"], [139, 3, 1, "", "svd"], [139, 3, 1, "", "svdvals"], [139, 3, 1, "", "tensordot"], [139, 3, 1, "", "trace"], [139, 3, 1, "", "vecdot"], [139, 3, 1, "", "vector_norm"], [139, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[141, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[141, 3, 1, "", "binary_cross_entropy"], [141, 3, 1, "", "cross_entropy"], [141, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[143, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[143, 3, 1, "", "clip"], [143, 3, 1, "", "concat"], [143, 3, 1, "", "constant_pad"], [143, 3, 1, "", "expand_dims"], [143, 3, 1, "", "flip"], [143, 3, 1, "", "permute_dims"], [143, 3, 1, "", "repeat"], [143, 3, 1, "", "reshape"], [143, 3, 1, "", "roll"], [143, 3, 1, "", "squeeze"], [143, 3, 1, "", "stack"], [143, 3, 1, "", "swapaxes"], [143, 3, 1, "", "tile"], [143, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[145, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[145, 3, 1, "", "layer_norm"]], "ivy.array.random": [[147, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[149, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[151, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[153, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[153, 3, 1, "", "argsort"], [153, 3, 1, "", "sort"]], "ivy.array.statistical": [[155, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[155, 3, 1, "", "einsum"], [155, 3, 1, "", "max"], [155, 3, 1, "", "mean"], [155, 3, 1, "", "min"], [155, 3, 1, "", "prod"], [155, 3, 1, "", "std"], [155, 3, 1, "", "sum"], [155, 3, 1, "", "var"]], "ivy.array.utility": [[157, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[157, 3, 1, "", "all"], [157, 3, 1, "", "any"]], "ivy.array.wrapping": [[159, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[160, 0, 0, "-", "backend_handler"], [391, 0, 0, "-", "func_wrapper"], [1132, 0, 0, "-", "inspection"], [1175, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[160, 1, 1, "", "ContextManager"], [162, 2, 1, "", "choose_random_backend"], [163, 2, 1, "", "clear_backend_stack"], [164, 2, 1, "", "current_backend"], [165, 2, 1, "", "get_backend"], [166, 2, 1, "", "set_backend"], [167, 2, 1, "", "try_import_ivy_jax"], [168, 2, 1, "", "try_import_ivy_mxnet"], [169, 2, 1, "", "try_import_ivy_numpy"], [170, 2, 1, "", "try_import_ivy_tf"], [171, 2, 1, "", "try_import_ivy_torch"], [172, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[160, 3, 1, "", "__init__"]], "ivy.container": [[177, 0, 0, "-", "activations"], [179, 0, 0, "-", "base"], [181, 0, 0, "-", "container"], [184, 0, 0, "-", "container_methods"], [314, 0, 0, "-", "creation"], [316, 0, 0, "-", "data_type"], [318, 0, 0, "-", "device"], [320, 0, 0, "-", "elementwise"], [322, 0, 0, "-", "general"], [324, 0, 0, "-", "gradients"], [326, 0, 0, "-", "image"], [328, 0, 0, "-", "layers"], [330, 0, 0, "-", "linear_algebra"], [332, 0, 0, "-", "losses"], [334, 0, 0, "-", "manipulation"], [336, 0, 0, "-", "norms"], [338, 0, 0, "-", "random"], [340, 0, 0, "-", "searching"], [342, 0, 0, "-", "set"], [344, 0, 0, "-", "sorting"], [346, 0, 0, "-", "statistical"], [348, 0, 0, "-", "utility"], [350, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[178, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[180, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[180, 3, 1, "", "__getitem__"], [180, 3, 1, "", "__init__"], [180, 3, 1, "", "__setitem__"], [180, 3, 1, "", "all_false"], [180, 3, 1, "", "all_key_chains"], [180, 3, 1, "", "all_true"], [180, 3, 1, "", "arrays_as_lists"], [180, 3, 1, "", "as_arrays"], [180, 3, 1, "", "as_bools"], [180, 3, 1, "", "as_ones"], [180, 3, 1, "", "as_random_uniform"], [180, 3, 1, "", "as_variables"], [180, 3, 1, "", "as_zeros"], [180, 3, 1, "", "assert_contains_sub_container"], [180, 3, 1, "", "assert_contains_sub_structure"], [180, 3, 1, "", "assert_identical"], [180, 3, 1, "", "assert_identical_structure"], [180, 3, 1, "", "at_key_chain"], [180, 3, 1, "", "at_key_chains"], [180, 3, 1, "", "at_keys"], [180, 3, 1, "", "clip"], [180, 3, 1, "", "combine"], [180, 3, 1, "", "common_key_chains"], [180, 4, 1, "", "config"], [180, 3, 1, "", "contains_sub_container"], [180, 3, 1, "", "contains_sub_structure"], [180, 3, 1, "", "copy"], [180, 3, 1, "", "create_if_absent"], [180, 3, 1, "", "cutoff_at_depth"], [180, 3, 1, "", "cutoff_at_height"], [180, 3, 1, "", "deep_copy"], [180, 4, 1, "", "dev"], [180, 3, 1, "", "dev_clone"], [180, 3, 1, "", "dev_dist"], [180, 4, 1, "", "dev_str"], [180, 3, 1, "", "diff"], [180, 3, 1, "", "dtype"], [180, 3, 1, "", "einops_rearrange"], [180, 3, 1, "", "einops_reduce"], [180, 3, 1, "", "einops_repeat"], [180, 3, 1, "", "find_sub_container"], [180, 3, 1, "", "find_sub_structure"], [180, 3, 1, "", "flatten_key_chain"], [180, 3, 1, "", "flatten_key_chains"], [180, 3, 1, "", "format_key_chains"], [180, 3, 1, "", "from_disk_as_hdf5"], [180, 3, 1, "", "from_disk_as_json"], [180, 3, 1, "", "from_disk_as_pickled"], [180, 3, 1, "", "from_flat_list"], [180, 3, 1, "", "from_numpy"], [180, 3, 1, "", "gather"], [180, 3, 1, "", "gather_nd"], [180, 3, 1, "", "h5_file_size"], [180, 3, 1, "", "handle_inplace"], [180, 3, 1, "", "has_key"], [180, 3, 1, "", "has_key_chain"], [180, 3, 1, "", "has_nans"], [180, 3, 1, "", "identical"], [180, 3, 1, "", "identical_array_shapes"], [180, 3, 1, "", "identical_configs"], [180, 3, 1, "", "identical_structure"], [180, 3, 1, "", "if_exists"], [180, 3, 1, "", "inplace_update"], [180, 4, 1, "", "ivy"], [180, 3, 1, "", "key_chains_containing"], [180, 3, 1, "", "list_join"], [180, 3, 1, "", "list_stack"], [180, 3, 1, "", "map"], [180, 3, 1, "", "map_conts"], [180, 3, 1, "", "matrix_norm"], [180, 4, 1, "", "max_depth"], [180, 3, 1, "", "maximum"], [180, 3, 1, "", "minimum"], [180, 3, 1, "", "multi_map"], [180, 3, 1, "", "multi_map_in_static_method"], [180, 3, 1, "", "num_arrays"], [180, 3, 1, "", "overwrite_at_key_chain"], [180, 3, 1, "", "overwrite_at_key_chains"], [180, 3, 1, "", "prune_empty"], [180, 3, 1, "", "prune_key_chain"], [180, 3, 1, "", "prune_key_chains"], [180, 3, 1, "", "prune_key_from_key_chains"], [180, 3, 1, "", "prune_keys"], [180, 3, 1, "", "prune_keys_from_key_chains"], [180, 3, 1, "", "reduce"], [180, 3, 1, "", "remove_key_length_limit"], [180, 3, 1, "", "remove_print_limit"], [180, 3, 1, "", "reshape_like"], [180, 3, 1, "", "restructure"], [180, 3, 1, "", "restructure_key_chains"], [180, 3, 1, "", "set_at_key_chain"], [180, 3, 1, "", "set_at_key_chains"], [180, 3, 1, "", "set_at_keys"], [180, 3, 1, "", "set_framework"], [180, 3, 1, "", "set_ivy_backend"], [180, 4, 1, "", "shape"], [180, 4, 1, "", "shapes"], [180, 3, 1, "", "show"], [180, 3, 1, "", "show_sub_container"], [180, 3, 1, "", "shuffle"], [180, 3, 1, "", "shuffle_h5_file"], [180, 3, 1, "", "size_ordered_arrays"], [180, 3, 1, "", "slice_keys"], [180, 3, 1, "", "slice_via_key"], [180, 3, 1, "", "sort_by_key"], [180, 3, 1, "", "split"], [180, 3, 1, "", "stop_gradients"], [180, 3, 1, "", "structural_diff"], [180, 3, 1, "", "to_device"], [180, 3, 1, "", "to_dict"], [180, 3, 1, "", "to_disk_as_hdf5"], [180, 3, 1, "", "to_disk_as_json"], [180, 3, 1, "", "to_disk_as_pickled"], [180, 3, 1, "", "to_flat_list"], [180, 3, 1, "", "to_iterator"], [180, 3, 1, "", "to_iterator_keys"], [180, 3, 1, "", "to_iterator_values"], [180, 3, 1, "", "to_ivy"], [180, 3, 1, "", "to_jsonable"], [180, 3, 1, "", "to_list"], [180, 3, 1, "", "to_multi_dev"], [180, 3, 1, "", "to_native"], [180, 3, 1, "", "to_numpy"], [180, 3, 1, "", "to_raw"], [180, 3, 1, "", "trim_key"], [180, 3, 1, "", "try_kc"], [180, 3, 1, "", "unify"], [180, 3, 1, "", "unstack"], [180, 3, 1, "", "update_config"], [180, 3, 1, "", "vector_norm"], [180, 3, 1, "", "with_default_key_color"], [180, 3, 1, "", "with_entries_as_lists"], [180, 3, 1, "", "with_ivy_backend"], [180, 3, 1, "", "with_key_length_limit"], [180, 3, 1, "", "with_print_indent"], [180, 3, 1, "", "with_print_limit"], [180, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[182, 1, 1, "", "Container"], [183, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[182, 3, 1, "", "__add__"], [182, 3, 1, "", "__init__"], [182, 3, 1, "", "__radd__"], [182, 3, 1, "", "arange"], [182, 3, 1, "", "arg_info"], [182, 3, 1, "", "arg_names"], [182, 3, 1, "", "argmax"], [182, 3, 1, "", "argmin"], [182, 3, 1, "", "array"], [182, 3, 1, "", "array_equal"], [182, 3, 1, "", "arrays_equal"], [182, 3, 1, "", "as_ivy_dev"], [182, 3, 1, "", "as_ivy_dtype"], [182, 3, 1, "", "as_native_dev"], [182, 3, 1, "", "as_native_dtype"], [182, 3, 1, "", "asarray"], [182, 3, 1, "", "assert_supports_inplace"], [182, 3, 1, "", "astype"], [182, 3, 1, "", "broadcast_arrays"], [182, 3, 1, "", "broadcast_to"], [182, 3, 1, "", "cache_fn"], [182, 3, 1, "", "cholesky"], [182, 3, 1, "", "clear_mem_on_dev"], [182, 3, 1, "", "clip_matrix_norm"], [182, 3, 1, "", "closest_valid_dtype"], [182, 3, 1, "", "container_types"], [182, 3, 1, "", "conv1d"], [182, 3, 1, "", "conv1d_transpose"], [182, 3, 1, "", "conv2d"], [182, 3, 1, "", "conv2d_transpose"], [182, 3, 1, "", "conv3d"], [182, 3, 1, "", "conv3d_transpose"], [182, 3, 1, "", "copy_array"], [182, 3, 1, "", "cross"], [182, 3, 1, "", "cumprod"], [182, 3, 1, "", "cumsum"], [182, 3, 1, "", "current_backend"], [182, 3, 1, "", "current_backend_str"], [182, 3, 1, "", "default"], [182, 3, 1, "", "default_device"], [182, 3, 1, "", "default_dtype"], [182, 3, 1, "", "default_float_dtype"], [182, 3, 1, "", "default_int_dtype"], [182, 3, 1, "", "depthwise_conv2d"], [182, 3, 1, "", "det"], [182, 3, 1, "", "dev_clone_array"], [182, 3, 1, "", "dev_clone_iter"], [182, 3, 1, "", "dev_clone_nest"], [182, 3, 1, "", "dev_dist_array"], [182, 3, 1, "", "dev_dist_iter"], [182, 3, 1, "", "dev_dist_nest"], [182, 3, 1, "", "dev_unify"], [182, 3, 1, "", "dev_unify_array"], [182, 3, 1, "", "dev_unify_iter"], [182, 3, 1, "", "dev_unify_nest"], [182, 3, 1, "", "dev_util"], [182, 3, 1, "", "diagonal"], [182, 3, 1, "", "dropout"], [182, 3, 1, "", "dtype_bits"], [182, 3, 1, "", "eigh"], [182, 3, 1, "", "eigvalsh"], [182, 3, 1, "", "empty"], [182, 3, 1, "", "empty_like"], [182, 3, 1, "", "execute_with_gradients"], [182, 3, 1, "", "exists"], [182, 3, 1, "", "eye"], [182, 3, 1, "", "finfo"], [182, 3, 1, "", "floormod"], [182, 3, 1, "", "fourier_encode"], [182, 3, 1, "", "from_dlpack"], [182, 3, 1, "", "full"], [182, 3, 1, "", "full_like"], [182, 3, 1, "", "function_supported_dtypes"], [182, 3, 1, "", "function_unsupported_dtypes"], [182, 3, 1, "", "gelu"], [182, 3, 1, "", "get_all_arrays_in_memory"], [182, 3, 1, "", "get_all_ivy_arrays_on_dev"], [182, 3, 1, "", "get_min_base"], [182, 3, 1, "", "get_min_denominator"], [182, 3, 1, "", "get_num_dims"], [182, 3, 1, "", "get_referrers_recursive"], [182, 3, 1, "", "gpu_is_available"], [182, 3, 1, "", "handle_nestable"], [182, 3, 1, "", "handle_out_argument"], [182, 3, 1, "", "iinfo"], [182, 3, 1, "", "indices_where"], [182, 3, 1, "", "infer_device"], [182, 3, 1, "", "infer_dtype"], [182, 3, 1, "", "inplace_arrays_supported"], [182, 3, 1, "", "inplace_decrement"], [182, 3, 1, "", "inplace_increment"], [182, 3, 1, "", "inplace_variables_supported"], [182, 3, 1, "", "inputs_to_native_arrays"], [182, 3, 1, "", "inv"], [182, 3, 1, "", "invalid_dtype"], [182, 3, 1, "", "is_float_dtype"], [182, 3, 1, "", "is_int_dtype"], [182, 3, 1, "", "is_ivy_container"], [182, 3, 1, "", "leaky_relu"], [182, 3, 1, "", "linear"], [182, 3, 1, "", "linspace"], [182, 3, 1, "", "logspace"], [182, 3, 1, "", "lstm_update"], [182, 3, 1, "", "match_kwargs"], [182, 3, 1, "", "matrix_power"], [182, 3, 1, "", "matrix_rank"], [182, 3, 1, "", "matrix_transpose"], [182, 3, 1, "", "meshgrid"], [182, 3, 1, "", "multi_head_attention"], [182, 3, 1, "", "multinomial"], [182, 3, 1, "", "multiprocessing"], [182, 3, 1, "", "native_array"], [182, 3, 1, "", "nonzero"], [182, 3, 1, "", "num_arrays_in_memory"], [182, 3, 1, "", "num_cpu_cores"], [182, 3, 1, "", "num_gpus"], [182, 3, 1, "", "num_ivy_arrays_on_dev"], [182, 3, 1, "", "one_hot"], [182, 3, 1, "", "ones"], [182, 3, 1, "", "ones_like"], [182, 3, 1, "", "outer"], [182, 3, 1, "", "outputs_to_ivy_arrays"], [182, 3, 1, "", "percent_used_mem_on_dev"], [182, 3, 1, "", "pinv"], [182, 3, 1, "", "print_all_arrays_in_memory"], [182, 3, 1, "", "print_all_ivy_arrays_on_dev"], [182, 3, 1, "", "promote_types"], [182, 3, 1, "", "qr"], [182, 3, 1, "", "queue_timeout"], [182, 3, 1, "", "randint"], [182, 3, 1, "", "random_normal"], [182, 3, 1, "", "relu"], [182, 3, 1, "", "result_type"], [182, 3, 1, "", "scaled_dot_product_attention"], [182, 3, 1, "", "scatter_flat"], [182, 3, 1, "", "scatter_nd"], [182, 3, 1, "", "seed"], [182, 3, 1, "", "set_default_device"], [182, 3, 1, "", "set_default_dtype"], [182, 3, 1, "", "set_default_float_dtype"], [182, 3, 1, "", "set_default_int_dtype"], [182, 3, 1, "", "set_min_base"], [182, 3, 1, "", "set_min_denominator"], [182, 3, 1, "", "set_queue_timeout"], [182, 3, 1, "", "set_split_factor"], [182, 3, 1, "", "set_tmp_dir"], [182, 3, 1, "", "set_with_grads"], [182, 3, 1, "", "shape_to_tuple"], [182, 3, 1, "", "sigmoid"], [182, 3, 1, "", "slogdet"], [182, 3, 1, "", "softmax"], [182, 3, 1, "", "softplus"], [182, 3, 1, "", "solve"], [182, 3, 1, "", "split_factor"], [182, 3, 1, "", "split_func_call"], [182, 3, 1, "", "stable_divide"], [182, 3, 1, "", "stable_pow"], [182, 3, 1, "", "static_acos"], [182, 3, 1, "", "static_acosh"], [182, 3, 1, "", "static_all"], [182, 3, 1, "", "static_any"], [182, 3, 1, "", "static_arange"], [182, 3, 1, "", "static_arg_info"], [182, 3, 1, "", "static_arg_names"], [182, 3, 1, "", "static_argmax"], [182, 3, 1, "", "static_argmin"], [182, 3, 1, "", "static_array"], [182, 3, 1, "", "static_array_equal"], [182, 3, 1, "", "static_arrays_equal"], [182, 3, 1, "", "static_as_ivy_dev"], [182, 3, 1, "", "static_as_ivy_dtype"], [182, 3, 1, "", "static_as_native_dev"], [182, 3, 1, "", "static_as_native_dtype"], [182, 3, 1, "", "static_asarray"], [182, 3, 1, "", "static_asin"], [182, 3, 1, "", "static_asinh"], [182, 3, 1, "", "static_assert_supports_inplace"], [182, 3, 1, "", "static_astype"], [182, 3, 1, "", "static_atan"], [182, 3, 1, "", "static_atan2"], [182, 3, 1, "", "static_atanh"], [182, 3, 1, "", "static_bitwise_and"], [182, 3, 1, "", "static_bitwise_invert"], [182, 3, 1, "", "static_bitwise_left_shift"], [182, 3, 1, "", "static_bitwise_or"], [182, 3, 1, "", "static_bitwise_right_shift"], [182, 3, 1, "", "static_bitwise_xor"], [182, 3, 1, "", "static_broadcast_arrays"], [182, 3, 1, "", "static_broadcast_to"], [182, 3, 1, "", "static_cache_fn"], [182, 3, 1, "", "static_ceil"], [182, 3, 1, "", "static_cholesky"], [182, 3, 1, "", "static_clear_mem_on_dev"], [182, 3, 1, "", "static_clip_matrix_norm"], [182, 3, 1, "", "static_clip_vector_norm"], [182, 3, 1, "", "static_closest_valid_dtype"], [182, 3, 1, "", "static_concat"], [182, 3, 1, "", "static_constant_pad"], [182, 3, 1, "", "static_container_types"], [182, 3, 1, "", "static_conv1d"], [182, 3, 1, "", "static_conv1d_transpose"], [182, 3, 1, "", "static_conv2d"], [182, 3, 1, "", "static_conv2d_transpose"], [182, 3, 1, "", "static_conv3d"], [182, 3, 1, "", "static_conv3d_transpose"], [182, 3, 1, "", "static_copy_array"], [182, 3, 1, "", "static_cos"], [182, 3, 1, "", "static_cosh"], [182, 3, 1, "", "static_cross"], [182, 3, 1, "", "static_cumprod"], [182, 3, 1, "", "static_cumsum"], [182, 3, 1, "", "static_current_backend"], [182, 3, 1, "", "static_current_backend_str"], [182, 3, 1, "", "static_default"], [182, 3, 1, "", "static_default_device"], [182, 3, 1, "", "static_default_dtype"], [182, 3, 1, "", "static_default_float_dtype"], [182, 3, 1, "", "static_default_int_dtype"], [182, 3, 1, "", "static_depthwise_conv2d"], [182, 3, 1, "", "static_det"], [182, 3, 1, "", "static_dev"], [182, 3, 1, "", "static_dev_clone"], [182, 3, 1, "", "static_dev_clone_array"], [182, 3, 1, "", "static_dev_clone_iter"], [182, 3, 1, "", "static_dev_clone_nest"], [182, 3, 1, "", "static_dev_dist"], [182, 3, 1, "", "static_dev_dist_array"], [182, 3, 1, "", "static_dev_dist_iter"], [182, 3, 1, "", "static_dev_dist_nest"], [182, 3, 1, "", "static_dev_unify"], [182, 3, 1, "", "static_dev_unify_array"], [182, 3, 1, "", "static_dev_unify_iter"], [182, 3, 1, "", "static_dev_unify_nest"], [182, 3, 1, "", "static_dev_util"], [182, 3, 1, "", "static_diagonal"], [182, 3, 1, "", "static_dropout"], [182, 3, 1, "", "static_dtype"], [182, 3, 1, "", "static_dtype_bits"], [182, 3, 1, "", "static_eigh"], [182, 3, 1, "", "static_eigvalsh"], [182, 3, 1, "", "static_einops_rearrange"], [182, 3, 1, "", "static_einops_reduce"], [182, 3, 1, "", "static_einops_repeat"], [182, 3, 1, "", "static_einsum"], [182, 3, 1, "", "static_empty"], [182, 3, 1, "", "static_empty_like"], [182, 3, 1, "", "static_equal"], [182, 3, 1, "", "static_erf"], [182, 3, 1, "", "static_execute_with_gradients"], [182, 3, 1, "", "static_exists"], [182, 3, 1, "", "static_exp"], [182, 3, 1, "", "static_expand_dims"], [182, 3, 1, "", "static_expm1"], [182, 3, 1, "", "static_eye"], [182, 3, 1, "", "static_finfo"], [182, 3, 1, "", "static_flip"], [182, 3, 1, "", "static_floor"], [182, 3, 1, "", "static_floor_divide"], [182, 3, 1, "", "static_floormod"], [182, 3, 1, "", "static_fourier_encode"], [182, 3, 1, "", "static_from_dlpack"], [182, 3, 1, "", "static_full"], [182, 3, 1, "", "static_full_like"], [182, 3, 1, "", "static_function_supported_dtypes"], [182, 3, 1, "", "static_function_unsupported_dtypes"], [182, 3, 1, "", "static_gather"], [182, 3, 1, "", "static_gelu"], [182, 3, 1, "", "static_get_all_arrays_in_memory"], [182, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [182, 3, 1, "", "static_get_min_base"], [182, 3, 1, "", "static_get_min_denominator"], [182, 3, 1, "", "static_get_num_dims"], [182, 3, 1, "", "static_get_referrers_recursive"], [182, 3, 1, "", "static_gpu_is_available"], [182, 3, 1, "", "static_greater"], [182, 3, 1, "", "static_greater_equal"], [182, 3, 1, "", "static_handle_nestable"], [182, 3, 1, "", "static_handle_out_argument"], [182, 3, 1, "", "static_has_nans"], [182, 3, 1, "", "static_iinfo"], [182, 3, 1, "", "static_indices_where"], [182, 3, 1, "", "static_infer_device"], [182, 3, 1, "", "static_infer_dtype"], [182, 3, 1, "", "static_inplace_arrays_supported"], [182, 3, 1, "", "static_inplace_decrement"], [182, 3, 1, "", "static_inplace_increment"], [182, 3, 1, "", "static_inplace_update"], [182, 3, 1, "", "static_inplace_variables_supported"], [182, 3, 1, "", "static_inputs_to_native_arrays"], [182, 3, 1, "", "static_inv"], [182, 3, 1, "", "static_invalid_dtype"], [182, 3, 1, "", "static_is_array"], [182, 3, 1, "", "static_is_float_dtype"], [182, 3, 1, "", "static_is_int_dtype"], [182, 3, 1, "", "static_is_ivy_array"], [182, 3, 1, "", "static_is_ivy_container"], [182, 3, 1, "", "static_is_native_array"], [182, 3, 1, "", "static_isfinite"], [182, 3, 1, "", "static_isinf"], [182, 3, 1, "", "static_isnan"], [182, 3, 1, "", "static_layer_norm"], [182, 3, 1, "", "static_leaky_relu"], [182, 3, 1, "", "static_less"], [182, 3, 1, "", "static_less_equal"], [182, 3, 1, "", "static_linear"], [182, 3, 1, "", "static_linspace"], [182, 3, 1, "", "static_log"], [182, 3, 1, "", "static_log10"], [182, 3, 1, "", "static_log1p"], [182, 3, 1, "", "static_log2"], [182, 3, 1, "", "static_logaddexp"], [182, 3, 1, "", "static_logical_and"], [182, 3, 1, "", "static_logical_not"], [182, 3, 1, "", "static_logical_or"], [182, 3, 1, "", "static_logical_xor"], [182, 3, 1, "", "static_logspace"], [182, 3, 1, "", "static_lstm_update"], [182, 3, 1, "", "static_match_kwargs"], [182, 3, 1, "", "static_matmul"], [182, 3, 1, "", "static_matrix_norm"], [182, 3, 1, "", "static_matrix_power"], [182, 3, 1, "", "static_matrix_rank"], [182, 3, 1, "", "static_matrix_transpose"], [182, 3, 1, "", "static_max"], [182, 3, 1, "", "static_maximum"], [182, 3, 1, "", "static_mean"], [182, 3, 1, "", "static_meshgrid"], [182, 3, 1, "", "static_min"], [182, 3, 1, "", "static_minimum"], [182, 3, 1, "", "static_multi_head_attention"], [182, 3, 1, "", "static_multinomial"], [182, 3, 1, "", "static_multiprocessing"], [182, 3, 1, "", "static_native_array"], [182, 3, 1, "", "static_negative"], [182, 3, 1, "", "static_nonzero"], [182, 3, 1, "", "static_not_equal"], [182, 3, 1, "", "static_num_arrays_in_memory"], [182, 3, 1, "", "static_num_cpu_cores"], [182, 3, 1, "", "static_num_gpus"], [182, 3, 1, "", "static_num_ivy_arrays_on_dev"], [182, 3, 1, "", "static_one_hot"], [182, 3, 1, "", "static_ones"], [182, 3, 1, "", "static_ones_like"], [182, 3, 1, "", "static_outer"], [182, 3, 1, "", "static_outputs_to_ivy_arrays"], [182, 3, 1, "", "static_percent_used_mem_on_dev"], [182, 3, 1, "", "static_permute_dims"], [182, 3, 1, "", "static_pinv"], [182, 3, 1, "", "static_positive"], [182, 3, 1, "", "static_pow"], [182, 3, 1, "", "static_print_all_arrays_in_memory"], [182, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [182, 3, 1, "", "static_prod"], [182, 3, 1, "", "static_promote_types"], [182, 3, 1, "", "static_qr"], [182, 3, 1, "", "static_queue_timeout"], [182, 3, 1, "", "static_random_normal"], [182, 3, 1, "", "static_relu"], [182, 3, 1, "", "static_remainder"], [182, 3, 1, "", "static_repeat"], [182, 3, 1, "", "static_reshape"], [182, 3, 1, "", "static_result_type"], [182, 3, 1, "", "static_round"], [182, 3, 1, "", "static_scaled_dot_product_attention"], [182, 3, 1, "", "static_scatter_flat"], [182, 3, 1, "", "static_scatter_nd"], [182, 3, 1, "", "static_seed"], [182, 3, 1, "", "static_set_default_device"], [182, 3, 1, "", "static_set_default_dtype"], [182, 3, 1, "", "static_set_default_float_dtype"], [182, 3, 1, "", "static_set_default_int_dtype"], [182, 3, 1, "", "static_set_min_base"], [182, 3, 1, "", "static_set_min_denominator"], [182, 3, 1, "", "static_set_queue_timeout"], [182, 3, 1, "", "static_set_split_factor"], [182, 3, 1, "", "static_set_tmp_dir"], [182, 3, 1, "", "static_set_with_grads"], [182, 3, 1, "", "static_shape"], [182, 3, 1, "", "static_shape_to_tuple"], [182, 3, 1, "", "static_shuffle"], [182, 3, 1, "", "static_sigmoid"], [182, 3, 1, "", "static_sign"], [182, 3, 1, "", "static_sin"], [182, 3, 1, "", "static_sinh"], [182, 3, 1, "", "static_slogdet"], [182, 3, 1, "", "static_softmax"], [182, 3, 1, "", "static_softplus"], [182, 3, 1, "", "static_solve"], [182, 3, 1, "", "static_split"], [182, 3, 1, "", "static_split_factor"], [182, 3, 1, "", "static_split_func_call"], [182, 3, 1, "", "static_sqrt"], [182, 3, 1, "", "static_square"], [182, 3, 1, "", "static_squeeze"], [182, 3, 1, "", "static_stable_divide"], [182, 3, 1, "", "static_stable_pow"], [182, 3, 1, "", "static_stack"], [182, 3, 1, "", "static_std"], [182, 3, 1, "", "static_stop_gradient"], [182, 3, 1, "", "static_sum"], [182, 3, 1, "", "static_supports_inplace"], [182, 3, 1, "", "static_svd"], [182, 3, 1, "", "static_svdvals"], [182, 3, 1, "", "static_swapaxes"], [182, 3, 1, "", "static_tensordot"], [182, 3, 1, "", "static_tile"], [182, 3, 1, "", "static_tmp_dir"], [182, 3, 1, "", "static_to_device"], [182, 3, 1, "", "static_to_list"], [182, 3, 1, "", "static_to_native_arrays_and_back"], [182, 3, 1, "", "static_to_numpy"], [182, 3, 1, "", "static_to_scalar"], [182, 3, 1, "", "static_total_mem_on_dev"], [182, 3, 1, "", "static_tpu_is_available"], [182, 3, 1, "", "static_trace"], [182, 3, 1, "", "static_tril"], [182, 3, 1, "", "static_triu"], [182, 3, 1, "", "static_trunc"], [182, 3, 1, "", "static_try_else_none"], [182, 3, 1, "", "static_type_promote_arrays"], [182, 3, 1, "", "static_unique_all"], [182, 3, 1, "", "static_unique_counts"], [182, 3, 1, "", "static_unique_inverse"], [182, 3, 1, "", "static_unique_values"], [182, 3, 1, "", "static_unset_default_device"], [182, 3, 1, "", "static_unset_default_dtype"], [182, 3, 1, "", "static_unset_default_float_dtype"], [182, 3, 1, "", "static_unset_default_int_dtype"], [182, 3, 1, "", "static_unset_with_grads"], [182, 3, 1, "", "static_unstack"], [182, 3, 1, "", "static_used_mem_on_dev"], [182, 3, 1, "", "static_valid_dtype"], [182, 3, 1, "", "static_value_is_nan"], [182, 3, 1, "", "static_var"], [182, 3, 1, "", "static_variable"], [182, 3, 1, "", "static_variable_data"], [182, 3, 1, "", "static_vecdot"], [182, 3, 1, "", "static_vector_norm"], [182, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [182, 3, 1, "", "static_where"], [182, 3, 1, "", "static_with_grads"], [182, 3, 1, "", "static_zero_pad"], [182, 3, 1, "", "static_zeros"], [182, 3, 1, "", "static_zeros_like"], [182, 3, 1, "", "stop_gradient"], [182, 3, 1, "", "supports_inplace"], [182, 3, 1, "", "svd"], [182, 3, 1, "", "svdvals"], [182, 3, 1, "", "tensordot"], [182, 3, 1, "", "tmp_dir"], [182, 3, 1, "", "to_native_arrays_and_back"], [182, 3, 1, "", "to_scalar"], [182, 3, 1, "", "total_mem_on_dev"], [182, 3, 1, "", "tpu_is_available"], [182, 3, 1, "", "trace"], [182, 3, 1, "", "tril"], [182, 3, 1, "", "triu"], [182, 3, 1, "", "try_else_none"], [182, 3, 1, "", "type_promote_arrays"], [182, 3, 1, "", "unique_all"], [182, 3, 1, "", "unique_counts"], [182, 3, 1, "", "unique_inverse"], [182, 3, 1, "", "unique_values"], [182, 3, 1, "", "unset_default_device"], [182, 3, 1, "", "unset_default_dtype"], [182, 3, 1, "", "unset_default_float_dtype"], [182, 3, 1, "", "unset_default_int_dtype"], [182, 3, 1, "", "unset_with_grads"], [182, 3, 1, "", "used_mem_on_dev"], [182, 3, 1, "", "valid_dtype"], [182, 3, 1, "", "value_is_nan"], [182, 3, 1, "", "variable"], [182, 3, 1, "", "variable_data"], [182, 3, 1, "", "vecdot"], [182, 3, 1, "", "vector_to_skew_symmetric_matrix"], [182, 3, 1, "", "where"], [182, 3, 1, "", "with_grads"], [182, 3, 1, "", "zeros"], [182, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[183, 3, 1, "", "__init__"], [183, 3, 1, "", "at_dev"], [183, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[184, 2, 1, "", "__add__"], [184, 2, 1, "", "__init__"], [184, 2, 1, "", "__radd__"], [521, 2, 1, "", "abs"], [528, 2, 1, "", "acos"], [592, 2, 1, "", "acosh"], [834, 2, 1, "", "adam_step"], [838, 2, 1, "", "adam_update"], [666, 2, 1, "", "add"], [191, 2, 1, "", "add_ivy_container_instance_methods"], [1123, 2, 1, "", "all"], [759, 2, 1, "", "all_equal"], [1127, 2, 1, "", "any"], [1079, 2, 1, "", "argsort"], [539, 2, 1, "", "asin"], [543, 2, 1, "", "asinh"], [198, 2, 1, "", "at_dev"], [199, 2, 1, "", "at_devs"], [553, 2, 1, "", "atan"], [551, 2, 1, "", "atan2"], [751, 2, 1, "", "atanh"], [954, 2, 1, "", "binary_cross_entropy"], [559, 2, 1, "", "bitwise_and"], [563, 2, 1, "", "bitwise_invert"], [567, 2, 1, "", "bitwise_left_shift"], [571, 2, 1, "", "bitwise_or"], [575, 2, 1, "", "bitwise_right_shift"], [579, 2, 1, "", "bitwise_xor"], [442, 2, 1, "", "can_cast"], [583, 2, 1, "", "ceil"], [970, 2, 1, "", "clip"], [770, 2, 1, "", "clip_vector_norm"], [975, 2, 1, "", "concat"], [979, 2, 1, "", "constant_pad"], [592, 2, 1, "", "cos"], [591, 2, 1, "", "cosh"], [959, 2, 1, "", "cross_entropy"], [618, 2, 1, "", "divide"], [1115, 2, 1, "", "einsum"], [626, 2, 1, "", "equal"], [604, 2, 1, "", "erf"], [666, 2, 1, "", "exp"], [983, 2, 1, "", "expand_dims"], [612, 2, 1, "", "expm1"], [987, 2, 1, "", "flip"], [618, 2, 1, "", "floor"], [620, 2, 1, "", "floor_divide"], [787, 2, 1, "", "gather_nd"], [843, 2, 1, "", "gradient_descent_update"], [626, 2, 1, "", "greater"], [628, 2, 1, "", "greater_equal"], [847, 2, 1, "", "is_variable"], [632, 2, 1, "", "isfinite"], [636, 2, 1, "", "isinf"], [640, 2, 1, "", "isnan"], [851, 2, 1, "", "lamb_update"], [855, 2, 1, "", "lars_update"], [1052, 2, 1, "", "layer_norm"], [644, 2, 1, "", "less"], [648, 2, 1, "", "less_equal"], [652, 2, 1, "", "log"], [656, 2, 1, "", "log10"], [660, 2, 1, "", "log1p"], [664, 2, 1, "", "log2"], [668, 2, 1, "", "logaddexp"], [672, 2, 1, "", "logical_and"], [676, 2, 1, "", "logical_not"], [680, 2, 1, "", "logical_or"], [684, 2, 1, "", "logical_xor"], [905, 2, 1, "", "matmul"], [1094, 2, 1, "", "max"], [1098, 2, 1, "", "mean"], [1102, 2, 1, "", "min"], [690, 2, 1, "", "multiply"], [695, 2, 1, "", "negative"], [699, 2, 1, "", "not_equal"], [859, 2, 1, "", "optimizer_update"], [991, 2, 1, "", "permute_dims"], [703, 2, 1, "", "positive"], [707, 2, 1, "", "pow"], [1106, 2, 1, "", "prod"], [1061, 2, 1, "", "random_uniform"], [711, 2, 1, "", "remainder"], [995, 2, 1, "", "repeat"], [999, 2, 1, "", "reshape"], [1003, 2, 1, "", "roll"], [715, 2, 1, "", "round"], [719, 2, 1, "", "sign"], [723, 2, 1, "", "sin"], [727, 2, 1, "", "sinh"], [1084, 2, 1, "", "sort"], [964, 2, 1, "", "sparse_cross_entropy"], [731, 2, 1, "", "sqrt"], [735, 2, 1, "", "square"], [1009, 2, 1, "", "squeeze"], [1013, 2, 1, "", "stack"], [523, 2, 1, "", "static_abs"], [836, 2, 1, "", "static_adam_step"], [840, 2, 1, "", "static_adam_update"], [666, 2, 1, "", "static_add"], [761, 2, 1, "", "static_all_equal"], [1081, 2, 1, "", "static_argsort"], [956, 2, 1, "", "static_binary_cross_entropy"], [444, 2, 1, "", "static_can_cast"], [972, 2, 1, "", "static_clip"], [961, 2, 1, "", "static_cross_entropy"], [618, 2, 1, "", "static_divide"], [789, 2, 1, "", "static_gather_nd"], [845, 2, 1, "", "static_gradient_descent_update"], [849, 2, 1, "", "static_is_variable"], [853, 2, 1, "", "static_lamb_update"], [857, 2, 1, "", "static_lars_update"], [692, 2, 1, "", "static_multiply"], [861, 2, 1, "", "static_optimizer_update"], [1058, 2, 1, "", "static_randint"], [1063, 2, 1, "", "static_random_uniform"], [1005, 2, 1, "", "static_roll"], [1086, 2, 1, "", "static_sort"], [966, 2, 1, "", "static_sparse_cross_entropy"], [738, 2, 1, "", "static_subtract"], [751, 2, 1, "", "static_tan"], [748, 2, 1, "", "static_tanh"], [1110, 2, 1, "", "std"], [740, 2, 1, "", "subtract"], [1114, 2, 1, "", "sum"], [1017, 2, 1, "", "swapaxes"], [751, 2, 1, "", "tan"], [750, 2, 1, "", "tanh"], [1021, 2, 1, "", "tile"], [754, 2, 1, "", "trunc"], [1118, 2, 1, "", "var"], [1025, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[315, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[317, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[317, 3, 1, "", "can_cast"], [317, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[319, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[321, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[321, 3, 1, "", "abs"], [321, 3, 1, "", "acos"], [321, 3, 1, "", "acosh"], [321, 3, 1, "", "add"], [321, 3, 1, "", "asin"], [321, 3, 1, "", "asinh"], [321, 3, 1, "", "atan"], [321, 3, 1, "", "atan2"], [321, 3, 1, "", "atanh"], [321, 3, 1, "", "bitwise_and"], [321, 3, 1, "", "bitwise_invert"], [321, 3, 1, "", "bitwise_left_shift"], [321, 3, 1, "", "bitwise_or"], [321, 3, 1, "", "bitwise_right_shift"], [321, 3, 1, "", "bitwise_xor"], [321, 3, 1, "", "ceil"], [321, 3, 1, "", "cos"], [321, 3, 1, "", "cosh"], [321, 3, 1, "", "divide"], [321, 3, 1, "", "equal"], [321, 3, 1, "", "erf"], [321, 3, 1, "", "exp"], [321, 3, 1, "", "expm1"], [321, 3, 1, "", "floor"], [321, 3, 1, "", "floor_divide"], [321, 3, 1, "", "greater"], [321, 3, 1, "", "greater_equal"], [321, 3, 1, "", "isfinite"], [321, 3, 1, "", "isinf"], [321, 3, 1, "", "isnan"], [321, 3, 1, "", "less"], [321, 3, 1, "", "less_equal"], [321, 3, 1, "", "log"], [321, 3, 1, "", "log10"], [321, 3, 1, "", "log1p"], [321, 3, 1, "", "log2"], [321, 3, 1, "", "logaddexp"], [321, 3, 1, "", "logical_and"], [321, 3, 1, "", "logical_not"], [321, 3, 1, "", "logical_or"], [321, 3, 1, "", "logical_xor"], [321, 3, 1, "", "multiply"], [321, 3, 1, "", "negative"], [321, 3, 1, "", "not_equal"], [321, 3, 1, "", "positive"], [321, 3, 1, "", "pow"], [321, 3, 1, "", "remainder"], [321, 3, 1, "", "round"], [321, 3, 1, "", "sign"], [321, 3, 1, "", "sin"], [321, 3, 1, "", "sinh"], [321, 3, 1, "", "sqrt"], [321, 3, 1, "", "square"], [321, 3, 1, "", "static_abs"], [321, 3, 1, "", "static_add"], [321, 3, 1, "", "static_divide"], [321, 3, 1, "", "static_multiply"], [321, 3, 1, "", "static_subtract"], [321, 3, 1, "", "static_tan"], [321, 3, 1, "", "static_tanh"], [321, 3, 1, "", "subtract"], [321, 3, 1, "", "tan"], [321, 3, 1, "", "tanh"], [321, 3, 1, "", "trunc"]], "ivy.container.general": [[323, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[323, 3, 1, "", "all_equal"], [323, 3, 1, "", "clip_vector_norm"], [323, 3, 1, "", "gather_nd"], [323, 3, 1, "", "static_all_equal"], [323, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[325, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[325, 3, 1, "", "adam_step"], [325, 3, 1, "", "adam_update"], [325, 3, 1, "", "gradient_descent_update"], [325, 3, 1, "", "is_variable"], [325, 3, 1, "", "lamb_update"], [325, 3, 1, "", "lars_update"], [325, 3, 1, "", "optimizer_update"], [325, 3, 1, "", "static_adam_step"], [325, 3, 1, "", "static_adam_update"], [325, 3, 1, "", "static_gradient_descent_update"], [325, 3, 1, "", "static_is_variable"], [325, 3, 1, "", "static_lamb_update"], [325, 3, 1, "", "static_lars_update"], [325, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[327, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[329, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[331, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[331, 3, 1, "", "matmul"]], "ivy.container.losses": [[333, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[333, 3, 1, "", "binary_cross_entropy"], [333, 3, 1, "", "cross_entropy"], [333, 3, 1, "", "sparse_cross_entropy"], [333, 3, 1, "", "static_binary_cross_entropy"], [333, 3, 1, "", "static_cross_entropy"], [333, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[335, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[335, 3, 1, "", "clip"], [335, 3, 1, "", "concat"], [335, 3, 1, "", "constant_pad"], [335, 3, 1, "", "expand_dims"], [335, 3, 1, "", "flip"], [335, 3, 1, "", "permute_dims"], [335, 3, 1, "", "repeat"], [335, 3, 1, "", "reshape"], [335, 3, 1, "", "roll"], [335, 3, 1, "", "squeeze"], [335, 3, 1, "", "stack"], [335, 3, 1, "", "static_clip"], [335, 3, 1, "", "static_roll"], [335, 3, 1, "", "swapaxes"], [335, 3, 1, "", "tile"], [335, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[337, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[337, 3, 1, "", "layer_norm"]], "ivy.container.random": [[339, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[339, 3, 1, "", "random_uniform"], [339, 3, 1, "", "static_randint"], [339, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[341, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[343, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[345, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[345, 3, 1, "", "argsort"], [345, 3, 1, "", "sort"], [345, 3, 1, "", "static_argsort"], [345, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[347, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[347, 3, 1, "", "einsum"], [347, 3, 1, "", "max"], [347, 3, 1, "", "mean"], [347, 3, 1, "", "min"], [347, 3, 1, "", "prod"], [347, 3, 1, "", "std"], [347, 3, 1, "", "sum"], [347, 3, 1, "", "var"]], "ivy.container.utility": [[349, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[349, 3, 1, "", "all"], [349, 3, 1, "", "any"]], "ivy.container.wrapping": [[351, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[392, 2, 1, "", "handle_nestable"], [393, 2, 1, "", "handle_out_argument"], [394, 2, 1, "", "infer_device"], [395, 2, 1, "", "infer_dtype"], [396, 2, 1, "", "inputs_to_ivy_arrays"], [397, 2, 1, "", "inputs_to_native_arrays"], [398, 2, 1, "", "outputs_to_ivy_arrays"], [399, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[401, 0, 0, "-", "activations"], [409, 0, 0, "-", "compilation"], [411, 0, 0, "-", "constants"], [412, 0, 0, "-", "creation"], [431, 0, 0, "-", "data_type"], [468, 0, 0, "-", "device"], [518, 0, 0, "-", "elementwise"], [756, 0, 0, "-", "general"], [830, 0, 0, "-", "gradients"], [868, 0, 0, "-", "layers"], [881, 0, 0, "-", "linear_algebra"], [951, 0, 0, "-", "losses"], [967, 0, 0, "-", "manipulation"], [1027, 0, 0, "-", "meta"], [1031, 0, 0, "-", "nest"], [1049, 0, 0, "-", "norms"], [1054, 0, 0, "-", "random"], [1066, 0, 0, "-", "searching"], [1071, 0, 0, "-", "set"], [1076, 0, 0, "-", "sorting"], [1087, 0, 0, "-", "statistical"], [1120, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[402, 2, 1, "", "gelu"], [403, 2, 1, "", "leaky_relu"], [404, 2, 1, "", "relu"], [405, 2, 1, "", "sigmoid"], [406, 2, 1, "", "softmax"], [407, 2, 1, "", "softplus"], [408, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[410, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[411, 5, 1, "", "e"], [411, 5, 1, "", "inf"], [411, 5, 1, "", "nan"], [411, 5, 1, "", "newaxis"], [411, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[413, 2, 1, "", "arange"], [412, 2, 1, "", "array"], [414, 2, 1, "", "asarray"], [415, 2, 1, "", "empty"], [416, 2, 1, "", "empty_like"], [417, 2, 1, "", "eye"], [418, 2, 1, "", "from_dlpack"], [419, 2, 1, "", "full"], [420, 2, 1, "", "full_like"], [421, 2, 1, "", "linspace"], [422, 2, 1, "", "logspace"], [423, 2, 1, "", "meshgrid"], [424, 2, 1, "", "native_array"], [425, 2, 1, "", "ones"], [426, 2, 1, "", "ones_like"], [427, 2, 1, "", "tril"], [428, 2, 1, "", "triu"], [429, 2, 1, "", "zeros"], [430, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[431, 1, 1, "", "DefaultDtype"], [431, 1, 1, "", "DefaultFloatDtype"], [431, 1, 1, "", "DefaultIntDtype"], [435, 2, 1, "", "as_ivy_dtype"], [436, 2, 1, "", "as_native_dtype"], [437, 2, 1, "", "astype"], [438, 2, 1, "", "broadcast_arrays"], [439, 2, 1, "", "broadcast_to"], [443, 2, 1, "", "can_cast"], [445, 2, 1, "", "closest_valid_dtype"], [446, 2, 1, "", "default_dtype"], [447, 2, 1, "", "default_float_dtype"], [448, 2, 1, "", "default_int_dtype"], [449, 2, 1, "", "dtype"], [450, 2, 1, "", "dtype_bits"], [451, 2, 1, "", "finfo"], [452, 2, 1, "", "function_supported_dtypes"], [453, 2, 1, "", "function_unsupported_dtypes"], [454, 2, 1, "", "iinfo"], [455, 2, 1, "", "invalid_dtype"], [456, 2, 1, "", "is_float_dtype"], [457, 2, 1, "", "is_int_dtype"], [458, 2, 1, "", "promote_types"], [459, 2, 1, "", "result_type"], [460, 2, 1, "", "set_default_dtype"], [461, 2, 1, "", "set_default_float_dtype"], [462, 2, 1, "", "set_default_int_dtype"], [463, 2, 1, "", "type_promote_arrays"], [464, 2, 1, "", "unset_default_dtype"], [465, 2, 1, "", "unset_default_float_dtype"], [466, 2, 1, "", "unset_default_int_dtype"], [467, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[431, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[431, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[431, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[468, 1, 1, "", "DefaultDevice"], [470, 1, 1, "", "DevClonedItem"], [471, 1, 1, "", "DevClonedIter"], [472, 1, 1, "", "DevClonedNest"], [473, 1, 1, "", "DevDistItem"], [474, 1, 1, "", "DevDistIter"], [475, 1, 1, "", "DevDistNest"], [468, 1, 1, "", "DevManager"], [477, 1, 1, "", "DevMapper"], [478, 1, 1, "", "DevMapperMultiProc"], [468, 1, 1, "", "MultiDev"], [480, 1, 1, "", "MultiDevItem"], [481, 1, 1, "", "MultiDevIter"], [482, 1, 1, "", "MultiDevNest"], [483, 1, 1, "", "Profiler"], [484, 2, 1, "", "as_ivy_dev"], [485, 2, 1, "", "as_native_dev"], [486, 2, 1, "", "clear_mem_on_dev"], [487, 2, 1, "", "default_device"], [488, 2, 1, "", "dev"], [489, 2, 1, "", "dev_clone"], [490, 2, 1, "", "dev_clone_array"], [491, 2, 1, "", "dev_clone_iter"], [492, 2, 1, "", "dev_clone_nest"], [493, 2, 1, "", "dev_dist"], [494, 2, 1, "", "dev_dist_array"], [495, 2, 1, "", "dev_dist_iter"], [496, 2, 1, "", "dev_dist_nest"], [497, 2, 1, "", "dev_unify"], [498, 2, 1, "", "dev_unify_array"], [499, 2, 1, "", "dev_unify_iter"], [500, 2, 1, "", "dev_unify_nest"], [501, 2, 1, "", "dev_util"], [502, 2, 1, "", "get_all_ivy_arrays_on_dev"], [503, 2, 1, "", "gpu_is_available"], [504, 2, 1, "", "num_cpu_cores"], [505, 2, 1, "", "num_gpus"], [506, 2, 1, "", "num_ivy_arrays_on_dev"], [507, 2, 1, "", "percent_used_mem_on_dev"], [508, 2, 1, "", "print_all_ivy_arrays_on_dev"], [509, 2, 1, "", "set_default_device"], [510, 2, 1, "", "set_split_factor"], [511, 2, 1, "", "split_factor"], [512, 2, 1, "", "split_func_call"], [513, 2, 1, "", "to_device"], [514, 2, 1, "", "total_mem_on_dev"], [515, 2, 1, "", "tpu_is_available"], [516, 2, 1, "", "unset_default_device"], [517, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[468, 3, 1, "", "__enter__"], [468, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[468, 3, 1, "", "__init__"], [468, 3, 1, "", "da_tune_step"], [468, 4, 1, "", "dim_size"], [468, 3, 1, "", "ds_tune_step"], [468, 3, 1, "", "map"], [468, 3, 1, "", "repeated_config_check"], [468, 4, 1, "", "tune_step"], [468, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[477, 3, 1, "", "__init__"], [477, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[478, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[468, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[480, 3, 1, "", "__init__"], [480, 3, 1, "", "items"], [480, 3, 1, "", "keys"], [480, 4, 1, "", "shape"], [480, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[481, 3, 1, "", "__init__"], [481, 3, 1, "", "at_dev"], [481, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[482, 3, 1, "", "__init__"], [482, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[483, 3, 1, "", "__init__"], [483, 3, 1, "", "start"], [483, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[522, 2, 1, "", "abs"], [524, 2, 1, "", "acos"], [592, 2, 1, "", "acosh"], [532, 2, 1, "", "add"], [540, 2, 1, "", "asin"], [544, 2, 1, "", "asinh"], [545, 2, 1, "", "atan"], [552, 2, 1, "", "atan2"], [751, 2, 1, "", "atanh"], [560, 2, 1, "", "bitwise_and"], [564, 2, 1, "", "bitwise_invert"], [568, 2, 1, "", "bitwise_left_shift"], [572, 2, 1, "", "bitwise_or"], [576, 2, 1, "", "bitwise_right_shift"], [580, 2, 1, "", "bitwise_xor"], [584, 2, 1, "", "ceil"], [585, 2, 1, "", "cos"], [589, 2, 1, "", "cosh"], [593, 2, 1, "", "divide"], [598, 2, 1, "", "equal"], [605, 2, 1, "", "erf"], [606, 2, 1, "", "exp"], [613, 2, 1, "", "expm1"], [614, 2, 1, "", "floor"], [621, 2, 1, "", "floor_divide"], [622, 2, 1, "", "greater"], [629, 2, 1, "", "greater_equal"], [633, 2, 1, "", "isfinite"], [637, 2, 1, "", "isinf"], [641, 2, 1, "", "isnan"], [645, 2, 1, "", "less"], [649, 2, 1, "", "less_equal"], [653, 2, 1, "", "log"], [657, 2, 1, "", "log10"], [661, 2, 1, "", "log1p"], [665, 2, 1, "", "log2"], [669, 2, 1, "", "logaddexp"], [673, 2, 1, "", "logical_and"], [677, 2, 1, "", "logical_not"], [681, 2, 1, "", "logical_or"], [685, 2, 1, "", "logical_xor"], [686, 2, 1, "", "maximum"], [687, 2, 1, "", "minimum"], [691, 2, 1, "", "multiply"], [696, 2, 1, "", "negative"], [700, 2, 1, "", "not_equal"], [704, 2, 1, "", "positive"], [708, 2, 1, "", "pow"], [712, 2, 1, "", "remainder"], [716, 2, 1, "", "round"], [720, 2, 1, "", "sign"], [724, 2, 1, "", "sin"], [728, 2, 1, "", "sinh"], [732, 2, 1, "", "sqrt"], [736, 2, 1, "", "square"], [741, 2, 1, "", "subtract"], [742, 2, 1, "", "tan"], [747, 2, 1, "", "tanh"], [755, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[760, 2, 1, "", "all_equal"], [762, 2, 1, "", "arg_info"], [763, 2, 1, "", "arg_names"], [764, 2, 1, "", "array_equal"], [765, 2, 1, "", "arrays_equal"], [766, 2, 1, "", "assert_supports_inplace"], [767, 2, 1, "", "cache_fn"], [768, 2, 1, "", "clip_matrix_norm"], [771, 2, 1, "", "clip_vector_norm"], [772, 2, 1, "", "container_types"], [773, 2, 1, "", "copy_array"], [774, 2, 1, "", "cumprod"], [775, 2, 1, "", "cumsum"], [776, 2, 1, "", "current_backend_str"], [777, 2, 1, "", "default"], [778, 2, 1, "", "einops_rearrange"], [779, 2, 1, "", "einops_reduce"], [780, 2, 1, "", "einops_repeat"], [781, 2, 1, "", "exists"], [782, 2, 1, "", "floormod"], [783, 2, 1, "", "fourier_encode"], [784, 2, 1, "", "gather"], [788, 2, 1, "", "gather_nd"], [790, 2, 1, "", "get_all_arrays_in_memory"], [791, 2, 1, "", "get_min_base"], [792, 2, 1, "", "get_min_denominator"], [793, 2, 1, "", "get_num_dims"], [794, 2, 1, "", "get_referrers_recursive"], [795, 2, 1, "", "has_nans"], [796, 2, 1, "", "indices_where"], [797, 2, 1, "", "inplace_arrays_supported"], [798, 2, 1, "", "inplace_decrement"], [799, 2, 1, "", "inplace_increment"], [800, 2, 1, "", "inplace_update"], [801, 2, 1, "", "inplace_variables_supported"], [802, 2, 1, "", "is_array"], [803, 2, 1, "", "is_ivy_array"], [804, 2, 1, "", "is_ivy_container"], [805, 2, 1, "", "is_native_array"], [806, 2, 1, "", "match_kwargs"], [807, 2, 1, "", "multiprocessing"], [808, 2, 1, "", "num_arrays_in_memory"], [809, 2, 1, "", "one_hot"], [810, 2, 1, "", "print_all_arrays_in_memory"], [811, 2, 1, "", "queue_timeout"], [812, 2, 1, "", "scatter_flat"], [813, 2, 1, "", "scatter_nd"], [814, 2, 1, "", "set_min_base"], [815, 2, 1, "", "set_min_denominator"], [816, 2, 1, "", "set_queue_timeout"], [817, 2, 1, "", "set_tmp_dir"], [818, 2, 1, "", "shape"], [819, 2, 1, "", "shape_to_tuple"], [820, 2, 1, "", "stable_divide"], [821, 2, 1, "", "stable_pow"], [822, 2, 1, "", "supports_inplace"], [823, 2, 1, "", "tmp_dir"], [824, 2, 1, "", "to_list"], [825, 2, 1, "", "to_numpy"], [826, 2, 1, "", "to_scalar"], [827, 2, 1, "", "try_else_none"], [828, 2, 1, "", "unstack"], [829, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[830, 1, 1, "", "GradientTracking"], [835, 2, 1, "", "adam_step"], [839, 2, 1, "", "adam_update"], [841, 2, 1, "", "execute_with_gradients"], [844, 2, 1, "", "gradient_descent_update"], [848, 2, 1, "", "is_variable"], [852, 2, 1, "", "lamb_update"], [856, 2, 1, "", "lars_update"], [860, 2, 1, "", "optimizer_update"], [862, 2, 1, "", "set_with_grads"], [863, 2, 1, "", "stop_gradient"], [864, 2, 1, "", "unset_with_grads"], [865, 2, 1, "", "variable"], [866, 2, 1, "", "variable_data"], [867, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[830, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[869, 2, 1, "", "conv1d"], [870, 2, 1, "", "conv1d_transpose"], [871, 2, 1, "", "conv2d"], [872, 2, 1, "", "conv2d_transpose"], [873, 2, 1, "", "conv3d"], [874, 2, 1, "", "conv3d_transpose"], [875, 2, 1, "", "depthwise_conv2d"], [876, 2, 1, "", "dropout"], [877, 2, 1, "", "linear"], [878, 2, 1, "", "lstm_update"], [879, 2, 1, "", "multi_head_attention"], [880, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[884, 2, 1, "", "cholesky"], [887, 2, 1, "", "cross"], [888, 2, 1, "", "det"], [893, 2, 1, "", "diagonal"], [896, 2, 1, "", "eigh"], [899, 2, 1, "", "eigvalsh"], [900, 2, 1, "", "inv"], [906, 2, 1, "", "matmul"], [909, 2, 1, "", "matrix_norm"], [910, 2, 1, "", "matrix_power"], [913, 2, 1, "", "matrix_rank"], [916, 2, 1, "", "matrix_transpose"], [919, 2, 1, "", "outer"], [922, 2, 1, "", "pinv"], [925, 2, 1, "", "qr"], [926, 2, 1, "", "slogdet"], [929, 2, 1, "", "solve"], [930, 2, 1, "", "svd"], [935, 2, 1, "", "svdvals"], [938, 2, 1, "", "tensordot"], [941, 2, 1, "", "trace"], [944, 2, 1, "", "vecdot"], [947, 2, 1, "", "vector_norm"], [950, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[955, 2, 1, "", "binary_cross_entropy"], [960, 2, 1, "", "cross_entropy"], [965, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[971, 2, 1, "", "clip"], [976, 2, 1, "", "concat"], [980, 2, 1, "", "constant_pad"], [984, 2, 1, "", "expand_dims"], [988, 2, 1, "", "flip"], [992, 2, 1, "", "permute_dims"], [996, 2, 1, "", "repeat"], [1000, 2, 1, "", "reshape"], [1004, 2, 1, "", "roll"], [1006, 2, 1, "", "split"], [1010, 2, 1, "", "squeeze"], [1014, 2, 1, "", "stack"], [1018, 2, 1, "", "swapaxes"], [1022, 2, 1, "", "tile"], [1026, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[1028, 2, 1, "", "fomaml_step"], [1029, 2, 1, "", "maml_step"], [1030, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[1032, 2, 1, "", "all_nested_indices"], [1033, 2, 1, "", "copy_nest"], [1034, 2, 1, "", "index_nest"], [1035, 2, 1, "", "insert_into_nest_at_index"], [1036, 2, 1, "", "insert_into_nest_at_indices"], [1037, 2, 1, "", "map"], [1038, 2, 1, "", "map_nest_at_index"], [1039, 2, 1, "", "map_nest_at_indices"], [1040, 2, 1, "", "multi_index_nest"], [1041, 2, 1, "", "nested_any"], [1042, 2, 1, "", "nested_indices_where"], [1043, 2, 1, "", "nested_map"], [1044, 2, 1, "", "nested_multi_map"], [1045, 2, 1, "", "prune_nest_at_index"], [1046, 2, 1, "", "prune_nest_at_indices"], [1047, 2, 1, "", "set_nest_at_index"], [1048, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[1053, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[1055, 2, 1, "", "multinomial"], [1057, 2, 1, "", "randint"], [1059, 2, 1, "", "random_normal"], [1062, 2, 1, "", "random_uniform"], [1064, 2, 1, "", "seed"], [1065, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[1067, 2, 1, "", "argmax"], [1068, 2, 1, "", "argmin"], [1069, 2, 1, "", "nonzero"], [1070, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[1072, 2, 1, "", "unique_all"], [1073, 2, 1, "", "unique_counts"], [1074, 2, 1, "", "unique_inverse"], [1075, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[1080, 2, 1, "", "argsort"], [1085, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[1115, 2, 1, "", "einsum"], [1095, 2, 1, "", "max"], [1099, 2, 1, "", "mean"], [1103, 2, 1, "", "min"], [1107, 2, 1, "", "prod"], [1111, 2, 1, "", "std"], [1112, 2, 1, "", "sum"], [1119, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[1124, 2, 1, "", "all"], [1128, 2, 1, "", "any"]], "ivy.inspection": [[1133, 2, 1, "", "add_array_specs"], [1134, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[1136, 0, 0, "-", "activations"], [1139, 0, 0, "-", "converters"], [1141, 0, 0, "-", "initializers"], [1150, 0, 0, "-", "layers"], [1162, 0, 0, "-", "module"], [1164, 0, 0, "-", "norms"], [1166, 0, 0, "-", "optimizers"], [1172, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1137, 1, 1, "", "GEGLU"], [1138, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1137, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1138, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[1140, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1141, 1, 1, "", "Constant"], [1143, 1, 1, "", "FirstLayerSiren"], [1144, 1, 1, "", "GlorotUniform"], [1141, 1, 1, "", "KaimingNormal"], [1146, 1, 1, "", "Ones"], [1147, 1, 1, "", "Siren"], [1141, 1, 1, "", "Uniform"], [1149, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1141, 3, 1, "", "__init__"], [1141, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1143, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1144, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1141, 3, 1, "", "__init__"], [1141, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1146, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1147, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1141, 3, 1, "", "__init__"], [1141, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1149, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[1151, 1, 1, "", "Conv1D"], [1152, 1, 1, "", "Conv1DTranspose"], [1153, 1, 1, "", "Conv2D"], [1154, 1, 1, "", "Conv2DTranspose"], [1155, 1, 1, "", "Conv3D"], [1156, 1, 1, "", "Conv3DTranspose"], [1157, 1, 1, "", "DepthwiseConv2D"], [1158, 1, 1, "", "Dropout"], [1159, 1, 1, "", "LSTM"], [1160, 1, 1, "", "Linear"], [1161, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1151, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1152, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1153, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1154, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1155, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1156, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1157, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1158, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1159, 3, 1, "", "__init__"], [1159, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1160, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1161, 3, 1, "", "__init__"]], "ivy.stateful.module": [[1163, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[1163, 3, 1, "", "__init__"], [1163, 3, 1, "", "build"], [1163, 4, 1, "", "build_mode"], [1163, 4, 1, "", "built"], [1163, 3, 1, "", "check_submod_rets"], [1163, 3, 1, "", "get_mod_key"], [1163, 3, 1, "", "mod_depth"], [1163, 3, 1, "", "mod_height"], [1163, 3, 1, "", "mod_with_top_mod_key_chain"], [1163, 3, 1, "", "save_weights"], [1163, 3, 1, "", "show_mod_in_top_mod"], [1163, 3, 1, "", "show_structure"], [1163, 3, 1, "", "show_v_in_top_v"], [1163, 3, 1, "", "sub_mods"], [1163, 3, 1, "", "track_submod_call_order"], [1163, 3, 1, "", "track_submod_rets"], [1163, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1165, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1165, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1167, 1, 1, "", "Adam"], [1168, 1, 1, "", "LAMB"], [1169, 1, 1, "", "LARS"], [1170, 1, 1, "", "Optimizer"], [1171, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1167, 3, 1, "", "__init__"], [1167, 3, 1, "", "set_state"], [1167, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1168, 3, 1, "", "__init__"], [1168, 3, 1, "", "set_state"], [1168, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1169, 3, 1, "", "__init__"], [1169, 3, 1, "", "set_state"], [1169, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1170, 3, 1, "", "__init__"], [1170, 3, 1, "", "set_state"], [1170, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1171, 3, 1, "", "__init__"], [1171, 3, 1, "", "set_state"], [1171, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1173, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1173, 3, 1, "", "__init__"]], "ivy.verbosity": [[1176, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 177, 401, 1136], "arraywithactiv": 1, "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 175, 361, 366, 371, 375, 441, 520, 525, 529, 533, 538, 542, 546, 550, 554, 558, 562, 566, 570, 574, 578, 582, 586, 590, 594, 599, 603, 607, 611, 615, 619, 623, 627, 631, 635, 639, 643, 647, 651, 655, 659, 663, 667, 671, 675, 679, 683, 689, 694, 698, 702, 706, 710, 714, 718, 722, 726, 730, 734, 739, 744, 749, 753, 758, 786, 833, 883, 886, 889, 892, 895, 898, 901, 904, 908, 912, 915, 918, 921, 924, 928, 931, 934, 937, 940, 943, 946, 949, 953, 958, 963, 969, 974, 978, 982, 986, 990, 994, 998, 1002, 1008, 1012, 1016, 1020, 1024, 1051, 1078, 1083, 1089, 1093, 1097, 1101, 1105, 1109, 1113, 1117, 1122, 1126], "method": [2, 184, 367, 375, 376], "ab": [3, 185, 519, 520, 521, 522], "aco": [4, 186, 524, 525, 526, 527], "acosh": [5, 187, 528, 529, 530, 531], "adam_step": [6, 188, 832, 833, 834, 835], "add": [7, 190, 360, 532, 533, 534, 535], "add_ivy_array_instance_method": [8, 159], "all": [9, 192, 1121, 1122, 1123, 1124], "all_equ": [10, 193, 757, 758, 759, 760], "ani": [11, 194, 1125, 1126, 1127, 1128], "argsort": [12, 195, 1077, 1078, 1079, 1080], "asin": [13, 196, 537, 538, 539, 540], "asinh": [14, 197, 541, 542, 543, 544], "atan": [15, 200, 545, 546, 547, 548], "atan2": [16, 201, 549, 550, 551, 552], "atanh": [17, 202, 553, 554, 555, 556], "binary_cross_entropi": [18, 203, 952, 953, 954, 955], "bitwise_and": [19, 204, 557, 558, 559, 560], "bitwise_invert": [20, 205, 561, 562, 563, 564], "bitwise_left_shift": [21, 206, 565, 566, 567, 568], "bitwise_or": [22, 207, 569, 570, 571, 572], "bitwise_right_shift": [23, 208, 573, 574, 575, 576], "bitwise_xor": [24, 209, 577, 578, 579, 580], "can_cast": [25, 210, 440, 441, 442, 443], "ceil": [26, 211, 581, 582, 583, 584], "choleski": [27, 882, 883, 884], "clip": [28, 212, 968, 969, 970, 971], "concat": [29, 214, 973, 974, 975, 976], "constant_pad": [30, 215, 977, 978, 979, 980], "co": [31, 216, 585, 586, 587, 588], "cosh": [32, 217, 589, 590, 591, 592], "cross": [33, 885, 886, 887], "cross_entropi": [34, 218, 957, 958, 959, 960], "det": [35, 888, 889, 890], "diagon": [36, 891, 892, 893], "divid": [37, 219, 593, 594, 595, 596], "eigh": [38, 894, 895, 896], "eigvalsh": [39, 897, 898, 899], "einsum": [40, 220, 1088, 1089, 1090, 1091], "equal": [41, 221, 598, 599, 600, 601], "erf": [42, 222, 602, 603, 604, 605], "exp": [43, 223, 606, 607, 608, 609], "expand_dim": [44, 224, 981, 982, 983, 984], "expm1": [45, 225, 610, 611, 612, 613], "flip": [46, 226, 985, 986, 987, 988], "floor": [47, 227, 614, 615, 616, 617], "floor_divid": [48, 228, 618, 619, 620, 621], "gather_nd": [49, 229, 785, 786, 787, 788], "greater": [50, 231, 622, 623, 624, 625], "greater_equ": [51, 232, 626, 627, 628, 629], "inv": [52, 900, 901, 902], "isfinit": [53, 234, 630, 631, 632, 633], "isinf": [54, 235, 634, 635, 636, 637], "isnan": [55, 236, 638, 639, 640, 641], "layer_norm": [56, 239, 1050, 1051, 1052, 1053], "less": [57, 240, 642, 643, 644, 645], "less_equ": [58, 241, 646, 647, 648, 649], "log": [59, 242, 650, 651, 652, 653], "log10": [60, 243, 654, 655, 656, 657], "log1p": [61, 244, 658, 659, 660, 661], "log2": [62, 245, 662, 663, 664, 665], "logaddexp": [63, 246, 666, 667, 668, 669], "logical_and": [64, 247, 670, 671, 672, 673], "logical_not": [65, 248, 674, 675, 676, 677], "logical_or": [66, 249, 678, 679, 680, 681], "logical_xor": [67, 250, 682, 683, 684, 685], "matmul": [68, 251, 903, 904, 905, 906], "matrix_norm": [69, 907, 908, 909], "matrix_rank": [70, 911, 912, 913], "matrix_transpos": [71, 914, 915, 916], "max": [72, 252, 1092, 1093, 1094, 1095], "mean": [73, 253, 1096, 1097, 1098, 1099], "min": [74, 254, 1100, 1101, 1102, 1103], "multipli": [75, 255, 688, 689, 690, 691], "neg": [76, 256, 693, 694, 695, 696], "not_equ": [77, 257, 697, 698, 699, 700], "outer": [78, 917, 918, 919], "permute_dim": [79, 259, 989, 990, 991, 992], "pinv": [80, 920, 921, 922], "posit": [81, 260, 701, 702, 703, 704], "pow": [82, 261, 705, 706, 707, 708], "prod": [83, 262, 1104, 1105, 1106, 1107], "qr": [84, 923, 924, 925], "remaind": [85, 264, 709, 710, 711, 712], "repeat": [86, 265, 993, 994, 995, 996], "reshap": [87, 266, 997, 998, 999, 1000], "roll": [88, 267, 360, 1001, 1002, 1003, 1004], "round": [89, 268, 713, 714, 715, 716], "sign": [90, 269, 717, 718, 719, 720], "sin": [91, 270, 721, 722, 723, 724], "sinh": [92, 271, 725, 726, 727, 728], "solv": [93, 927, 928, 929], "sort": [94, 152, 272, 344, 1076, 1082, 1083, 1084, 1085], "sparse_cross_entropi": [95, 273, 962, 963, 964, 965], "sqrt": [96, 274, 729, 730, 731, 732], "squar": [97, 275, 733, 734, 735, 736], "squeez": [98, 276, 1007, 1008, 1009, 1010], "stack": [99, 277, 1011, 1012, 1013, 1014], "std": [100, 304, 1108, 1109, 1110, 1111], "subtract": [101, 305, 737, 739, 740, 741], "sum": [102, 306, 1112, 1113, 1114, 1115], "svd": [103, 930, 931, 932], "svdval": [104, 933, 934, 935], "swapax": [105, 307, 1015, 1016, 1017, 1018], "tan": [106, 308, 360, 742, 744, 745, 746], "tanh": [107, 309, 408, 747, 749, 750, 751], "tensordot": [108, 936, 937, 938], "tile": [109, 310, 1019, 1020, 1021, 1022], "trace": [110, 939, 940, 941], "trunc": [111, 311, 752, 753, 754, 755], "var": [112, 312, 1116, 1117, 1118, 1119], "vecdot": [113, 942, 943, 944], "vector_norm": [114, 945, 946, 947], "vector_to_skew_symmetric_matrix": [115, 948, 949, 950], "zero_pad": [116, 313, 1023, 1024, 1025, 1026], "convers": 117, "args_to_ivi": 118, "args_to_n": 119, "to_ivi": 120, "to_n": 121, "creation": [122, 314, 412], "arraywithcr": 123, "data": [124, 316, 362, 368, 376, 390, 431, 1071, 1072, 1073, 1075], "type": [124, 316, 363, 368, 390, 431], "arraywithdatatyp": 125, "devic": [126, 318, 369, 371, 468], "arraywithdevic": 127, "elementwis": [128, 320, 518], "arraywithelementwis": 129, "gener": [130, 322, 362, 756], "arraywithgener": 131, "gradient": [132, 324, 830], "arraywithgradi": 133, "imag": [134, 326], "arraywithimag": 135, "layer": [136, 328, 868, 1150], "arraywithlay": 137, "linear": [138, 330, 877, 881, 1160], "algebra": [138, 330, 881], "arraywithlinearalgebra": 139, "loss": [140, 332, 951], "arraywithloss": 141, "manipul": [142, 334, 967], "arraywithmanipul": 143, "norm": [144, 336, 1049, 1164], "arraywithnorm": 145, "random": [146, 338, 1054], "arraywithrandom": 147, "search": [148, 340, 1066], "arraywithsearch": 149, "set": [150, 342, 353, 364, 1071], "arraywithset": 151, "arraywithsort": 153, "statist": [154, 346, 1087], "arraywithstatist": 155, "util": [156, 348, 1120], "arraywithutil": 157, "wrap": [158, 350, 365], "backend": [160, 358, 364, 373, 390], "handler": [160, 373], "choose_random_backend": 162, "clear_backend_stack": 163, "current_backend": 164, "get_backend": 165, "set_backend": 166, "try_import_ivy_jax": 167, "try_import_ivy_mxnet": 168, "try_import_ivy_numpi": 169, "try_import_ivy_tf": 170, "try_import_ivy_torch": 171, "unset_backend": 172, "background": [173, 1129], "ml": 174, "explos": 174, "standard": 175, "skeptic": 175, "complimentari": 175, "vs": [175, 390], "competit": 175, "do": 175, "work": [175, 356], "The": [175, 354, 375, 390], "api": [175, 355, 358, 361, 367, 373, 375, 377, 378], "why": 176, "unifi": [176, 375], "No": [176, 353], "more": 176, "re": 176, "implement": 176, "infinit": 176, "shelf": 176, "life": 176, "containerwithactiv": 178, "base": 179, "containerbas": 180, "contain": [181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 367, 376, 442, 444, 521, 523, 526, 530, 534, 536, 539, 543, 547, 551, 555, 559, 563, 567, 571, 575, 579, 583, 587, 591, 595, 597, 600, 604, 608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 680, 684, 690, 692, 695, 699, 703, 707, 711, 715, 719, 723, 727, 731, 735, 738, 740, 743, 745, 748, 750, 754, 759, 761, 770, 787, 789, 834, 836, 838, 840, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 905, 954, 956, 959, 961, 964, 966, 970, 972, 975, 979, 983, 987, 991, 995, 999, 1003, 1005, 1009, 1013, 1017, 1021, 1025, 1052, 1058, 1061, 1063, 1079, 1081, 1084, 1086, 1090, 1094, 1098, 1102, 1106, 1110, 1114, 1118, 1123, 1127], "multidevcontain": 183, "adam_upd": [189, 837, 838, 839], "add_ivy_container_instance_method": [191, 351], "at_dev": [198, 199], "clip_vector_norm": [213, 769, 770, 771], "gradient_descent_upd": [230, 842, 843, 844], "is_vari": [233, 846, 847, 848], "lamb_upd": [237, 850, 851, 852], "lars_upd": [238, 854, 855, 856], "optimizer_upd": [258, 858, 859, 860], "random_uniform": [263, 1060, 1061, 1062], "static_ab": [278, 523], "static_adam_step": [279, 836], "static_adam_upd": [280, 840], "static_add": [281, 536], "static_all_equ": [282, 761], "static_argsort": [283, 1081], "static_binary_cross_entropi": [284, 956], "static_can_cast": [285, 444], "static_clip": [286, 972], "static_cross_entropi": [287, 961], "static_divid": [288, 597], "static_gather_nd": [289, 789], "static_gradient_descent_upd": [290, 845], "static_is_vari": [291, 849], "static_lamb_upd": [292, 853], "static_lars_upd": [293, 857], "static_multipli": [294, 692], "static_optimizer_upd": [295, 861], "static_randint": [296, 1058], "static_random_uniform": [297, 1063], "static_rol": [298, 1005], "static_sort": [299, 1086], "static_sparse_cross_entropi": [300, 966], "static_subtract": [301, 738], "static_tan": [302, 743], "static_tanh": [303, 748], "containerwithcr": 315, "containerwithdatatyp": 317, "containerwithdevic": 319, "containerwithelementwis": 321, "containerwithgener": 323, "containerwithgradi": 325, "containerwithimag": 327, "containerwithlay": 329, "containerwithlinearalgebra": 331, "containerwithloss": 333, "containerwithmanipul": 335, "containerwithnorm": 337, "containerwithrandom": 339, "containerwithsearch": 341, "containerwithset": 343, "containerwithsort": 345, "containerwithstatist": 347, "containerwithutil": 349, "contribut": [352, 1129], "up": 353, "clone": 353, "ivi": [353, 358, 360, 362, 366, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 441, 442, 443, 444, 520, 521, 522, 523, 525, 526, 527, 529, 530, 531, 533, 534, 535, 536, 538, 539, 540, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 590, 591, 592, 594, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 644, 645, 647, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 675, 676, 677, 679, 680, 681, 683, 684, 685, 689, 690, 691, 692, 694, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 726, 727, 728, 730, 731, 732, 734, 735, 736, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 753, 754, 755, 758, 759, 760, 761, 770, 771, 786, 787, 788, 789, 833, 834, 835, 836, 838, 839, 840, 843, 844, 845, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 898, 899, 901, 902, 904, 905, 906, 908, 909, 912, 913, 915, 916, 918, 919, 921, 922, 924, 925, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 953, 954, 955, 956, 958, 959, 960, 961, 963, 964, 965, 966, 969, 970, 971, 972, 974, 975, 976, 978, 979, 980, 982, 983, 984, 986, 987, 988, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1051, 1052, 1053, 1057, 1058, 1061, 1062, 1063, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1089, 1090, 1091, 1093, 1094, 1095, 1097, 1098, 1099, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1122, 1123, 1124, 1126, 1127, 1128], "pycharm": 353, "virtual": 353, "environ": 353, "docker": [353, 354, 356], "us": [353, 356, 376], "miniconda": [353, 356], "venv": [353, 356], "interpret": 353, "window": 353, "maco": 353, "ubuntu": 353, "github": 353, "codespac": 353, "pre": 353, "commit": [353, 354], "basic": 354, "get": 354, "help": 354, "todo": 354, "list": 354, "issu": 354, "manag": 354, "your": 354, "fork": 354, "who": 354, "To": 354, "ask": 354, "With": 354, "command": 354, "line": 354, "browser": 354, "pull": 354, "request": 354, "small": 354, "often": 354, "run": 354, "test": [354, 361, 362], "local": 354, "open": 355, "task": 355, "function": [355, 363, 365, 367, 368, 369, 371, 373, 378, 390], "format": 355, "frontend": [355, 378], "build": [356, 373], "doc": 356, "dockerless": 356, "document": 356, "pipelin": [356, 390], "make_doc": 356, "sh": 356, "entrypoint": 356, "_make_doc": 356, "generate_src_rst_fil": 356, "py": 356, "sphinx": 356, "correct_built_html_fil": 356, "remove_fil": 356, "deep": 357, "dive": 357, "navig": 358, "code": 358, "categor": 358, "submodul": 358, "design": [358, 372, 1129], "docstr": [359, 360], "exampl": [360, 371], "hypothesi": 362, "self": 362, "consist": 362, "explicit": 362, "test_array_funct": 362, "primari": 363, "composit": 363, "mix": 363, "standalon": 363, "nestabl": [363, 367, 371], "conveni": 363, "nativ": 366, "handl": 366, "instanc": [367, 375], "static": 367, "special": 367, "modul": [368, 369, 377, 1162, 1163], "argument": [368, 369, 370, 371], "other": [368, 369], "inplac": 370, "updat": 370, "out": [370, 371], "copi": 370, "dtype": [371, 449], "number": 371, "oper": [371, 375, 390], "integ": 371, "sequenc": 371, "block": 373, "framework": [373, 374], "graph": [373, 378], "compil": [373, 378, 409, 410], "class": 375, "monkei": 375, "patch": 375, "construct": 376, "represent": 376, "recurs": 376, "built": 376, "ins": 376, "access": 376, "save": 376, "load": 376, "comparison": 376, "custom": [376, 390], "case": 376, "compartment": 376, "configur": 376, "network": [376, 378], "weight": 376, "state": [377, 390], "initi": [377, 1141], "optim": [377, 1166, 1170], "transpil": 378, "role": 378, "convert": [378, 1139], "model": [378, 385, 390], "builder": 380, "ecosystem": 381, "gym": [382, 389], "mech": 383, "memori": [384, 389], "robot": [386, 389], "vision": [387, 389], "extens": [388, 1129], "appli": 389, "librari": 389, "mechan": 389, "faq": 390, "maintain": 390, "version": 390, "dynam": 390, "size": 390, "shape": [390, 818, 1071, 1072, 1073, 1075], "check": 390, "control": 390, "flow": 390, "auto": 390, "differenti": 390, "replica": 390, "parallel": 390, "support": 390, "altern": 390, "structur": 390, "func": 391, "wrapper": 391, "handle_nest": 392, "handle_out_argu": 393, "infer_devic": 394, "infer_dtyp": 395, "inputs_to_ivy_arrai": 396, "inputs_to_native_arrai": 397, "outputs_to_ivy_arrai": 398, "to_native_arrays_and_back": 399, "gelu": [402, 1138], "leaky_relu": 403, "relu": 404, "sigmoid": 405, "softmax": 406, "softplu": 407, "constant": 411, "note": [412, 418], "arang": 413, "asarrai": 414, "empti": 415, "empty_lik": 416, "ey": 417, "from_dlpack": 418, "full": 419, "full_lik": 420, "linspac": 421, "logspac": 422, "meshgrid": 423, "native_arrai": 424, "ones": 425, "ones_lik": 426, "tril": 427, "triu": 428, "zero": [429, 1149], "zeros_lik": 430, "as_ivy_dtyp": 435, "as_native_dtyp": 436, "astyp": 437, "broadcast_arrai": 438, "broadcast_to": 439, "closest_valid_dtyp": 445, "default_dtyp": 446, "default_float_dtyp": 447, "default_int_dtyp": 448, "dtype_bit": 450, "finfo": 451, "function_supported_dtyp": 452, "function_unsupported_dtyp": 453, "iinfo": 454, "invalid_dtyp": 455, "is_float_dtyp": 456, "is_int_dtyp": 457, "promote_typ": 458, "result_typ": 459, "set_default_dtyp": 460, "set_default_float_dtyp": 461, "set_default_int_dtyp": 462, "type_promote_arrai": 463, "unset_default_dtyp": 464, "unset_default_float_dtyp": 465, "unset_default_int_dtyp": 466, "valid_dtyp": 467, "devcloneditem": 470, "devclonedit": 471, "devclonednest": 472, "devdistitem": 473, "devdistit": 474, "devdistnest": 475, "devmapp": 477, "devmappermultiproc": 478, "multidevitem": 480, "multidevit": 481, "multidevnest": 482, "profil": 483, "as_ivy_dev": 484, "as_native_dev": 485, "clear_mem_on_dev": 486, "default_devic": 487, "dev": 488, "dev_clon": 489, "dev_clone_arrai": 490, "dev_clone_it": 491, "dev_clone_nest": 492, "dev_dist": 493, "dev_dist_arrai": 494, "dev_dist_it": 495, "dev_dist_nest": 496, "dev_unifi": 497, "dev_unify_arrai": 498, "dev_unify_it": 499, "dev_unify_nest": 500, "dev_util": 501, "get_all_ivy_arrays_on_dev": 502, "gpu_is_avail": 503, "num_cpu_cor": 504, "num_gpu": 505, "num_ivy_arrays_on_dev": 506, "percent_used_mem_on_dev": 507, "print_all_ivy_arrays_on_dev": 508, "set_default_devic": 509, "set_split_factor": 510, "split_factor": 511, "split_func_cal": 512, "to_devic": 513, "total_mem_on_dev": 514, "tpu_is_avail": 515, "unset_default_devic": 516, "used_mem_on_dev": 517, "maximum": 686, "minimum": 687, "arg_info": 762, "arg_nam": 763, "array_equ": 764, "arrays_equ": 765, "assert_supports_inplac": 766, "cache_fn": 767, "clip_matrix_norm": 768, "container_typ": 772, "copy_arrai": 773, "cumprod": 774, "cumsum": 775, "current_backend_str": 776, "default": 777, "einops_rearrang": 778, "einops_reduc": 779, "einops_repeat": 780, "exist": 781, "floormod": 782, "fourier_encod": 783, "gather": 784, "get_all_arrays_in_memori": 790, "get_min_bas": 791, "get_min_denomin": 792, "get_num_dim": 793, "get_referrers_recurs": 794, "has_nan": 795, "indices_wher": 796, "inplace_arrays_support": 797, "inplace_decr": 798, "inplace_incr": 799, "inplace_upd": 800, "inplace_variables_support": 801, "is_arrai": 802, "is_ivy_arrai": 803, "is_ivy_contain": 804, "is_native_arrai": 805, "match_kwarg": 806, "multiprocess": 807, "num_arrays_in_memori": 808, "one_hot": 809, "print_all_arrays_in_memori": 810, "queue_timeout": 811, "scatter_flat": 812, "scatter_nd": 813, "set_min_bas": 814, "set_min_denomin": 815, "set_queue_timeout": 816, "set_tmp_dir": 817, "shape_to_tupl": 819, "stable_divid": 820, "stable_pow": 821, "supports_inplac": 822, "tmp_dir": 823, "to_list": 824, "to_numpi": 825, "to_scalar": 826, "try_else_non": 827, "unstack": 828, "value_is_nan": 829, "execute_with_gradi": 841, "set_with_grad": 862, "stop_gradi": 863, "unset_with_grad": 864, "variabl": 865, "variable_data": 866, "with_grad": 867, "conv1d": [869, 1151], "conv1d_transpos": 870, "conv2d": [871, 1153], "conv2d_transpos": 872, "conv3d": [873, 1155], "conv3d_transpos": 874, "depthwise_conv2d": 875, "dropout": [876, 1158], "lstm_updat": 878, "multi_head_attent": 879, "scaled_dot_product_attent": 880, "matrix_pow": 910, "slogdet": 926, "split": 1006, "meta": 1027, "fomaml_step": 1028, "maml_step": 1029, "reptile_step": 1030, "nest": 1031, "all_nested_indic": 1032, "copy_nest": 1033, "index_nest": 1034, "insert_into_nest_at_index": 1035, "insert_into_nest_at_indic": 1036, "map": 1037, "map_nest_at_index": 1038, "map_nest_at_indic": 1039, "multi_index_nest": 1040, "nested_ani": 1041, "nested_indices_wher": 1042, "nested_map": 1043, "nested_multi_map": 1044, "prune_nest_at_index": 1045, "prune_nest_at_indic": 1046, "set_nest_at_index": 1047, "set_nest_at_indic": 1048, "multinomi": 1055, "randint": [1056, 1057], "random_norm": 1059, "seed": 1064, "shuffl": 1065, "argmax": 1067, "argmin": 1068, "nonzero": 1069, "where": 1070, "depend": [1071, 1072, 1073, 1075], "output": [1071, 1072, 1073, 1075], "unique_al": 1072, "unique_count": 1073, "unique_invers": 1074, "unique_valu": 1075, "content": 1129, "overview": 1129, "quick": 1129, "start": 1129, "roadmap": [1129, 1135], "citat": 1129, "inspect": 1132, "add_array_spec": 1133, "fn_array_spec": 1134, "geglu": 1137, "to_ivy_modul": 1140, "firstlayersiren": 1143, "glorotuniform": 1144, "Ones": 1146, "siren": 1147, "conv1dtranspos": 1152, "conv2dtranspos": 1154, "conv3dtranspos": 1156, "depthwiseconv2d": 1157, "lstm": 1159, "multiheadattent": 1161, "layernorm": 1165, "adam": 1167, "lamb": 1168, "lar": 1169, "sgd": 1171, "sequenti": [1172, 1173], "verbos": 1175, "cprint": 1176}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})