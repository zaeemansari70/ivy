Search.setIndex({"docnames": ["backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "data_classes", "data_classes/array", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/array", "data_classes/array/array/Array", "data_classes/array/array/Variable", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linear_algebra", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/container/MultiDevContainer", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linear_algebra", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_function_arguments", "deep_dive/11_docstrings", "deep_dive/12_docstring_examples", "deep_dive/13_array_api_tests", "deep_dive/14_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_formatting", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_container", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/astype/astype_array", "functional/ivy/data_type/astype/astype_container", "functional/ivy/data_type/astype/astype_functional", "functional/ivy/data_type/astype/static_astype_container", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_array", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/broadcast_to/broadcast_to_array", "functional/ivy/data_type/broadcast_to/broadcast_to_container", "functional/ivy/data_type/broadcast_to/broadcast_to_functional", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype/dtype_array", "functional/ivy/data_type/dtype/dtype_container", "functional/ivy/data_type/dtype/dtype_functional", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/finfo/finfo_array", "functional/ivy/data_type/finfo/finfo_container", "functional/ivy/data_type/finfo/finfo_functional", "functional/ivy/data_type/finfo/static_finfo_container", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/iinfo/iinfo_array", "functional/ivy/data_type/iinfo/iinfo_container", "functional/ivy/data_type/iinfo/iinfo_functional", "functional/ivy/data_type/iinfo/static_iinfo_container", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_float_dtype/is_float_dtype_array", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/is_int_dtype/is_int_dtype_array", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/result_type/result_type_array", "functional/ivy/data_type/result_type/result_type_container", "functional/ivy/data_type/result_type/result_type_functional", "functional/ivy/data_type/result_type/static_result_type_container", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/asinh/static_asinh_container", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cos/static_cos_container", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sign/static_sign_container", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sin/static_sin_container", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sinh/static_sinh_container", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_shape_array_mode", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_array_mode", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_numpy/static_to_numpy_container", "functional/ivy/general/to_numpy/to_numpy_array", "functional/ivy/general/to_numpy/to_numpy_container", "functional/ivy/general/to_numpy/to_numpy_functional", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unset_shape_array_mode", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_array", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_array", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_container", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_functional", "functional/ivy/layers/depthwise_conv2d/static_depthwise_conv2d_container", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/norms/layer_norm/static_layer_norm_container", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_all/static_unique_all_container", "functional/ivy/set/unique_all/unique_all_array", "functional/ivy/set/unique_all/unique_all_container", "functional/ivy/set/unique_all/unique_all_functional", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_inverse/static_unique_inverse_container", "functional/ivy/set/unique_inverse/unique_inverse_array", "functional/ivy/set/unique_inverse/unique_inverse_container", "functional/ivy/set/unique_inverse/unique_inverse_functional", "functional/ivy/set/unique_values", "functional/ivy/set/unique_values/static_unique_values_container", "functional/ivy/set/unique_values/unique_values_array", "functional/ivy/set/unique_values/unique_values_container", "functional/ivy/set/unique_values/unique_values_functional", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "data_classes.rst", "data_classes/array.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/array.rst", "data_classes/array/array/Array.rst", "data_classes/array/array/Variable.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linear_algebra.rst", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/container/MultiDevContainer.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linear_algebra.rst", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_function_arguments.rst", "deep_dive/11_docstrings.rst", "deep_dive/12_docstring_examples.rst", "deep_dive/13_array_api_tests.rst", "deep_dive/14_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_formatting.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_container.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/astype/astype_array.rst", "functional/ivy/data_type/astype/astype_container.rst", "functional/ivy/data_type/astype/astype_functional.rst", "functional/ivy/data_type/astype/static_astype_container.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_array.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional.rst", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_array.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_container.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_functional.rst", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype/dtype_array.rst", "functional/ivy/data_type/dtype/dtype_container.rst", "functional/ivy/data_type/dtype/dtype_functional.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/finfo/finfo_array.rst", "functional/ivy/data_type/finfo/finfo_container.rst", "functional/ivy/data_type/finfo/finfo_functional.rst", "functional/ivy/data_type/finfo/static_finfo_container.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/iinfo/iinfo_array.rst", "functional/ivy/data_type/iinfo/iinfo_container.rst", "functional/ivy/data_type/iinfo/iinfo_functional.rst", "functional/ivy/data_type/iinfo/static_iinfo_container.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_array.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional.rst", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_array.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional.rst", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/result_type/result_type_array.rst", "functional/ivy/data_type/result_type/result_type_container.rst", "functional/ivy/data_type/result_type/result_type_functional.rst", "functional/ivy/data_type/result_type/static_result_type_container.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/asinh/static_asinh_container.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cos/static_cos_container.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sign/static_sign_container.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sin/static_sin_container.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sinh/static_sinh_container.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_shape_array_mode.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_array_mode.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_numpy/static_to_numpy_container.rst", "functional/ivy/general/to_numpy/to_numpy_array.rst", "functional/ivy/general/to_numpy/to_numpy_container.rst", "functional/ivy/general/to_numpy/to_numpy_functional.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unset_shape_array_mode.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_array.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_array.rst", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_container.rst", "functional/ivy/layers/depthwise_conv2d/depthwise_conv2d_functional.rst", "functional/ivy/layers/depthwise_conv2d/static_depthwise_conv2d_container.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/norms/layer_norm/static_layer_norm_container.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_all/static_unique_all_container.rst", "functional/ivy/set/unique_all/unique_all_array.rst", "functional/ivy/set/unique_all/unique_all_container.rst", "functional/ivy/set/unique_all/unique_all_functional.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_inverse/static_unique_inverse_container.rst", "functional/ivy/set/unique_inverse/unique_inverse_array.rst", "functional/ivy/set/unique_inverse/unique_inverse_container.rst", "functional/ivy/set/unique_inverse/unique_inverse_functional.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/set/unique_values/static_unique_values_container.rst", "functional/ivy/set/unique_values/unique_values_array.rst", "functional/ivy/set/unique_values/unique_values_container.rst", "functional/ivy/set/unique_values/unique_values_functional.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Data classes", "Array", "Activations", "ArrayWithActivations", "Array", "Array", "Variable", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Container", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Navigating the Code", "Function Arguments", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Formatting", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.Container.asarray", "ivy.asarray", "ivy.Container.static_asarray", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "ivy.Array.astype", "ivy.Container.astype", "ivy.astype", "ivy.Container.static_astype", "broadcast_arrays", "ivy.Array.broadcast_arrays", "ivy.Container.broadcast_arrays", "ivy.broadcast_arrays", "ivy.Container.static_broadcast_arrays", "broadcast_to", "ivy.Array.broadcast_to", "ivy.Container.broadcast_to", "ivy.broadcast_to", "ivy.Container.static_broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "ivy.Array.dtype", "ivy.Container.dtype", "ivy.dtype", "dtype_bits", "finfo", "ivy.Array.finfo", "ivy.Container.finfo", "ivy.finfo", "ivy.Container.static_finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "ivy.Array.iinfo", "ivy.Container.iinfo", "ivy.iinfo", "ivy.Container.static_iinfo", "invalid_dtype", "is_float_dtype", "ivy.Array.is_float_dtype", "ivy.Container.is_float_dtype", "ivy.is_float_dtype", "ivy.Container.static_is_float_dtype", "is_int_dtype", "ivy.Array.is_int_dtype", "ivy.Container.is_int_dtype", "ivy.is_int_dtype", "ivy.Container.static_is_int_dtype", "promote_types", "result_type", "ivy.Array.result_type", "ivy.Container.result_type", "ivy.result_type", "ivy.Container.static_result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "ivy.Container.static_asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "ivy.Container.static_cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "ivy.Container.static_sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "ivy.Container.static_sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "ivy.Container.static_sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_shape_array_mode", "set_tmp_dir", "shape", "shape_array_mode", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "ivy.Container.static_to_numpy", "ivy.Array.to_numpy", "ivy.Container.to_numpy", "ivy.to_numpy", "to_scalar", "try_else_none", "unset_shape_array_mode", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Array.is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "ivy.Array.depthwise_conv2d", "ivy.Container.depthwise_conv2d", "ivy.depthwise_conv2d", "ivy.Container.static_depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "ivy.Container.static_layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "ivy.Container.static_unique_all", "ivy.Array.unique_all", "ivy.Container.unique_all", "ivy.unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "ivy.Container.static_unique_inverse", "ivy.Array.unique_inverse", "ivy.Container.unique_inverse", "ivy.unique_inverse", "unique_values", "ivy.Container.static_unique_values", "ivy.Array.unique_values", "ivy.Container.unique_values", "ivy.unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 6, 12, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 124, 128, 129, 130, 131, 135, 136, 138, 139, 140, 150, 151, 152, 249, 291, 294, 321, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 614, 621, 658, 664, 695, 697, 699, 701, 732, 903, 905, 915, 939, 942, 1020, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 174, 175, 176, 177, 178, 179, 182, 187, 188, 193, 196, 201, 202, 207, 210, 213, 218, 223, 226, 231, 236, 241, 244, 249, 253, 254, 255, 260, 265, 270, 275, 276, 277, 278, 279, 283, 284, 289, 290, 291, 296, 297, 302, 307, 308, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 381, 385, 390, 394, 399, 403, 407, 411, 415, 419, 423, 427, 431, 435, 439, 444, 448, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 493, 497, 501, 505, 509, 513, 517, 521, 525, 529, 533, 537, 541, 542, 543, 548, 552, 556, 560, 564, 568, 572, 577, 582, 587, 591, 595, 600, 605, 610, 614, 615, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 702, 706, 707, 711, 716, 720, 724, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 746, 747, 748, 749, 750, 751, 752, 757, 760, 763, 766, 769, 772, 775, 779, 782, 783, 786, 789, 792, 795, 798, 799, 802, 805, 808, 811, 814, 817, 820, 823, 824, 829, 834, 839, 840, 845, 849, 853, 857, 861, 865, 869, 873, 878, 879, 883, 887, 891, 895, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 927, 928, 929, 932, 933, 937, 938, 939, 940, 941, 942, 943, 944, 945, 950, 955, 960, 965, 966, 971, 976, 977, 981, 985, 989, 993, 997, 1001, 1005, 1009, 1010, 1015, 1020, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068], "backend_handl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1020], "contextmanag": [0, 1], "modul": [0, 4, 5, 16, 18, 21, 70, 71, 75, 76, 77, 78, 79, 116, 117, 124, 125, 126, 128, 132, 133, 135, 136, 138, 140, 151, 152, 614, 665, 927, 928, 932, 1020, 1028, 1029, 1030, 1031, 1032, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057, 1064, 1065], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 128, 129, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068], "base": [0, 19, 24, 25, 26, 27, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 124, 127, 129, 135, 151, 178, 210, 211, 212, 249, 321, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 371, 461, 464, 505, 508, 509, 512, 513, 516, 517, 520, 560, 563, 614, 649, 672, 681, 695, 944, 945, 949, 950, 954, 960, 964, 976, 977, 980, 1028, 1029, 1030, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "object": [0, 23, 72, 75, 76, 77, 78, 79, 124, 137, 140, 178, 196, 199, 249, 284, 287, 321, 366, 695, 903, 906, 908, 910, 911, 912, 917, 918, 919, 920, 927, 938, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055], "__init__": [0, 1, 4, 5, 26, 27, 28, 75, 76, 77, 78, 79, 119, 126, 130, 135, 137, 138, 139, 140, 249, 250, 251, 252, 321, 322, 329, 330, 331, 332, 333, 334, 335, 336, 695, 696, 927, 928, 932, 1020, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "choose_random_backend": 0, "exclud": [0, 2, 122, 135, 178, 179, 180, 927, 933, 935], "none": [0, 2, 5, 12, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 120, 122, 124, 125, 129, 130, 131, 132, 133, 135, 137, 139, 140, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 272, 274, 276, 277, 278, 279, 281, 284, 286, 287, 288, 291, 293, 294, 295, 297, 299, 301, 302, 304, 306, 308, 310, 312, 320, 321, 330, 331, 339, 340, 363, 364, 365, 366, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 619, 620, 626, 627, 628, 629, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 652, 654, 655, 659, 665, 667, 670, 671, 672, 673, 675, 680, 681, 685, 686, 688, 691, 692, 695, 702, 703, 704, 705, 707, 708, 709, 710, 711, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 909, 914, 915, 916, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 948, 950, 951, 953, 955, 956, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1031, 1032, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "clear_backend_stack": 0, "current_backend": [0, 26, 27, 77, 78, 119, 125], "arg": [0, 4, 21, 23, 26, 27, 29, 30, 31, 72, 75, 76, 135, 137, 139, 321, 330, 345, 349, 353, 365, 614, 671, 1031, 1032, 1054, 1055], "kwarg": [0, 4, 23, 26, 27, 29, 30, 31, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 135, 137, 139, 321, 330, 345, 349, 353, 614, 664, 1031, 1032, 1054, 1055], "return": [0, 4, 5, 12, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 320, 321, 330, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 913, 914, 915, 916, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1025, 1031, 1032, 1042, 1051, 1052, 1058, 1062], "current": [0, 4, 5, 12, 16, 18, 19, 20, 21, 26, 27, 75, 76, 77, 78, 79, 125, 131, 135, 140, 151, 152, 249, 289, 290, 296, 320, 321, 330, 354, 355, 359, 361, 614, 648, 655, 659, 666, 668, 678, 695, 733, 903, 904, 913, 914, 1020], "prioriti": [0, 4, 19, 75, 76, 132], "global_backend": [0, 4], "argument": [0, 4, 5, 14, 20, 29, 30, 31, 32, 33, 72, 75, 76, 77, 78, 79, 118, 119, 121, 122, 124, 125, 126, 128, 129, 133, 135, 137, 138, 175, 176, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 302, 305, 308, 311, 321, 330, 331, 345, 349, 353, 371, 372, 375, 385, 388, 390, 393, 394, 397, 435, 438, 469, 472, 541, 552, 555, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 614, 620, 621, 625, 635, 642, 664, 671, 734, 737, 741, 744, 750, 751, 752, 755, 763, 765, 839, 873, 876, 903, 909, 921, 922, 925, 944, 950, 954, 976, 981, 984, 1001, 1004, 1009, 1010, 1013, 1023, 1025, 1031, 1032, 1054, 1055], "s": [0, 4, 5, 6, 12, 15, 16, 17, 18, 19, 21, 26, 27, 29, 32, 33, 72, 75, 76, 118, 120, 121, 122, 124, 126, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 151, 152, 177, 178, 213, 216, 231, 235, 236, 240, 249, 289, 290, 321, 340, 364, 371, 564, 567, 614, 623, 695, 702, 704, 707, 709, 716, 718, 724, 726, 751, 802, 804, 805, 807, 903, 909, 915, 976, 997, 1000, 1005, 1008, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1065], "paramet": [0, 4, 5, 24, 25, 26, 27, 29, 30, 31, 32, 33, 40, 41, 54, 55, 70, 71, 73, 74, 75, 76, 77, 78, 79, 86, 87, 100, 101, 116, 117, 119, 121, 124, 137, 138, 151, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 253, 254, 255, 258, 260, 263, 265, 268, 270, 273, 275, 276, 277, 278, 279, 282, 283, 284, 287, 289, 290, 291, 294, 296, 297, 300, 302, 305, 307, 308, 311, 313, 314, 315, 316, 320, 321, 330, 331, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 615, 618, 620, 621, 622, 623, 624, 625, 626, 627, 629, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 684, 685, 689, 690, 691, 693, 694, 695, 697, 700, 702, 704, 706, 707, 709, 711, 714, 716, 718, 720, 722, 724, 726, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 748, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 954, 955, 959, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1023, 1025, 1031, 1032, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "from": [0, 4, 5, 6, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 29, 30, 31, 32, 33, 70, 71, 72, 75, 76, 77, 78, 79, 116, 117, 118, 119, 120, 121, 122, 124, 126, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 151, 152, 178, 179, 180, 182, 185, 188, 191, 196, 199, 201, 202, 205, 213, 216, 218, 221, 226, 229, 244, 248, 249, 270, 273, 308, 311, 321, 330, 331, 340, 355, 359, 364, 365, 371, 477, 480, 587, 590, 614, 635, 642, 643, 646, 684, 695, 702, 704, 716, 718, 734, 741, 744, 746, 749, 751, 763, 765, 802, 804, 814, 816, 839, 857, 860, 869, 872, 879, 882, 899, 900, 901, 902, 903, 905, 915, 916, 927, 928, 929, 930, 932, 933, 935, 939, 943, 944, 945, 949, 955, 959, 976, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020, 1026, 1031, 1032, 1042, 1050, 1053, 1058, 1062], "which": [0, 4, 5, 14, 15, 16, 18, 19, 20, 21, 26, 27, 54, 55, 73, 74, 75, 76, 77, 78, 79, 86, 87, 100, 101, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 151, 152, 163, 168, 169, 171, 173, 175, 176, 177, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 201, 202, 205, 207, 208, 210, 211, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 275, 279, 282, 284, 287, 291, 294, 296, 320, 321, 330, 331, 341, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 361, 363, 364, 365, 371, 385, 387, 389, 564, 567, 600, 601, 603, 614, 620, 632, 633, 635, 642, 643, 646, 648, 654, 658, 666, 667, 668, 670, 671, 693, 695, 702, 704, 706, 707, 709, 716, 718, 720, 722, 724, 726, 729, 731, 732, 734, 749, 751, 757, 759, 763, 765, 779, 781, 799, 801, 802, 804, 814, 816, 817, 819, 823, 829, 832, 834, 837, 839, 845, 848, 857, 860, 865, 868, 873, 874, 875, 876, 877, 878, 883, 886, 903, 908, 909, 910, 911, 916, 917, 918, 919, 920, 927, 928, 929, 930, 933, 935, 939, 940, 941, 942, 943, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020, 1023, 1025, 1031, 1032, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1065], "try": [0, 4, 13, 15, 16, 18, 19, 20, 21, 75, 76, 128, 129, 133, 137, 152, 614, 691, 1020], "infer": [0, 4, 118, 126, 130, 131, 135, 140, 175, 176, 178, 179, 180, 182, 185, 188, 191, 201, 202, 205, 218, 221, 226, 229, 244, 248, 371, 477, 480, 614, 651, 677, 839, 869, 872], "when": [0, 4, 14, 15, 18, 19, 20, 23, 72, 75, 76, 77, 78, 79, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 140, 152, 249, 255, 258, 321, 371, 385, 388, 465, 468, 560, 563, 614, 625, 658, 681, 823, 824, 827, 829, 832, 834, 837, 903, 914, 939, 940, 941, 943, 976, 981, 984, 989, 992, 997, 1000, 1005, 1008, 1020, 1054, 1055], "global": [0, 4, 5, 6, 12, 75, 76, 77, 78, 79, 125, 126, 130, 131, 135, 249, 276, 277, 278, 321, 330, 331, 363, 364, 365, 614, 649, 650, 669, 672, 673, 674, 680, 681, 695, 733, 921, 922, 925, 1056, 1057], "set": [0, 4, 5, 6, 12, 14, 17, 19, 29, 32, 33, 63, 72, 75, 76, 109, 118, 119, 124, 125, 127, 128, 129, 130, 131, 132, 135, 137, 138, 321, 340, 350, 351, 362, 363, 364, 365, 371, 403, 406, 614, 615, 618, 672, 673, 674, 675, 676, 695, 702, 704, 707, 709, 711, 714, 716, 718, 720, 722, 724, 726, 751, 757, 759, 779, 781, 783, 785, 792, 794, 799, 801, 903, 904, 913, 914, 915, 919, 920, 927, 937, 939, 940, 945, 949, 950, 954, 955, 959, 960, 964, 965, 966, 969, 971, 974, 976, 997, 1000, 1005, 1008, 1042, 1051, 1058, 1059, 1060, 1061, 1062, 1063], "ret": [0, 4, 5, 12, 24, 25, 26, 27, 29, 30, 31, 32, 33, 40, 41, 54, 55, 73, 74, 75, 76, 77, 78, 82, 83, 86, 87, 100, 101, 119, 121, 135, 140, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 253, 254, 255, 258, 260, 263, 265, 268, 270, 273, 275, 279, 282, 283, 284, 287, 289, 290, 291, 294, 296, 297, 300, 302, 305, 307, 308, 311, 320, 321, 330, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 366, 367, 368, 370, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 615, 618, 620, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 670, 671, 677, 680, 681, 682, 684, 685, 689, 690, 693, 694, 695, 697, 700, 702, 704, 706, 707, 709, 711, 714, 716, 718, 720, 722, 724, 726, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 748, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 913, 914, 915, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 954, 955, 959, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1023, 1025, 1031, 1032, 1058, 1062], "exampl": [0, 4, 5, 6, 12, 16, 18, 19, 20, 26, 27, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 70, 71, 72, 77, 78, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 151, 152, 163, 165, 166, 167, 168, 169, 172, 174, 175, 176, 178, 201, 202, 205, 213, 216, 223, 224, 226, 229, 241, 243, 244, 248, 249, 255, 258, 270, 271, 272, 273, 274, 279, 282, 289, 290, 302, 305, 320, 321, 340, 341, 343, 355, 356, 357, 358, 359, 362, 364, 366, 368, 369, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 407, 410, 411, 414, 415, 418, 427, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 461, 464, 469, 470, 471, 472, 477, 480, 481, 484, 497, 500, 501, 504, 541, 542, 548, 551, 552, 555, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 614, 615, 616, 617, 618, 619, 622, 623, 631, 632, 639, 642, 643, 644, 645, 646, 647, 650, 661, 675, 677, 678, 679, 684, 685, 686, 687, 688, 689, 690, 692, 695, 697, 698, 699, 700, 701, 711, 712, 713, 714, 715, 733, 734, 735, 737, 739, 740, 741, 742, 743, 744, 745, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 765, 772, 774, 783, 785, 789, 791, 802, 804, 808, 810, 811, 813, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 853, 856, 857, 860, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 903, 906, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 951, 952, 953, 954, 965, 966, 969, 976, 977, 980, 981, 984, 997, 1000, 1001, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020], "If": [0, 4, 5, 6, 14, 17, 18, 19, 20, 21, 23, 29, 32, 33, 54, 55, 72, 73, 74, 75, 76, 86, 87, 100, 101, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 140, 152, 169, 171, 173, 178, 179, 180, 187, 188, 191, 193, 194, 201, 202, 205, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 265, 268, 308, 311, 321, 340, 364, 371, 372, 375, 377, 380, 381, 384, 385, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 435, 438, 439, 442, 444, 447, 461, 464, 465, 468, 469, 472, 505, 508, 509, 512, 517, 520, 521, 524, 529, 532, 533, 536, 543, 546, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 600, 601, 603, 604, 605, 609, 610, 613, 614, 658, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 733, 751, 752, 755, 757, 759, 779, 781, 783, 785, 792, 794, 795, 797, 799, 801, 802, 804, 814, 816, 817, 819, 823, 824, 827, 829, 832, 834, 837, 839, 853, 856, 857, 860, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 899, 900, 901, 903, 915, 916, 927, 932, 933, 935, 939, 940, 941, 942, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020], "import": [0, 4, 15, 20, 70, 71, 116, 117, 119, 121, 122, 126, 128, 129, 130, 131, 132, 133, 135, 137, 138, 140, 152, 321, 362, 1020, 1026], "numpi": [0, 4, 5, 6, 14, 15, 19, 20, 75, 76, 120, 124, 126, 130, 131, 132, 135, 137, 140, 614, 685, 689, 976, 977, 980, 1020], "np": [0, 4, 120, 124, 128, 130, 131, 132, 137, 138, 140, 1020], "x": [0, 4, 12, 21, 26, 27, 29, 32, 33, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 114, 115, 119, 120, 121, 122, 124, 125, 126, 129, 132, 133, 135, 137, 138, 139, 140, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 178, 182, 185, 186, 188, 191, 192, 196, 199, 200, 202, 205, 206, 213, 216, 218, 221, 222, 226, 229, 230, 231, 232, 235, 236, 237, 240, 241, 243, 244, 245, 248, 249, 255, 258, 259, 265, 268, 269, 270, 271, 272, 273, 274, 279, 282, 302, 305, 321, 340, 341, 342, 343, 346, 347, 355, 359, 364, 366, 371, 372, 373, 374, 375, 376, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 457, 460, 461, 464, 465, 468, 469, 470, 471, 472, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 529, 532, 541, 542, 548, 551, 556, 559, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 622, 623, 624, 626, 627, 629, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 651, 653, 654, 656, 657, 658, 660, 661, 662, 663, 667, 677, 679, 682, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 706, 711, 712, 713, 714, 715, 729, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 779, 781, 782, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 802, 804, 805, 807, 808, 810, 811, 813, 817, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 884, 885, 886, 887, 890, 891, 894, 895, 898, 903, 904, 906, 909, 913, 914, 915, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 938, 939, 940, 941, 942, 943, 944, 945, 946, 949, 950, 951, 952, 953, 954, 955, 956, 959, 960, 961, 964, 965, 966, 969, 970, 971, 974, 975, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1042, 1053], "arrai": [0, 4, 18, 19, 20, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 118, 119, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 152, 153, 161, 163, 164, 165, 166, 167, 168, 169, 172, 174, 177, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 215, 216, 217, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 260, 262, 263, 264, 265, 268, 270, 272, 273, 274, 279, 282, 284, 287, 291, 294, 297, 300, 302, 305, 308, 311, 316, 321, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 361, 365, 366, 371, 372, 374, 375, 376, 377, 380, 381, 384, 385, 387, 388, 389, 390, 393, 394, 396, 397, 398, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 437, 438, 439, 441, 442, 443, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 471, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 590, 591, 594, 595, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 613, 614, 615, 617, 618, 619, 622, 623, 624, 626, 627, 629, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 651, 653, 654, 655, 656, 657, 658, 660, 661, 663, 666, 667, 668, 670, 671, 675, 677, 679, 682, 684, 685, 686, 688, 689, 690, 692, 693, 694, 695, 697, 699, 700, 701, 702, 704, 707, 709, 711, 713, 714, 715, 716, 718, 720, 722, 724, 726, 729, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 782, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 838, 839, 840, 842, 843, 844, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 899, 900, 901, 902, 903, 905, 906, 915, 916, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 951, 953, 954, 955, 959, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1023, 1025, 1042, 1050, 1053], "2": [0, 4, 18, 19, 21, 26, 27, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 72, 75, 76, 77, 78, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 120, 122, 124, 126, 129, 134, 135, 137, 138, 139, 140, 152, 163, 165, 166, 167, 168, 174, 177, 178, 201, 202, 205, 213, 216, 223, 224, 226, 229, 244, 248, 249, 255, 258, 270, 271, 272, 273, 274, 279, 282, 302, 305, 321, 340, 341, 343, 355, 357, 359, 366, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 394, 396, 397, 398, 399, 402, 403, 406, 411, 414, 415, 418, 427, 430, 431, 434, 435, 436, 437, 438, 439, 440, 442, 444, 447, 461, 464, 469, 470, 471, 472, 477, 480, 481, 484, 497, 500, 501, 504, 517, 520, 541, 542, 548, 551, 552, 555, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 614, 615, 616, 617, 618, 622, 623, 626, 627, 629, 632, 639, 642, 643, 644, 645, 646, 647, 661, 677, 679, 684, 695, 697, 698, 699, 700, 701, 711, 712, 713, 714, 715, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 772, 774, 775, 778, 779, 781, 783, 785, 789, 791, 792, 794, 795, 797, 802, 804, 808, 809, 810, 811, 813, 817, 818, 819, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 853, 856, 857, 860, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 887, 890, 903, 906, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 951, 952, 953, 954, 965, 966, 969, 976, 977, 980, 981, 984, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020], "0": [0, 4, 19, 26, 27, 34, 35, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 124, 135, 137, 138, 139, 140, 163, 165, 166, 167, 168, 169, 172, 174, 178, 179, 180, 193, 194, 195, 207, 208, 210, 211, 212, 226, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 248, 249, 255, 258, 270, 272, 273, 274, 279, 282, 284, 287, 302, 305, 321, 323, 326, 330, 333, 337, 340, 341, 343, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 362, 364, 365, 369, 371, 372, 373, 375, 376, 377, 380, 381, 384, 385, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 402, 403, 406, 407, 410, 411, 414, 419, 422, 427, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 461, 464, 465, 468, 469, 470, 471, 472, 481, 484, 501, 504, 505, 508, 509, 512, 517, 520, 541, 542, 543, 546, 548, 551, 552, 555, 560, 563, 564, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 622, 623, 626, 627, 629, 631, 632, 633, 639, 642, 643, 646, 647, 652, 661, 667, 670, 671, 677, 684, 685, 686, 687, 688, 689, 690, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 734, 735, 737, 739, 740, 741, 742, 743, 744, 745, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 772, 774, 802, 804, 808, 810, 811, 812, 813, 817, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 864, 865, 868, 873, 874, 875, 876, 877, 878, 879, 882, 883, 884, 885, 886, 887, 890, 895, 897, 903, 906, 915, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 951, 952, 953, 954, 960, 964, 965, 966, 969, 976, 977, 980, 981, 984, 985, 988, 997, 998, 999, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065], "print": [0, 4, 5, 6, 12, 18, 26, 27, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 70, 71, 75, 76, 77, 78, 79, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 116, 117, 122, 124, 129, 135, 137, 138, 139, 163, 165, 166, 167, 168, 169, 172, 174, 178, 201, 202, 205, 213, 216, 223, 224, 226, 229, 241, 243, 244, 248, 249, 255, 258, 270, 271, 272, 273, 274, 279, 282, 289, 290, 302, 305, 320, 321, 341, 355, 356, 357, 358, 359, 361, 364, 368, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 407, 410, 411, 414, 415, 418, 427, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 461, 464, 469, 470, 471, 472, 477, 480, 481, 484, 497, 500, 501, 504, 541, 542, 548, 551, 552, 555, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 614, 615, 616, 617, 618, 619, 622, 623, 631, 632, 639, 642, 643, 644, 645, 646, 647, 650, 668, 677, 679, 684, 685, 686, 687, 688, 689, 690, 695, 697, 698, 700, 701, 711, 712, 713, 714, 715, 733, 734, 735, 737, 739, 740, 741, 742, 743, 744, 745, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 765, 772, 774, 789, 791, 802, 804, 808, 810, 811, 813, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 853, 856, 857, 860, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 887, 890, 903, 906, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 951, 952, 953, 954, 965, 966, 969, 976, 977, 980, 981, 984, 997, 1000, 1001, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020], "function": [0, 4, 5, 6, 14, 19, 21, 24, 25, 26, 27, 29, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 70, 71, 73, 74, 75, 76, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 116, 117, 118, 119, 121, 122, 123, 126, 128, 132, 133, 134, 136, 137, 138, 139, 150, 151, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 187, 188, 189, 191, 193, 194, 196, 197, 199, 201, 202, 203, 205, 207, 208, 210, 211, 213, 216, 218, 219, 221, 223, 224, 226, 227, 229, 231, 233, 235, 236, 238, 240, 241, 243, 244, 246, 248, 249, 253, 254, 255, 258, 260, 263, 265, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 283, 284, 287, 289, 290, 291, 294, 296, 297, 300, 302, 305, 307, 308, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 470, 471, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 704, 706, 707, 709, 711, 712, 713, 714, 715, 716, 718, 720, 722, 724, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 782, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 951, 952, 953, 954, 955, 959, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1023, 1025, 1028, 1029, 1030, 1058, 1061, 1063], "py": [0, 4, 5, 19, 119, 120, 121, 124, 125, 126, 130, 131, 133, 135, 137, 139, 140, 927, 928, 932], "noqa": [0, 4, 5, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 371, 372, 375, 385, 388, 394, 397, 411, 414, 431, 434, 435, 438, 444, 447, 501, 504, 541, 552, 555, 568, 571, 572, 575, 587, 590, 591, 594, 600, 604, 605, 609, 751, 760, 762, 763, 765, 839, 853, 856, 857, 860, 873, 876, 976, 981, 984], "The": [0, 4, 5, 13, 14, 16, 17, 18, 20, 21, 23, 26, 27, 29, 30, 31, 32, 33, 40, 41, 72, 73, 74, 75, 76, 77, 78, 79, 86, 87, 100, 101, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 151, 163, 164, 165, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 196, 199, 210, 211, 231, 235, 236, 240, 249, 253, 254, 255, 258, 275, 283, 289, 290, 296, 297, 300, 307, 316, 320, 321, 330, 331, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 361, 362, 363, 364, 365, 367, 370, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 543, 546, 552, 555, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 620, 622, 625, 626, 634, 635, 641, 643, 646, 656, 657, 658, 660, 661, 662, 663, 665, 670, 671, 672, 673, 674, 679, 680, 681, 694, 695, 697, 700, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 729, 732, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 823, 824, 827, 829, 832, 834, 837, 839, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 875, 877, 878, 891, 894, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 927, 928, 932, 939, 940, 941, 942, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020, 1031, 1032, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062], "set_backend": [0, 4, 5, 12, 125, 126, 127, 130, 249, 289, 290, 321, 362, 614, 677, 1020], "ha": [0, 4, 5, 14, 15, 16, 19, 72, 75, 76, 121, 122, 124, 125, 126, 127, 130, 131, 133, 135, 137, 139, 140, 151, 152, 178, 213, 216, 321, 340, 371, 372, 375, 543, 546, 560, 563, 695, 733, 751, 775, 778, 798, 799, 801, 802, 804, 811, 813, 839, 853, 856, 879, 882, 944, 945, 949, 950, 954, 960, 964, 976, 985, 988, 993, 996, 997, 1000, 1001, 1004, 1005, 1008], "over": [0, 4, 14, 16, 18, 70, 71, 72, 75, 76, 116, 117, 121, 122, 124, 126, 132, 137, 152, 751, 779, 781, 808, 810, 814, 816, 817, 819, 921, 922, 925, 927, 933, 935, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1056, 1057], "ani": [0, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 29, 30, 31, 68, 69, 70, 71, 75, 76, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 151, 152, 175, 176, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 302, 305, 321, 366, 371, 372, 375, 385, 388, 390, 393, 394, 397, 435, 438, 453, 456, 469, 472, 481, 484, 501, 504, 541, 552, 555, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 614, 615, 618, 635, 636, 637, 638, 639, 642, 653, 660, 661, 662, 663, 680, 681, 695, 706, 734, 737, 741, 744, 748, 750, 751, 752, 755, 763, 765, 839, 873, 876, 899, 900, 901, 902, 903, 906, 909, 913, 921, 922, 925, 927, 933, 935, 944, 950, 954, 976, 981, 984, 1009, 1010, 1013, 1019, 1020], "pass": [0, 4, 20, 70, 71, 75, 76, 77, 78, 79, 116, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 132, 133, 137, 152, 249, 275, 321, 330, 365, 371, 403, 406, 614, 625, 658, 695, 732, 899, 900, 901, 1031, 1032, 1054, 1055, 1058, 1062, 1064, 1065], "jax": [0, 4, 5, 6, 15, 16, 19, 20, 120, 124, 126, 130, 131, 132, 135, 137, 140, 152, 695, 711, 714, 944, 945, 949, 950, 954, 960, 964, 1020], "get_backend": [0, 125, 126], "specifi": [0, 5, 54, 55, 72, 75, 76, 100, 101, 118, 120, 124, 125, 130, 131, 132, 135, 138, 139, 140, 178, 179, 180, 187, 201, 207, 208, 210, 211, 223, 224, 231, 235, 236, 240, 241, 243, 249, 255, 258, 265, 268, 321, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 355, 359, 361, 364, 365, 366, 371, 564, 567, 614, 620, 632, 642, 643, 646, 653, 693, 751, 763, 765, 779, 781, 808, 810, 811, 813, 814, 816, 817, 819, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 857, 860, 873, 874, 875, 876, 877, 879, 882, 883, 886, 895, 898, 903, 908, 910, 911, 917, 918, 919, 920, 939, 940, 941, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 976, 977, 980, 993, 996, 1001, 1004, 1009, 1010, 1013, 1015, 1018], "isn": [0, 5, 19, 138, 152], "t": [0, 5, 15, 16, 18, 19, 20, 21, 26, 27, 70, 71, 116, 117, 122, 124, 130, 135, 137, 138, 139, 140, 152, 614, 623, 734, 747, 748], "associ": [0, 5, 19, 124, 125, 127, 152, 371, 385, 388, 543, 546, 751, 783, 785, 792, 794, 820, 822], "option": [0, 5, 18, 19, 24, 25, 29, 30, 31, 32, 33, 40, 41, 54, 55, 70, 71, 73, 74, 75, 76, 77, 78, 86, 87, 100, 101, 116, 117, 119, 120, 121, 122, 124, 125, 129, 130, 131, 132, 133, 135, 140, 152, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 265, 268, 275, 276, 277, 278, 296, 320, 321, 340, 364, 365, 366, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 620, 626, 627, 629, 632, 633, 634, 636, 637, 638, 640, 642, 643, 646, 654, 665, 667, 670, 671, 680, 681, 695, 729, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 748, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 899, 900, 901, 902, 903, 904, 909, 914, 915, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 938, 939, 940, 941, 943, 944, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "str": [0, 5, 23, 29, 30, 31, 72, 73, 74, 75, 76, 86, 87, 100, 101, 130, 131, 133, 169, 171, 173, 175, 176, 178, 213, 216, 249, 253, 275, 276, 277, 283, 284, 287, 291, 294, 296, 297, 300, 302, 305, 313, 314, 315, 320, 321, 337, 340, 341, 343, 346, 347, 348, 349, 365, 385, 387, 389, 600, 601, 603, 614, 620, 634, 636, 637, 638, 665, 670, 671, 734, 735, 736, 737, 738, 739, 740, 741, 744, 751, 795, 797, 873, 875, 877, 899, 900, 901, 902, 903, 909, 976, 977, 980], "we": [0, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 70, 71, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 151, 152, 695, 706, 1020, 1026], "want": [0, 5, 15, 17, 18, 19, 70, 71, 116, 117, 124, 138, 139, 140, 152], "retriev": [0, 5, 19, 614, 620], "i": [0, 5, 19, 21, 118, 124, 135, 138, 140, 178, 179, 180, 213, 216, 371, 372, 375, 403, 406, 419, 422, 427, 430, 435, 438, 469, 472, 473, 476, 485, 488, 541, 542, 548, 551, 560, 563, 564, 567, 614, 622, 623, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 734, 741, 744, 751, 757, 759, 775, 778, 783, 785, 792, 794, 799, 801, 802, 804, 811, 813, 817, 819, 839, 883, 886, 903, 906, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1008], "e": [0, 5, 15, 16, 17, 19, 21, 72, 118, 124, 129, 138, 152, 177, 178, 213, 216, 249, 254, 308, 311, 321, 337, 371, 372, 375, 403, 406, 419, 422, 427, 430, 435, 438, 461, 464, 469, 472, 473, 476, 485, 488, 505, 508, 513, 516, 541, 542, 548, 551, 560, 563, 564, 567, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 751, 757, 759, 775, 778, 783, 785, 792, 794, 799, 801, 802, 804, 817, 819, 839, 883, 886, 903, 906, 927, 932, 933, 935, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008], "one": [0, 5, 15, 16, 18, 19, 26, 27, 72, 75, 76, 86, 87, 88, 89, 96, 97, 100, 101, 102, 103, 104, 105, 120, 122, 124, 125, 128, 129, 130, 132, 133, 134, 137, 138, 140, 152, 178, 179, 180, 213, 216, 249, 260, 263, 270, 273, 321, 350, 351, 352, 353, 365, 371, 372, 376, 385, 389, 394, 398, 541, 572, 576, 577, 581, 614, 615, 617, 618, 619, 643, 647, 664, 667, 670, 671, 685, 686, 688, 751, 752, 756, 775, 778, 779, 781, 789, 791, 795, 797, 814, 816, 817, 819, 839, 840, 844, 853, 856, 857, 860, 873, 876, 877, 879, 882, 921, 922, 924, 925, 926, 929, 931, 939, 940, 942, 944, 945, 949, 950, 954, 955, 959, 960, 964, 976, 977, 980, 1020], "default": [0, 5, 19, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 40, 41, 54, 55, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 86, 87, 100, 101, 116, 117, 120, 121, 122, 124, 125, 126, 129, 130, 131, 139, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 265, 268, 276, 277, 278, 279, 282, 321, 330, 331, 340, 341, 345, 346, 347, 348, 349, 350, 351, 352, 353, 360, 362, 363, 364, 365, 366, 369, 370, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 615, 618, 620, 626, 627, 629, 632, 633, 636, 637, 638, 640, 641, 642, 643, 646, 651, 652, 653, 654, 655, 658, 659, 660, 661, 663, 664, 665, 667, 669, 670, 671, 674, 677, 680, 681, 693, 694, 695, 697, 700, 702, 704, 706, 707, 709, 711, 714, 716, 718, 720, 722, 724, 726, 729, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 748, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 909, 913, 914, 915, 916, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1031, 1032, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "torch": [0, 5, 12, 19, 119, 120, 124, 125, 126, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 152, 175, 176, 249, 289, 290, 321, 362, 614, 677, 839, 853, 856, 1020], "tensorflow": [0, 5, 12, 15, 16, 19, 20, 120, 124, 130, 131, 132, 135, 140, 152, 1020], "mxnet": [0, 5, 15, 20, 130, 131, 132, 135, 140, 1020], "either": [0, 5, 12, 18, 19, 21, 72, 75, 76, 121, 122, 124, 125, 126, 129, 130, 131, 135, 137, 138, 152, 178, 196, 199, 371, 385, 388, 403, 406, 489, 492, 505, 508, 509, 512, 517, 520, 521, 524, 543, 546, 564, 567, 572, 575, 577, 580, 600, 604, 614, 635, 660, 664, 665, 751, 775, 778, 899, 900, 901, 902, 976, 993, 996, 1001, 1004, 1042, 1053, 1054, 1055], "doesn": [0, 5, 18, 21, 122, 124, 130, 135, 152], "matter": [0, 5, 14, 122], "been": [0, 5, 19, 120, 121, 124, 125, 126, 129, 130, 131, 133, 135, 151, 152, 321, 340, 614, 636, 637, 638, 927, 928], "ivy_np": [0, 5, 124], "us": [0, 5, 12, 15, 16, 17, 19, 20, 23, 40, 41, 54, 55, 70, 71, 72, 75, 76, 77, 78, 79, 86, 87, 100, 101, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 151, 152, 163, 165, 166, 167, 168, 169, 172, 174, 177, 249, 283, 321, 330, 331, 356, 360, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 390, 393, 394, 395, 396, 411, 414, 431, 434, 444, 447, 481, 484, 501, 504, 542, 548, 551, 552, 555, 568, 571, 572, 573, 574, 587, 590, 614, 642, 649, 650, 664, 670, 671, 672, 673, 680, 681, 695, 697, 700, 702, 704, 716, 718, 720, 722, 734, 740, 746, 747, 749, 750, 751, 760, 762, 763, 765, 779, 781, 823, 824, 827, 839, 853, 856, 857, 860, 865, 868, 873, 874, 875, 876, 877, 887, 890, 899, 900, 901, 902, 903, 904, 906, 912, 913, 914, 916, 921, 922, 925, 939, 940, 941, 942, 944, 945, 949, 976, 977, 980, 1009, 1010, 1013, 1020, 1042, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061], "ivy_jax": [0, 5], "subsequ": [0, 6, 18, 120, 122, 124, 125, 128, 132, 139], "call": [0, 6, 12, 15, 21, 23, 72, 77, 78, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 152, 321, 365, 614, 669, 674, 691, 695, 706, 903, 904, 909, 913, 914, 1042, 1053, 1054, 1055, 1058, 1062], "nativ": [0, 6, 29, 31, 32, 33, 75, 76, 124, 130, 132, 137, 138, 178, 218, 221, 249, 253, 254, 275, 321, 337, 338, 339, 340, 341, 360, 367, 370, 614, 658, 660, 663, 1031, 1032], "native_arrai": [0, 6, 12, 34, 35, 42, 43, 80, 81, 88, 89, 124, 163, 165, 166, 167, 168, 169, 172, 174, 178, 213, 216, 244, 248, 249, 270, 273, 279, 282, 302, 305, 321, 343, 359, 371, 372, 375, 390, 393, 394, 397, 411, 414, 431, 434, 435, 438, 469, 472, 481, 484, 501, 504, 542, 548, 551, 552, 555, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 605, 609, 614, 615, 616, 617, 618, 619, 623, 631, 632, 639, 642, 643, 646, 679, 684, 685, 686, 688, 689, 690, 695, 697, 700, 711, 714, 734, 737, 740, 741, 744, 750, 751, 757, 759, 760, 762, 763, 765, 808, 810, 823, 824, 827, 834, 837, 839, 840, 843, 853, 856, 857, 860, 865, 868, 878, 887, 890, 927, 928, 939, 940, 941, 942, 943, 944, 945, 949, 950, 954, 976, 977, 980, 981, 984, 1009, 1010, 1013], "1": [0, 6, 12, 15, 16, 21, 26, 27, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 68, 69, 72, 75, 76, 77, 78, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 114, 115, 120, 122, 124, 125, 129, 132, 133, 134, 135, 137, 138, 139, 140, 152, 163, 165, 166, 167, 168, 174, 178, 179, 180, 181, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 244, 248, 249, 255, 258, 270, 271, 272, 273, 274, 279, 282, 284, 287, 302, 305, 321, 325, 328, 330, 335, 340, 341, 343, 345, 349, 353, 355, 358, 359, 366, 371, 372, 373, 374, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 403, 406, 411, 414, 415, 418, 427, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 461, 464, 465, 468, 469, 470, 471, 472, 477, 480, 481, 484, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 541, 542, 548, 551, 552, 555, 560, 563, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 614, 615, 616, 617, 618, 619, 622, 623, 631, 632, 639, 642, 643, 644, 645, 646, 647, 661, 667, 670, 671, 677, 679, 681, 684, 685, 686, 687, 688, 689, 690, 693, 695, 697, 698, 699, 700, 701, 711, 713, 714, 715, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 772, 774, 783, 785, 789, 791, 799, 801, 802, 804, 808, 810, 811, 813, 814, 815, 816, 817, 819, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 903, 906, 915, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 951, 952, 953, 954, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 984, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1065], "type": [0, 6, 12, 18, 20, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 127, 128, 129, 131, 132, 133, 135, 137, 138, 140, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 320, 321, 337, 338, 339, 340, 341, 343, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 622, 623, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 656, 657, 658, 660, 661, 662, 663, 667, 670, 671, 672, 673, 675, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 707, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 913, 914, 915, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "ndarrai": [0, 6, 120, 128, 130, 131, 132, 137, 178, 182, 185, 218, 221, 614, 685, 689], "Or": [0, 6, 138], "jaxlib": [0, 6, 18, 120, 130, 131, 137], "xla_extens": [0, 6, 120, 130, 131, 137], "devicearrai": [0, 6, 137], "try_import_ivy_jax": 0, "warn": [0, 7, 8, 9, 10, 11], "fals": [0, 7, 8, 9, 10, 11, 23, 26, 27, 29, 30, 31, 32, 33, 36, 37, 42, 43, 44, 45, 50, 51, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 124, 129, 132, 133, 138, 139, 140, 169, 171, 173, 179, 181, 182, 184, 186, 188, 190, 192, 193, 195, 196, 198, 200, 202, 204, 206, 207, 209, 210, 212, 213, 215, 217, 218, 220, 222, 223, 225, 226, 228, 230, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 249, 255, 257, 258, 259, 260, 262, 264, 265, 267, 269, 270, 272, 273, 274, 279, 280, 281, 282, 284, 286, 288, 291, 293, 295, 297, 299, 301, 302, 304, 305, 306, 308, 310, 312, 320, 321, 340, 341, 352, 356, 357, 360, 365, 368, 370, 371, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 399, 401, 403, 405, 407, 409, 411, 413, 414, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 444, 446, 448, 450, 452, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 497, 499, 500, 501, 503, 504, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 532, 533, 535, 536, 537, 539, 543, 545, 547, 548, 550, 552, 554, 555, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 577, 579, 581, 582, 584, 586, 587, 589, 591, 593, 595, 596, 598, 600, 601, 603, 605, 606, 608, 610, 612, 614, 615, 616, 617, 618, 619, 622, 623, 627, 628, 632, 635, 639, 641, 643, 645, 647, 651, 658, 660, 661, 663, 664, 675, 677, 678, 685, 686, 688, 692, 693, 695, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 733, 751, 752, 753, 754, 755, 756, 775, 777, 779, 780, 781, 802, 804, 817, 818, 819, 824, 826, 828, 829, 831, 833, 834, 836, 838, 839, 840, 842, 844, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 878, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 900, 901, 902, 903, 904, 905, 909, 913, 914, 915, 916, 922, 924, 926, 927, 928, 933, 934, 936, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 951, 953, 954, 955, 956, 958, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1031, 1032, 1054, 1055, 1058, 1059, 1060, 1061, 1062, 1063], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 126], "unset": [0, 12, 126, 135, 137], "adjust": [0, 12, 976, 997, 1000, 1005, 1008], "dict": [0, 12, 29, 30, 31, 32, 33, 72, 73, 74, 75, 76, 77, 78, 79, 86, 87, 100, 101, 129, 133, 138, 139, 169, 171, 173, 321, 330, 331, 340, 343, 346, 347, 348, 349, 385, 387, 389, 600, 601, 603, 614, 620, 636, 637, 638, 873, 875, 877, 903, 905, 906, 909, 912, 915, 916], "previous": [0, 12, 18, 21, 124, 125, 135, 614, 625], "otherwis": [0, 12, 23, 26, 27, 29, 30, 31, 32, 33, 72, 73, 74, 75, 76, 86, 87, 100, 101, 120, 124, 128, 130, 131, 135, 137, 169, 171, 173, 178, 179, 180, 249, 255, 258, 270, 273, 276, 277, 278, 302, 305, 321, 340, 371, 385, 387, 389, 485, 488, 489, 492, 493, 496, 600, 601, 603, 614, 624, 691, 695, 711, 714, 729, 751, 752, 755, 760, 762, 814, 816, 817, 819, 873, 875, 877, 899, 900, 901, 903, 916, 939, 940, 941, 943, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "implement": [0, 12, 20, 23, 72, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 151, 152, 249, 255, 258, 308, 311, 321, 366, 371, 372, 375, 377, 380, 381, 384, 390, 393, 394, 397, 399, 402, 403, 406, 439, 442, 444, 447, 461, 464, 465, 468, 505, 508, 509, 512, 513, 516, 517, 520, 543, 546, 560, 563, 564, 567, 577, 580, 582, 585, 600, 604, 605, 609, 751, 766, 768, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 976, 981, 984, 985, 988, 989, 992, 1020], "wa": [0, 12, 15, 73, 74, 75, 76, 86, 87, 100, 101, 122, 135, 137, 169, 171, 173, 385, 387, 389, 600, 601, 603, 614, 691, 873, 875, 877, 903, 916, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "last": [0, 12, 16, 19, 72, 75, 76, 122, 124, 126, 133, 152, 163, 168, 321, 340, 695, 733, 734, 748, 751, 757, 759, 763, 765, 779, 781, 811, 813, 814, 816, 823, 829, 832, 834, 837, 839, 857, 860, 873, 876, 878, 883, 886, 965, 966, 969, 971, 974, 1009, 1010, 1013, 1015, 1018, 1042, 1052], "henc": [0, 12, 124, 944, 945, 949, 950, 954, 960, 964], "here": [0, 12, 18, 19, 20, 119, 120, 122, 124, 129, 135, 136, 137, 138, 139, 140, 151, 152], "tensor": [0, 12, 14, 75, 76, 119, 120, 125, 126, 128, 130, 131, 132, 135, 137, 138, 139, 140, 152, 178, 207, 208, 210, 211, 249, 279, 282, 371, 411, 414, 541, 542, 614, 667, 670, 671, 734, 746, 748, 751, 808, 810, 839, 853, 856, 869, 872, 878, 927, 928, 939, 942, 1020, 1042, 1050, 1052], "howev": [0, 12, 15, 18, 20, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 137, 138, 139, 140, 152], "befor": [0, 12, 18, 19, 20, 75, 76, 121, 124, 128, 130, 131, 132, 135, 138, 152, 321, 365, 371, 610, 613, 734, 749, 750, 899, 900, 901, 903, 915, 944, 945, 949, 950, 954, 960, 964, 976, 993, 996, 1001, 1004], "becom": [0, 12, 14, 16, 19, 122, 129, 135, 140, 152, 839, 840, 843], "swap": [0, 12, 839, 887, 890], "python": [0, 12, 13, 14, 15, 18, 19, 21, 124, 133, 135, 137, 138, 152, 178, 179, 180, 321, 360, 370, 371, 564, 567, 1020, 1026], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 74, 75, 76, 78, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 118, 120, 123, 125, 126, 127, 128, 131, 134, 137, 140, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1068], "op": [0, 12, 119, 135, 152], "eagertensor": [0, 12], "def": [1, 20, 119, 120, 122, 124, 125, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 250, 251, 252, 322, 329, 332, 696, 1020, 1034, 1037, 1040], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 25, 27, 28, 30, 31, 32, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 74, 75, 76, 78, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 140, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1026, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1068], "backend": [4, 5, 6, 12, 14, 19, 20, 29, 31, 33, 75, 76, 118, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 136, 137, 140, 249, 289, 290, 296, 320, 321, 356, 358, 368, 614, 655, 658, 659, 665, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 732, 1020, 1026, 1031, 1032, 1058, 1059, 1060, 1061, 1062, 1063], "ml": [13, 15, 16, 17, 134, 135, 136, 138, 139, 140, 151, 1020, 1026], "explos": [13, 15, 1020], "A": [13, 14, 15, 16, 21, 75, 76, 77, 78, 79, 118, 124, 125, 129, 130, 131, 135, 138, 152, 178, 193, 194, 218, 221, 321, 330, 331, 365, 371, 556, 559, 614, 650, 684, 751, 789, 791, 798, 799, 801, 802, 804, 839, 878, 883, 886, 903, 904, 906, 908, 910, 911, 912, 913, 914, 917, 918, 919, 920, 976, 977, 980, 1009, 1010, 1013, 1015, 1018, 1020, 1064, 1065], "huge": [13, 15, 138, 1020], "number": [13, 14, 18, 26, 27, 54, 55, 75, 76, 77, 78, 79, 100, 101, 122, 124, 129, 131, 132, 135, 138, 140, 175, 176, 177, 178, 179, 180, 182, 185, 193, 194, 207, 208, 210, 211, 213, 216, 218, 221, 249, 260, 263, 283, 284, 287, 291, 294, 297, 300, 302, 305, 308, 311, 321, 357, 358, 359, 371, 385, 388, 403, 406, 435, 438, 469, 472, 473, 476, 541, 542, 543, 546, 560, 563, 564, 567, 568, 571, 572, 575, 610, 613, 614, 615, 618, 641, 650, 651, 666, 690, 694, 734, 749, 751, 763, 765, 766, 768, 783, 785, 798, 802, 804, 814, 816, 839, 840, 843, 849, 852, 861, 864, 865, 868, 873, 874, 875, 876, 877, 878, 883, 886, 891, 894, 895, 898, 899, 900, 901, 902, 927, 928, 937, 939, 942, 944, 945, 949, 950, 954, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053], "tool": [13, 16, 19, 136, 140, 151, 152, 1020], "have": [13, 14, 15, 16, 18, 19, 20, 21, 24, 25, 26, 27, 40, 41, 54, 55, 73, 74, 75, 76, 77, 78, 86, 87, 100, 101, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 151, 152, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 260, 263, 265, 268, 284, 287, 321, 366, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 626, 627, 629, 632, 636, 637, 638, 640, 643, 646, 654, 667, 670, 671, 695, 711, 714, 729, 732, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020], "explod": [13, 14, 1020], "onto": [13, 14, 321, 350, 351, 903, 909, 915, 1020], "scene": [13, 14, 118, 134, 136, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 1020], "b": [13, 16, 17, 26, 27, 77, 78, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 118, 122, 125, 126, 129, 134, 135, 136, 138, 139, 140, 150, 178, 244, 248, 249, 270, 272, 273, 274, 279, 282, 302, 305, 321, 343, 371, 372, 374, 375, 376, 385, 387, 388, 389, 390, 393, 394, 396, 397, 398, 411, 414, 431, 434, 435, 437, 438, 439, 441, 442, 443, 444, 447, 469, 471, 472, 481, 484, 501, 504, 541, 548, 551, 552, 555, 568, 571, 572, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 590, 591, 594, 600, 601, 603, 604, 605, 606, 608, 609, 614, 615, 617, 618, 619, 622, 623, 631, 632, 639, 642, 643, 645, 646, 647, 685, 686, 688, 689, 690, 695, 697, 699, 700, 701, 711, 713, 714, 715, 734, 737, 740, 741, 743, 744, 745, 750, 751, 752, 754, 755, 756, 757, 759, 760, 762, 763, 765, 789, 791, 799, 801, 808, 810, 820, 822, 823, 824, 826, 827, 828, 829, 831, 833, 834, 836, 838, 839, 840, 842, 843, 844, 853, 856, 857, 860, 865, 868, 873, 875, 876, 877, 883, 886, 887, 890, 903, 906, 921, 922, 924, 925, 926, 927, 929, 931, 932, 933, 935, 939, 941, 942, 943, 944, 950, 951, 953, 954, 965, 966, 969, 976, 977, 980, 981, 984, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1019, 1020, 1026], "why": [13, 15, 19, 120, 129, 132, 137, 1020], "unifi": [13, 15, 75, 76, 128, 135, 152, 321, 350, 351, 352, 353, 365, 1020], "should": [13, 15, 18, 19, 20, 21, 23, 26, 27, 40, 41, 72, 75, 76, 77, 78, 79, 86, 87, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 175, 176, 178, 213, 216, 231, 235, 236, 240, 249, 265, 268, 321, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 461, 464, 465, 468, 469, 472, 485, 488, 489, 492, 493, 496, 497, 500, 505, 508, 509, 512, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 543, 546, 552, 555, 560, 563, 564, 567, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 625, 658, 667, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 734, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 772, 774, 775, 778, 783, 785, 789, 791, 792, 794, 795, 797, 799, 801, 802, 804, 808, 810, 811, 813, 814, 816, 817, 819, 839, 869, 872, 927, 938, 939, 940, 941, 944, 945, 949, 950, 954, 960, 964, 976, 977, 980, 981, 984, 985, 988, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1020], "them": [13, 14, 15, 16, 124, 126, 128, 129, 135, 137, 138, 139, 152, 1020], "c": [13, 15, 16, 17, 86, 87, 104, 105, 118, 122, 125, 129, 134, 135, 136, 138, 152, 371, 552, 555, 572, 574, 575, 614, 622, 623, 631, 690, 695, 697, 700, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 734, 740, 839, 883, 886, 903, 906, 929, 931, 939, 942, 976, 977, 980, 997, 1000, 1005, 1008, 1020, 1026], "standard": [13, 23, 118, 119, 120, 121, 123, 124, 128, 132, 152, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 284, 287, 371, 372, 375, 385, 388, 390, 393, 394, 397, 411, 414, 431, 434, 435, 438, 444, 447, 469, 472, 501, 504, 541, 552, 555, 568, 571, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 605, 609, 751, 760, 762, 763, 765, 839, 853, 856, 857, 860, 873, 876, 921, 922, 925, 927, 932, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984, 997, 1000, 1005, 1008, 1009, 1010, 1013, 1020, 1026, 1056, 1057], "re": [13, 14, 15, 17, 18, 19, 20, 21, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 140, 152, 321, 365, 614, 636, 751, 808, 810, 839, 873, 876, 939, 943, 1020], "collabor": [13, 14, 15, 1020], "consortium": [13, 15, 1020, 1026], "data": [13, 15, 26, 27, 28, 40, 41, 54, 55, 75, 76, 77, 78, 79, 86, 87, 100, 101, 118, 119, 120, 121, 125, 127, 129, 131, 132, 137, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 213, 216, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 253, 254, 255, 258, 265, 268, 270, 273, 275, 279, 282, 283, 284, 287, 289, 290, 291, 294, 296, 297, 300, 302, 305, 307, 316, 320, 321, 323, 324, 325, 326, 327, 328, 333, 334, 335, 337, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 543, 546, 552, 555, 560, 563, 564, 567, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 622, 623, 660, 661, 663, 682, 695, 711, 714, 732, 734, 747, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 799, 801, 802, 804, 808, 810, 811, 813, 814, 816, 817, 819, 839, 853, 856, 857, 860, 861, 864, 869, 872, 873, 874, 875, 876, 877, 879, 882, 883, 886, 927, 938, 939, 940, 941, 942, 965, 966, 969, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020, 1026, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "api": [13, 14, 18, 19, 118, 120, 121, 122, 124, 125, 127, 128, 130, 131, 132, 134, 136, 138, 152, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 371, 372, 375, 385, 388, 390, 393, 394, 397, 411, 414, 431, 434, 435, 438, 444, 447, 469, 472, 501, 504, 541, 552, 555, 568, 571, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 605, 609, 751, 760, 762, 763, 765, 839, 853, 856, 857, 860, 873, 876, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984, 1009, 1010, 1013, 1020, 1026], "open": [14, 15, 16, 17, 18, 21, 121, 151, 178, 179, 180, 927, 929, 930, 933, 935, 1020], "project": [14, 15, 16, 18, 19, 21, 119, 124, 126, 137, 139, 151, 152, 927, 928, 932], "grown": 14, "consider": [14, 120, 122], "recent": [14, 15, 18, 19, 124], "year": [14, 16, 152, 1020], "especi": [14, 18], "deep": [14, 17, 19, 20, 75, 76, 134, 138, 1020], "learn": [14, 15, 18, 20, 118, 125, 134, 140, 151, 371, 477, 480, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 899, 900, 901, 902, 1020, 1058, 1059, 1060, 1061, 1062, 1063], "can": [14, 15, 16, 17, 18, 19, 23, 72, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 151, 152, 178, 182, 185, 218, 221, 249, 270, 273, 321, 363, 364, 365, 751, 772, 774, 839, 869, 872, 927, 929, 930, 1020, 1026], "seen": [14, 15, 122, 124, 137, 138], "rapidli": 14, "increas": [14, 321, 345, 349, 353, 839, 849, 852, 895, 898, 903, 915], "github": [14, 19, 20, 121, 124], "repo": [14, 15, 16, 18, 19, 123, 135, 137, 138, 139, 140, 151, 1020, 1026], "contain": [14, 18, 19, 20, 21, 24, 25, 26, 27, 29, 32, 33, 40, 41, 42, 43, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 124, 125, 130, 132, 134, 135, 136, 139, 140, 152, 163, 166, 167, 169, 170, 172, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 218, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 260, 265, 270, 273, 279, 282, 284, 291, 297, 302, 305, 308, 321, 342, 343, 346, 355, 359, 371, 372, 375, 377, 380, 381, 384, 385, 386, 388, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 602, 604, 605, 609, 610, 613, 614, 615, 616, 618, 620, 623, 626, 627, 629, 631, 632, 639, 642, 643, 646, 653, 662, 684, 685, 687, 689, 690, 695, 697, 700, 702, 707, 711, 714, 716, 720, 724, 734, 737, 740, 741, 744, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 849, 853, 856, 857, 860, 861, 864, 865, 868, 869, 873, 876, 878, 879, 883, 887, 890, 891, 895, 899, 900, 901, 902, 903, 916, 921, 922, 925, 927, 928, 929, 932, 933, 935, 939, 940, 941, 942, 943, 944, 945, 949, 950, 954, 955, 960, 964, 965, 966, 969, 971, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1058, 1062, 1064, 1065], "term": [14, 19, 129, 734, 748, 1042, 1052], "time": [14, 15, 16, 18, 19, 20, 120, 124, 125, 129, 130, 135, 138, 140, 152, 695, 702, 704, 716, 718, 734, 748, 839, 891, 894, 899, 900, 901, 902, 939, 940, 941, 944, 945, 949, 950, 954, 1042, 1053, 1054, 1055], "These": [14, 15, 16, 19, 120, 121, 122, 124, 125, 129, 130, 132, 135, 136, 138, 139, 140, 152, 751, 766, 768, 1020, 1026], "ar": [14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 29, 30, 31, 40, 41, 54, 55, 72, 75, 76, 77, 78, 79, 86, 87, 100, 101, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 151, 152, 153, 161, 178, 179, 180, 321, 330, 331, 355, 359, 361, 365, 371, 439, 442, 529, 532, 533, 536, 568, 571, 577, 580, 600, 601, 602, 603, 604, 614, 615, 618, 622, 623, 624, 648, 654, 655, 659, 666, 668, 682, 695, 733, 734, 747, 751, 757, 759, 775, 778, 779, 781, 783, 785, 792, 794, 802, 804, 805, 807, 814, 816, 839, 840, 843, 857, 860, 873, 874, 875, 876, 877, 903, 905, 909, 915, 927, 932, 933, 935, 939, 940, 941, 942, 944, 945, 949, 1020, 1064, 1065], "written": [14, 18, 119, 120, 121, 124, 128, 132, 135, 137, 140, 152], "mani": [14, 15, 16, 18, 19, 20, 75, 76, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 152, 839, 878], "differ": [14, 15, 16, 18, 19, 75, 76, 77, 78, 79, 118, 119, 120, 121, 122, 124, 125, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 152, 249, 284, 287, 321, 342, 343, 346, 347, 371, 385, 388, 543, 546, 595, 599, 734, 747, 839, 883, 886, 976, 993, 996, 1001, 1004, 1020], "while": [14, 15, 18, 19, 75, 76, 77, 78, 79, 122, 124, 126, 132, 133, 139, 140, 152, 371, 529, 532, 533, 536, 944, 945, 949, 976, 985, 988], "thi": [14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 151, 152, 169, 170, 171, 173, 178, 179, 180, 182, 183, 185, 187, 188, 189, 191, 193, 194, 196, 197, 199, 201, 202, 203, 205, 207, 208, 210, 211, 213, 216, 218, 219, 221, 223, 224, 226, 227, 229, 231, 233, 235, 236, 238, 240, 241, 243, 244, 246, 248, 249, 270, 271, 272, 273, 274, 302, 305, 321, 345, 349, 353, 360, 365, 370, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 411, 414, 427, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 447, 465, 468, 469, 470, 471, 472, 501, 504, 529, 532, 533, 536, 541, 552, 555, 564, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 590, 591, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 614, 615, 616, 617, 619, 641, 642, 643, 644, 645, 647, 658, 669, 674, 685, 686, 687, 688, 695, 697, 698, 699, 701, 702, 704, 707, 709, 711, 712, 713, 714, 715, 716, 718, 720, 722, 724, 726, 732, 733, 734, 737, 741, 742, 743, 744, 745, 747, 750, 751, 752, 753, 754, 755, 756, 760, 762, 763, 765, 779, 781, 798, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 853, 856, 857, 860, 869, 872, 873, 874, 875, 876, 877, 883, 886, 903, 909, 915, 916, 921, 922, 923, 924, 925, 926, 929, 931, 939, 940, 944, 945, 949, 950, 951, 952, 953, 954, 960, 964, 965, 966, 969, 976, 981, 984, 985, 988, 997, 1000, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1026, 1054, 1055, 1058, 1059, 1060, 1061, 1062, 1063], "wonder": [14, 16, 137], "thing": [14, 15, 16, 18, 19, 20, 124, 126, 137, 138], "research": [14, 151], "develop": [14, 15, 16, 17, 18, 19, 20, 151, 152, 1020], "also": [14, 15, 17, 18, 19, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 73, 74, 75, 76, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 151, 152, 169, 170, 171, 173, 178, 179, 180, 182, 183, 185, 187, 188, 189, 191, 193, 194, 196, 197, 199, 201, 202, 203, 205, 207, 208, 210, 211, 213, 216, 218, 219, 223, 224, 226, 227, 229, 231, 233, 235, 236, 238, 240, 241, 243, 244, 246, 248, 249, 270, 271, 272, 273, 274, 302, 305, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 411, 414, 431, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 447, 469, 470, 471, 472, 541, 552, 555, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 590, 591, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 614, 615, 616, 617, 619, 642, 643, 644, 645, 647, 658, 685, 686, 687, 688, 695, 697, 698, 699, 701, 702, 704, 711, 712, 713, 715, 734, 737, 741, 742, 743, 744, 745, 747, 750, 751, 752, 753, 754, 755, 756, 760, 762, 763, 765, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 853, 856, 857, 860, 873, 874, 875, 876, 877, 899, 900, 901, 902, 903, 904, 905, 913, 914, 915, 921, 922, 923, 924, 925, 926, 929, 931, 944, 945, 949, 950, 951, 952, 953, 954, 965, 966, 969, 976, 981, 984, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1042, 1052], "consid": [14, 15, 75, 76, 119, 125, 136, 137, 138, 371, 529, 532, 533, 536, 944, 945, 949, 950, 954, 960, 964], "speed": [14, 124], "evolv": 14, "sharabl": 14, "code": [14, 15, 16, 18, 19, 20, 21, 75, 76, 77, 78, 79, 90, 91, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 150, 152, 163, 165, 166, 167, 168, 169, 172, 174, 321, 343, 366, 371, 431, 434, 591, 594, 695, 697, 699, 700, 701, 733, 734, 740, 741, 744, 944, 945, 949, 950, 954, 965, 966, 969, 976, 977, 980, 1020, 1026], "significantli": 14, "hinder": [14, 120], "librari": [14, 15, 16, 26, 27, 135, 140, 150, 152, 321, 366, 371, 465, 468, 529, 532, 533, 536, 751, 766, 768, 944, 945, 949, 950, 954, 960, 964, 976, 981, 984, 985, 988, 989, 992, 1020], "outdat": 14, "month": 14, "rigor": [14, 124], "maintain": [14, 19, 965, 966, 969, 971, 974], "against": [14, 75, 76, 124, 152, 249, 260, 263, 751, 775, 778, 779, 781, 783, 785, 792, 794, 939, 940], "newest": 14, "version": [14, 15, 16, 18, 121, 135, 137, 751, 766, 768, 1020], "For": [14, 15, 16, 18, 19, 20, 21, 26, 27, 72, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 151, 152, 178, 179, 180, 213, 216, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 399, 402, 403, 406, 435, 438, 439, 442, 444, 447, 461, 464, 465, 468, 469, 472, 505, 508, 509, 512, 517, 520, 521, 524, 543, 546, 560, 563, 564, 567, 568, 571, 577, 580, 582, 585, 587, 590, 600, 604, 605, 609, 610, 613, 695, 711, 714, 732, 751, 802, 804, 811, 813, 839, 840, 843, 883, 886, 944, 945, 949, 950, 954, 960, 964, 976, 981, 984, 989, 992, 1001, 1004, 1031, 1032], "softwar": [14, 15, 18, 19], "pipelin": [14, 128, 140], "where": [14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 75, 76, 77, 78, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 138, 139, 140, 152, 178, 201, 202, 205, 213, 216, 371, 403, 406, 461, 464, 513, 516, 543, 546, 560, 563, 614, 654, 658, 667, 695, 733, 751, 766, 768, 783, 785, 792, 794, 795, 797, 802, 804, 805, 807, 811, 813, 814, 816, 839, 840, 843, 849, 852, 853, 856, 861, 864, 883, 886, 895, 898, 903, 904, 914, 927, 928, 939, 942, 976, 997, 1000, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020], "rapid": [14, 15, 18], "prototyp": 14, "vital": [14, 140], "signific": [14, 15, 152], "bottleneck": 14, "As": [14, 19, 70, 71, 116, 117, 120, 124, 125, 128, 129, 130, 131, 132, 135, 137, 138, 139, 152, 944, 945, 949, 950, 954, 960, 964], "new": [14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 27, 72, 75, 76, 82, 83, 118, 119, 121, 122, 124, 127, 129, 130, 132, 134, 137, 140, 151, 178, 187, 196, 199, 201, 202, 205, 223, 224, 226, 229, 241, 243, 244, 248, 249, 316, 371, 407, 410, 513, 516, 556, 559, 614, 636, 637, 638, 641, 642, 643, 646, 670, 671, 672, 673, 680, 681, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 839, 853, 856, 869, 872, 883, 886, 903, 908, 919, 920, 921, 922, 925, 1020, 1031, 1032, 1042, 1052, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063], "futur": [14, 16, 18, 19, 137, 152, 751, 766, 768], "avail": [14, 18, 19, 75, 76, 121, 131, 152, 321, 340, 356, 357, 358, 368, 614, 637], "specif": [14, 20, 75, 76, 120, 124, 125, 128, 129, 130, 131, 132, 135, 136, 137, 139, 140, 151, 152, 249, 308, 311, 321, 363, 366, 371, 529, 532, 533, 536, 614, 636, 637, 638, 665, 751, 766, 768, 808, 810, 839, 883, 886, 899, 900, 901, 902, 927, 928, 976, 981, 984, 985, 988, 989, 992, 1020, 1023, 1025, 1026, 1054, 1055], "quickli": [14, 16, 18, 19, 138, 139], "obsolet": [14, 16], "user": [14, 15, 18, 19, 21, 118, 124, 126, 129, 132, 134, 152, 1042, 1053, 1054, 1055], "constantli": 14, "invent": 14, "wheel": 14, "our": [14, 15, 17, 18, 19, 70, 71, 116, 117, 122, 124, 129, 133, 134, 137, 138, 139, 140, 152, 1020], "desir": [14, 75, 76, 249, 255, 258, 270, 273, 321, 366, 614, 654, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "provid": [14, 18, 19, 23, 72, 75, 76, 120, 121, 122, 124, 125, 128, 129, 130, 131, 132, 135, 139, 151, 152, 175, 176, 178, 213, 216, 249, 276, 277, 278, 296, 308, 311, 320, 321, 340, 614, 635, 667, 671, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 751, 814, 816, 839, 857, 860, 883, 886, 939, 940, 976, 997, 1000, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1058, 1059, 1060, 1061, 1062, 1063], "simultan": [14, 16], "all": [14, 15, 16, 17, 18, 19, 20, 21, 29, 30, 31, 32, 33, 54, 55, 68, 69, 70, 71, 72, 75, 76, 100, 101, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 151, 152, 153, 161, 175, 176, 178, 179, 180, 231, 235, 236, 240, 321, 330, 355, 361, 614, 615, 618, 622, 623, 648, 668, 685, 689, 734, 748, 751, 799, 801, 808, 810, 817, 819, 839, 857, 860, 873, 874, 875, 876, 877, 899, 900, 901, 902, 903, 904, 905, 914, 915, 916, 927, 928, 933, 935, 1009, 1014, 1020, 1023, 1025], "modern": [14, 15], "simpl": [14, 18, 19, 119, 121, 122, 124, 125, 128, 129, 130, 131, 132, 135, 137, 139, 140, 152, 614, 639], "scalabl": [14, 135], "manner": [14, 29, 32, 33, 75, 76, 119, 121, 124, 131, 138, 151, 152, 903, 915], "must": [14, 16, 18, 19, 20, 24, 25, 26, 27, 40, 41, 54, 55, 73, 74, 75, 76, 77, 78, 79, 86, 87, 100, 101, 119, 120, 121, 122, 125, 128, 129, 130, 131, 135, 139, 140, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 260, 263, 265, 268, 321, 350, 351, 352, 353, 365, 366, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 626, 627, 629, 632, 636, 637, 638, 640, 643, 646, 654, 667, 670, 671, 695, 729, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1058, 1062], "determin": [14, 26, 27, 40, 41, 75, 76, 77, 78, 86, 87, 121, 125, 129, 130, 131, 249, 270, 273, 275, 283, 296, 297, 300, 302, 305, 320, 321, 356, 357, 358, 368, 371, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 419, 422, 423, 426, 427, 430, 431, 434, 439, 442, 444, 447, 448, 451, 461, 464, 465, 468, 485, 488, 489, 492, 493, 496, 505, 508, 509, 512, 517, 520, 521, 524, 537, 540, 543, 546, 560, 563, 564, 567, 577, 580, 582, 585, 587, 590, 600, 601, 602, 603, 604, 605, 609, 614, 615, 618, 622, 623, 653, 655, 659, 660, 661, 662, 663, 682, 694, 695, 711, 714, 734, 749, 751, 752, 755, 757, 759, 760, 762, 763, 765, 772, 774, 775, 778, 783, 785, 789, 791, 792, 794, 798, 799, 801, 811, 813, 814, 816, 817, 819, 899, 900, 901, 902, 944, 945, 949, 950, 954, 960, 964, 1009, 1010, 1013, 1015, 1018], "exactli": [14, 16, 122, 129, 131, 1020, 1026], "common": [14, 20, 75, 76, 122, 125, 127, 129, 131, 133, 152], "ground": [14, 124], "li": 14, "between": [14, 75, 76, 77, 78, 79, 120, 122, 124, 125, 128, 129, 134, 136, 137, 138, 140, 151, 178, 179, 180, 249, 284, 287, 371, 403, 406, 560, 563, 823, 824, 827, 829, 832, 834, 837, 839, 853, 856, 883, 886, 903, 909, 927, 929, 930, 944, 945, 949, 950, 954, 960, 964, 1020, 1058, 1060], "find": [14, 18, 19, 75, 76, 124, 135, 138, 944, 945, 949, 950, 954, 960, 964, 1020], "exist": [14, 15, 18, 20, 21, 26, 27, 75, 76, 77, 78, 121, 122, 123, 124, 125, 126, 127, 132, 135, 152, 614, 635, 1058, 1062], "essenti": [14, 15, 20, 122, 125, 131], "order": [14, 18, 19, 21, 72, 75, 76, 77, 78, 79, 120, 121, 122, 126, 128, 129, 130, 131, 137, 138, 140, 152, 371, 403, 406, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 751, 766, 768, 779, 781, 802, 804, 805, 807, 817, 819, 839, 857, 860, 899, 900, 901, 939, 942, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 1064, 1065], "design": [14, 15, 118, 132, 135, 137, 152], "univers": 14, "abstract": [14, 23, 72, 129, 139, 152, 321, 336, 1058, 1062], "In": [14, 16, 18, 19, 72, 119, 120, 121, 122, 124, 125, 126, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 151, 152, 321, 360, 366, 367, 370, 371, 385, 388, 543, 546, 564, 567, 614, 620, 658, 839, 869, 872, 927, 933, 935, 1020], "search": [14, 18, 29, 32, 33, 61, 75, 76, 107, 119, 122, 124, 940, 941, 942, 943], "languag": [14, 16, 135], "first": [14, 15, 18, 19, 21, 26, 27, 40, 41, 72, 77, 78, 86, 87, 120, 122, 124, 125, 128, 129, 135, 137, 138, 140, 175, 176, 178, 207, 208, 210, 211, 249, 307, 316, 321, 340, 352, 371, 385, 386, 387, 388, 389, 411, 414, 419, 422, 423, 426, 427, 430, 431, 434, 453, 456, 473, 476, 481, 484, 497, 500, 501, 504, 521, 524, 525, 528, 533, 536, 537, 540, 543, 546, 552, 555, 560, 563, 595, 599, 614, 622, 695, 706, 751, 757, 759, 763, 765, 766, 768, 775, 778, 789, 791, 795, 797, 802, 804, 808, 810, 814, 816, 839, 845, 848, 873, 876, 883, 886, 887, 890, 899, 900, 901, 902, 903, 904, 913, 914, 927, 938, 939, 940, 941, 944, 945, 949, 950, 954, 1042, 1053, 1054, 1055, 1058, 1062], "see": [14, 17, 18, 19, 20, 23, 26, 27, 40, 41, 72, 77, 78, 86, 87, 120, 123, 125, 129, 131, 137, 138, 151, 152, 178, 179, 180, 196, 199, 207, 208, 210, 211, 249, 265, 268, 308, 311, 371, 385, 386, 387, 388, 389, 411, 414, 419, 422, 423, 426, 427, 430, 431, 434, 448, 451, 465, 468, 497, 500, 521, 524, 533, 536, 537, 540, 543, 546, 552, 555, 560, 563, 564, 567, 595, 599, 751, 783, 785, 792, 794, 799, 801, 814, 816, 817, 819, 939, 941, 944, 945, 949, 950, 954, 960, 964, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020], "clear": [14, 15, 16, 19, 20, 72, 122, 130, 131, 135, 137, 321, 339], "front": [14, 134, 135, 138, 1020, 1026], "runner": 14, "look": [14, 18, 19, 21, 119, 120, 122, 124, 125, 126, 129, 130, 131, 135, 137, 139, 140, 1020], "littl": [14, 137], "deeper": [14, 19, 118, 134, 321, 345, 349, 353, 903, 914, 915], "follow": [14, 15, 18, 19, 20, 21, 72, 75, 76, 119, 121, 122, 124, 126, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 152, 249, 291, 294, 321, 365, 371, 564, 567, 614, 656, 657, 658, 680, 681, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 734, 749, 750, 751, 795, 797, 817, 819, 903, 909, 915, 944, 945, 949, 950, 954, 960, 964, 1020, 1042, 1052, 1058, 1062], "same": [14, 16, 18, 19, 21, 29, 30, 31, 48, 49, 54, 55, 75, 76, 94, 95, 100, 101, 119, 120, 122, 124, 125, 128, 129, 131, 132, 133, 135, 137, 139, 140, 178, 179, 180, 188, 191, 202, 205, 213, 216, 226, 229, 231, 235, 236, 240, 244, 248, 249, 255, 258, 260, 263, 265, 268, 321, 330, 331, 365, 371, 372, 375, 385, 388, 415, 418, 435, 438, 469, 472, 543, 546, 564, 567, 568, 571, 572, 575, 610, 613, 614, 640, 642, 643, 646, 667, 670, 671, 695, 711, 714, 729, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 786, 788, 792, 794, 795, 797, 799, 801, 802, 804, 811, 813, 814, 816, 839, 845, 848, 857, 860, 861, 864, 873, 874, 875, 876, 877, 879, 882, 883, 886, 899, 900, 901, 903, 916, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 1001, 1004, 1005, 1008, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "core": [14, 18, 20, 131, 135, 140, 321, 357, 1020], "principl": 14, "oper": [14, 18, 20, 26, 27, 75, 76, 77, 78, 121, 122, 124, 125, 128, 129, 131, 132, 138, 139, 178, 207, 208, 210, 211, 249, 308, 311, 371, 385, 388, 427, 430, 431, 434, 481, 484, 548, 551, 552, 555, 564, 567, 591, 594, 614, 624, 636, 637, 638, 682, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 734, 735, 736, 737, 738, 739, 740, 741, 744, 747], "expos": [14, 135, 139, 614, 630], "almost": [14, 19, 129, 136, 138], "ident": [14, 16, 75, 76, 125, 127, 129, 137, 138, 152, 321, 355, 903, 916, 1020], "uniqu": [14, 124, 125, 129, 152, 321, 330, 331, 899, 900, 901, 902, 903, 909, 944, 945, 949, 950, 954, 955, 959, 960, 964], "syntax": [14, 15, 133], "There": [14, 18, 19, 122, 125, 128, 129, 130, 133, 135, 138, 152], "onli": [14, 17, 18, 19, 26, 27, 75, 76, 119, 120, 122, 124, 125, 126, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 150, 152, 321, 361, 371, 529, 532, 533, 536, 751, 775, 778, 795, 797, 839, 857, 860, 903, 904, 905, 913, 914, 939, 940, 941, 976, 985, 988, 1020, 1058, 1059, 1060, 1061, 1062, 1063], "so": [14, 15, 18, 19, 24, 25, 26, 27, 29, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 73, 74, 75, 76, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 119, 120, 121, 122, 124, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 152, 153, 161, 169, 170, 171, 173, 182, 183, 188, 189, 196, 197, 202, 203, 218, 219, 226, 227, 231, 233, 236, 238, 244, 246, 270, 271, 272, 274, 372, 373, 374, 376, 385, 386, 387, 389, 394, 395, 396, 398, 435, 436, 437, 439, 440, 441, 443, 469, 470, 471, 572, 573, 574, 576, 577, 578, 579, 581, 582, 583, 584, 586, 600, 601, 602, 603, 605, 606, 607, 608, 615, 616, 617, 619, 643, 644, 645, 647, 685, 686, 687, 688, 697, 698, 699, 701, 711, 712, 713, 715, 741, 742, 743, 745, 752, 753, 754, 756, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 840, 841, 842, 844, 873, 874, 875, 877, 903, 904, 914, 922, 923, 924, 926, 929, 931, 950, 951, 952, 953, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1020], "wai": [14, 15, 18, 23, 124, 126, 132, 137, 138, 139, 140, 152], "manipul": [14, 55, 101, 119, 140, 151, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 876, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898], "unsurprisingli": [14, 122], "fundament": [14, 129, 135], "consist": [14, 75, 76, 128, 132, 321, 353, 751, 766, 768, 976, 977, 980, 1054, 1055], "each": [14, 15, 16, 19, 20, 24, 25, 40, 41, 54, 55, 73, 74, 75, 76, 77, 78, 79, 86, 87, 100, 101, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 140, 151, 152, 163, 166, 167, 169, 170, 171, 172, 173, 178, 213, 216, 249, 260, 263, 321, 330, 331, 342, 343, 344, 345, 346, 347, 348, 352, 365, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 615, 618, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 751, 752, 755, 757, 759, 760, 762, 766, 768, 775, 778, 783, 785, 786, 788, 792, 794, 799, 801, 802, 804, 839, 849, 852, 865, 868, 873, 874, 875, 876, 877, 878, 883, 886, 891, 894, 895, 898, 903, 909, 916, 927, 928, 939, 942, 944, 945, 949, 950, 954, 976, 977, 980, 1020, 1026, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "veri": [14, 15, 18, 19, 119, 120, 122, 124, 125, 129, 131, 132, 136, 138, 139, 140, 152, 1020], "similar": [14, 119, 124, 129, 130, 131, 138, 152, 371, 564, 567, 734, 749, 1042, 1053], "convent": [14, 151, 751, 775, 778, 976, 977, 980], "those": [14, 18, 19, 20, 75, 76, 124, 129, 135, 140, 178, 179, 180, 695, 732, 751, 795, 797, 802, 804, 839, 840, 843], "introduc": [14, 129, 138, 839, 873, 876, 944, 945, 949], "2006": 14, "layer": [14, 49, 95, 119, 121, 135, 136, 139, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 748, 749, 750, 921, 922, 925, 1020, 1033, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1065], "therefor": [14, 19, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 135, 137, 139, 152, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 302, 305, 371, 372, 375, 385, 388, 390, 393, 394, 397, 435, 438, 469, 472, 541, 552, 555, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 614, 642, 734, 737, 741, 744, 750, 751, 752, 755, 763, 765, 839, 873, 876, 921, 922, 925, 944, 950, 954, 976, 981, 984, 1009, 1010, 1013], "present": [14, 19, 72, 75, 76, 120, 123, 129, 130, 131, 132, 135], "itself": [14, 18, 19, 120, 129, 132, 139, 151, 152, 614, 620, 903, 915], "cut": 14, "cloth": 14, "adher": [14, 15, 121, 123, 135, 140], "semant": [14, 135, 140, 371, 564, 567], "round": [14, 15, 16, 18, 19, 20, 21, 40, 41, 86, 87, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 151, 371, 385, 388, 435, 438, 469, 472, 473, 476, 543, 546, 587, 590, 610, 613, 1020], "up": [14, 15, 16, 17, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 151, 152], "hopefulli": [14, 15, 16, 18, 19, 20, 21, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 151], "paint": [14, 135], "pictur": [14, 135], "how": [14, 16, 17, 18, 19, 20, 21, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 151, 152, 1020, 1026, 1042, 1053, 1054, 1055], "pleas": [14, 15, 16, 18, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 151, 1020], "check": [14, 15, 16, 18, 19, 29, 30, 31, 32, 33, 75, 76, 124, 129, 134, 135, 137, 138, 139, 140, 151, 249, 275, 289, 290, 296, 297, 300, 320, 321, 360, 370, 614, 624, 639, 653, 660, 661, 662, 663, 682, 694, 695, 711, 714, 751, 766, 768, 903, 904, 913, 914, 915, 1020], "out": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 34, 35, 36, 37, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 86, 87, 88, 89, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 151, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 256, 257, 258, 259, 265, 266, 267, 268, 269, 279, 281, 321, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 626, 627, 628, 629, 631, 632, 633, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 654, 667, 670, 671, 695, 729, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 943, 944, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1042, 1050], "discuss": [14, 15, 16, 17, 18, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 151, 152, 1020], "faq": [14, 15, 16, 135, 137, 138, 139, 140, 151], "reach": [14, 15, 16, 18, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 151, 321, 345, 349, 353, 903, 915], "discord": [14, 15, 16, 18, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 151, 1020], "you": [14, 15, 16, 17, 18, 19, 20, 21, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 151, 152, 1020, 1026], "question": [14, 15, 16, 18, 19, 122, 124, 135, 137, 138, 139, 140, 151, 152, 1020], "With": [15, 16, 18, 26, 27, 40, 41, 42, 43, 44, 45, 75, 76, 77, 78, 86, 87, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 122, 124, 135, 163, 165, 166, 167, 168, 169, 172, 174, 178, 213, 216, 244, 248, 249, 270, 273, 279, 282, 302, 305, 321, 343, 359, 371, 372, 375, 376, 385, 388, 389, 390, 393, 394, 397, 398, 411, 414, 431, 434, 435, 438, 439, 440, 441, 442, 443, 444, 447, 469, 472, 481, 484, 501, 504, 541, 542, 548, 551, 552, 555, 568, 571, 572, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 594, 600, 601, 604, 605, 606, 609, 614, 615, 616, 617, 618, 619, 623, 631, 632, 639, 642, 643, 646, 647, 679, 684, 685, 686, 687, 688, 689, 690, 695, 697, 698, 700, 711, 712, 713, 714, 715, 734, 737, 740, 741, 744, 750, 751, 752, 755, 756, 757, 759, 760, 762, 763, 765, 779, 781, 808, 810, 823, 824, 827, 828, 829, 833, 834, 837, 838, 839, 840, 843, 844, 853, 856, 857, 860, 865, 868, 873, 876, 877, 878, 887, 890, 903, 906, 921, 922, 924, 925, 926, 927, 928, 929, 931, 932, 933, 935, 939, 940, 941, 942, 943, 944, 945, 949, 950, 953, 954, 965, 966, 969, 976, 977, 980, 981, 984, 1009, 1010, 1013], "central": 15, "goal": [15, 20], "being": [15, 16, 18, 19, 75, 76, 120, 122, 124, 127, 128, 129, 130, 131, 132, 133, 135, 138, 151, 152, 178, 179, 180, 614, 669, 674, 944, 955, 959, 1020], "would": [15, 18, 19, 21, 118, 120, 121, 122, 124, 126, 127, 128, 129, 132, 134, 135, 137, 139, 140, 152, 163, 168, 321, 366, 1020], "entir": [15, 16, 19, 75, 76, 122, 123, 124, 128, 129, 132, 137, 138, 139, 140, 152, 321, 365, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1042, 1051], "forgiven": 15, "rais": [15, 19, 72, 75, 76, 132, 133, 135, 137, 249, 265, 268, 371, 461, 464, 560, 563, 614, 624, 649, 658, 672, 681, 691, 695, 733, 751, 775, 778, 782, 814, 816, 839, 879, 882, 883, 886, 939, 942, 976, 981, 984, 989, 992, 1009, 1010, 1013, 1015, 1018, 1054, 1055, 1058, 1062], "an": [15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 32, 33, 40, 41, 54, 55, 70, 71, 72, 75, 76, 86, 87, 100, 101, 116, 117, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 151, 152, 163, 166, 167, 169, 170, 172, 177, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 260, 263, 265, 268, 270, 273, 284, 287, 302, 305, 308, 311, 321, 343, 347, 366, 371, 372, 375, 377, 380, 381, 384, 385, 386, 388, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 625, 626, 627, 629, 631, 640, 641, 642, 654, 658, 660, 661, 662, 663, 685, 689, 690, 691, 695, 711, 714, 729, 731, 732, 733, 734, 737, 741, 744, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 782, 783, 785, 786, 788, 792, 794, 795, 797, 798, 799, 801, 802, 804, 811, 813, 814, 816, 817, 819, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 903, 909, 921, 922, 925, 927, 929, 930, 938, 939, 942, 943, 944, 945, 949, 950, 954, 955, 959, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020, 1031, 1032, 1054, 1055, 1058, 1059, 1060, 1062], "eyebrow": 15, "somehow": 15, "pytorch": [15, 16, 20, 120, 125, 130, 131, 132, 135, 137, 140, 152, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 1020, 1058, 1059, 1060, 1061, 1062, 1063], "other": [15, 18, 19, 26, 27, 75, 76, 77, 78, 119, 121, 122, 124, 125, 128, 129, 132, 133, 135, 137, 139, 140, 150, 151, 152, 175, 176, 178, 179, 180, 371, 465, 468, 614, 615, 618, 620, 695, 706, 927, 933, 935, 944, 955, 959, 976, 997, 1000, 1005, 1008, 1020], "strong": [15, 152], "industri": 15, "back": [15, 128, 134, 135, 137, 152, 1020, 1026, 1054, 1055, 1058, 1062], "momentum": 15, "won": [15, 16, 19, 140], "ad": [15, 18, 19, 20, 116, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 135, 139, 152, 614, 680, 681, 751, 766, 768, 839, 853, 856, 1064, 1065], "just": [15, 16, 18, 19, 121, 122, 124, 125, 132, 135, 137, 138, 152, 976, 977, 980, 1042, 1051], "make": [15, 16, 18, 19, 20, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 135, 137, 138, 140, 321], "problem": [15, 19, 128, 137], "even": [15, 16, 18, 19, 120, 121, 125, 130, 131, 137, 138, 139, 140, 152, 371, 560, 563, 568, 571], "wors": 15, "rather": [15, 75, 76, 119, 121, 124, 129, 140, 152, 178, 179, 180, 321, 365, 614, 660, 661, 663, 695, 711, 714], "funni": 15, "comic": 15, "strip": 15, "easi": [15, 18, 19, 125, 129], "feasibl": 15, "space": [15, 178, 179, 180, 207, 208, 210, 211, 614, 641, 695, 733], "case": [15, 18, 19, 20, 29, 32, 33, 72, 75, 76, 77, 78, 79, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 137, 139, 140, 152, 178, 213, 216, 321, 360, 367, 370, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 399, 402, 403, 406, 431, 434, 435, 438, 439, 442, 444, 447, 461, 464, 465, 468, 469, 472, 505, 508, 509, 512, 517, 520, 521, 524, 543, 546, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 600, 604, 605, 609, 610, 613, 614, 658, 670, 671, 751, 779, 781, 839, 869, 872, 903, 906, 912, 976, 981, 984, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1008, 1042, 1053, 1054, 1055, 1058, 1062], "unlik": [15, 122, 129, 321], "charger": 15, "charact": [15, 133], "encod": [15, 138, 614, 641], "instant": [15, 1020], "messag": [15, 19, 133, 135, 137, 1067, 1068], "much": [15, 19, 119, 128, 129, 132, 135, 137, 138], "doe": [15, 19, 21, 23, 72, 75, 76, 118, 119, 120, 121, 122, 124, 125, 126, 130, 132, 135, 137, 138, 152, 371, 431, 434, 614, 658, 839, 878], "mandat": [15, 124, 132], "adopt": [15, 19, 128], "continu": [15, 16, 123, 124, 133, 152], "own": [15, 16, 18, 121, 124, 133, 135, 152], "signatur": [15, 23, 72, 119, 120, 121, 122, 124, 129, 130, 131, 132, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 371, 372, 375, 390, 393, 394, 397, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 577, 580, 587, 590, 591, 594, 751, 763, 765, 839, 853, 856, 873, 876, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984], "replac": [15, 19, 21, 75, 76, 122, 124, 127, 129, 130, 131, 135, 137, 140, 152, 614, 670, 671, 839, 840, 843, 927, 928], "your": [15, 16, 17, 18, 20, 21, 119, 121, 138, 139, 152, 1020], "10": [15, 18, 21, 40, 41, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 124, 129, 135, 137, 138, 178, 201, 210, 211, 212, 321, 371, 411, 414, 415, 418, 444, 447, 481, 484, 501, 504, 509, 512, 582, 583, 584, 585, 586, 587, 590, 614, 632, 642, 669, 674, 695, 716, 717, 718, 719, 734, 740, 751, 760, 762, 763, 765, 789, 791, 808, 810, 839, 857, 860, 865, 868, 878, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 939, 942, 944, 945, 949, 976, 977, 980, 981, 984, 1058, 1060], "100": [15, 16, 104, 105, 124, 138, 139, 140, 152, 371, 587, 590, 929, 931, 1020], "despit": [15, 129, 131], "distinct": [15, 121, 129, 132, 134, 944, 945, 949, 950, 954, 960, 964, 1020], "still": [15, 75, 76, 121, 124, 130, 137, 139, 152, 1020], "believ": [15, 19], "share": [15, 75, 76, 122, 124, 125, 126, 129, 135, 249, 316], "bring": [15, 124, 135, 136], "benefit": [15, 16, 18, 19, 128, 129, 132, 137, 138, 152], "unrel": [15, 19], "what": [15, 16, 19, 118, 120, 121, 122, 124, 127, 129, 133, 134, 135, 137, 138, 139, 140, 151, 152, 1020], "again": [15, 16, 19, 119, 122, 124, 129, 132, 138, 140, 152], "contrari": 15, "bumpi": 15, "road": 15, "allud": [15, 138], "most": [15, 18, 19, 75, 76, 119, 120, 124, 125, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 152, 751, 766, 768], "technolog": 15, "sector": [15, 371, 381, 384, 394, 397, 407, 410], "full": [15, 16, 19, 26, 27, 77, 78, 120, 121, 124, 130, 135, 152, 178, 249, 284, 287, 371, 481, 484, 501, 504, 734, 740, 751, 795, 797, 799, 801, 802, 804], "success": 15, "reason": [15, 19, 119, 122, 125, 128, 129, 130, 132, 135, 137, 371, 564, 567], "build": [15, 17, 18, 125, 134, 136, 139, 140, 152, 944, 945, 949, 950, 954, 960, 964, 1020, 1042, 1053, 1054, 1055], "custom": [15, 23, 72, 124, 139], "comput": [15, 16, 18, 26, 27, 75, 76, 124, 125, 129, 135, 138, 152, 321, 365, 371, 385, 388, 411, 414, 423, 426, 431, 434, 453, 456, 457, 460, 477, 480, 481, 484, 497, 500, 501, 504, 525, 528, 529, 532, 533, 536, 537, 540, 543, 546, 548, 551, 552, 555, 614, 626, 627, 629, 632, 633, 695, 697, 700, 702, 704, 706, 707, 709, 716, 718, 720, 722, 724, 726, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 747, 749, 751, 752, 755, 757, 759, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 795, 797, 798, 799, 801, 802, 804, 814, 816, 817, 819, 823, 824, 827, 829, 832, 834, 837, 903, 909, 944, 945, 949, 950, 954, 960, 964, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008], "thank": [15, 138], "interoper": 15, "compon": [15, 135, 695, 733], "bio": [15, 18], "hardwar": [15, 18], "initi": [15, 19, 72, 75, 76, 77, 78, 79, 124, 126, 130, 131, 321, 734, 748, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1058, 1062], "pcie": 15, "interfac": [15, 140, 152], "motherboard": 15, "raid": 15, "storag": [15, 138], "virtual": [15, 19, 21], "bluetooth": 15, "wireless": 15, "exchang": 15, "btx": 15, "form": [15, 17, 29, 30, 31, 32, 33, 75, 76, 124, 125, 139, 140, 178, 182, 185, 218, 221, 231, 235, 236, 240, 614, 620, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 734, 751, 752, 755, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 783, 785, 786, 788, 792, 794, 795, 797, 799, 801, 802, 804, 805, 807, 811, 813, 903, 905, 915], "factor": [15, 321, 330, 363, 364, 365, 695, 697, 700, 702, 704, 716, 718, 720, 722, 734, 735, 736, 737, 738, 739, 740, 741, 744, 751, 752, 755, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1058, 1059, 1060, 1061], "sata": 15, "connect": [15, 18, 139, 140, 1042, 1052, 1053], "host": [15, 152], "bu": 15, "adapt": [15, 695, 720, 722, 1058, 1061], "devic": [15, 19, 26, 27, 34, 35, 39, 75, 76, 80, 81, 85, 104, 105, 118, 119, 125, 127, 130, 137, 138, 152, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 235, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 614, 642, 643, 646, 667, 670, 671, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 1031, 1032, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1065], "html": [15, 21, 121, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 371, 372, 375, 390, 393, 394, 397, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 577, 580, 587, 590, 591, 594, 751, 763, 765, 839, 853, 856, 873, 876, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984], "enabl": [15, 18, 19, 75, 76, 77, 78, 79, 124, 125, 128, 129, 132, 134, 135, 136, 138, 140, 152, 695, 733], "anyon": [15, 17, 152], "websit": 15, "tcp": 15, "ip": 15, "node": [15, 75, 76, 129, 903, 904, 913, 914], "commun": [15, 17, 19, 20, 152, 1020, 1026], "network": [15, 125, 129, 135, 139, 151, 734, 747, 1020, 1028, 1042, 1054, 1055], "smtp": 15, "possibl": [15, 17, 18, 19, 20, 121, 122, 124, 129, 130, 132, 135, 138, 151, 152, 614, 664, 684, 976, 981, 984, 989, 992], "send": 15, "gmail": 15, "outlook": 15, "pop": [15, 72], "email": 15, "ieee": [15, 177, 249, 284, 287, 371, 385, 388, 465, 468, 543, 546, 564, 567, 587, 590], "754": [15, 177, 249, 284, 287, 371, 385, 388, 465, 468, 543, 546, 564, 567, 587, 590], "allow": [15, 124, 135, 152, 178, 207, 208, 210, 211, 614, 664, 1054, 1055], "calcul": [15, 75, 76, 77, 78, 79, 121, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 399, 402, 403, 406, 439, 442, 444, 447, 448, 451, 461, 464, 465, 468, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 543, 546, 560, 563, 577, 580, 582, 585, 587, 590, 595, 599, 600, 604, 605, 609, 823, 824, 827, 829, 832, 834, 837, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008], "live": [15, 16], "depend": [15, 18, 19, 26, 27, 121, 124, 127, 129, 130, 135, 152, 249, 255, 258, 371, 372, 375, 377, 380, 381, 384, 390, 393, 394, 397, 399, 402, 403, 406, 439, 442, 444, 447, 461, 464, 465, 468, 505, 508, 509, 512, 513, 516, 517, 520, 560, 563, 577, 580, 582, 585, 600, 604, 605, 609, 751, 766, 768, 795, 797, 799, 801, 802, 804, 939, 943, 965, 966, 969, 971, 974], "did": [15, 20, 140], "aris": [15, 152], "until": [15, 19, 133, 152, 1020], "substanti": [15, 19, 124, 128], "innov": 15, "growth": 15, "usag": [15, 135, 321, 365], "relev": [15, 18, 20, 122, 129, 130, 138, 1058, 1059, 1060, 1061, 1062, 1063], "area": [15, 132, 150, 371, 381, 384, 394, 397, 407, 410, 1020], "necess": 15, "parti": [15, 152], "could": [15, 16, 18, 19, 122, 124, 129, 130, 132, 135, 137, 138, 139, 944, 945, 949, 950, 954, 960, 964], "easili": [15, 19, 138, 139, 140, 152, 1020], "engag": [15, 17, 18, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "regard": [15, 129, 321], "effect": [15, 120, 121, 128, 129, 152, 178, 213, 216, 695, 724, 726, 976, 997, 1000, 1005, 1008], "2015": 15, "sinc": [15, 18, 19, 124, 152], "alongsid": 15, "machin": [15, 18, 125, 151, 249, 284, 287, 291, 294, 371, 477, 480, 751, 783, 785, 792, 794], "given": [15, 16, 18, 19, 20, 21, 54, 55, 72, 75, 76, 100, 101, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 139, 140, 151, 178, 179, 180, 187, 207, 208, 210, 211, 321, 354, 360, 362, 363, 364, 365, 367, 370, 614, 632, 633, 643, 646, 670, 671, 675, 693, 695, 697, 700, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 734, 735, 736, 737, 738, 739, 740, 741, 744, 751, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 853, 856, 857, 860, 865, 868, 873, 874, 875, 876, 877, 878, 891, 894, 903, 910, 911, 927, 929, 930, 932, 933, 935, 938, 965, 971, 974, 1031, 1032], "frame": [15, 151], "less": [15, 19, 26, 27, 40, 41, 75, 76, 86, 87, 120, 122, 129, 134, 135, 371, 377, 380, 381, 384, 390, 393, 403, 406, 435, 438, 505, 508, 509, 512, 517, 520, 560, 563, 564, 567, 572, 575, 587, 590, 751, 783, 785, 792, 794, 817, 819, 927, 933, 935, 976, 1005, 1008], "matur": [15, 152], "state": [15, 120, 121, 124, 134, 135, 136, 138, 151, 371, 543, 546, 614, 678, 692, 734, 748, 1020, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "than": [15, 19, 26, 27, 75, 76, 119, 122, 124, 129, 132, 135, 138, 139, 140, 152, 178, 179, 180, 249, 284, 287, 321, 365, 371, 377, 380, 381, 384, 390, 393, 403, 406, 419, 422, 427, 430, 435, 438, 469, 472, 473, 476, 505, 508, 509, 512, 517, 520, 541, 560, 563, 564, 567, 572, 575, 587, 590, 610, 613, 614, 660, 661, 663, 695, 711, 714, 751, 757, 759, 775, 778, 783, 785, 792, 794, 817, 819, 839, 840, 843, 857, 860, 879, 882, 927, 933, 935, 944, 945, 949, 950, 954, 960, 964, 976, 993, 996, 997, 1000, 1001, 1004, 1005, 1008], "preced": [15, 139], "mention": [15, 18, 19, 120, 122, 125, 132], "aros": 15, "70": [15, 751, 789, 791, 976, 977, 980], "80": [15, 751, 789, 791, 976, 977, 980], "90": [15, 104, 105, 371, 431, 434, 568, 571, 751, 789, 791, 929, 931, 976, 977, 980], "effort": [15, 17, 152], "stage": [15, 17, 19, 21, 118, 133, 1020], "complet": [15, 19, 20, 75, 76, 128, 129, 137, 138, 751, 795, 797], "natur": [15, 122, 128, 129, 151, 371, 461, 464, 505, 508, 513, 516, 751, 798], "like": [15, 18, 19, 21, 72, 118, 119, 120, 121, 122, 124, 131, 132, 134, 135, 137, 138, 139, 140, 151, 152, 695, 711, 714, 927, 933, 935, 1020], "certainli": 15, "mission": [15, 1020], "creat": [15, 17, 18, 19, 21, 23, 72, 75, 76, 124, 130, 131, 132, 135, 136, 139, 150, 151, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 201, 202, 205, 207, 208, 210, 211, 218, 221, 223, 224, 226, 229, 241, 243, 244, 248, 321, 330, 331, 614, 642, 643, 646, 667, 670, 671, 684, 695, 731, 927, 928, 929, 930, 933, 935, 1020, 1026, 1031, 1032, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "At": [15, 20], "process": [15, 16, 17, 18, 19, 21, 124, 125, 129, 135, 140, 321, 330, 331, 360, 370], "ourselv": 15, "lead": [15, 16, 75, 76, 77, 78, 79, 152, 751, 795, 797, 802, 804], "quansight": 15, "compani": 15, "made": [15, 19, 20, 129, 132, 135, 137], "organ": [15, 119, 125, 128, 129], "panda": 15, "scipi": 15, "conda": [15, 18, 21], "dask": [15, 944, 945, 949, 950, 954, 960, 964], "apach": 15, "onnx": 15, "scikit": 15, "jupyt": 15, "aw": 15, "cupi": 15, "net": [15, 16, 135, 140], "sympi": 15, "rai": [15, 371, 403, 406], "modin": 15, "spyder": 15, "includ": [15, 19, 20, 75, 76, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 151, 152, 178, 179, 180, 182, 185, 218, 221, 614, 653, 694, 751, 817, 819, 903, 904, 927, 933, 935, 939, 941, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1023, 1025, 1042, 1052, 1053, 1056, 1057], "member": [15, 19], "googl": [15, 1020], "octoml": 15, "einop": [15, 75, 76, 614, 636, 637, 638], "further": [15, 16, 19, 21, 122, 128, 134, 138, 139, 1020], "sponsor": 15, "lg": 15, "electron": 15, "microsoft": 15, "d": [15, 16, 17, 18, 72, 104, 105, 118, 129, 138, 614, 623, 631, 734, 735, 736, 737, 738, 739, 740, 741, 744, 751, 763, 765, 789, 791, 903, 906, 929, 931, 1020, 1026], "shaw": 15, "co": [15, 40, 41, 86, 87, 135, 151, 371, 443, 614, 641, 1020], "intel": 15, "togeth": [15, 75, 76, 128, 129, 133, 139, 140, 152, 1064, 1065], "major": [15, 124, 130, 131, 152, 939, 942], "involv": [15, 17, 21, 118, 130, 140, 249, 308, 311, 371, 385, 388, 543, 546, 1020, 1026], "anoth": [15, 18, 19, 75, 76, 124, 125, 129, 130, 137, 140, 178, 196, 199, 249, 260, 263, 270, 273], "promis": 15, "sign": [15, 18, 40, 41, 86, 87, 136, 140, 178, 179, 180, 371, 372, 375, 385, 388, 403, 406, 427, 430, 543, 546, 564, 567, 576, 751, 798, 944, 945, 949, 950, 954, 960, 964, 976, 993, 996, 1001, 1004], "pursuit": 15, "unif": [15, 17, 137, 1020, 1026], "clearli": [15, 20, 122, 124], "lot": [15, 16, 127, 137, 152], "thought": [15, 18, 19, 120], "care": [15, 19, 140], "attent": [15, 19, 128, 129, 734, 749, 750, 1042, 1053], "gone": [15, 134], "simplifi": [15, 135, 136, 137, 139], "compat": [15, 26, 27, 40, 41, 77, 78, 86, 87, 120, 152, 249, 265, 268, 371, 385, 386, 387, 388, 389, 403, 406, 411, 414, 419, 422, 423, 426, 427, 430, 431, 434, 448, 451, 453, 456, 473, 476, 481, 484, 497, 500, 501, 504, 521, 524, 525, 528, 533, 536, 537, 540, 543, 546, 552, 555, 560, 563, 564, 567, 595, 599, 751, 783, 785, 792, 794, 799, 801, 808, 810, 814, 816, 817, 819, 839, 869, 872, 939, 941, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020], "excit": [15, 17, 118, 1020], "complianc": 15, "hope": [15, 152], "due": [15, 18, 26, 27, 129, 132, 371, 543, 546], "suit": [15, 18, 118, 123, 124, 138, 151], "some": [15, 16, 18, 19, 20, 75, 76, 119, 120, 121, 122, 124, 125, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 151, 152, 371, 465, 468, 695, 697, 700, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 732, 734, 746, 1020, 1042, 1050], "motiv": [15, 137], "great": [15, 16, 124, 135, 137], "convinc": 15, "celebr": 15, "encourag": [15, 151, 152, 1020, 1026], "foundat": 15, "point": [16, 19, 40, 41, 86, 87, 120, 121, 122, 124, 128, 132, 135, 137, 138, 151, 177, 178, 179, 180, 187, 193, 194, 201, 223, 224, 241, 243, 249, 255, 258, 284, 287, 297, 300, 308, 311, 371, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 461, 464, 465, 468, 469, 472, 505, 508, 509, 512, 517, 520, 521, 524, 543, 546, 560, 563, 564, 567, 568, 571, 577, 580, 582, 585, 587, 590, 600, 601, 602, 603, 604, 605, 609, 610, 613, 751, 752, 755, 760, 762, 766, 768, 769, 771, 772, 774, 783, 785, 792, 794, 795, 797, 799, 801, 802, 804, 817, 819, 944, 945, 949, 950, 954, 960, 964, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008], "mai": [16, 18, 19, 23, 26, 27, 72, 124, 129, 137, 139, 178, 179, 180, 196, 199, 321, 366, 371, 453, 456, 481, 484, 501, 504, 529, 532, 533, 536, 614, 635, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 976, 981, 984, 985, 988, 989, 992], "ask": [16, 135, 137, 152, 1020], "perfectli": 16, "happi": [16, 18, 152], "abund": 16, "better": [16, 118, 133, 134, 137, 138, 139], "ll": [16, 17, 19, 122, 129, 132, 138], "give": [16, 18, 19, 118, 120, 121, 122, 126, 137, 839, 869, 872], "two": [16, 72, 77, 78, 121, 122, 124, 128, 129, 134, 138, 140, 178, 179, 180, 193, 194, 213, 216, 231, 235, 236, 240, 249, 307, 316, 371, 427, 430, 568, 571, 614, 622, 751, 752, 755, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 811, 813, 814, 816, 839, 887, 890, 944, 945, 949, 950, 954, 955, 959, 960, 964, 1020], "streamlin": 16, "workflow": [16, 19, 138, 150, 1020], "save": [16, 75, 76, 124, 133, 152, 614, 676, 1054, 1055], "week": [16, 19, 20, 1020], "let": [16, 121, 122, 124, 129, 130, 131, 135, 137, 138, 139, 140, 976, 985, 988, 997, 1000, 1001, 1004, 1005, 1008, 1020], "sai": [16, 18, 127, 137], "deepmind": 16, "releas": [16, 18, 20, 1020], "awesom": 16, "paper": 16, "love": 16, "choic": [16, 18, 132, 138, 976, 997, 1000, 1005, 1008], "perceiverio": 16, "happen": [16, 18, 19, 124, 138], "slew": 16, "rush": 16, "f": [16, 21, 72, 118, 124, 129, 133, 135, 138, 140, 371, 477, 480, 614, 655, 659, 903, 906], "g": [16, 118, 129, 152, 249, 254, 308, 311, 321, 337, 903, 906, 927, 932, 933, 935, 944, 945, 949, 950, 954, 960, 964, 976, 981, 984, 989, 992, 993, 996, 1001, 1004], "inevit": 16, "deviat": [16, 124, 921, 922, 925, 927, 932, 976, 997, 1000, 1056, 1057], "origin": [16, 54, 55, 75, 76, 77, 78, 79, 100, 101, 126, 127, 130, 135, 137, 371, 403, 406, 751, 779, 781, 839, 869, 872, 873, 874, 875, 876, 877], "often": [16, 124, 125, 133, 152], "erron": 16, "train": [16, 125, 129, 131, 138, 139, 140, 150, 151, 152, 695, 697, 700, 702, 704, 716, 718, 1020], "poor": 16, "converg": 16, "perform": [16, 75, 76, 119, 120, 122, 124, 125, 126, 128, 129, 131, 132, 135, 138, 152, 163, 168, 178, 207, 208, 210, 211, 321, 614, 632, 636, 637, 638, 656, 657, 658, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 734, 746, 748, 751, 802, 804, 899, 900, 901, 902, 903, 910, 911, 1009, 1010, 1013, 1015, 1018], "issu": [16, 17, 20, 124, 135, 137, 139, 152], "etc": [16, 18, 19, 20, 70, 71, 75, 76, 116, 117, 119, 120, 122, 124, 128, 129, 130, 135, 137, 138, 152, 178, 207, 208, 210, 211, 614, 642, 643, 646, 667, 670, 671, 927, 928, 929, 930, 933, 935, 944, 945, 949, 950, 954, 960, 964, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1065], "publish": [16, 152], "manag": [16, 17, 132, 152, 321], "get": [16, 17, 18, 20, 72, 75, 76, 118, 124, 125, 130, 131, 132, 135, 136, 137, 138, 139, 249, 279, 282, 283, 284, 287, 291, 294, 321, 330, 331, 340, 341, 354, 355, 360, 364, 367, 370, 614, 621, 648, 649, 650, 669, 678, 1020, 1026, 1042, 1051], "work": [16, 18, 19, 20, 118, 124, 129, 130, 131, 134, 135, 136, 137, 139, 140, 1020, 1026], "repositori": [16, 18, 19, 21, 123, 133], "pull": [16, 17, 18, 21, 119, 152], "request": [16, 17, 119, 321, 357], "confus": [16, 132], "do": [16, 18, 19, 20, 75, 76, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 152, 371, 564, 567, 614, 658, 695, 711, 714, 732, 903, 904, 913, 914, 915], "don": [16, 18, 19, 20, 70, 71, 116, 117, 124, 130, 139, 152], "expect": [16, 124, 152, 614, 621, 1020], "codebas": [16, 17, 118, 119, 132, 134, 321, 363, 364, 1020], "total": [16, 17, 19, 75, 76, 77, 78, 79, 122, 124, 131, 138, 139, 152, 321, 367, 939, 942, 976, 997, 1000, 1005, 1008], "hour": 16, "spent": 16, "spin": 16, "off": [16, 134, 751, 763, 765, 811, 813], "test": [16, 18, 20, 118, 122, 133, 152, 249, 302, 305, 371, 485, 488, 489, 492, 493, 496, 1009, 1010, 1013, 1015, 1018], "error": [16, 18, 75, 76, 120, 124, 128, 131, 133, 137, 152, 163, 164, 321, 371, 457, 460, 976, 981, 984, 989, 992, 1054, 1055, 1058, 1062], "iter": [16, 29, 30, 31, 32, 33, 70, 71, 72, 75, 76, 77, 78, 79, 116, 117, 129, 135, 138, 175, 176, 321, 343, 344, 346, 347, 348, 349, 352, 365, 614, 615, 618, 839, 849, 852, 865, 868, 878, 891, 894, 895, 898, 903, 904, 905, 906, 909, 913, 914, 915], "address": [16, 19, 20, 128, 135], "sake": 16, "singl": [16, 19, 75, 76, 119, 120, 122, 124, 125, 127, 129, 132, 135, 138, 139, 140, 152, 321, 330, 331, 350, 351, 352, 353, 614, 690, 694, 927, 932, 933, 935, 944, 945, 949], "multipl": [16, 19, 75, 76, 86, 87, 88, 89, 90, 91, 96, 97, 100, 101, 102, 103, 104, 105, 122, 125, 129, 152, 371, 385, 389, 541, 543, 546, 614, 615, 617, 618, 619, 643, 647, 664, 695, 711, 713, 714, 715, 751, 752, 755, 756, 772, 774, 839, 840, 843, 844, 873, 876, 877, 878, 921, 922, 924, 925, 926, 929, 931, 939, 940, 941, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1042, 1052], "line": [16, 18, 122, 124, 128, 133, 136, 137, 138, 139, 150, 1020, 1026], "convert": [16, 29, 30, 31, 32, 33, 75, 76, 124, 128, 135, 152, 153, 161, 178, 182, 185, 218, 221, 249, 253, 254, 321, 337, 338, 339, 340, 360, 367, 370, 614, 679, 685, 689, 690, 751, 820, 822, 903, 905, 915, 916, 1032], "directli": [16, 19, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 135, 137, 139, 140, 151, 152, 903, 915], "graph": [16, 26, 27, 125, 129, 136, 152, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 944, 945, 949, 950, 954, 960, 964, 1054, 1055], "guarante": [16, 128, 152, 944, 945, 949], "turn": [16, 122, 124, 129], "4": [16, 21, 26, 27, 40, 41, 44, 45, 50, 51, 54, 55, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 122, 124, 126, 129, 135, 137, 138, 139, 140, 163, 165, 166, 168, 178, 202, 205, 213, 216, 226, 229, 244, 248, 249, 270, 272, 273, 274, 279, 282, 302, 305, 321, 343, 359, 371, 372, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 394, 396, 397, 398, 403, 406, 411, 414, 431, 434, 435, 437, 438, 439, 442, 444, 447, 469, 471, 472, 481, 484, 501, 504, 541, 542, 548, 551, 552, 555, 568, 571, 572, 574, 575, 577, 579, 580, 581, 582, 585, 587, 590, 591, 594, 600, 601, 603, 604, 605, 606, 608, 609, 614, 623, 632, 641, 642, 643, 645, 646, 647, 679, 684, 695, 697, 699, 700, 701, 711, 712, 713, 714, 715, 734, 737, 738, 739, 741, 744, 748, 750, 751, 752, 753, 755, 757, 759, 760, 762, 763, 765, 772, 774, 783, 785, 789, 791, 808, 810, 811, 813, 823, 834, 837, 839, 840, 841, 842, 843, 844, 845, 848, 853, 856, 857, 860, 865, 868, 869, 872, 873, 875, 876, 877, 878, 887, 890, 903, 906, 921, 922, 924, 925, 926, 927, 928, 929, 931, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 951, 953, 954, 965, 966, 969, 976, 977, 980, 981, 984, 1009, 1010, 1013, 1020, 1058, 1059, 1060, 1061, 1063], "step": [16, 18, 19, 21, 44, 45, 75, 76, 80, 81, 90, 91, 122, 126, 128, 129, 130, 131, 135, 138, 139, 140, 151, 178, 179, 180, 181, 207, 208, 210, 211, 321, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 716, 717, 718, 719, 720, 722, 724, 726, 899, 900, 901, 902, 1020, 1058, 1059, 1060, 1061, 1062, 1063], "take": [16, 17, 18, 19, 121, 122, 124, 129, 130, 131, 135, 137, 139, 140, 152, 371, 431, 434, 1020, 1026], "few": [16, 19, 20, 124, 125, 129, 130, 131, 132, 133, 136, 137, 138, 139, 150, 1020, 1026], "second": [16, 18, 26, 27, 40, 41, 77, 78, 86, 87, 122, 124, 132, 137, 249, 307, 316, 321, 352, 371, 385, 386, 387, 388, 389, 411, 414, 419, 422, 423, 426, 427, 430, 431, 434, 453, 456, 473, 476, 481, 484, 497, 500, 501, 504, 521, 524, 525, 528, 533, 536, 537, 540, 543, 546, 552, 555, 560, 563, 595, 599, 614, 622, 669, 674, 695, 697, 700, 702, 704, 716, 718, 751, 757, 759, 763, 765, 766, 768, 775, 778, 789, 791, 795, 797, 802, 804, 808, 810, 814, 816, 839, 883, 886, 887, 890, 899, 901, 944, 945, 949, 950, 954, 1058, 1059, 1060], "automat": [16, 18, 19, 118, 120, 125, 129, 134, 135, 136, 139, 140, 1020], "convers": [16, 30, 31, 32, 33, 75, 76, 134, 136, 140, 151, 152, 1020, 1026], "everyon": [16, 17, 19, 152], "regardless": [16, 17, 75, 76, 137, 140, 175, 176], "wouldn": 16, "nice": [16, 124], "write": [16, 19, 20, 21, 24, 25, 40, 41, 54, 55, 73, 74, 75, 76, 86, 87, 100, 101, 118, 119, 121, 122, 125, 126, 132, 135, 137, 140, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 265, 268, 321, 366, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 626, 627, 629, 632, 633, 636, 637, 638, 640, 642, 643, 646, 654, 667, 670, 671, 695, 729, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 938, 939, 943, 944, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "onc": [16, 18, 19, 124, 129, 130, 131, 135, 138, 152, 321, 365, 751, 772, 774, 802, 804, 927, 928], "know": [16, 19, 124, 944, 945, 949, 950, 954, 960, 964], "among": [16, 75, 76, 124], "frantic": 16, "port": 16, "lucid": 16, "honk": 16, "improv": [16, 19, 125, 135], "understand": [16, 18, 19, 20, 21, 118, 120, 121, 122, 123, 133, 134], "pattern": [16, 75, 76, 121, 130, 614, 636, 637, 638], "hasn": 16, "chang": [16, 18, 19, 20, 21, 24, 25, 26, 27, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 73, 74, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 121, 123, 124, 129, 135, 139, 152, 169, 170, 171, 173, 182, 183, 188, 189, 196, 197, 202, 203, 218, 219, 226, 227, 231, 233, 236, 238, 244, 246, 270, 271, 272, 274, 321, 372, 373, 374, 376, 385, 386, 387, 389, 394, 395, 396, 398, 435, 436, 437, 439, 440, 441, 443, 469, 470, 471, 572, 573, 574, 576, 577, 578, 579, 581, 582, 583, 584, 586, 600, 601, 602, 603, 605, 606, 607, 608, 615, 616, 617, 619, 643, 644, 645, 647, 685, 686, 687, 688, 697, 698, 699, 701, 711, 712, 713, 715, 741, 742, 743, 745, 751, 752, 753, 754, 756, 757, 759, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 869, 872, 873, 874, 875, 877, 903, 905, 915, 922, 923, 924, 926, 929, 931, 950, 951, 952, 953, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1026], "now": [16, 18, 21, 75, 76, 119, 120, 124, 127, 129, 130, 133, 137, 138, 140, 151, 152, 178, 244, 248, 1042, 1053, 1054, 1055], "spend": 16, "torchvis": 16, "probabl": [16, 124, 734, 746, 927, 928, 1042, 1050], "sonnet": 16, "about": [16, 18, 19, 123, 124, 134, 135, 139, 140, 152, 249, 284, 287, 291, 294], "next": [16, 18, 19, 20, 21, 121, 122, 126, 127, 133, 137, 138, 249, 284, 287, 1020, 1054, 1055, 1058, 1059, 1060, 1061, 1062, 1063], "everyth": [16, 19, 20, 124, 136, 152], "zero": [16, 26, 27, 40, 41, 75, 76, 77, 78, 86, 87, 120, 122, 128, 129, 130, 131, 135, 138, 139, 163, 165, 166, 178, 187, 193, 194, 213, 216, 231, 235, 236, 240, 244, 248, 249, 255, 258, 371, 385, 388, 390, 393, 394, 397, 419, 422, 439, 440, 442, 444, 447, 465, 468, 469, 472, 529, 532, 533, 536, 541, 542, 543, 546, 548, 551, 552, 555, 560, 563, 564, 567, 568, 571, 577, 580, 582, 583, 584, 586, 587, 590, 591, 594, 600, 604, 605, 609, 614, 632, 667, 670, 671, 695, 697, 700, 702, 704, 711, 714, 716, 718, 720, 722, 734, 746, 751, 752, 755, 760, 762, 775, 778, 783, 785, 792, 794, 814, 816, 817, 819, 839, 853, 856, 857, 860, 865, 868, 873, 876, 895, 898, 921, 922, 925, 927, 929, 930, 939, 940, 941, 942, 944, 945, 949, 950, 954, 960, 964, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1058, 1059, 1060, 1061], "need": [16, 18, 19, 20, 21, 119, 121, 122, 123, 125, 128, 129, 132, 135, 137, 138, 151, 152, 614, 626, 627, 629, 839, 840, 843, 853, 856], "said": 16, "high": [16, 20, 75, 76, 104, 105, 138, 927, 929, 930, 931, 933, 934, 935, 936], "level": [16, 17, 20, 125, 134, 135, 138, 139, 140, 152], "optim": [16, 132, 136, 138, 140, 151, 321, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 899, 900, 901, 902, 1020, 1059, 1060, 1061, 1063], "trainer": [16, 150, 152, 1020], "statu": 16, "quo": 16, "kera": 16, "dopamin": 16, "ignit": 16, "catalyst": 16, "lightn": 16, "fastai": 16, "haiku": [16, 140], "flax": [16, 140, 152], "trax": [16, 140], "objax": [16, 140], "idea": [16, 133, 151], "fulli": [16, 120, 128, 129, 135, 136, 137, 138, 139, 140, 152, 1042, 1052, 1053], "offer": [16, 139], "strongli": [17, 18, 1020, 1026], "welcom": [17, 18, 19, 1020, 1026], "absolut": [17, 75, 76, 371, 372, 375, 751, 798], "skill": 17, "whether": [17, 18, 26, 27, 29, 30, 31, 32, 33, 73, 74, 75, 76, 77, 78, 79, 86, 87, 100, 101, 116, 117, 120, 130, 132, 163, 164, 169, 171, 173, 175, 176, 249, 255, 258, 279, 282, 296, 297, 300, 302, 305, 320, 321, 340, 341, 352, 356, 357, 360, 361, 365, 368, 370, 371, 385, 387, 389, 493, 496, 600, 601, 603, 614, 615, 618, 622, 623, 632, 635, 639, 641, 651, 653, 655, 658, 659, 660, 661, 662, 663, 664, 675, 677, 682, 693, 694, 695, 702, 704, 706, 707, 709, 711, 714, 716, 718, 720, 722, 724, 726, 729, 733, 734, 746, 751, 766, 768, 873, 875, 877, 899, 900, 901, 902, 903, 904, 905, 909, 913, 914, 915, 916, 927, 928, 1009, 1010, 1013, 1015, 1018, 1031, 1032, 1042, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063], "vetern": 17, "beginn": 17, "start": [17, 18, 19, 20, 21, 75, 76, 80, 81, 118, 121, 122, 130, 134, 135, 137, 138, 139, 151, 152, 178, 179, 180, 181, 207, 208, 209, 210, 211, 212, 321, 336], "aspect": [17, 138, 1020], "guid": [17, 18, 19, 133, 1020], "through": [17, 19, 20, 118, 122, 124, 125, 126, 129, 133, 134, 135, 137, 138, 139, 140, 151, 371, 403, 406, 903, 906], "journei": [17, 1020, 1026], "inclusvi": 17, "big": [17, 152], "team": [17, 18, 19], "board": 17, "contributor": [17, 18, 19, 134, 1020], "split": [17, 19, 26, 27, 75, 76, 134, 135, 152, 321, 330, 346, 347, 348, 349, 363, 364, 365, 614, 664, 839, 1020], "section": [17, 19, 20, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 944, 945, 949, 950, 954, 960, 964], "below": [17, 18, 20, 21, 118, 119, 122, 124, 125, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 151, 178, 231, 235, 236, 240, 371, 411, 414, 431, 434, 444, 447, 568, 571, 605, 609, 751, 760, 762, 763, 765, 811, 813, 839, 853, 856, 857, 860, 944, 945, 949, 965, 966, 969, 1020], "best": [17, 18, 19, 20, 21, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 614, 664], "go": [17, 18, 19, 20, 118, 119, 122, 129, 134, 138, 152, 903, 914], "finish": [17, 18, 118, 1020], "dive": [17, 19, 20, 134, 137, 138, 152, 1020], "right": [17, 18, 19, 75, 76, 118, 122, 138, 371, 419, 422, 427, 430, 751, 802, 804], "environ": [17, 19, 21, 151], "basic": [17, 20, 21], "fork": [17, 18, 614, 665], "doc": [17, 20, 120, 121, 135, 138, 139, 1020], "document": [17, 19, 124, 136, 138, 140], "local": [17, 18, 21, 125], "task": [17, 19, 151, 899, 900, 901, 902, 1020], "help": [17, 18, 23, 72, 122, 124, 126, 128, 129, 137, 138, 139, 150, 614, 620, 976, 1001, 1004, 1020], "video": [17, 19, 120, 121, 122, 124], "realli": [18, 129, 152], "contribut": [18, 19, 20, 135, 1026], "toward": [18, 54, 55, 100, 101, 135, 839, 873, 874, 875, 876, 877, 1020, 1026], "page": [18, 19, 136, 140, 150, 1020, 1026], "explain": [18, 19, 20, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 1020, 1026], "main": [18, 21, 127, 129, 178, 193, 194, 231, 235, 236, 240, 751, 763, 765, 811, 813], "prefer": [18, 129], "mode": [18, 50, 51, 75, 76, 122, 129, 152, 175, 176, 321, 350, 351, 352, 353, 365, 371, 385, 388, 543, 546, 614, 675, 692, 751, 795, 796, 797], "git": [18, 19, 124], "recurs": [18, 21, 29, 30, 31, 32, 33, 75, 76, 125, 129, 139, 152, 903, 904, 905, 913, 914, 915], "submodul": [18, 19, 20, 21, 123, 124, 125, 131, 134, 135, 139, 1020, 1056, 1057, 1064, 1065], "com": 18, "unifyai": [18, 21], "http": [18, 121, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 371, 372, 375, 390, 393, 394, 397, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 577, 580, 587, 590, 591, 594, 695, 697, 700, 702, 704, 751, 763, 765, 839, 853, 856, 873, 876, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984], "gh": 18, "your_fold": 18, "id": [18, 128, 129, 133, 321, 340, 1054, 1055], "cours": [18, 19, 122, 138, 152], "whatev": [18, 152], "integr": [18, 249, 255, 258], "familiar": [18, 20], "decid": [18, 75, 76, 903, 914], "sure": [18, 20, 123, 124], "elig": 18, "free": [18, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 151, 1020], "student": 18, "licenc": 18, "peopl": [18, 19, 118], "seem": [18, 139, 152], "miss": [18, 122, 124, 128, 129, 133, 1058, 1062], "add": [18, 19, 20, 26, 27, 40, 41, 70, 71, 75, 76, 77, 78, 86, 87, 88, 89, 116, 117, 118, 119, 120, 121, 124, 125, 126, 128, 129, 135, 137, 152, 371, 372, 375, 389, 541, 615, 619, 695, 733, 921, 922, 925, 1020, 1026, 1056, 1057], "explicit": [18, 21, 129, 130, 132, 135, 152], "remind": 18, "channel": [18, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 614, 641, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "pace": 18, "updat": [18, 19, 20, 21, 72, 75, 76, 118, 120, 122, 123, 127, 128, 129, 130, 135, 137, 138, 140, 152, 321, 330, 614, 658, 670, 671, 695, 697, 700, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 734, 748, 899, 900, 901, 903, 910, 911, 919, 920, 1031, 1032, 1058, 1059, 1060, 1061, 1062, 1063], "suggest": [18, 19, 119, 124], "latest": [18, 20, 21, 121, 152, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 371, 372, 375, 390, 393, 394, 397, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 577, 580, 587, 590, 591, 594, 751, 763, 765, 839, 853, 856, 873, 876, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984, 1042, 1051], "packag": [18, 21, 133, 152], "ensur": [18, 19, 120, 124, 128, 130, 133, 614, 658], "align": [18, 75, 76, 135, 137, 1020, 1026], "accord": [18, 21, 75, 76, 125, 130, 249, 270, 273, 284, 287, 371, 385, 388, 427, 430, 543, 546, 614, 642, 670, 671, 751, 814, 816, 839, 849, 852, 895, 898, 976, 997, 1000, 1005, 1008], "stabl": [18, 64, 65, 110, 111, 135, 152, 614, 649, 650, 672, 673, 680, 681, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975], "pypi": [18, 20, 152], "mayb": [18, 29, 32, 33, 135, 137], "person": [18, 19], "experi": [18, 136, 138, 152], "avoid": [18, 19, 124, 126, 127, 129, 133, 137, 321, 371, 465, 468], "pip": [18, 151, 1020], "instal": [18, 21, 133, 151, 1020], "abil": [18, 136, 152], "certain": [18, 75, 76, 124, 152, 178, 179, 180, 207, 208, 210, 211], "perhap": [18, 137, 138, 139, 152], "keep": [18, 19, 75, 76, 123, 124, 129, 136, 138, 140, 614, 693], "track": [18, 19, 321, 903, 915, 1054, 1055], "termin": [18, 19, 21, 75, 76, 77, 78, 79, 129, 135, 138], "run": [18, 21, 120, 123, 124, 126, 133, 135, 136, 137, 138, 139, 140, 151, 152, 321, 330, 695, 697, 700, 702, 704, 716, 718, 899, 900, 901, 902, 1042, 1053, 1054, 1055], "command": [18, 21, 1020], "ivy_dev": [18, 19, 21], "name": [18, 19, 21, 23, 26, 27, 72, 121, 124, 133, 135, 137, 138, 140, 175, 176, 614, 620, 751, 766, 768, 795, 797, 802, 804, 944, 945, 949, 950, 954], "3": [18, 21, 26, 27, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 54, 55, 77, 78, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 122, 124, 126, 129, 135, 137, 138, 139, 140, 163, 165, 166, 167, 168, 177, 178, 202, 205, 213, 216, 226, 229, 241, 243, 244, 248, 249, 270, 271, 272, 273, 274, 279, 282, 302, 305, 321, 340, 343, 359, 366, 371, 372, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 411, 414, 427, 430, 431, 434, 435, 437, 438, 439, 440, 442, 444, 447, 461, 464, 469, 470, 471, 472, 477, 480, 481, 484, 497, 500, 501, 504, 541, 542, 548, 551, 552, 555, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 594, 600, 601, 603, 604, 605, 606, 608, 609, 614, 615, 616, 617, 622, 623, 632, 639, 642, 643, 644, 645, 646, 647, 677, 679, 684, 690, 695, 697, 698, 699, 700, 701, 711, 714, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 765, 772, 774, 783, 785, 789, 791, 802, 804, 808, 810, 811, 813, 820, 822, 823, 824, 826, 827, 828, 829, 831, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 853, 856, 857, 860, 865, 868, 869, 872, 873, 875, 876, 877, 878, 879, 882, 887, 890, 903, 906, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 951, 953, 954, 965, 966, 969, 976, 977, 980, 981, 984, 1001, 1004, 1009, 1010, 1013, 1020], "8": [18, 21, 26, 27, 40, 41, 52, 53, 54, 55, 77, 78, 86, 87, 90, 91, 98, 99, 104, 105, 122, 124, 129, 134, 138, 163, 167, 178, 244, 248, 321, 343, 371, 385, 388, 389, 394, 397, 398, 411, 414, 435, 438, 444, 447, 481, 484, 501, 504, 541, 542, 568, 571, 572, 573, 574, 575, 576, 587, 590, 591, 594, 605, 609, 614, 623, 642, 695, 697, 700, 711, 713, 714, 715, 734, 741, 744, 751, 757, 759, 760, 762, 763, 765, 789, 791, 808, 810, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 836, 838, 839, 840, 841, 843, 857, 860, 865, 868, 878, 927, 928, 929, 930, 931, 939, 943, 944, 945, 949, 976, 977, 980, 1020, 1042, 1053], "activ": [18, 19, 21, 25, 70, 71, 74, 116, 117, 119, 139, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 1020, 1029, 1030], "setup": 18, "click": [18, 19, 121, 1020], "icon": [18, 19], "side": [18, 19], "choos": [18, 19, 140, 321, 366, 371, 529, 532, 533, 536, 939, 943, 944, 945, 949, 950, 954, 960, 964, 976, 981, 984, 985, 988, 989, 992], "left": [18, 19, 75, 76, 122, 130, 371, 419, 422, 751, 766, 768, 779, 781, 802, 804, 939, 940, 1020], "panel": 18, "select": [18, 19, 124, 135, 137, 140, 152], "drop": [18, 152], "down": [18, 124, 137], "path": [18, 21], "manual": [18, 19, 124, 139, 903, 904, 913, 914], "builtin": [18, 21, 137, 139], "requir": [18, 21, 119, 120, 121, 122, 124, 127, 128, 130, 131, 137, 152, 175, 176, 371, 587, 590, 751, 766, 768, 839, 883, 886, 1031, 1032], "cmd": [18, 21], "directori": [18, 19, 21, 124, 614, 676], "folder": [18, 19, 21, 119, 123, 124, 125], "file": [18, 19, 21, 75, 76, 119, 121, 124, 125, 126, 128, 129, 133, 135, 138, 614, 676, 1054, 1055], "abov": [18, 19, 21, 120, 121, 122, 124, 125, 126, 128, 129, 132, 133, 137, 138, 139, 140, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 302, 305, 371, 372, 375, 385, 388, 390, 393, 394, 397, 411, 414, 431, 434, 435, 438, 444, 447, 469, 472, 541, 543, 546, 552, 555, 568, 571, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 605, 609, 614, 642, 734, 737, 741, 744, 750, 751, 752, 755, 760, 762, 763, 765, 766, 768, 811, 813, 839, 853, 856, 857, 860, 873, 876, 921, 922, 925, 927, 929, 930, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984, 993, 996, 997, 1000, 1001, 1004, 1009, 1010, 1013], "m": [18, 19, 21, 118, 135, 178, 213, 216, 231, 235, 236, 240, 614, 623, 751, 752, 755, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 799, 801, 802, 804, 805, 807, 811, 813, 927, 932, 933, 935], "python3": [18, 21], "script": [18, 19, 21, 122, 135, 152], "bat": [18, 19, 21], "OR": [18, 19, 21, 371, 423, 426, 533, 536, 1009, 1015, 1018], "bin": [18, 19, 21], "mac": [18, 19, 21], "linux": [18, 19, 21], "virtualenv": 18, "found": [18, 19, 72, 75, 76, 77, 78, 79, 121, 128, 129, 133, 321, 355], "os": 18, "note": [18, 19, 119, 121, 122, 124, 129, 371, 564, 567, 751, 766, 768, 802, 804, 839, 883, 886, 944, 950, 954, 976, 985, 988], "tick": [18, 19], "abl": [18, 19, 75, 76, 125, 130, 132, 133, 137, 140], "To": [18, 122, 124, 125, 129, 133, 138, 139, 140, 1020], "ivy_test": [18, 19], "test_array_api": [18, 19, 123, 124], "cd": [18, 19, 21], "r": [18, 75, 76, 614, 623, 693, 751, 795, 797, 820, 822], "txt": 18, "visual": [18, 133, 152], "jetbrain": 18, "remot": 18, "mitig": 18, "potenti": [18, 134, 371, 465, 468], "conflict": [18, 19, 138], "addit": [18, 19, 75, 76, 119, 121, 124, 129, 130, 137, 138, 140, 321, 366, 371, 385, 388, 614, 636, 637, 638, 921, 922, 925, 1042, 1052], "yet": [18, 20, 129], "particular": [18, 19, 119, 124, 132, 371, 372, 375], "system": [18, 152, 751, 799, 801], "instruct": [18, 20], "desktop": 18, "wsl": 18, "powershel": 18, "admin": 18, "visit": 18, "link": 18, "imag": [18, 21, 47, 93, 119, 135, 136, 138, 140, 151, 734, 735, 736, 737, 738, 740, 741, 744, 1020], "profession": 18, "execut": [18, 21, 129, 132, 135, 137, 140, 152, 614, 691], "deploy": 18, "top": [18, 19, 124, 138, 139, 1020], "press": [18, 138, 1020], "ok": 18, "correctli": [18, 75, 76, 120, 124, 129, 130, 133, 139, 152, 751, 779, 781, 939, 940], "caus": [18, 19, 122, 124, 129, 132, 133, 152], "earlier": [18, 19], "might": [18, 19, 119, 124, 127, 135, 137, 138, 614, 635], "necessari": [18, 122, 126, 129, 132], "virtualis": 18, "detail": [18, 19, 20, 119, 120, 123, 124, 125, 126, 127, 129, 138, 139, 178, 196, 199, 944, 945, 949, 950, 954, 960, 964], "sudo": 18, "apt": 18, "ca": 18, "certif": 18, "curl": 18, "gnupg": 18, "lsb": 18, "mkdir": 18, "p": [18, 19, 75, 76, 88, 89, 178, 213, 216, 614, 626, 627, 628, 629, 734, 746, 751, 779, 781, 817, 819, 1042, 1050], "keyr": 18, "fssl": 18, "download": [18, 124], "gpg": 18, "dearmor": 18, "o": [18, 118, 135, 614, 623], "echo": 18, "deb": 18, "arch": 18, "dpkg": 18, "architectur": [18, 140, 152], "lsb_releas": 18, "cs": 18, "tee": 18, "list": [18, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 37, 70, 71, 72, 73, 74, 75, 76, 86, 87, 90, 91, 100, 101, 108, 109, 116, 117, 119, 120, 122, 124, 130, 131, 133, 135, 138, 139, 140, 152, 169, 171, 173, 178, 179, 180, 182, 185, 213, 214, 216, 218, 221, 249, 260, 261, 263, 321, 330, 331, 340, 342, 343, 346, 347, 350, 351, 365, 385, 387, 389, 600, 601, 603, 614, 623, 679, 684, 693, 695, 697, 699, 701, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 751, 808, 810, 839, 845, 848, 857, 860, 873, 875, 877, 878, 883, 886, 903, 904, 905, 906, 909, 914, 915, 921, 922, 925, 939, 942, 944, 950, 951, 953, 954, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "dev": [18, 26, 27, 75, 76, 77, 79, 125, 131, 135, 137, 139, 321, 330, 355], "null": 18, "ce": 18, "cli": 18, "containerd": 18, "io": 18, "compos": [18, 124, 129, 152], "plugin": 18, "systemctl": 18, "permiss": 18, "relat": [18, 19, 124, 133, 151, 321], "post": [18, 140, 921, 922, 925, 1020, 1026], "It": [18, 19, 21, 23, 24, 25, 40, 41, 54, 55, 72, 73, 74, 86, 87, 100, 101, 118, 119, 121, 122, 124, 126, 128, 129, 132, 135, 137, 138, 139, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 265, 268, 321, 366, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 626, 627, 629, 632, 636, 637, 638, 640, 643, 646, 654, 667, 670, 671, 695, 729, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 938, 939, 940, 943, 944, 960, 964, 965, 966, 969, 971, 974, 1009, 1010, 1013, 1015, 1018], "headach": 18, "arm": [18, 19], "m1": 18, "instead": [18, 19, 20, 120, 121, 122, 124, 125, 129, 132, 135, 137, 138, 152], "featur": [18, 119, 120, 138, 1020], "vm": 18, "azur": 18, "cloud": [18, 151], "mean": [18, 19, 66, 67, 75, 76, 112, 113, 116, 117, 118, 122, 124, 125, 129, 130, 131, 132, 135, 137, 138, 139, 140, 151, 152, 321, 350, 351, 352, 353, 365, 614, 637, 899, 900, 901, 902, 903, 909, 927, 932, 944, 945, 949, 976, 1020, 1033], "configur": [18, 19, 21, 75, 76, 130, 321, 364, 903, 916], "defin": [18, 20, 119, 120, 121, 124, 130, 137, 139, 152, 371, 543, 546, 564, 567, 614, 667, 751, 757, 759, 766, 768, 799, 801, 927, 929, 930, 976, 981, 984, 985, 988, 989, 992], "dockerfil": [18, 21], "longer": [18, 124, 130, 132], "worri": 18, "platform": 18, "agnost": [18, 120, 128, 135, 137, 140, 152, 1020], "usual": [18, 124], "studio": 18, "favourit": 18, "extens": [18, 19, 121, 124, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 371, 372, 375, 385, 388, 390, 393, 394, 397, 411, 414, 431, 434, 435, 438, 444, 447, 469, 472, 501, 504, 541, 552, 555, 568, 571, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 605, 609, 751, 760, 762, 763, 765, 839, 853, 856, 857, 860, 873, 876, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984, 1009, 1010, 1013], "theme": 18, "too": [18, 19, 133, 152, 371, 385, 388, 543, 546], "done": [18, 19, 122, 124, 133, 138], "unsupport": [18, 130, 133, 249, 290], "old": [18, 75, 76, 132], "slow": 18, "ipad": 18, "long": [18, 19, 122, 734, 748], "browser": 18, "cool": [18, 119], "requisit": 18, "head": [18, 129, 734, 749, 1020, 1042, 1053], "pane": [18, 19], "readi": [18, 20], "begin": [18, 903, 904, 914], "outlin": [18, 19, 20, 118, 121, 124, 125, 129, 132, 137], "green": [18, 19, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 1067, 1068], "dropdown": 18, "tab": [18, 138, 1020], "master": [18, 19, 129], "vs": [18, 124], "view": [18, 19, 72, 178, 196, 199, 734, 737, 741, 744], "log": [18, 19, 40, 41, 86, 87, 125, 129, 132, 135, 138, 178, 210, 211, 371, 513, 516, 521, 524, 751, 798, 1020], "built": [18, 124, 136, 178, 179, 180, 321, 1042, 1053, 1054, 1055], "bottom": 18, "box": 18, "patient": 18, "upto": 18, "15": [18, 40, 41, 104, 105, 122, 124, 371, 411, 414, 568, 571, 572, 573, 734, 737, 751, 763, 765, 789, 791, 808, 810, 839, 873, 876, 927, 929, 930, 931, 939, 942, 944, 945, 949, 976, 977, 980], "minut": 18, "launch": 18, "12": [18, 86, 87, 102, 103, 104, 105, 122, 124, 129, 371, 411, 414, 431, 434, 444, 447, 568, 571, 582, 584, 586, 614, 632, 650, 695, 697, 700, 751, 763, 765, 789, 791, 808, 810, 839, 857, 860, 865, 868, 873, 876, 921, 922, 924, 925, 926, 927, 929, 930, 931, 939, 943, 944, 945, 949, 976, 977, 980], "output": [18, 24, 25, 40, 41, 54, 55, 73, 74, 75, 76, 86, 87, 100, 101, 118, 119, 120, 121, 122, 124, 125, 128, 129, 131, 132, 135, 137, 139, 140, 152, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 265, 268, 321, 330, 331, 365, 366, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 625, 626, 627, 629, 632, 633, 636, 637, 638, 640, 642, 643, 646, 654, 667, 670, 671, 695, 706, 729, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 748, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 903, 916, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 938, 939, 943, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053], "That": [18, 19, 124, 137, 138, 139, 371, 564, 567], "alreadi": [18, 19, 75, 76, 120, 126, 129, 137, 152, 321, 371, 435, 438, 469, 472, 543, 546, 568, 571, 610, 613, 751, 789, 791, 1020], "refer": [18, 19, 120, 124, 125, 130, 152, 178, 193, 194, 371, 465, 468, 513, 516, 695, 697, 700, 702, 704, 751, 814, 816, 820, 822, 976, 997, 1000, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1042, 1052], "approach": [18, 19, 124, 125, 129, 137, 138, 152], "colour": 18, "applic": [18, 130, 131, 139, 734, 749, 750, 903, 909, 915], "good": [18, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 139], "chanc": 18, "vscode": 18, "show": [18, 19, 75, 76, 122, 124, 132, 151, 152, 1020], "explor": [18, 136, 140, 151], "troubleshoot": 18, "sometim": [18, 19, 124], "ever": [18, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "64": [18, 48, 49, 94, 95, 124, 138, 139, 371, 587, 590, 591, 594, 734, 740, 741, 742, 743, 744, 745, 751, 789, 791, 976, 977, 980, 1020, 1042, 1053], "bit": [18, 122, 124, 125, 129, 137, 249, 283, 284, 287, 291, 294, 371, 415, 418, 419, 422, 427, 430, 976, 993, 996, 1001, 1004], "usr": 18, "more": [18, 19, 20, 26, 27, 118, 119, 120, 122, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 151, 152, 178, 179, 180, 249, 260, 263, 371, 465, 468, 751, 775, 778, 839, 857, 860, 944, 945, 949, 950, 954, 960, 964, 1020], "nutshel": [18, 120], "hook": 18, "lint": 18, "accept": [18, 19, 29, 120, 121, 122, 124, 125, 128, 129, 131, 132, 137, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 302, 305, 371, 372, 375, 385, 388, 390, 393, 394, 397, 411, 414, 431, 434, 435, 438, 444, 447, 469, 472, 529, 532, 533, 536, 541, 552, 555, 564, 567, 568, 571, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 605, 609, 614, 642, 734, 737, 741, 744, 750, 751, 752, 755, 760, 762, 763, 765, 839, 853, 856, 857, 860, 873, 876, 921, 922, 925, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984, 985, 988, 1009, 1010, 1013, 1020], "fix": [18, 19], "fail": [18, 20, 123, 124, 133, 135, 137], "attempt": [18, 133, 152], "succe": 18, "problemat": 18, "appli": [18, 19, 20, 24, 25, 26, 27, 29, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 73, 74, 75, 76, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 120, 121, 122, 124, 125, 127, 129, 130, 131, 132, 135, 137, 138, 139, 140, 150, 152, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 182, 183, 188, 189, 196, 197, 202, 203, 218, 219, 226, 227, 231, 233, 236, 238, 244, 246, 249, 270, 271, 272, 274, 308, 311, 372, 373, 374, 376, 385, 386, 387, 389, 394, 395, 396, 398, 435, 436, 437, 439, 440, 441, 443, 469, 470, 471, 572, 573, 574, 576, 577, 578, 579, 581, 582, 583, 584, 586, 600, 601, 602, 603, 605, 606, 607, 608, 614, 615, 616, 617, 619, 636, 637, 638, 643, 644, 645, 647, 685, 686, 687, 688, 695, 697, 698, 699, 701, 711, 712, 713, 715, 716, 718, 720, 722, 734, 741, 742, 743, 745, 747, 749, 750, 751, 752, 753, 754, 756, 783, 785, 792, 794, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 873, 874, 875, 877, 883, 886, 899, 900, 901, 903, 909, 912, 915, 916, 921, 922, 923, 924, 925, 926, 929, 931, 950, 951, 952, 953, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1028, 1029, 1030, 1056, 1057], "proce": [18, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "modifi": [18, 19, 121, 125, 130, 131, 133, 135], "properli": [18, 118], "enter": [18, 19, 120, 128, 130, 131, 321, 695, 733], "unsur": [18, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "feel": [18, 19, 20, 21, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 1020], "server": [19, 1020], "appropri": [19, 70, 71, 116, 117, 124, 127, 371, 385, 388, 543, 546, 939, 940], "context": [19, 122, 124, 129, 130, 131, 321, 614, 665, 734, 749, 1042, 1053], "suitabl": [19, 119, 129], "quick": [19, 118, 139], "alwai": [19, 20, 75, 76, 119, 120, 121, 124, 125, 126, 128, 129, 132, 133, 135, 137, 152, 249, 255, 258, 371, 385, 388, 543, 546, 614, 658, 695, 711, 714, 729], "correct": [19, 20, 66, 67, 112, 113, 118, 120, 125, 129, 130, 131, 133, 249, 316, 839, 840, 843, 976, 997, 998, 999, 1000, 1005, 1006, 1007, 1008, 1020], "tendenc": 19, "gener": [19, 20, 21, 43, 70, 71, 75, 76, 89, 116, 117, 118, 119, 120, 121, 122, 125, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 151, 152, 175, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 371, 372, 375, 390, 393, 394, 397, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 564, 567, 577, 580, 587, 590, 591, 594, 615, 618, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 711, 714, 751, 763, 765, 839, 853, 856, 873, 876, 927, 928, 929, 930, 933, 935, 937, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984, 1020, 1058, 1062], "land": 19, "end": [19, 129, 132, 134, 151, 152, 178, 179, 180, 371, 403, 406, 1020, 1026], "world": 19, "come": [19, 20, 124, 139, 150, 1020, 1026], "fly": 19, "hard": [19, 137], "receiv": [19, 124, 130, 131, 321, 330, 331, 614, 621, 664, 1042, 1052], "respons": [19, 21], "internship": 19, "comment": [19, 133], "trigger": 19, "unansw": 19, "label": [19, 135, 136, 140, 823, 824, 827, 829, 832, 834, 837], "respond": 19, "remov": [19, 20, 21, 72, 75, 76, 121, 124, 125, 130, 132, 140, 751, 763, 765, 775, 778, 811, 813, 839, 879, 882, 899, 900, 901], "someon": [19, 152], "els": [19, 20, 72, 119, 125, 126, 132, 135, 137, 139, 140, 152, 614, 624, 635, 639, 903, 913], "strive": [19, 124, 152], "repli": 19, "newli": [19, 124, 132, 175, 176, 249, 255, 258, 614, 625], "place": [19, 54, 55, 75, 76, 100, 101, 118, 119, 120, 121, 122, 124, 125, 129, 131, 133, 140, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 302, 305, 321, 366, 371, 372, 375, 385, 388, 390, 393, 394, 397, 411, 414, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 568, 571, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 605, 609, 614, 642, 656, 657, 658, 734, 737, 741, 744, 750, 751, 752, 755, 760, 762, 763, 765, 839, 853, 856, 857, 860, 873, 874, 875, 876, 877, 921, 922, 925, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984, 1009, 1010, 1013, 1058, 1059, 1060, 1061, 1062, 1063], "bug": [19, 124], "serv": [19, 120, 124, 125, 128, 129, 134, 1020], "suspect": 19, "behaviour": [19, 120, 121, 124, 128, 129, 132, 137], "observ": 19, "confid": 19, "noth": [19, 23, 72, 75, 76], "wrong": 19, "someth": [19, 119, 138, 139, 152], "bet": 19, "act": [19, 122, 152], "placehold": [19, 120, 128, 133, 903, 915], "sub": [19, 20, 75, 76, 118, 124, 129, 137, 138, 139, 321, 346, 347, 350, 351, 352, 353, 751, 763, 765, 839, 878, 899, 900, 901, 902, 1020], "mark": [19, 124], "ii": [19, 976, 977, 980], "iii": 19, "titl": [19, 1020], "issue_numb": 19, "delet": [19, 21, 72], "No": [19, 135], "wait": [19, 75, 76, 77, 78, 79], "progress": [19, 129, 136, 140], "pr": 19, "soon": [19, 129, 150, 152, 1020, 1026], "partial": [19, 75, 76, 1054, 1055], "solut": [19, 124, 129, 751, 799, 801], "review": [19, 119], "merg": 19, "everi": [19, 20, 21, 120, 122, 123, 124, 125, 126, 127, 129, 132, 135, 137, 139, 178, 201, 202, 205, 614, 615, 618], "shape": [19, 24, 25, 26, 27, 36, 37, 40, 41, 48, 49, 54, 55, 73, 74, 75, 76, 80, 81, 82, 83, 86, 87, 90, 91, 94, 95, 100, 101, 104, 105, 108, 109, 119, 120, 121, 122, 124, 130, 131, 132, 135, 137, 138, 139, 140, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 225, 226, 229, 231, 235, 236, 240, 241, 242, 243, 244, 248, 249, 255, 258, 260, 263, 265, 266, 267, 268, 269, 321, 333, 361, 366, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 626, 627, 629, 632, 636, 637, 638, 640, 643, 646, 651, 654, 667, 670, 671, 675, 679, 692, 695, 697, 699, 701, 729, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 921, 922, 925, 927, 928, 929, 930, 931, 932, 933, 935, 936, 938, 939, 940, 942, 943, 951, 953, 965, 966, 969, 971, 974, 976, 977, 980, 1009, 1010, 1013, 1015, 1018, 1020, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1056, 1057], "move": [19, 75, 76, 119, 321, 366], "within": [19, 29, 32, 33, 124, 139, 152, 178, 179, 180, 927, 933, 935], "7": [19, 21, 26, 27, 40, 41, 44, 45, 52, 53, 54, 55, 77, 78, 86, 87, 98, 99, 102, 103, 104, 105, 122, 124, 125, 129, 132, 163, 165, 166, 321, 343, 371, 372, 375, 385, 386, 387, 388, 389, 394, 396, 411, 414, 415, 418, 431, 434, 435, 438, 444, 447, 461, 464, 469, 472, 481, 484, 501, 504, 541, 542, 568, 571, 572, 573, 574, 575, 577, 580, 582, 585, 587, 590, 600, 604, 605, 609, 614, 623, 632, 642, 695, 697, 700, 702, 704, 711, 712, 714, 716, 718, 734, 740, 741, 744, 750, 751, 757, 759, 760, 762, 763, 765, 789, 791, 808, 810, 823, 824, 825, 827, 828, 829, 832, 834, 835, 837, 838, 839, 840, 841, 843, 853, 856, 857, 860, 865, 868, 878, 887, 890, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 939, 943, 944, 945, 949, 976, 977, 980], "dai": 19, "close": [19, 121, 371, 465, 468, 568, 571, 751, 802, 804], "likewis": [19, 120, 121, 125, 129, 130, 138], "freed": 19, "flag": [19, 75, 76, 132, 137, 321, 340, 695, 711, 714], "purpos": [19, 21, 120, 122, 124, 125, 127, 128, 129, 134, 137, 371, 465, 468, 1020], "remain": [19, 122, 152, 371, 385, 388, 543, 546, 564, 567, 839, 869, 872, 903, 909], "access": [19, 21, 75, 76, 130], "short": [19, 139, 734, 748], "basi": [19, 123, 138], "situat": [19, 140], "alloc": [19, 152, 178, 231, 235, 236, 240, 249, 255, 258, 321], "upon": [19, 122, 124, 132, 152], "period": 19, "prevent": [19, 132, 133, 137, 695, 697, 700, 702, 704, 716, 718, 976, 1001, 1004, 1058, 1059, 1060], "unabl": 19, "obvious": 19, "never": [19, 124, 129], "reflect": [19, 128], "qualiti": 19, "hypothet": 19, "frustrat": 19, "delai": 19, "busi": 19, "fine": [19, 137, 140], "becaus": [19, 120, 121, 124, 125, 126, 128, 130, 131, 132, 135, 139, 140, 152], "inact": 19, "limit": [19, 75, 76, 77, 78, 79, 122, 124, 133, 135, 138, 140, 152, 249, 284, 287, 291, 294, 614, 626, 627, 629, 839, 840, 843], "me": 19, "unfairli": 19, "definit": [19, 125, 130, 137, 751, 752, 755, 757, 759], "investig": 19, "Then": [19, 21, 137, 152], "practic": 19, "separ": [19, 124, 128, 133, 135, 137, 138], "branch": [19, 129, 152, 175, 176, 371, 403, 406], "simpli": [19, 24, 25, 26, 27, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 73, 74, 75, 76, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 120, 121, 122, 124, 125, 128, 129, 131, 132, 135, 139, 140, 169, 170, 171, 173, 182, 183, 188, 189, 196, 197, 202, 203, 218, 219, 226, 227, 231, 233, 236, 238, 244, 246, 270, 271, 272, 274, 371, 372, 373, 374, 376, 385, 386, 387, 389, 394, 395, 396, 398, 435, 436, 437, 439, 440, 441, 443, 465, 468, 469, 470, 471, 572, 573, 574, 576, 577, 578, 579, 581, 582, 583, 584, 586, 600, 601, 602, 603, 605, 606, 607, 608, 615, 616, 617, 619, 643, 644, 645, 647, 685, 686, 687, 688, 697, 698, 699, 701, 711, 712, 713, 715, 741, 742, 743, 745, 752, 753, 754, 756, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 840, 841, 842, 844, 873, 874, 875, 877, 922, 923, 924, 926, 929, 931, 950, 951, 952, 953, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019], "role": [19, 136], "kept": [19, 75, 76, 77, 78, 79, 132, 899, 900, 901], "date": 19, "upstream": [19, 123], "complic": [19, 135], "root": [19, 21, 138, 371, 587, 590, 927, 928, 932], "merge_with_upstream": 19, "sh": 19, "name_of_your_branch": 19, "resolv": [19, 976, 993, 996, 1001, 1004], "clone": [19, 21, 75, 76, 321, 342, 343, 344, 345], "push": [19, 123, 133], "both": [19, 120, 121, 122, 124, 125, 129, 131, 132, 135, 137, 138, 139, 140, 151, 152, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 302, 305, 307, 371, 372, 375, 385, 388, 390, 393, 394, 397, 435, 438, 469, 472, 541, 552, 555, 560, 563, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 614, 642, 695, 697, 700, 734, 737, 741, 744, 750, 751, 752, 755, 757, 759, 763, 765, 775, 778, 814, 816, 839, 873, 876, 921, 922, 925, 944, 950, 954, 976, 981, 984, 1009, 1010, 1013], "abort": 19, "tediou": 19, "resolut": 19, "stash": 19, "reinstat": 19, "correspond": [19, 54, 55, 72, 75, 76, 77, 78, 100, 101, 120, 121, 122, 123, 124, 125, 128, 129, 130, 249, 260, 263, 371, 403, 406, 560, 563, 751, 757, 759, 766, 768, 799, 801, 839, 845, 848, 873, 874, 875, 876, 877, 927, 928, 939, 940, 941, 944, 945, 949, 950, 954, 960, 964, 976, 993, 996, 997, 1000, 1001, 1004, 1005, 1008], "fetch": 19, "uncommit": 19, "unstag": 19, "untrack": 19, "comprehens": 19, "explan": [19, 120, 121, 129, 137], "atlassian": 19, "tutori": 19, "wrote": 19, "piec": [19, 125, 127, 128, 135], "inform": [19, 124, 133, 249, 284, 287, 291, 294, 614, 620, 695, 729], "tag": 19, "usu": 19, "describ": [19, 124, 136, 140, 976, 977, 980, 993, 996, 997, 1000, 1001, 1004], "navig": [19, 118], "blame": 19, "revis": 19, "author": [19, 1020], "eg": [19, 124], "16": [19, 50, 51, 86, 87, 104, 105, 122, 124, 138, 371, 600, 601, 603, 604, 734, 740, 741, 744, 751, 752, 753, 755, 763, 765, 789, 791, 929, 931, 939, 943, 976, 977, 980], "5": [19, 21, 26, 27, 40, 41, 42, 43, 50, 51, 54, 55, 56, 57, 77, 78, 82, 83, 86, 87, 88, 89, 90, 91, 100, 101, 102, 103, 104, 105, 120, 122, 124, 126, 137, 138, 139, 163, 165, 166, 168, 178, 202, 205, 213, 216, 226, 229, 241, 243, 244, 248, 249, 270, 272, 273, 274, 279, 282, 302, 305, 321, 343, 359, 371, 372, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 394, 396, 397, 398, 407, 410, 411, 414, 427, 430, 431, 434, 435, 436, 437, 438, 444, 447, 469, 470, 471, 472, 481, 484, 501, 504, 541, 542, 548, 551, 552, 555, 568, 571, 572, 573, 574, 575, 577, 579, 580, 581, 587, 590, 591, 594, 600, 601, 603, 604, 605, 606, 608, 609, 614, 615, 616, 623, 632, 642, 643, 646, 647, 679, 684, 695, 697, 699, 700, 701, 711, 714, 734, 737, 739, 740, 741, 744, 750, 751, 752, 753, 755, 757, 759, 760, 762, 763, 765, 772, 774, 789, 791, 808, 810, 811, 813, 823, 834, 837, 839, 840, 841, 842, 843, 844, 845, 848, 853, 856, 857, 860, 865, 868, 869, 872, 873, 875, 876, 877, 878, 887, 890, 903, 906, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 938, 939, 941, 942, 943, 944, 945, 949, 950, 954, 965, 966, 969, 976, 977, 980, 981, 984, 1009, 1010, 1013, 1042, 1053], "past": 19, "l": [19, 118, 751, 752, 755, 766, 768, 775, 778, 811, 813], "filepath": [19, 75, 76], "grep": 19, "v": [19, 72, 135, 138, 139, 140, 734, 750, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1062, 1064, 1065], "commit_id": 19, "handi": [19, 124], "histori": 19, "toggl": 19, "vertic": 19, "highlight": [19, 122], "previou": [19, 120, 124, 140, 152, 614, 692, 695, 702, 704, 716, 718], "shown": [19, 70, 71, 75, 76, 116, 117, 120, 122, 124, 133, 135, 137, 152, 371, 411, 414, 431, 434, 444, 447, 568, 571, 605, 609, 751, 760, 762, 839, 853, 856, 857, 860, 944, 945, 949, 965, 966, 969], "whenev": [19, 124, 137, 138], "think": [19, 122], "interact": [19, 124, 1020], "gain": [19, 134, 139, 1033], "quit": [19, 20, 121, 124, 125, 127, 128], "repeat": [19, 54, 55, 75, 76, 100, 101, 121, 122, 124, 126, 128, 129, 133, 614, 638, 839, 891, 894], "yourself": [19, 20, 124, 151], "simpler": [19, 137], "cannot": [19, 126, 130, 140], "least": [19, 122, 124, 125, 128, 751, 775, 778], "final": [19, 121, 122, 125, 128, 130, 132, 133, 135, 137, 138, 178, 207, 208, 210, 211, 614, 641, 1042, 1053], "tickbox": 19, "lower": [19, 75, 76, 122, 124, 135, 152, 178, 193, 194, 231, 235, 371, 541, 751, 752, 755, 927, 933, 935], "corner": 19, "without": [19, 75, 76, 119, 120, 125, 128, 129, 131, 133, 135, 137, 138, 139, 151, 152, 614, 669, 674, 839, 869, 872, 903, 905, 944, 945, 949, 950, 954, 960, 964], "span": 19, "intent": [19, 132], "larg": [19, 138, 371, 385, 388, 543, 546], "discourag": 19, "philosophi": 19, "increment": [19, 614, 657], "frequent": [19, 20], "valuabl": 19, "infrequ": 19, "earli": [19, 23, 72, 1020], "wast": 19, "spot": [19, 125], "mistak": [19, 133], "propos": 19, "mountain": 19, "around": [19, 75, 76, 77, 78, 79, 120, 125, 128, 137, 152], "advoc": [19, 152], "individu": [19, 20, 125], "per": [19, 124, 138, 321, 734, 735, 736, 737, 738, 739, 740, 741, 744, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "style": [19, 939, 942], "ve": [19, 134, 137, 927, 928, 1020], "were": [19, 75, 76, 119, 124, 129, 133], "actual": [19, 118, 125, 132, 134, 137, 139, 152], "aim": [19, 134], "part": [19, 119, 123, 124, 125, 135, 136, 140, 151, 152, 178, 231, 235, 236, 240, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 1054, 1055], "subsect": 19, "session": [19, 1020], "block": [19, 124, 125, 133, 134, 136, 140, 152, 321, 695, 733, 1020], "smaller": [19, 54, 55, 100, 101, 135, 140, 839, 840, 843, 873, 874, 875, 876, 877, 976, 993, 996, 1001, 1004], "edit": 19, "exact": [19, 75, 76, 135, 944, 945, 949], "beauti": 19, "particularli": [19, 138, 152], "concern": [19, 118, 122, 129, 132, 134], "effici": [19, 120, 124, 125, 129, 132, 133, 135, 138, 152], "difficult": [19, 124, 152, 944, 945, 949, 950, 954, 960, 964], "undo": 19, "stress": 19, "frequenc": [19, 614, 641], "pycharm": 19, "pytest": [19, 124], "button": 19, "declar": 19, "insid": [19, 21, 119, 124, 130], "exec": 19, "rm": 19, "rf": 19, "cp": 19, "ivy_contain": 19, "bash": [19, 21], "test_ivi": [19, 124], "test_funct": [19, 124], "test_cor": 19, "test_imag": 19, "test_random_crop": 19, "header": 19, "summari": [19, 75, 76, 82, 83, 124, 249, 276, 277, 278, 313, 314, 315, 321, 334, 335, 614, 630, 634, 652, 695, 728], "q": [19, 152, 734, 750, 751, 766, 768, 795, 797], "array_api_test": 19, "test_creation_funct": 19, "test_arang": 19, "window": [19, 21, 734, 735, 736, 737, 738, 739, 740, 741, 744, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "variou": [19, 120, 121, 127, 151], "valu": [19, 23, 26, 27, 54, 55, 62, 63, 72, 75, 76, 77, 78, 79, 100, 101, 120, 121, 122, 124, 125, 129, 130, 131, 132, 133, 135, 137, 140, 152, 178, 179, 180, 193, 194, 201, 202, 205, 207, 208, 210, 211, 249, 255, 258, 276, 277, 278, 321, 333, 364, 365, 371, 372, 375, 377, 380, 385, 388, 390, 393, 399, 402, 435, 438, 453, 456, 457, 460, 469, 472, 473, 476, 477, 480, 481, 484, 497, 500, 501, 504, 541, 542, 543, 546, 552, 555, 556, 559, 560, 563, 568, 571, 605, 609, 610, 613, 614, 626, 627, 629, 630, 635, 641, 642, 643, 646, 652, 655, 659, 669, 670, 671, 672, 673, 674, 694, 695, 697, 700, 702, 704, 706, 716, 718, 729, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 748, 749, 750, 751, 783, 785, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 817, 819, 839, 840, 843, 849, 850, 851, 852, 865, 868, 869, 872, 895, 897, 898, 899, 900, 901, 903, 907, 908, 909, 910, 911, 916, 919, 920, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 937, 939, 940, 941, 943, 944, 945, 949, 950, 952, 954, 955, 959, 960, 964, 965, 966, 969, 971, 974, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062], "cpu": [19, 75, 76, 131, 152, 178, 207, 208, 210, 211, 244, 248, 321, 340, 341, 343, 357, 360, 362, 366, 367, 369, 370, 614, 642, 643, 646, 667, 670, 671, 927, 928, 929, 930, 932, 933, 935, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1065], "gpu": [19, 104, 105, 131, 137, 152, 321, 340, 343, 356, 358, 362, 364, 369, 929, 931], "combin": [19, 75, 76, 77, 78, 79, 122, 124, 125, 128, 129, 140, 751, 757, 759], "wherebi": [20, 129, 903, 915], "broad": 20, "distribut": [20, 75, 76, 124, 131, 152, 321, 342, 346, 347, 348, 349, 734, 746, 823, 824, 827, 829, 832, 834, 837, 927, 928, 929, 930, 932, 933, 935, 1042, 1050, 1054, 1055], "across": [20, 75, 76, 120, 122, 124, 125, 129, 130, 321, 330, 331, 342, 343, 345, 346, 347, 348, 349, 353, 363, 364, 614, 622, 623, 903, 909, 939, 941], "todo": 20, "commit": [20, 124], "NOT": [20, 371, 529, 532], "static": [20, 73, 74, 75, 76, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 114, 115, 116, 117, 121, 122, 125, 152, 169, 173, 175, 176, 270, 274, 372, 376, 385, 389, 394, 398, 439, 443, 572, 576, 577, 581, 600, 601, 605, 606, 615, 619, 643, 647, 685, 686, 741, 745, 752, 756, 824, 828, 829, 833, 834, 838, 840, 844, 873, 877, 922, 926, 929, 931, 950, 951, 1010, 1014, 1015, 1019], "method": [20, 23, 24, 25, 26, 27, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 128, 133, 135, 136, 139, 140, 152, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 182, 183, 188, 189, 196, 197, 199, 202, 203, 218, 219, 226, 227, 231, 233, 236, 238, 244, 246, 248, 249, 270, 271, 272, 274, 279, 282, 371, 372, 373, 374, 376, 385, 386, 387, 389, 390, 393, 394, 395, 396, 398, 411, 414, 431, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 447, 469, 470, 471, 472, 481, 484, 501, 504, 542, 548, 551, 552, 555, 568, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 590, 591, 594, 600, 601, 602, 603, 605, 606, 607, 608, 609, 614, 615, 616, 617, 619, 630, 631, 642, 643, 644, 645, 647, 670, 671, 684, 685, 686, 687, 688, 689, 690, 695, 697, 698, 699, 701, 711, 712, 713, 715, 716, 718, 720, 722, 733, 734, 740, 741, 742, 743, 745, 750, 751, 752, 753, 754, 756, 757, 759, 760, 762, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 853, 856, 857, 860, 865, 868, 873, 874, 875, 877, 878, 887, 890, 903, 904, 914, 915, 916, 922, 923, 924, 926, 927, 929, 931, 932, 933, 935, 939, 940, 941, 942, 943, 944, 945, 949, 950, 951, 952, 953, 954, 965, 966, 969, 976, 977, 980, 981, 984, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1042, 1053, 1054, 1055], "instanc": [20, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 114, 115, 116, 117, 120, 121, 122, 124, 125, 128, 130, 132, 138, 139, 140, 153, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 178, 179, 180, 182, 183, 185, 187, 188, 189, 191, 193, 194, 196, 197, 199, 201, 202, 203, 205, 207, 208, 210, 211, 213, 216, 218, 219, 223, 224, 226, 227, 229, 231, 233, 235, 236, 238, 240, 241, 243, 244, 246, 248, 249, 270, 271, 272, 273, 279, 282, 302, 305, 321, 330, 362, 371, 372, 373, 374, 375, 385, 386, 387, 388, 390, 393, 394, 395, 396, 397, 411, 414, 431, 434, 435, 436, 437, 438, 439, 440, 441, 444, 447, 469, 470, 471, 472, 481, 484, 501, 504, 541, 542, 548, 551, 552, 555, 568, 571, 572, 573, 574, 575, 577, 578, 579, 580, 582, 583, 584, 586, 587, 590, 591, 594, 600, 602, 603, 604, 605, 607, 608, 609, 614, 615, 616, 617, 631, 642, 643, 644, 645, 658, 675, 684, 685, 687, 688, 689, 690, 697, 698, 699, 701, 711, 712, 713, 715, 734, 737, 740, 741, 742, 743, 744, 750, 751, 752, 753, 754, 755, 757, 759, 760, 762, 763, 765, 823, 824, 825, 826, 827, 829, 830, 831, 834, 835, 836, 839, 840, 841, 842, 853, 856, 857, 860, 865, 868, 873, 874, 875, 876, 878, 887, 890, 921, 922, 923, 924, 925, 927, 932, 933, 935, 939, 940, 941, 942, 943, 944, 945, 949, 950, 952, 953, 954, 965, 966, 969, 976, 977, 980, 981, 984, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1031, 1032], "revers": [20, 26, 27, 72, 77, 78, 121, 122, 140, 152, 614, 635, 839, 857, 860], "resourc": 20, "content": [20, 21, 75, 76, 132, 135, 138], "thei": [20, 75, 76, 118, 119, 122, 124, 125, 127, 129, 130, 131, 132, 133, 137, 138, 139, 140, 152, 249, 307, 899, 900, 901, 927, 928, 1020, 1064, 1065], "hypothesi": 20, "cover": [20, 121, 122, 124, 125, 127, 134], "lambda": [20, 135, 138, 1058, 1061, 1063], "direct": [20, 139, 140, 151, 965, 971, 974], "bind": [20, 129], "special": [20, 26, 27, 77, 78, 119, 120, 121, 122, 128, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 399, 402, 403, 406, 431, 434, 435, 438, 439, 442, 444, 447, 461, 464, 465, 468, 469, 472, 505, 508, 509, 512, 517, 520, 521, 524, 543, 546, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 600, 604, 605, 609, 610, 613, 976, 981, 984, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1008], "aforement": 20, "categori": [20, 119, 128, 129, 130, 134, 1020], "parent": [20, 137, 695, 733], "arraywithelementwis": [20, 26, 27, 40, 128], "containerwithmanipul": [20, 77, 78, 100], "hint": [20, 119, 120, 121, 125, 128, 132, 133, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 302, 305, 371, 372, 375, 385, 388, 390, 393, 394, 397, 411, 414, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 568, 571, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 605, 609, 614, 642, 734, 737, 741, 744, 750, 751, 752, 755, 760, 762, 763, 765, 839, 853, 856, 857, 860, 873, 876, 921, 922, 925, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984, 1009, 1010, 1013], "its": [20, 21, 54, 55, 100, 101, 121, 124, 133, 249, 260, 263, 321, 365, 751, 775, 778, 839, 853, 856, 869, 872, 873, 874, 875, 876, 877, 887, 890], "docstr": [20, 21, 24, 25, 26, 27, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 73, 74, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 118, 119, 120, 125, 129, 133, 169, 170, 171, 173, 178, 179, 180, 182, 183, 185, 187, 188, 189, 191, 193, 194, 196, 197, 199, 201, 202, 203, 205, 207, 208, 213, 216, 218, 219, 223, 224, 226, 227, 229, 231, 233, 235, 236, 238, 240, 241, 243, 244, 246, 248, 249, 270, 271, 272, 273, 274, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 411, 414, 431, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 447, 469, 470, 471, 472, 501, 504, 541, 552, 555, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 590, 591, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 615, 616, 617, 619, 643, 644, 645, 647, 685, 686, 687, 688, 697, 698, 699, 701, 711, 712, 713, 715, 741, 742, 743, 745, 751, 752, 753, 754, 756, 760, 762, 763, 765, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 853, 856, 857, 860, 873, 874, 875, 876, 877, 922, 923, 924, 926, 929, 931, 944, 945, 949, 950, 951, 952, 953, 954, 965, 966, 969, 976, 981, 984, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019], "thorough": [20, 120, 121, 124], "transpil": [20, 134, 136, 1020, 1026], "builder": [21, 150, 152, 1020], "maco": 21, "ubuntu": 21, "uid": 21, "make_docs_without_dock": 21, "rel": [21, 54, 55, 100, 101, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 751, 763, 765, 783, 785, 792, 794, 811, 813, 839, 857, 860, 873, 874, 875, 876, 877, 965, 966, 969, 971, 974, 1020], "synchron": 21, "rest": [21, 136, 140], "remove_doc": 21, "_": [21, 121, 124, 129, 132, 137, 138, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 371, 372, 375, 390, 393, 394, 397, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 577, 580, 587, 590, 591, 594, 695, 697, 700, 702, 704, 751, 763, 765, 820, 822, 839, 853, 856, 873, 876, 944, 945, 949, 965, 966, 969, 976, 981, 984], "indic": [21, 42, 43, 54, 55, 75, 76, 88, 89, 100, 101, 133, 136, 140, 163, 168, 371, 572, 575, 614, 642, 643, 644, 645, 646, 647, 654, 667, 670, 671, 734, 735, 736, 737, 738, 739, 740, 741, 744, 751, 817, 819, 839, 873, 874, 875, 876, 877, 903, 904, 906, 908, 910, 911, 912, 914, 917, 918, 919, 920, 921, 922, 925, 927, 928, 939, 940, 941, 942, 944, 945, 949, 955, 959, 965, 966, 969, 971, 974, 1020, 1023, 1025, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1054, 1055], "privat": [21, 124, 1058, 1062], "fulfil": [21, 134, 1020], "autogenerated_sourc": 21, "format": [21, 75, 76, 118, 121, 130, 131, 135, 137, 138, 249, 279, 282, 321, 341, 976, 977, 980, 1020], "png": [21, 138], "_imag": 21, "lastli": 21, "structur": [21, 75, 76, 77, 78, 79, 119, 125, 128, 129, 138, 139, 614, 630, 903, 916], "rst": 21, "skip": [21, 73, 74, 75, 76, 86, 87, 100, 101, 124, 169, 171, 173, 385, 387, 389, 600, 601, 603, 873, 875, 877, 903, 916], "read": [21, 75, 76, 1020], "partial_sourc": 21, "conf": 21, "copi": [21, 34, 35, 36, 37, 75, 76, 80, 81, 82, 83, 121, 126, 130, 135, 137, 138, 151, 152, 178, 182, 183, 184, 185, 186, 196, 199, 249, 255, 256, 257, 258, 259, 321, 366, 614, 631, 685, 689, 690, 839, 869, 872, 903, 905, 965, 971, 974], "create_rst_fil": 21, "filter": [21, 48, 49, 94, 95, 124, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "repres": [21, 124, 137, 178, 213, 216, 249, 283, 371, 381, 384, 385, 388, 394, 397, 407, 410, 444, 447, 543, 546, 582, 585, 605, 609, 695, 733, 734, 747, 751, 798, 799, 801], "overal": [21, 121, 129, 130, 131, 140], "markup": 21, "6": [21, 26, 27, 40, 41, 44, 45, 54, 55, 77, 78, 86, 87, 88, 89, 98, 99, 102, 103, 104, 105, 122, 124, 126, 129, 137, 138, 139, 163, 165, 166, 168, 178, 202, 205, 244, 248, 249, 279, 282, 321, 343, 359, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 394, 397, 411, 414, 415, 418, 431, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 447, 469, 472, 481, 484, 501, 504, 541, 542, 548, 551, 568, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 587, 590, 591, 594, 600, 604, 605, 609, 614, 623, 632, 642, 643, 646, 647, 679, 684, 695, 697, 698, 700, 734, 737, 740, 741, 744, 750, 751, 757, 759, 760, 762, 763, 765, 789, 791, 802, 804, 808, 810, 823, 824, 826, 827, 828, 829, 831, 833, 834, 836, 837, 838, 839, 840, 841, 843, 845, 848, 853, 856, 857, 860, 865, 868, 869, 872, 873, 876, 878, 887, 890, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 939, 940, 943, 944, 945, 949, 950, 954, 976, 977, 980, 981, 984], "extract": [21, 119], "get_functions_and_class": 21, "doctr": 21, "readm": [21, 152], "module_nam": 21, "copy_readme_to_rst": 21, "tabl": 21, "toc": 21, "tree": 21, "append": [21, 75, 76, 124, 135, 138, 371, 419, 422, 751, 763, 765, 775, 778], "append_toctree_to_rst": 21, "9": [21, 26, 27, 40, 41, 44, 45, 54, 55, 77, 78, 86, 87, 90, 91, 104, 105, 122, 124, 138, 139, 371, 385, 386, 387, 388, 389, 394, 397, 411, 414, 415, 418, 541, 542, 568, 571, 572, 575, 587, 590, 591, 594, 614, 642, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 711, 714, 716, 717, 718, 719, 734, 737, 740, 741, 744, 751, 757, 759, 760, 762, 763, 765, 789, 791, 802, 804, 808, 810, 839, 840, 841, 843, 857, 860, 865, 868, 873, 876, 878, 927, 928, 929, 930, 931, 939, 943, 944, 945, 949, 976, 977, 980, 1058, 1059, 1060], "index": [21, 34, 35, 75, 76, 80, 81, 125, 129, 137, 177, 178, 193, 194, 213, 214, 215, 216, 217, 321, 362, 614, 620, 642, 643, 646, 839, 883, 886, 903, 906, 907, 910, 911, 912, 917, 919, 939, 940, 941, 942, 944, 945, 949, 950, 954, 965, 966, 969, 1023, 1025], "create_index_rst": 21, "14": [21, 86, 87, 102, 103, 104, 105, 122, 124, 129, 371, 394, 397, 431, 434, 572, 576, 582, 584, 586, 695, 697, 700, 734, 750, 751, 763, 765, 789, 791, 922, 924, 926, 929, 931, 944, 945, 949, 976, 977, 980], "\u03c0": [21, 371, 377, 380, 390, 393, 399, 402, 403, 406], "namespac": [21, 119, 130, 135, 140], "helper": [23, 72, 138], "abc": [23, 24, 25, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 75, 76, 137, 321, 330, 336, 614, 639, 1054, 1055, 1058, 1062], "inherit": [23, 128, 129, 137], "__delattr__": [23, 72], "self": [23, 24, 25, 26, 27, 40, 41, 54, 55, 72, 73, 74, 75, 76, 77, 78, 86, 87, 100, 101, 128, 129, 135, 137, 138, 139, 140, 169, 170, 171, 173, 182, 183, 184, 188, 189, 190, 196, 197, 198, 202, 203, 204, 213, 214, 215, 218, 219, 220, 226, 227, 228, 231, 233, 234, 236, 238, 239, 244, 246, 247, 255, 256, 257, 260, 261, 262, 265, 266, 267, 270, 271, 272, 279, 280, 281, 284, 285, 286, 291, 292, 293, 297, 298, 299, 302, 303, 304, 308, 309, 310, 321, 372, 373, 374, 377, 378, 379, 381, 382, 383, 385, 386, 387, 390, 391, 392, 394, 395, 396, 399, 400, 401, 403, 404, 405, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 421, 423, 424, 425, 427, 428, 429, 431, 432, 433, 435, 436, 437, 439, 440, 441, 444, 445, 446, 448, 449, 450, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 490, 491, 493, 494, 495, 497, 498, 499, 501, 502, 503, 505, 506, 507, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 529, 530, 531, 533, 534, 535, 537, 538, 539, 543, 544, 545, 548, 549, 550, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 570, 572, 573, 574, 577, 578, 579, 582, 583, 584, 587, 588, 589, 591, 592, 593, 595, 597, 598, 600, 602, 603, 605, 607, 608, 610, 611, 612, 615, 616, 617, 627, 628, 643, 644, 645, 685, 687, 688, 697, 698, 699, 702, 703, 707, 708, 711, 712, 713, 716, 717, 720, 721, 724, 725, 741, 742, 743, 752, 753, 754, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 772, 773, 775, 776, 777, 779, 780, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 814, 815, 817, 818, 820, 821, 824, 825, 826, 829, 830, 831, 834, 835, 836, 840, 841, 842, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 861, 862, 863, 865, 866, 867, 869, 870, 871, 873, 874, 875, 879, 880, 881, 883, 884, 885, 887, 888, 889, 891, 892, 893, 895, 896, 897, 922, 923, 924, 933, 934, 945, 947, 948, 950, 952, 953, 955, 957, 958, 960, 962, 963, 966, 967, 968, 971, 972, 973, 977, 978, 979, 981, 982, 983, 985, 986, 987, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1010, 1011, 1012, 1015, 1016, 1017, 1020, 1058, 1062], "delattr": [23, 72], "__format__": [23, 72], "format_spec": [23, 72], "formatt": [23, 72], "__getattribute__": [23, 72], "getattr": [23, 72], "__init_subclass__": [23, 72], "subclass": [23, 72], "overridden": [23, 72], "extend": [23, 72, 120, 121, 126], "__new__": [23, 72], "accur": [23, 72, 371, 465, 468], "__reduce__": [23, 72], "pickl": [23, 72, 75, 76, 129, 138], "__reduce_ex__": [23, 72], "protocol": [23, 72], "__setattr__": [23, 129], "setattr": 23, "__sizeof__": [23, 72], "size": [23, 26, 27, 54, 55, 72, 75, 76, 77, 78, 79, 100, 101, 124, 137, 138, 178, 207, 208, 210, 211, 321, 363, 364, 365, 614, 670, 677, 734, 750, 751, 763, 765, 779, 781, 789, 791, 795, 797, 802, 804, 814, 816, 839, 853, 856, 873, 874, 875, 876, 877, 878, 879, 882, 927, 928, 932, 933, 935, 939, 940, 942, 1009, 1010, 1013, 1015, 1018, 1042, 1043, 1044], "memori": [23, 72, 131, 132, 150, 152, 321, 339, 360, 365, 367, 370, 734, 748, 1020], "byte": [23, 72, 133], "__str__": [23, 72], "__subclasshook__": [23, 72], "overrid": [23, 72, 614, 667], "issubclass": [23, 72], "invok": [23, 26, 27, 72], "abcmeta": [23, 72], "__subclasscheck__": [23, 72], "true": [23, 26, 27, 36, 37, 42, 43, 44, 45, 50, 51, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 124, 125, 129, 130, 132, 133, 135, 137, 138, 139, 140, 163, 164, 169, 171, 173, 175, 176, 178, 179, 181, 182, 184, 186, 188, 190, 192, 193, 195, 196, 198, 200, 202, 204, 206, 207, 208, 209, 210, 212, 213, 215, 217, 218, 220, 222, 223, 225, 226, 228, 230, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 249, 255, 256, 257, 258, 259, 260, 262, 264, 265, 267, 269, 270, 271, 272, 273, 274, 279, 281, 284, 286, 288, 291, 293, 295, 297, 299, 301, 302, 304, 305, 306, 308, 310, 312, 320, 321, 340, 357, 361, 362, 371, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 399, 401, 403, 405, 407, 409, 411, 413, 414, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 434, 435, 437, 439, 441, 443, 444, 446, 448, 450, 452, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 497, 499, 500, 501, 503, 504, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 532, 533, 535, 536, 537, 539, 543, 545, 547, 548, 550, 552, 554, 555, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 577, 579, 581, 582, 584, 586, 587, 589, 591, 593, 595, 596, 598, 600, 601, 603, 605, 606, 608, 610, 612, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 627, 628, 632, 639, 641, 643, 645, 647, 653, 654, 661, 675, 677, 678, 684, 685, 686, 688, 690, 692, 694, 695, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 733, 734, 746, 751, 752, 754, 755, 756, 775, 777, 779, 781, 802, 803, 804, 817, 819, 823, 824, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 838, 839, 840, 842, 844, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 878, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 900, 901, 902, 903, 904, 913, 914, 916, 922, 924, 926, 927, 928, 933, 934, 936, 939, 940, 941, 943, 944, 945, 946, 948, 949, 950, 951, 953, 954, 955, 956, 958, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 981, 983, 984, 985, 987, 988, 989, 991, 992, 993, 995, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1042, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063], "notimpl": [23, 72, 133], "normal": [23, 72, 138, 839, 883, 886, 921, 922, 925, 927, 932, 1056, 1057], "algorithm": [23, 72, 152, 734, 735, 736, 737, 738, 739, 740, 741, 744, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "outcom": [23, 72], "cach": [23, 72, 124, 125, 321, 339, 614, 625], "arraywithactiv": [24, 26, 27], "softplu": [24, 25, 73, 74, 163, 173, 1020], "variant": [24, 25, 26, 27, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 73, 74, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 121, 122, 169, 170, 171, 173, 182, 183, 188, 189, 196, 197, 202, 203, 218, 219, 226, 227, 231, 233, 236, 238, 244, 246, 270, 271, 272, 274, 372, 373, 374, 376, 385, 386, 387, 389, 394, 395, 396, 398, 435, 436, 437, 439, 440, 441, 443, 469, 470, 471, 572, 573, 574, 576, 577, 578, 579, 581, 582, 583, 584, 586, 600, 601, 602, 603, 605, 606, 607, 608, 615, 616, 617, 619, 643, 644, 645, 647, 685, 686, 687, 688, 697, 698, 699, 701, 711, 712, 713, 715, 741, 742, 743, 745, 752, 753, 754, 756, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 840, 841, 842, 844, 873, 874, 875, 877, 922, 923, 924, 926, 929, 931, 950, 951, 952, 953, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019], "wrap": [24, 25, 26, 27, 29, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 117, 118, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 135, 137, 140, 152, 153, 161, 169, 170, 171, 173, 182, 183, 188, 189, 196, 197, 202, 203, 218, 219, 226, 227, 231, 233, 236, 238, 244, 246, 270, 271, 272, 274, 372, 373, 374, 376, 385, 386, 387, 389, 394, 395, 396, 398, 435, 436, 437, 439, 440, 441, 443, 469, 470, 471, 572, 573, 574, 576, 577, 578, 579, 581, 582, 583, 584, 586, 600, 601, 602, 603, 605, 606, 607, 608, 614, 615, 616, 617, 619, 625, 643, 644, 645, 647, 685, 686, 687, 688, 695, 697, 698, 699, 701, 711, 712, 713, 715, 732, 741, 742, 743, 745, 752, 753, 754, 756, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 840, 841, 842, 844, 873, 874, 875, 877, 922, 923, 924, 926, 929, 931, 950, 951, 952, 953, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019], "minim": [24, 25, 26, 27, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 68, 69, 73, 74, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 114, 115, 121, 132, 135, 169, 170, 171, 173, 182, 183, 188, 189, 196, 197, 202, 203, 218, 219, 226, 227, 231, 233, 236, 238, 244, 246, 270, 271, 272, 274, 372, 373, 374, 376, 385, 386, 387, 389, 394, 395, 396, 398, 435, 436, 437, 439, 440, 441, 443, 469, 470, 471, 572, 573, 574, 576, 577, 578, 579, 581, 582, 583, 584, 586, 600, 601, 602, 603, 605, 606, 607, 608, 615, 616, 617, 619, 643, 644, 645, 647, 685, 686, 687, 688, 697, 698, 699, 701, 711, 712, 713, 715, 741, 742, 743, 745, 752, 753, 754, 756, 824, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 840, 841, 842, 844, 873, 874, 875, 877, 922, 923, 924, 926, 929, 931, 950, 951, 952, 953, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019], "input": [24, 25, 26, 27, 29, 32, 33, 40, 41, 44, 45, 54, 55, 73, 74, 75, 76, 77, 78, 79, 86, 87, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 135, 137, 138, 139, 140, 152, 153, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 260, 263, 265, 268, 270, 273, 275, 276, 277, 278, 279, 282, 283, 297, 300, 302, 305, 307, 308, 311, 316, 320, 321, 330, 331, 340, 341, 342, 343, 345, 346, 349, 353, 359, 365, 366, 371, 372, 375, 376, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 398, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 440, 441, 442, 443, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 606, 609, 610, 613, 614, 615, 618, 619, 620, 622, 623, 624, 626, 627, 629, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 651, 653, 654, 656, 657, 658, 660, 661, 662, 663, 667, 670, 671, 677, 679, 682, 684, 685, 686, 689, 690, 693, 694, 695, 697, 698, 699, 700, 701, 706, 711, 712, 713, 714, 715, 729, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 828, 829, 832, 833, 834, 837, 838, 839, 840, 843, 844, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 899, 900, 901, 902, 903, 906, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 954, 955, 959, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057], "result": [24, 25, 26, 27, 40, 41, 54, 55, 73, 74, 75, 76, 77, 78, 79, 86, 87, 100, 101, 119, 120, 121, 122, 124, 128, 129, 130, 132, 138, 152, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 265, 268, 308, 311, 321, 330, 366, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 626, 627, 629, 632, 633, 636, 637, 638, 640, 642, 643, 646, 654, 667, 670, 671, 695, 729, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 903, 906, 916, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 938, 939, 940, 941, 943, 944, 945, 949, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1020], "broadcast": [24, 25, 26, 27, 40, 41, 54, 55, 73, 74, 75, 76, 77, 78, 86, 87, 100, 101, 119, 121, 122, 124, 129, 130, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 255, 258, 260, 263, 265, 268, 321, 366, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 626, 627, 629, 632, 636, 637, 638, 640, 643, 646, 654, 667, 670, 671, 695, 729, 734, 735, 736, 737, 738, 739, 740, 741, 744, 746, 747, 749, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 938, 939, 940, 941, 943, 944, 960, 964, 965, 971, 974, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "element": [24, 25, 26, 27, 40, 41, 54, 55, 73, 74, 75, 76, 77, 78, 86, 87, 100, 101, 121, 124, 135, 140, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 201, 202, 205, 231, 235, 236, 240, 321, 344, 348, 352, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 622, 623, 626, 627, 629, 632, 633, 640, 654, 685, 689, 690, 695, 733, 734, 746, 751, 757, 759, 766, 768, 775, 778, 795, 797, 802, 804, 839, 840, 843, 857, 860, 865, 868, 873, 874, 875, 876, 877, 878, 879, 882, 903, 906, 927, 928, 939, 942, 943, 944, 945, 949, 950, 954, 955, 959, 960, 964, 965, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1042, 1050], "arraywithcr": [26, 27, 34], "arraywithdatatyp": [26, 27, 36], "arraywithdevic": [26, 27, 38, 137], "arraywithgener": [26, 27, 42, 137], "arraywithgradi": [26, 27, 44, 137], "arraywithimag": [26, 27, 46, 137], "arraywithlay": [26, 27, 48], "arraywithlinearalgebra": [26, 27, 50], "arraywithloss": [26, 27, 52], "arraywithmanipul": [26, 27, 54], "arraywithnorm": [26, 27, 56], "arraywithrandom": [26, 27, 58, 137], "arraywithsearch": [26, 27, 60], "arraywithset": [26, 27, 62], "arraywithsort": [26, 27, 64], "arraywithstatist": [26, 27, 66], "arraywithutil": [26, 27, 68], "properti": [26, 27, 75, 76, 122, 124, 125, 129, 137, 138, 139, 321, 333, 1054, 1055, 1058, 1059, 1060, 1061, 1063], "__add__": [26, 27, 77, 78, 120, 121, 122, 128, 129, 137], "numer": [26, 27, 40, 41, 77, 78, 86, 87, 119, 139, 178, 213, 216, 249, 255, 258, 371, 372, 375, 385, 386, 387, 388, 389, 435, 438, 448, 451, 465, 468, 469, 472, 473, 476, 485, 488, 489, 492, 493, 496, 497, 500, 529, 532, 533, 536, 543, 546, 548, 551, 552, 555, 560, 563, 564, 567, 572, 575, 591, 594, 595, 599, 610, 613, 614, 649, 650, 672, 673, 680, 681, 751, 757, 759, 775, 778, 789, 791, 802, 804, 808, 810, 811, 813, 814, 816, 927, 938, 939, 940, 941, 976, 981, 984, 993, 996, 1001, 1004, 1033], "wise": [26, 27, 40, 41, 75, 76, 77, 78, 86, 87, 135, 140, 163, 164, 165, 166, 167, 168, 169, 172, 174, 371, 372, 375, 377, 380, 385, 386, 387, 388, 389, 390, 393, 399, 402, 403, 406, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 448, 451, 453, 456, 457, 460, 473, 476, 477, 480, 481, 484, 497, 500, 501, 504, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 552, 555, 560, 563, 564, 567, 595, 599, 614, 640, 839, 840, 843], "sum": [26, 27, 40, 41, 66, 67, 75, 76, 77, 78, 86, 87, 112, 113, 125, 129, 130, 132, 135, 321, 350, 351, 352, 353, 365, 371, 385, 386, 387, 388, 389, 521, 524, 614, 633, 637, 670, 671, 734, 750, 751, 802, 804, 811, 813, 817, 819, 976, 977, 980, 997, 1000], "promot": [26, 27, 40, 41, 77, 78, 86, 87, 121, 125, 130, 249, 255, 258, 270, 273, 307, 308, 311, 316, 371, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 407, 410, 411, 414, 419, 422, 423, 426, 427, 430, 431, 434, 439, 442, 444, 447, 448, 451, 461, 464, 465, 468, 505, 508, 509, 512, 517, 520, 521, 524, 537, 540, 543, 546, 560, 563, 564, 567, 577, 580, 582, 585, 587, 590, 600, 601, 602, 603, 604, 605, 609, 751, 752, 755, 757, 759, 772, 774, 775, 778, 783, 785, 789, 791, 792, 794, 799, 801, 814, 816, 817, 819, 839, 883, 886, 976, 985, 988], "y": [26, 27, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 68, 69, 77, 78, 86, 87, 88, 89, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 108, 109, 114, 115, 119, 122, 126, 129, 135, 137, 163, 165, 166, 167, 168, 169, 172, 174, 178, 201, 202, 205, 213, 216, 223, 224, 226, 229, 244, 248, 249, 255, 258, 279, 282, 321, 341, 355, 359, 364, 371, 372, 373, 374, 375, 376, 385, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 403, 406, 411, 414, 415, 418, 427, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 461, 464, 469, 470, 471, 472, 481, 484, 501, 504, 541, 542, 548, 551, 552, 555, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 614, 615, 616, 617, 618, 619, 622, 623, 631, 632, 639, 640, 642, 643, 644, 645, 646, 647, 677, 684, 685, 686, 687, 688, 689, 690, 695, 706, 734, 740, 741, 742, 743, 744, 745, 747, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 772, 774, 789, 791, 808, 810, 811, 813, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 853, 856, 857, 860, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 887, 890, 903, 906, 927, 928, 929, 930, 931, 932, 933, 935, 938, 939, 940, 941, 942, 943, 944, 950, 951, 952, 953, 954, 965, 966, 969, 976, 977, 980, 981, 984, 997, 1000, 1001, 1004, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019], "z": [26, 27, 40, 41, 42, 43, 52, 53, 77, 78, 86, 87, 88, 89, 98, 99, 122, 126, 129, 135, 137, 321, 355, 371, 385, 386, 387, 388, 389, 411, 414, 431, 434, 481, 484, 501, 504, 541, 542, 614, 622, 623, 642, 643, 644, 645, 647, 677, 751, 757, 759, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 843, 903, 906, 939, 940, 976, 977, 980, 981, 984], "mix": [26, 27, 42, 43, 77, 78, 98, 99, 118, 122, 124, 135, 249, 308, 311, 321, 359, 371, 385, 388, 411, 414, 431, 434, 481, 484, 501, 504, 542, 552, 555, 614, 615, 616, 631, 639, 642, 643, 646, 684, 685, 689, 690, 734, 737, 740, 741, 744, 750, 751, 752, 755, 808, 810, 823, 824, 827, 828, 829, 833, 834, 837, 838, 839, 840, 843, 921, 922, 925, 939, 943, 976, 977, 980, 985, 988], "__le__": [26, 27], "equal": [26, 27, 40, 41, 75, 76, 86, 87, 122, 129, 130, 178, 193, 194, 201, 202, 205, 249, 255, 258, 371, 419, 422, 427, 430, 485, 488, 489, 492, 560, 563, 568, 571, 614, 615, 618, 622, 623, 751, 763, 765, 783, 785, 792, 794, 839, 840, 843, 849, 852, 878, 895, 898, 927, 933, 935, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974, 976, 985, 988, 997, 1000, 1001, 1004, 1005, 1008], "bool": [26, 27, 29, 30, 31, 32, 33, 36, 37, 44, 45, 73, 74, 75, 76, 86, 87, 100, 101, 116, 117, 122, 129, 130, 132, 133, 140, 169, 171, 173, 175, 176, 178, 201, 249, 255, 258, 270, 271, 273, 276, 277, 278, 279, 282, 296, 297, 298, 300, 302, 303, 305, 320, 321, 340, 341, 356, 365, 368, 371, 385, 387, 389, 411, 414, 415, 418, 423, 426, 431, 434, 453, 456, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 525, 528, 529, 532, 533, 536, 552, 555, 600, 601, 603, 614, 615, 618, 622, 623, 632, 635, 639, 641, 651, 653, 658, 660, 661, 662, 663, 677, 678, 693, 694, 695, 711, 712, 714, 729, 733, 751, 752, 755, 779, 781, 802, 804, 817, 819, 839, 873, 875, 877, 878, 899, 900, 901, 902, 903, 904, 905, 909, 913, 914, 915, 927, 928, 939, 940, 941, 965, 966, 969, 971, 974, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "__radd__": [26, 27, 77, 78, 121, 122], "adam_upd": [26, 27, 90, 91, 139, 695], "function_nam": [26, 27], "variabl": [26, 27, 29, 30, 31, 32, 33, 75, 76, 77, 78, 120, 121, 124, 126, 129, 130, 132, 133, 138, 139, 140, 152, 614, 624, 656, 657, 658, 659, 660, 661, 663, 682, 695, 702, 704, 706, 707, 709, 711, 714, 716, 718, 720, 722, 724, 726, 729, 732, 734, 749, 751, 799, 801, 899, 900, 901, 902, 921, 922, 925, 1020, 1031, 1032, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "arang": [26, 27, 77, 78, 130, 178, 207, 208, 210, 211, 976, 977, 980, 1020], "arg_info": [26, 27, 77, 78, 614], "arg_nam": [26, 27, 77, 78, 614], "argmax": [26, 27, 77, 78, 939, 1020], "argmin": [26, 27, 77, 78, 939, 1020], "array_equ": [26, 27, 77, 78, 614], "arrays_equ": [26, 27, 75, 76, 77, 78, 614], "as_ivy_dev": [26, 27, 77, 78, 137, 321], "as_ivy_dtyp": [26, 27, 77, 78, 249], "as_native_dev": [26, 27, 77, 78, 321], "as_native_dtyp": [26, 27, 77, 78, 249], "assert_supports_inplac": [26, 27, 77, 78, 614], "cache_fn": [26, 27, 77, 78, 125, 614], "clear_mem_on_dev": [26, 27, 77, 78, 321], "clip_matrix_norm": [26, 27, 77, 78, 614], "clip_vector_norm": [26, 27, 88, 89, 614], "closest_valid_dtyp": [26, 27, 77, 78, 249], "container_typ": [26, 27, 77, 78, 614], "conv1d": [26, 27, 77, 78, 734, 1042], "conv1d_transpos": [26, 27, 77, 78, 734], "conv2d": [26, 27, 77, 78, 734, 1020, 1042], "conv2d_transpos": [26, 27, 77, 78, 734], "conv3d": [26, 27, 77, 78, 734, 1042], "conv3d_transpos": [26, 27, 77, 78, 734], "copy_arrai": [26, 27, 77, 78, 614], "cumprod": [26, 27, 77, 78, 140, 614], "cumsum": [26, 27, 77, 78, 614, 1020], "current_backend_str": [26, 27, 77, 78, 614], "default_devic": [26, 27, 77, 78, 131, 135, 321, 359, 362, 369], "default_dtyp": [26, 27, 77, 78, 125, 130, 249], "default_float_dtyp": [26, 27, 77, 78, 130, 249], "default_int_dtyp": [26, 27, 77, 78, 130, 249], "dev_clon": [26, 27, 75, 76, 321], "dev_clone_arrai": [26, 27, 77, 78, 321], "dev_clone_it": [26, 27, 77, 78, 321], "dev_clone_nest": [26, 27, 77, 78, 321], "dev_dist": [26, 27, 75, 76, 321], "dev_dist_arrai": [26, 27, 77, 78, 321], "dev_dist_it": [26, 27, 77, 78, 321], "dev_dist_nest": [26, 27, 77, 78, 321], "dev_unifi": [26, 27, 77, 78, 321], "dev_unify_arrai": [26, 27, 77, 78, 321], "dev_unify_it": [26, 27, 77, 78, 321], "dev_unify_nest": [26, 27, 77, 78, 321], "dev_util": [26, 27, 77, 78, 131, 321], "dropout": [26, 27, 77, 78, 138, 734, 1042, 1053], "dtype": [26, 27, 34, 35, 36, 37, 66, 67, 75, 76, 80, 81, 82, 83, 88, 89, 112, 113, 119, 122, 124, 125, 130, 131, 133, 137, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 201, 202, 203, 204, 205, 206, 207, 208, 209, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 257, 258, 259, 260, 263, 270, 271, 272, 273, 274, 275, 276, 277, 278, 283, 284, 287, 289, 290, 291, 294, 296, 297, 300, 302, 305, 307, 308, 309, 311, 313, 314, 315, 320, 321, 361, 371, 427, 430, 614, 622, 623, 667, 685, 686, 688, 689, 734, 746, 839, 853, 856, 927, 933, 935, 939, 940, 941, 965, 971, 974, 976, 993, 994, 995, 996, 997, 1000, 1001, 1002, 1003, 1004, 1009, 1010, 1013, 1020, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1064, 1065], "dtype_bit": [26, 27, 77, 78, 249], "einops_rearrang": [26, 27, 75, 76, 614], "einops_reduc": [26, 27, 75, 76, 614], "einops_repeat": [26, 27, 75, 76, 614], "empti": [26, 27, 72, 75, 76, 77, 78, 128, 130, 131, 178, 179, 180, 695, 733, 976, 997, 1000, 1001, 1004, 1009, 1010, 1013, 1015, 1018], "execute_with_gradi": [26, 27, 77, 78, 129, 138, 139, 140, 152, 695, 1020], "ey": [26, 27, 77, 78, 140, 178, 734, 737, 741, 744], "floormod": [26, 27, 77, 78, 614, 1020], "fourier_encod": [26, 27, 77, 78, 614], "function_supported_dtyp": [26, 27, 77, 78, 249], "function_unsupported_dtyp": [26, 27, 77, 78, 249], "gather": [26, 27, 75, 76, 614, 643, 646], "gelu": [26, 27, 77, 78, 163, 1028], "get_all_arrays_in_memori": [26, 27, 77, 78, 614], "get_all_ivy_arrays_on_dev": [26, 27, 77, 78, 131, 321], "get_min_bas": [26, 27, 77, 78, 614], "get_min_denomin": [26, 27, 77, 78, 614], "get_num_dim": [26, 27, 77, 78, 614, 1020], "get_referrers_recurs": [26, 27, 77, 78, 614], "gpu_is_avail": [26, 27, 77, 78, 321], "gradient_descent_upd": [26, 27, 90, 91, 695, 899, 900, 901, 902, 1020], "handle_nest": [26, 27, 77, 78, 125, 129, 153], "handle_out_argu": [26, 27, 77, 78, 120, 127, 130, 131, 132, 153], "has_nan": [26, 27, 75, 76, 614], "indices_wher": [26, 27, 77, 78, 133, 614, 1020], "infer_devic": [26, 27, 77, 78, 120, 130, 131, 153], "infer_dtyp": [26, 27, 77, 78, 120, 130, 131, 153], "inplace_arrays_support": [26, 27, 77, 78, 614], "inplace_decr": [26, 27, 77, 78, 614], "inplace_incr": [26, 27, 77, 78, 614], "inplace_upd": [26, 27, 75, 76, 132, 614, 1031, 1032], "inplace_variables_support": [26, 27, 77, 78, 614], "inputs_to_native_arrai": [26, 27, 77, 78, 128, 153], "invalid_dtyp": [26, 27, 77, 78, 249], "is_arrai": [26, 27, 614], "is_ivy_arrai": [26, 27, 132, 137, 614], "is_ivy_contain": [26, 27, 77, 78, 614], "is_native_arrai": [26, 27, 137, 614], "is_vari": [26, 27, 44, 45, 90, 91, 132, 695, 715], "boolean": [26, 27, 75, 76, 124, 129, 178, 201, 249, 255, 258, 296, 320, 321, 356, 368, 371, 411, 414, 415, 418, 423, 426, 431, 434, 525, 528, 529, 532, 533, 536, 537, 540, 614, 615, 618, 622, 623, 653, 654, 655, 659, 660, 661, 662, 663, 675, 682, 694, 695, 711, 714, 733, 899, 900, 901, 903, 913, 976, 989, 992], "trainabl": [26, 27, 121, 136, 138, 139, 695, 711, 714, 1031, 1032, 1054, 1055, 1064], "lamb_upd": [26, 27, 90, 91, 695], "lars_upd": [26, 27, 90, 91, 695], "leaky_relu": [26, 27, 77, 78, 124, 163, 1020], "linear": [26, 27, 77, 78, 121, 135, 138, 139, 140, 163, 164, 165, 166, 614, 641, 734, 746, 799, 801, 1020, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "linspac": [26, 27, 77, 78, 135, 178, 179, 180, 1020], "logspac": [26, 27, 77, 78, 135, 178], "lstm_updat": [26, 27, 77, 78, 135, 734], "mt": [26, 27, 137], "match_kwarg": [26, 27, 77, 78, 614], "matrix_pow": [26, 27, 77, 78, 751], "maximum": [26, 27, 75, 76, 77, 78, 79, 122, 135, 138, 140, 321, 345, 349, 353, 365, 371, 614, 626, 627, 629, 641, 695, 716, 718, 839, 840, 843, 903, 915, 939, 940, 976, 981, 984, 989, 992, 1020], "minimum": [26, 27, 75, 76, 135, 140, 321, 371, 372, 375, 614, 649, 650, 672, 673, 680, 681, 839, 840, 843, 939, 941, 976, 981, 984, 989, 992, 1020], "multi_head_attent": [26, 27, 77, 78, 129, 132, 734], "multinomi": [26, 27, 77, 78, 927], "multiprocess": [26, 27, 75, 76, 77, 78, 79, 138, 152, 321, 330, 614], "ndim": [26, 27, 124, 137, 751, 795, 797, 802, 804], "dimens": [26, 27, 54, 55, 75, 76, 77, 78, 79, 100, 101, 122, 124, 135, 138, 163, 168, 178, 231, 235, 236, 240, 321, 352, 614, 636, 637, 638, 641, 651, 667, 693, 734, 735, 736, 737, 738, 739, 740, 741, 744, 748, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 792, 794, 795, 797, 799, 801, 802, 804, 805, 807, 811, 813, 814, 816, 817, 819, 823, 829, 832, 834, 837, 839, 845, 848, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 899, 900, 901, 902, 927, 938, 939, 940, 941, 942, 944, 945, 949, 950, 954, 960, 964, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053], "ax": [26, 27, 50, 51, 54, 55, 75, 76, 100, 101, 119, 122, 124, 130, 137, 321, 365, 614, 632, 751, 779, 781, 799, 801, 808, 809, 810, 817, 819, 839, 849, 852, 857, 860, 861, 862, 863, 864, 873, 874, 875, 876, 877, 879, 882, 887, 890, 895, 898, 939, 940, 941, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "nonzero": [26, 27, 77, 78, 371, 385, 388, 543, 546, 939], "num_arrays_in_memori": [26, 27, 77, 78, 614], "num_cpu_cor": [26, 27, 77, 78, 131, 321], "num_gpu": [26, 27, 77, 78, 124, 131, 321], "num_ivy_arrays_on_dev": [26, 27, 77, 78, 321], "one_hot": [26, 27, 77, 78, 140, 614, 1020], "ones": [26, 27, 75, 76, 77, 78, 124, 135, 137, 138, 178, 193, 194, 226, 229, 244, 248, 371, 435, 438, 614, 667, 1020], "optimizer_upd": [26, 27, 90, 91, 695], "outputs_to_ivy_arrai": [26, 27, 77, 78, 120, 128, 130, 131, 153], "percent_used_mem_on_dev": [26, 27, 77, 78, 321], "print_all_arrays_in_memori": [26, 27, 77, 78, 614], "print_all_ivy_arrays_on_dev": [26, 27, 77, 78, 321], "promote_typ": [26, 27, 77, 78, 249], "queue_timeout": [26, 27, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 614], "randint": [26, 27, 48, 49, 77, 78, 94, 95, 104, 105, 741, 742, 743, 745, 927, 931, 1020], "random_norm": [26, 27, 48, 49, 77, 78, 94, 95, 124, 734, 737, 740, 741, 742, 743, 744, 745, 751, 802, 804, 927, 944, 945, 949], "random_uniform": [26, 27, 104, 105, 124, 131, 139, 927, 1020], "relu": [26, 27, 70, 71, 77, 78, 138, 139, 163, 164, 165, 1020], "scaled_dot_product_attent": [26, 27, 77, 78, 734], "scatter_flat": [26, 27, 77, 78, 614], "scatter_nd": [26, 27, 77, 78, 137, 614, 1020], "seed": [26, 27, 75, 76, 77, 78, 927, 1020], "set_default_devic": [26, 27, 77, 78, 131, 321, 369], "set_default_dtyp": [26, 27, 77, 78, 125, 130, 249], "set_default_float_dtyp": [26, 27, 77, 78, 130, 249], "set_default_int_dtyp": [26, 27, 77, 78, 130, 249], "set_min_bas": [26, 27, 77, 78, 614], "set_min_denomin": [26, 27, 77, 78, 614], "set_queue_timeout": [26, 27, 77, 78, 614], "set_shape_array_mod": [26, 27, 77, 78, 614, 678, 692], "set_split_factor": [26, 27, 77, 78, 321], "set_tmp_dir": [26, 27, 77, 78, 614], "set_with_grad": [26, 27, 77, 78, 695, 733], "shape_array_mod": [26, 27, 77, 78, 614, 675, 692], "shape_to_tupl": [26, 27, 77, 78, 130, 614], "shuffl": [26, 27, 75, 76, 927, 1020], "sigmoid": [26, 27, 77, 78, 135, 138, 139, 163, 1020], "product": [26, 27, 129, 371, 543, 546, 614, 632, 734, 749, 750, 751, 757, 759, 775, 778, 789, 791, 808, 810, 814, 816, 976, 977, 980, 993, 996, 1042, 1053], "unknown": [26, 27], "model": [26, 27, 138, 139, 1020], "slogdet": [26, 27, 77, 78, 751], "softmax": [26, 27, 70, 71, 77, 78, 163, 734, 749, 750, 1020], "split_factor": [26, 27, 77, 78, 321, 330], "split_func_cal": [26, 27, 77, 78, 321], "stable_divid": [26, 27, 77, 78, 125, 614], "stable_pow": [26, 27, 77, 78, 614], "stop_gradi": [26, 27, 75, 76, 77, 78, 90, 91, 139, 321, 365, 695, 702, 703, 704, 705, 707, 708, 709, 710, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 899, 900, 901, 902, 1020, 1058, 1059, 1060, 1061, 1062, 1063], "supports_inplac": [26, 27, 77, 78, 614], "tmp_dir": [26, 27, 77, 78, 614], "to_devic": [26, 27, 75, 76, 321, 340], "to_list": [26, 27, 75, 76, 614, 1020], "to_native_arrays_and_back": [26, 27, 77, 78, 120, 127, 153], "to_scalar": [26, 27, 77, 78, 614], "total_mem_on_dev": [26, 27, 77, 78, 131, 321], "tpu_is_avail": [26, 27, 77, 78, 321], "try_else_non": [26, 27, 77, 78, 614], "type_promote_arrai": [26, 27, 77, 78, 249], "unset_default_devic": [26, 27, 77, 78, 321], "unset_default_dtyp": [26, 27, 77, 78, 249], "unset_default_float_dtyp": [26, 27, 77, 78, 249], "unset_default_int_dtyp": [26, 27, 77, 78, 249], "unset_shape_array_mod": [26, 27, 77, 78, 614], "unset_with_grad": [26, 27, 77, 78, 695], "unstack": [26, 27, 75, 76, 135, 138, 614, 1020], "used_mem_on_dev": [26, 27, 77, 78, 321], "valid_dtyp": [26, 27, 77, 78, 249], "value_is_nan": [26, 27, 77, 78, 614], "variable_data": [26, 27, 77, 78, 695], "with_grad": [26, 27, 77, 78, 695, 728], "collect": [29, 75, 76, 124, 151, 163, 175, 321, 614, 695, 734, 823, 903, 916, 921, 927, 1028, 1042, 1056, 1058], "args_to_ivi": 29, "include_deriv": [29, 30, 31, 32, 33, 903, 905, 915], "keyword": [29, 30, 31, 72, 75, 76, 77, 78, 79, 119, 120, 124, 130, 131, 132, 138, 178, 213, 216, 321, 330, 331, 345, 349, 353, 614, 621, 664, 903, 909, 976, 1001, 1004, 1054, 1055], "nest": [29, 30, 31, 32, 33, 75, 76, 77, 78, 79, 119, 124, 125, 128, 129, 137, 138, 139, 152, 321, 345, 349, 353, 614, 684, 695, 733, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 1054, 1055, 1058, 1059, 1060, 1061, 1062, 1063], "unchang": [29, 30, 31, 32, 33], "posit": [29, 30, 31, 40, 41, 54, 55, 86, 87, 100, 101, 120, 124, 138, 151, 177, 178, 193, 194, 249, 284, 287, 321, 345, 349, 353, 371, 372, 375, 485, 488, 489, 492, 543, 546, 564, 567, 614, 641, 751, 752, 755, 839, 853, 856, 873, 874, 875, 876, 877, 927, 937, 939, 942, 1009, 1010, 1013, 1015, 1018, 1031, 1032], "deriv": [29, 30, 31, 32, 33, 130, 131, 137, 139, 178, 188, 191, 202, 205, 226, 229, 244, 248, 695, 697, 700, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 903, 905, 915, 1054, 1058, 1062, 1064], "tupl": [29, 30, 31, 32, 33, 50, 51, 54, 55, 72, 73, 74, 75, 76, 86, 87, 100, 101, 119, 120, 124, 129, 130, 131, 133, 137, 138, 139, 152, 169, 171, 173, 178, 182, 185, 218, 221, 249, 265, 268, 289, 290, 316, 321, 340, 385, 387, 389, 600, 601, 603, 614, 641, 679, 734, 737, 740, 741, 744, 748, 751, 783, 785, 792, 794, 802, 803, 804, 808, 810, 817, 819, 839, 845, 848, 849, 852, 857, 860, 861, 864, 873, 874, 875, 876, 877, 879, 882, 883, 886, 895, 898, 899, 900, 901, 902, 903, 905, 906, 908, 910, 911, 912, 914, 915, 917, 918, 919, 920, 939, 942, 944, 950, 954, 955, 959, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "kei": [29, 30, 31, 72, 73, 74, 75, 76, 77, 78, 79, 86, 87, 100, 101, 124, 129, 133, 138, 169, 171, 173, 321, 333, 385, 387, 389, 600, 601, 603, 614, 620, 630, 734, 749, 750, 873, 875, 877, 899, 900, 901, 903, 906, 912, 916, 1031, 1032, 1042, 1053, 1058, 1062], "word": [29, 30, 31, 178, 179, 180, 927, 933, 935, 1031, 1032], "args_to_n": [29, 132, 137], "to_ivi": [29, 75, 76, 137, 903, 916], "leaf": [29, 32, 33, 75, 76, 125, 129, 138, 903, 904, 913, 914], "union": [29, 32, 33, 40, 41, 42, 43, 50, 51, 54, 55, 73, 74, 75, 76, 86, 87, 100, 101, 119, 120, 122, 125, 128, 129, 130, 131, 132, 133, 135, 140, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 201, 202, 205, 207, 208, 210, 211, 213, 216, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 253, 254, 255, 258, 260, 263, 265, 268, 275, 276, 277, 278, 279, 282, 283, 284, 287, 291, 294, 296, 297, 300, 302, 305, 307, 308, 311, 313, 314, 315, 316, 320, 321, 337, 338, 339, 340, 341, 343, 346, 347, 348, 349, 354, 360, 362, 364, 365, 366, 367, 370, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 601, 603, 604, 605, 609, 610, 613, 614, 615, 618, 622, 623, 626, 627, 629, 632, 633, 636, 637, 638, 640, 641, 642, 643, 644, 646, 651, 653, 654, 656, 657, 658, 667, 670, 671, 677, 679, 684, 685, 689, 690, 693, 694, 695, 697, 700, 702, 704, 707, 709, 711, 714, 716, 718, 720, 722, 724, 726, 729, 731, 734, 735, 736, 737, 738, 739, 740, 741, 744, 747, 748, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 803, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 914, 915, 921, 922, 925, 927, 928, 929, 930, 932, 933, 935, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 954, 955, 959, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "nativearrai": [29, 32, 33, 34, 35, 40, 41, 42, 43, 86, 87, 100, 101, 119, 120, 122, 125, 128, 129, 132, 133, 135, 137, 140, 153, 161, 163, 164, 165, 166, 167, 168, 169, 172, 174, 178, 179, 180, 182, 185, 188, 191, 202, 205, 207, 208, 210, 211, 213, 216, 218, 219, 221, 226, 229, 231, 235, 236, 240, 244, 248, 249, 255, 258, 260, 263, 265, 268, 270, 273, 279, 282, 284, 287, 291, 294, 297, 300, 302, 305, 308, 311, 316, 321, 340, 341, 343, 359, 365, 366, 371, 372, 375, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 604, 605, 609, 610, 613, 614, 615, 616, 618, 622, 623, 626, 627, 629, 631, 632, 633, 636, 637, 638, 640, 641, 642, 643, 644, 646, 651, 653, 654, 656, 657, 658, 667, 670, 671, 677, 679, 684, 685, 689, 690, 693, 694, 695, 697, 700, 702, 704, 707, 709, 711, 714, 716, 718, 720, 722, 724, 726, 729, 731, 734, 735, 736, 737, 738, 739, 740, 741, 744, 747, 748, 750, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822, 823, 824, 827, 829, 832, 834, 837, 839, 840, 843, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 869, 872, 873, 876, 877, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 903, 905, 906, 915, 921, 922, 925, 927, 928, 938, 939, 940, 941, 942, 943, 944, 945, 949, 950, 954, 955, 959, 960, 964, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "travers": [29, 32, 33, 75, 76, 129, 135, 137, 903, 915], "lowest": [29, 32, 33, 75, 76, 125, 152, 903, 915, 927, 929, 930], "leav": [29, 32, 33, 75, 76, 77, 78, 120, 121, 122, 124, 125, 129, 130, 132, 138, 139, 839, 883, 886, 903, 904, 905, 913, 914, 915], "to_n": [29, 75, 76], "item": [29, 33, 70, 71, 72, 75, 76, 130, 135, 137, 138, 140, 249, 276, 321, 330, 331, 333, 340, 342, 344, 346, 348, 352, 614, 630, 652, 680, 681, 903, 908, 909, 910, 911, 915, 919, 920, 1020, 1054, 1055], "asarrai": [34, 35, 80, 81, 124, 132, 178, 734, 735, 944, 950, 954], "empty_lik": [34, 35, 80, 81, 178], "from_dlpack": [34, 35, 80, 81, 178], "full_lik": [34, 35, 80, 81, 178], "fill_valu": [34, 35, 80, 81, 130, 178, 201, 202, 203, 204, 205, 206, 371, 481, 484, 501, 504], "meshgrid": [34, 35, 80, 81, 178], "xy": [34, 35, 80, 81, 178, 213, 214, 215, 216, 217], "ones_lik": [34, 35, 80, 81, 140, 178, 1020], "tril": [34, 35, 80, 81, 178], "k": [34, 35, 72, 80, 81, 118, 135, 178, 193, 194, 195, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 614, 622, 734, 750, 751, 775, 778, 795, 797, 799, 801, 802, 804, 805, 807, 811, 813, 927, 932, 933, 935, 939, 942], "triu": [34, 35, 80, 81, 178], "zeros_lik": [34, 35, 80, 81, 178, 734, 741, 744, 839, 840, 843, 1020], "creation": [35, 75, 76, 77, 78, 79, 81, 119, 124, 130, 131, 135, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 218, 221, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248], "data_typ": [36, 37, 82, 83, 119, 124, 130, 249, 253, 254, 255, 258, 260, 263, 265, 268, 270, 273, 275, 276, 277, 278, 279, 282, 283, 284, 287, 289, 290, 291, 294, 296, 297, 300, 302, 305, 307, 308, 311, 313, 314, 315, 316, 317, 318, 319, 320], "astyp": [36, 37, 48, 49, 82, 83, 94, 95, 130, 132, 249, 741, 742, 743, 745], "broadcast_arrai": [36, 37, 82, 83, 249], "broadcast_to": [36, 37, 82, 83, 130, 249], "can_cast": [36, 37, 82, 83, 125, 130, 249, 274], "float32": [36, 37, 48, 49, 82, 83, 88, 89, 94, 95, 122, 124, 130, 178, 244, 248, 249, 253, 254, 270, 271, 272, 274, 279, 282, 302, 305, 320, 614, 685, 686, 689, 741, 742, 743, 745], "float64": [36, 37, 124, 130, 249, 255, 258, 270, 271, 273, 302, 305, 320], "as_n": [36, 37, 82, 83, 130, 249, 276, 277, 278, 279, 280, 281, 282, 321, 340, 341, 362], "finfo": [36, 37, 82, 83, 249], "iinfo": [36, 37, 82, 83, 133, 249], "is_float_dtyp": [36, 37, 82, 83, 249], "is_int_dtyp": [36, 37, 82, 83, 249, 614, 690], "result_typ": [36, 37, 82, 83, 130, 249], "arrays_and_dtyp": [36, 37, 82, 83, 249, 308, 309, 310, 311, 312], "ab": [40, 41, 86, 87, 124, 127, 371, 376, 560, 563, 751, 817, 819, 1020], "aco": [40, 41, 86, 87, 371, 1020], "acosh": [40, 41, 86, 87, 249, 289, 290, 371, 1020], "x2": [40, 41, 42, 43, 50, 51, 75, 76, 86, 87, 88, 89, 96, 97, 120, 122, 178, 244, 248, 249, 316, 321, 359, 371, 385, 386, 387, 388, 389, 403, 404, 405, 406, 411, 412, 413, 414, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 448, 449, 450, 451, 452, 453, 454, 455, 456, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 497, 498, 499, 500, 501, 502, 503, 504, 521, 522, 523, 524, 525, 526, 527, 528, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 566, 567, 595, 596, 597, 598, 599, 614, 615, 616, 617, 618, 619, 734, 739, 751, 757, 758, 759, 775, 776, 777, 778, 789, 790, 791, 799, 800, 801, 808, 809, 810, 814, 815, 816, 939, 943], "asin": [40, 41, 86, 87, 371, 1020], "asinh": [40, 41, 86, 87, 371, 398, 1020], "881": [40, 41, 86, 87, 163, 167, 371, 394, 395, 396, 397], "82": [40, 41, 394, 395], "atan": [40, 41, 86, 87, 371, 1020], "atan2": [40, 41, 86, 87, 371, 1020], "atanh": [40, 41, 86, 87, 371, 1020], "bitwise_and": [40, 41, 86, 87, 371], "bitwise_invert": [40, 41, 86, 87, 371], "bitwise_left_shift": [40, 41, 86, 87, 371], "bitwise_or": [40, 41, 86, 87, 371], "bitwise_right_shift": [40, 41, 86, 87, 371], "bitwise_xor": [40, 41, 86, 87, 371], "ceil": [40, 41, 86, 87, 178, 179, 180, 371, 1020], "54": [40, 41, 86, 87, 102, 103, 122, 371, 439, 440, 441, 442, 443, 444, 447, 587, 590, 734, 750, 751, 789, 791, 922, 924, 926, 927, 932, 976, 977, 980], "416": [40, 41, 371, 439, 440, 442], "99": [40, 41, 371, 394, 397, 439, 440, 976, 977, 980], "cosh": [40, 41, 86, 87, 371, 1020], "divid": [40, 41, 75, 76, 86, 87, 122, 128, 371, 473, 476, 614, 680, 839, 878], "erf": [40, 41, 86, 87, 371], "exp": [40, 41, 86, 87, 371, 465, 468, 521, 524, 1020], "expm1": [40, 41, 86, 87, 371], "floor": [40, 41, 86, 87, 371, 427, 430, 614, 640, 1020], "floor_divid": [40, 41, 86, 87, 371], "greater": [40, 41, 75, 76, 86, 87, 371, 377, 380, 390, 393, 403, 406, 419, 422, 427, 430, 469, 472, 473, 476, 560, 563, 564, 567, 572, 575, 610, 613, 751, 757, 759, 839, 879, 882, 927, 933, 935], "greater_equ": [40, 41, 86, 87, 371], "isfinit": [40, 41, 86, 87, 124, 371], "isinf": [40, 41, 86, 87, 371], "isnan": [40, 41, 86, 87, 371], "less_equ": [40, 41, 86, 87, 371], "log10": [40, 41, 86, 87, 371], "log1p": [40, 41, 86, 87, 371], "log2": [40, 41, 86, 87, 371], "logaddexp": [40, 41, 86, 87, 371], "logical_and": [40, 41, 86, 87, 371, 1020], "logical_not": [40, 41, 86, 87, 371, 1020], "logical_or": [40, 41, 86, 87, 371, 1020], "logical_xor": [40, 41, 86, 87, 371], "multipli": [40, 41, 86, 87, 122, 126, 128, 371, 614, 632], "neg": [40, 41, 54, 55, 86, 87, 100, 101, 125, 129, 132, 163, 165, 178, 179, 180, 193, 194, 371, 485, 488, 489, 492, 543, 546, 560, 563, 564, 567, 751, 802, 804, 814, 816, 817, 819, 839, 857, 860, 873, 874, 875, 876, 877, 1009, 1010, 1013, 1015, 1018], "not_equ": [40, 41, 86, 87, 371], "pow": [40, 41, 86, 87, 371], "remaind": [40, 41, 75, 76, 86, 87, 371, 614, 640, 839, 878], "94": [40, 41, 86, 87, 394, 398, 572, 573], "256": [40, 41, 572, 573, 734, 740], "0001": [40, 41, 572, 573, 1058, 1059, 1060], "36": [40, 41, 572, 573, 751, 789, 791, 976, 977, 980], "67": [40, 41, 86, 87, 129, 371, 431, 434, 444, 447, 572, 573, 582, 584, 586], "45": [40, 41, 124, 572, 573, 695, 697, 700, 751, 789, 791, 839, 878, 921, 922, 925, 976, 977, 980], "24": [40, 41, 102, 103, 371, 431, 434, 572, 573, 587, 590, 614, 632, 695, 697, 700, 751, 763, 765, 789, 791, 921, 922, 924, 925, 926, 976, 977, 980], "678": [40, 41, 572, 573], "32": [40, 41, 44, 45, 124, 138, 163, 165, 371, 431, 434, 572, 573, 697, 698, 734, 737, 740, 741, 744, 751, 789, 791, 939, 943, 976, 977, 980], "sin": [40, 41, 86, 87, 128, 135, 371, 581, 614, 641, 1020], "841": [40, 41, 86, 87, 371, 577, 578, 579, 580, 581], "909": [40, 41, 86, 87, 371, 577, 578, 579, 580, 581], "141": [40, 41, 86, 87, 371, 577, 578, 579, 580, 581], "sinh": [40, 41, 86, 87, 371, 586, 1020], "18": [40, 41, 86, 87, 122, 129, 371, 431, 434, 582, 583, 584, 585, 586, 751, 763, 765, 789, 791, 976, 977, 980], "63": [40, 41, 44, 45, 86, 87, 96, 97, 371, 582, 583, 584, 585, 586, 587, 590, 697, 698, 751, 752, 754, 755, 756, 789, 791, 976, 977, 980], "23": [40, 41, 86, 87, 371, 431, 434, 572, 575, 582, 583, 584, 585, 586, 734, 740, 751, 763, 765, 939, 943], "232": [40, 41, 86, 87, 371, 582, 583, 584, 585, 586], "51": [40, 41, 371, 431, 434, 582, 583, 585], "sqrt": [40, 41, 86, 87, 371, 751, 817, 819], "squar": [40, 41, 86, 87, 124, 371, 587, 590, 734, 737, 751, 752, 755, 760, 762, 766, 768, 769, 771, 772, 774, 782, 798, 799, 801, 802, 804], "subtract": [40, 41, 86, 87, 122, 128, 371], "tan": [40, 41, 86, 87, 120, 121, 125, 129, 132, 135, 371, 390, 393, 394, 397, 601, 751, 763, 765, 944, 945, 949, 965, 966, 969, 1020], "whose": [40, 41, 54, 55, 86, 87, 100, 101, 121, 124, 178, 231, 235, 236, 240, 371, 381, 384, 394, 397, 407, 410, 439, 442, 444, 447, 560, 563, 577, 580, 582, 585, 600, 601, 602, 603, 604, 605, 609, 614, 625, 751, 752, 755, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 799, 801, 802, 804, 805, 807, 811, 813, 839, 857, 860, 873, 874, 875, 876, 877, 944, 945, 949, 950, 954, 976, 977, 980], "express": [40, 41, 86, 87, 121, 133, 135, 140, 371, 377, 380, 390, 393, 399, 402, 403, 406, 439, 442, 577, 580, 600, 601, 602, 603, 604], "radian": [40, 41, 86, 87, 121, 371, 377, 380, 390, 393, 399, 402, 403, 406, 439, 442, 577, 580, 600, 601, 602, 603, 604], "float": [40, 41, 86, 87, 120, 121, 124, 125, 129, 130, 132, 137, 139, 163, 165, 177, 178, 179, 180, 187, 193, 194, 201, 202, 205, 207, 208, 210, 211, 223, 224, 241, 243, 249, 255, 258, 277, 284, 287, 297, 300, 308, 311, 321, 354, 360, 364, 367, 370, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 497, 500, 505, 508, 509, 512, 517, 520, 521, 524, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 577, 580, 582, 585, 587, 590, 595, 599, 600, 601, 602, 603, 604, 605, 609, 610, 613, 614, 626, 627, 629, 641, 649, 650, 672, 673, 680, 681, 695, 697, 700, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 734, 737, 741, 744, 750, 751, 752, 755, 760, 762, 766, 768, 769, 771, 772, 774, 783, 785, 792, 794, 795, 797, 799, 801, 802, 804, 817, 819, 823, 824, 827, 829, 832, 834, 837, 899, 900, 901, 902, 921, 922, 925, 927, 932, 933, 935, 944, 945, 949, 950, 954, 960, 964, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008], "tangent": [40, 41, 86, 87, 121, 163, 174, 371, 399, 402, 403, 406, 407, 410, 600, 601, 602, 603, 604, 605, 609], "56": [40, 41, 86, 87, 122, 371, 587, 590, 600, 601, 602, 603, 604, 695, 697, 700, 751, 789, 791, 976, 977, 980], "19": [40, 41, 86, 87, 122, 371, 394, 396, 398, 431, 434, 600, 601, 602, 603, 604, 751, 763, 765], "tanh": [40, 41, 86, 87, 135, 163, 371, 606, 1020], "762": [40, 41, 86, 87, 163, 174, 371, 605, 607, 608, 609], "964": [40, 41, 86, 87, 163, 174, 371, 605, 607, 608, 609], "trunc": [40, 41, 86, 87, 371], "elementwis": [41, 75, 76, 87, 119, 125, 135, 140, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 439, 442, 444, 447, 448, 451, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 540, 541, 542, 543, 546, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 595, 599, 600, 604, 605, 609, 610, 613], "all_equ": [42, 43, 88, 89, 614, 619], "equality_matrix": [42, 43, 88, 89, 614, 615, 616, 617, 618, 619], "x1": [42, 43, 86, 87, 88, 89, 120, 122, 178, 244, 248, 249, 279, 282, 316, 321, 359, 371, 385, 388, 389, 403, 406, 411, 414, 419, 422, 423, 426, 427, 430, 431, 434, 448, 451, 452, 453, 456, 473, 476, 477, 480, 481, 484, 497, 500, 501, 504, 521, 524, 525, 528, 533, 536, 537, 540, 541, 542, 543, 546, 547, 552, 555, 560, 563, 564, 567, 595, 596, 599, 614, 615, 616, 617, 618, 619, 622, 734, 739, 751, 757, 759, 775, 778, 789, 791, 799, 801, 808, 810, 814, 816, 939, 943], "gather_nd": [42, 43, 75, 76, 88, 89, 614, 647, 1020], "to_numpi": [42, 43, 75, 76, 88, 89, 138, 614, 686, 1020], "adam_step": [44, 45, 90, 91, 695, 701], "mw": [44, 45, 90, 91, 139, 695, 697, 698, 699, 700, 701, 702, 704], "vw": [44, 45, 90, 91, 139, 695, 697, 698, 699, 700, 701, 702, 704], "beta1": [44, 45, 90, 91, 139, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 716, 717, 718, 719, 1058, 1059, 1060], "beta2": [44, 45, 90, 91, 139, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 716, 717, 718, 719, 1058, 1059, 1060], "999": [44, 45, 86, 87, 90, 91, 139, 371, 605, 606, 608, 609, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 716, 717, 718, 719, 1058, 1059, 1060], "epsilon": [44, 45, 52, 53, 56, 57, 90, 91, 98, 99, 102, 103, 125, 129, 132, 139, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 716, 717, 718, 719, 751, 783, 785, 792, 794, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 921, 922, 923, 924, 925, 926, 1056, 1057, 1058, 1059, 1060], "1e": [44, 45, 52, 53, 56, 57, 90, 91, 98, 99, 102, 103, 125, 129, 132, 139, 140, 614, 650, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 716, 717, 718, 719, 751, 802, 804, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 921, 922, 923, 924, 925, 926, 1020, 1058, 1059, 1060, 1061, 1063], "07": [44, 45, 52, 53, 90, 91, 98, 99, 139, 371, 572, 575, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 716, 717, 718, 719, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 1058, 1059, 1060], "dcdw": [44, 45, 90, 91, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 716, 717, 718, 719, 720, 721, 722, 723], "adam_step_delta": [44, 45, 90, 91, 695, 697, 698, 699, 700, 701], "639": [44, 45, 695, 697, 698, 700], "11": [44, 45, 77, 78, 86, 87, 104, 105, 122, 124, 129, 371, 385, 387, 388, 389, 411, 414, 568, 571, 614, 632, 642, 697, 698, 751, 763, 765, 789, 791, 823, 834, 837, 839, 857, 860, 865, 868, 927, 929, 930, 931, 939, 943, 944, 945, 949, 976, 977, 980], "00121": [44, 45, 697, 698], "0102": [44, 45, 697, 698], "0397": [44, 45, 697, 698], "exclus": [44, 45, 75, 76, 90, 91, 124, 125, 129, 140, 178, 179, 180, 614, 632, 660, 661, 663, 695, 711, 712, 713, 714, 715, 927, 929, 930], "is_var": [44, 45, 90, 91, 695, 711, 712, 713, 714, 715], "gradient": [45, 75, 76, 91, 119, 129, 138, 139, 151, 152, 321, 365, 697, 700, 702, 704, 706, 707, 709, 711, 714, 716, 718, 720, 722, 724, 726, 728, 729, 730, 731, 732, 733, 899, 900, 901, 902, 1020, 1058, 1059, 1060, 1061, 1062, 1063], "depthwise_conv2d": [48, 49, 94, 95, 734, 745, 1020], "stride": [48, 49, 94, 95, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "pad": [48, 49, 94, 95, 614, 641, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 839, 849, 852, 895, 898, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "data_format": [48, 49, 94, 95, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "nhwc": [48, 49, 94, 95, 734, 737, 738, 741, 742, 743, 744, 745, 1042, 1045, 1046, 1049], "dilat": [48, 49, 94, 95, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "255": [48, 49, 94, 95, 741, 742, 743, 745], "128": [48, 49, 94, 95, 734, 740, 741, 742, 743, 745, 751, 789, 791], "linear_algebra": [50, 51, 96, 97, 119, 137, 751, 752, 755, 757, 759, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 782, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 799, 801, 802, 804, 805, 807, 808, 810, 811, 813, 814, 816, 817, 819, 820, 822], "choleski": [50, 51, 96, 97, 751, 756], "upper": [50, 51, 75, 76, 96, 97, 124, 178, 193, 194, 236, 240, 751, 752, 753, 754, 755, 756, 795, 797, 927, 933, 935], "625": [50, 51, 751, 752, 753, 755], "25": [50, 51, 52, 53, 102, 103, 129, 371, 582, 585, 587, 590, 591, 594, 751, 752, 753, 755, 763, 765, 772, 774, 823, 829, 830, 832, 921, 922, 924, 925, 926, 976, 977, 980], "cross": [50, 51, 77, 78, 751, 823, 824, 827, 829, 832, 834, 837, 1020], "axi": [50, 51, 52, 53, 54, 55, 64, 65, 66, 67, 68, 69, 75, 76, 80, 81, 98, 99, 100, 101, 110, 111, 112, 113, 114, 115, 120, 122, 124, 125, 129, 130, 132, 133, 135, 137, 140, 151, 163, 168, 178, 207, 208, 209, 210, 211, 212, 321, 323, 326, 333, 346, 347, 348, 349, 350, 351, 352, 353, 365, 614, 632, 633, 642, 693, 751, 757, 758, 759, 763, 765, 814, 815, 816, 817, 818, 819, 823, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 866, 867, 868, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 894, 895, 898, 927, 938, 939, 940, 941, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "det": [50, 51, 77, 78, 751], "diagon": [50, 51, 77, 78, 178, 193, 194, 231, 235, 236, 240, 751, 811, 813], "offset": [50, 51, 56, 57, 102, 103, 751, 763, 764, 765, 811, 812, 813, 921, 922, 923, 924, 925, 926], "axis1": [50, 51, 54, 55, 100, 101, 751, 763, 764, 765, 839, 887, 888, 889, 890], "axis2": [50, 51, 751, 763, 764, 765], "eigh": [50, 51, 77, 78, 751], "namedtupl": [50, 51, 62, 63, 751, 766, 767, 768, 795, 796, 797, 802, 804, 944, 945, 947, 949, 950, 952, 954, 955, 957, 959], "eigvalsh": [50, 51, 77, 78, 751], "inv": [50, 51, 77, 78, 137, 751, 1020], "matmul": [50, 51, 96, 97, 119, 124, 126, 135, 751, 802, 804, 1020], "matrix_norm": [50, 51, 75, 76, 751], "ord": [50, 51, 75, 76, 751, 779, 780, 781, 817, 818, 819], "fro": [50, 51, 751, 779, 780, 781], "keepdim": [50, 51, 66, 67, 68, 69, 75, 76, 112, 113, 114, 115, 133, 614, 693, 751, 779, 780, 781, 817, 818, 819, 939, 940, 941, 976, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "matrix_rank": [50, 51, 77, 78, 751], "rtol": [50, 51, 751, 783, 784, 785, 792, 793, 794], "matrix_transpos": [50, 51, 77, 78, 137, 751], "outer": [50, 51, 77, 78, 751, 899, 900, 901, 902], "pinv": [50, 51, 77, 78, 751, 1020], "qr": [50, 51, 77, 78, 751], "reduc": [50, 51, 75, 76, 137, 321, 365, 614, 637, 751, 795, 796, 797, 939, 940, 941, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "solv": [50, 51, 77, 78, 136, 151, 751], "svd": [50, 51, 77, 78, 751, 1020], "full_matric": [50, 51, 751, 802, 803, 804], "svdval": [50, 51, 77, 78, 751], "tensordot": [50, 51, 77, 78, 751], "trace": [50, 51, 75, 76, 77, 78, 135, 152, 614, 660, 661, 663, 751], "vecdot": [50, 51, 77, 78, 751], "vector_norm": [50, 51, 75, 76, 751], "vector_to_skew_symmetric_matrix": [50, 51, 77, 78, 751, 1020], "binary_cross_entropi": [52, 53, 98, 99, 823, 828], "pred": [52, 53, 98, 99, 125, 129, 132, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838], "357": [52, 53, 98, 99, 823, 824, 825, 826, 827, 828, 834, 835, 837, 838], "223": [52, 53, 98, 99, 823, 824, 825, 826, 827, 828, 834, 835, 836, 838], "cross_entropi": [52, 53, 98, 99, 125, 129, 132, 823, 833, 834, 837], "3862944": [52, 53, 823, 829, 830, 832], "sparse_cross_entropi": [52, 53, 98, 99, 823, 838], "loss": [53, 99, 119, 125, 138, 139, 140, 824, 827, 829, 832, 834, 837, 1020], "clip": [54, 55, 75, 76, 100, 101, 125, 129, 132, 135, 138, 140, 371, 541, 542, 614, 626, 627, 629, 839, 844, 1020], "x_min": [54, 55, 75, 76, 100, 101, 135, 140, 839, 840, 841, 842, 843, 844], "x_max": [54, 55, 75, 76, 100, 101, 135, 140, 839, 840, 841, 842, 843, 844], "roll": [54, 55, 100, 101, 120, 129, 839, 840, 841, 877], "concat": [54, 55, 75, 76, 100, 101, 321, 350, 351, 352, 353, 365, 614, 641, 839, 1020], "xs": [54, 55, 100, 101, 129, 321, 344, 348, 350, 351, 352, 614, 615, 618, 623, 695, 706, 839, 845, 846, 847, 848], "constant_pad": [54, 55, 100, 101, 839], "pad_width": [54, 55, 100, 101, 839, 849, 850, 851, 852, 895, 896, 897, 898], "expand_dim": [54, 55, 100, 101, 135, 138, 839, 1020], "flip": [54, 55, 100, 101, 137, 138, 140, 371, 415, 418, 839, 865, 868, 1020], "permute_dim": [54, 55, 100, 101, 839], "reshap": [54, 55, 75, 76, 100, 101, 124, 132, 135, 137, 140, 839, 1020], "shift": [54, 55, 100, 101, 120, 122, 371, 419, 422, 427, 430, 839, 873, 874, 875, 876, 877], "int": [54, 55, 100, 101, 119, 120, 122, 125, 129, 130, 131, 132, 133, 140, 163, 168, 175, 176, 178, 193, 194, 201, 202, 205, 207, 208, 210, 211, 231, 235, 236, 240, 249, 265, 268, 278, 283, 284, 287, 291, 294, 302, 305, 321, 343, 346, 347, 348, 349, 357, 358, 359, 365, 366, 371, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 614, 620, 632, 633, 636, 637, 638, 641, 642, 651, 667, 670, 679, 693, 695, 697, 700, 702, 704, 716, 718, 734, 735, 737, 739, 740, 741, 744, 751, 757, 759, 763, 765, 808, 810, 811, 813, 814, 816, 817, 819, 823, 829, 832, 834, 837, 839, 845, 848, 849, 852, 853, 856, 857, 860, 861, 864, 865, 868, 873, 874, 875, 876, 877, 878, 879, 882, 883, 886, 887, 890, 891, 894, 895, 898, 899, 900, 901, 902, 903, 906, 915, 921, 922, 925, 927, 928, 929, 930, 937, 939, 940, 941, 965, 966, 969, 971, 974, 976, 981, 984, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "larger": [54, 55, 100, 101, 124, 135, 140, 249, 284, 287, 839, 840, 843, 873, 874, 875, 876, 877, 976, 997, 1000, 1005, 1008], "along": [54, 55, 75, 76, 100, 101, 119, 132, 178, 207, 208, 210, 211, 321, 346, 347, 348, 349, 350, 351, 352, 353, 365, 614, 632, 633, 642, 693, 751, 779, 781, 811, 813, 814, 816, 817, 819, 823, 829, 832, 834, 837, 839, 845, 848, 857, 860, 865, 868, 873, 874, 875, 876, 877, 878, 883, 886, 891, 894, 899, 900, 901, 902, 927, 938, 939, 940, 941, 965, 966, 969, 971, 974, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "flatten": [54, 55, 75, 76, 100, 101, 614, 641, 751, 789, 791, 817, 819, 839, 865, 868, 873, 874, 875, 876, 877, 939, 940, 941, 944, 945, 949, 950, 954, 960, 964], "restor": [54, 55, 100, 101, 839, 873, 874, 875, 876, 877], "squeez": [54, 55, 100, 101, 839, 1020], "stack": [54, 55, 75, 76, 100, 101, 135, 178, 231, 235, 236, 240, 751, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 782, 783, 785, 786, 788, 792, 794, 795, 797, 802, 804, 805, 807, 811, 813, 839, 903, 904, 913, 914, 1020, 1042, 1051], "swapax": [54, 55, 100, 101, 839], "axis0": [54, 55, 100, 101, 839, 887, 888, 889, 890], "tile": [54, 55, 100, 101, 839, 1020], "rep": [54, 55, 100, 101, 839, 891, 892, 893, 894], "zero_pad": [54, 55, 100, 101, 839, 1020], "layer_norm": [56, 57, 102, 103, 921, 926], "normalized_idx": [56, 57, 102, 103, 921, 922, 923, 924, 925, 926], "05": [56, 57, 102, 103, 124, 321, 695, 697, 700, 921, 922, 923, 924, 925, 926], "scale": [56, 57, 102, 103, 129, 321, 363, 364, 695, 720, 722, 734, 746, 749, 750, 921, 922, 923, 924, 925, 926, 1042, 1050, 1053, 1058, 1061], "new_std": [56, 57, 102, 103, 921, 922, 923, 924, 925, 926, 1056, 1057], "0976": [56, 57, 921, 922, 923, 925], "3452": [56, 57, 921, 922, 923, 925], "2740": [56, 57, 921, 922, 923, 925], "1047": [56, 57, 921, 922, 923, 925], "5886": [56, 57, 921, 922, 923, 925], "2732": [56, 57, 921, 922, 923, 925], "7696": [56, 57, 921, 922, 923, 925], "7024": [56, 57, 921, 922, 923, 925], "2518": [56, 57, 921, 922, 923, 925], "001": [56, 57, 138, 139, 371, 572, 575, 695, 697, 700, 921, 922, 923, 925], "576": [56, 57, 921, 922, 923, 925], "292": [56, 57, 921, 922, 923, 925], "33": [56, 57, 86, 87, 394, 396, 751, 789, 791, 921, 922, 923, 925, 976, 977, 980], "581": [56, 57, 695, 697, 700, 921, 922, 923, 925], "891": [56, 57, 163, 167, 921, 922, 923, 925], "01": [56, 57, 140, 371, 568, 571, 572, 575, 921, 922, 923, 925], "579": [56, 57, 921, 922, 923, 925], "931": [56, 57, 921, 922, 923, 925], "norm": [57, 75, 76, 103, 119, 614, 626, 627, 629, 751, 779, 781, 817, 819, 922, 923, 924, 925, 926, 1020, 1057, 1058, 1060], "random": [59, 75, 76, 105, 119, 131, 140, 151, 928, 929, 930, 932, 933, 935, 937, 938, 1020], "unique_al": [62, 63, 108, 109, 944], "unique_count": [62, 63, 108, 109, 944, 951], "uc": [62, 63, 950, 952], "count": [62, 63, 122, 138, 321, 359, 751, 814, 816, 839, 857, 860, 944, 945, 949, 950, 952, 954, 1009, 1010, 1013, 1015, 1018], "unique_invers": [62, 63, 108, 109, 944], "unique_valu": [62, 63, 108, 109, 944], "argsort": [64, 65, 110, 111, 965], "descend": [64, 65, 110, 111, 751, 802, 804, 805, 807, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975], "sort": [65, 75, 76, 77, 78, 79, 111, 119, 751, 766, 768, 802, 804, 805, 807, 966, 969], "einsum": [66, 67, 112, 113, 976], "equat": [66, 67, 112, 113, 751, 799, 801, 976, 977, 978, 979, 980], "max": [66, 67, 75, 76, 112, 113, 249, 284, 287, 291, 294, 371, 541, 614, 626, 627, 629, 637, 670, 671, 751, 783, 785, 792, 794, 976, 1058, 1060], "min": [66, 67, 75, 76, 112, 113, 249, 284, 287, 291, 294, 371, 542, 614, 637, 670, 671, 680, 751, 795, 797, 802, 804, 805, 807, 817, 819, 976], "prod": [66, 67, 75, 76, 112, 113, 122, 130, 614, 637, 976], "std": [66, 67, 112, 113, 122, 927, 932, 944, 945, 949, 976], "var": [66, 67, 112, 113, 116, 117, 122, 135, 899, 900, 901, 976], "statist": [67, 113, 116, 117, 119, 124, 130, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008], "util": [69, 115, 119, 131, 321, 354, 1010, 1013, 1015, 1018], "add_ivy_array_instance_method": 70, "cl": [70, 71, 116, 117], "to_ignor": [70, 71, 116, 117, 903, 914], "loop": [70, 71, 116, 117, 126, 133, 152, 899, 900, 901, 902], "_wrap_funct": [70, 71, 116, 117, 125, 127], "toi": [70, 71, 116, 117], "arrayexampl": [70, 71], "hasattr": [70, 71, 116, 117, 137], "dictionari": [72, 75, 76, 77, 78, 79, 138, 152, 321, 364], "map": [72, 73, 74, 75, 76, 77, 78, 79, 86, 87, 100, 101, 120, 124, 125, 129, 138, 151, 152, 169, 171, 173, 321, 330, 385, 387, 389, 600, 601, 603, 873, 875, 877, 903, 910, 911, 915, 916, 1042, 1053], "pair": [72, 371, 403, 406, 734, 750, 751, 757, 759], "via": [72, 119, 129, 130, 131, 132, 135, 137, 138, 151, 903, 904, 913, 914], "__delitem__": 72, "__iter__": 72, "__len__": 72, "len": [72, 137, 140, 178, 213, 216], "__reversed__": 72, "fromkei": 72, "keyerror": 72, "popitem": 72, "lifo": 72, "setdefault": 72, "insert": [72, 839, 853, 856, 903, 908, 939, 940], "lack": 72, "containerwithactiv": [73, 77, 78], "dict_in": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "queue": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 138, 321, 330, 331, 614, 669, 674], "queue_load_s": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "container_combine_method": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "list_join": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "print_limit": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "key_length_limit": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "print_ind": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "print_line_spac": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "ivyh": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "default_key_color": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "keyword_color_dict": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "rebuild_child_contain": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "types_to_iteratively_nest": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "alphabetical_kei": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "containerbas": [73, 74, 75, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 129], "key_chain": [73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 169, 171, 173, 179, 181, 182, 184, 186, 188, 190, 192, 193, 195, 196, 198, 200, 202, 204, 206, 207, 209, 210, 212, 213, 215, 217, 218, 220, 222, 223, 225, 226, 228, 230, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 255, 257, 259, 260, 262, 264, 265, 267, 269, 270, 272, 274, 279, 281, 284, 286, 288, 291, 293, 295, 297, 299, 301, 302, 304, 306, 308, 310, 312, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 444, 446, 448, 450, 452, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 543, 545, 547, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 577, 579, 581, 582, 584, 586, 587, 589, 591, 593, 595, 596, 598, 600, 601, 603, 605, 606, 608, 610, 612, 615, 617, 619, 627, 628, 643, 645, 647, 685, 686, 688, 702, 703, 705, 707, 708, 710, 711, 713, 715, 716, 717, 719, 720, 721, 723, 724, 725, 727, 752, 754, 756, 775, 777, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 903, 916, 922, 924, 926, 929, 931, 933, 934, 936, 945, 946, 948, 950, 951, 953, 955, 956, 958, 960, 961, 963, 966, 968, 970, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1010, 1012, 1014, 1015, 1017, 1019], "to_appli": [73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 169, 171, 173, 179, 181, 182, 184, 186, 188, 190, 192, 193, 195, 196, 198, 200, 202, 204, 206, 207, 209, 210, 212, 213, 215, 217, 218, 220, 222, 223, 225, 226, 228, 230, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 255, 257, 259, 260, 262, 264, 265, 267, 269, 270, 272, 274, 279, 281, 284, 286, 288, 291, 293, 295, 297, 299, 301, 302, 304, 306, 308, 310, 312, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 444, 446, 448, 450, 452, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 543, 545, 547, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 577, 579, 581, 582, 584, 586, 587, 589, 591, 593, 595, 596, 598, 600, 601, 603, 605, 606, 608, 610, 612, 615, 617, 619, 627, 628, 643, 645, 647, 685, 686, 688, 702, 703, 705, 707, 708, 710, 711, 713, 715, 716, 717, 719, 720, 721, 723, 724, 725, 727, 752, 754, 756, 775, 777, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 903, 916, 922, 924, 926, 933, 934, 936, 945, 946, 948, 950, 951, 953, 955, 956, 958, 960, 961, 963, 966, 968, 970, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1010, 1012, 1014, 1015, 1017, 1019], "prune_unappli": [73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 169, 171, 173, 179, 181, 182, 184, 186, 188, 190, 192, 193, 195, 196, 198, 200, 202, 204, 206, 207, 209, 210, 212, 213, 215, 217, 218, 220, 222, 223, 225, 226, 228, 230, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 255, 257, 259, 260, 262, 264, 265, 267, 269, 270, 272, 274, 279, 281, 284, 286, 288, 291, 293, 295, 297, 299, 301, 302, 304, 306, 308, 310, 312, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 444, 446, 448, 450, 452, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 543, 545, 547, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 577, 579, 581, 582, 584, 586, 587, 589, 591, 593, 595, 596, 598, 600, 601, 603, 605, 606, 608, 610, 612, 615, 617, 619, 627, 628, 643, 645, 647, 685, 686, 688, 702, 703, 705, 707, 708, 710, 711, 713, 715, 716, 717, 719, 720, 721, 723, 724, 725, 727, 752, 754, 756, 775, 777, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 903, 916, 922, 924, 926, 933, 934, 936, 945, 946, 948, 950, 951, 953, 955, 956, 958, 960, 961, 963, 966, 968, 970, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1010, 1012, 1014, 1015, 1017, 1019], "map_sequ": [73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 169, 171, 173, 179, 181, 182, 184, 186, 188, 190, 192, 193, 195, 196, 198, 200, 202, 204, 206, 207, 209, 210, 212, 213, 215, 217, 218, 220, 222, 223, 225, 226, 228, 230, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 255, 257, 259, 260, 262, 264, 265, 267, 269, 270, 272, 274, 279, 281, 284, 286, 288, 291, 293, 295, 297, 299, 301, 302, 304, 306, 308, 310, 312, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 399, 401, 407, 409, 415, 417, 435, 437, 439, 441, 443, 444, 446, 448, 450, 452, 457, 459, 461, 463, 465, 467, 469, 471, 485, 487, 489, 491, 493, 495, 505, 507, 509, 511, 513, 515, 517, 519, 529, 531, 543, 545, 547, 548, 550, 556, 558, 568, 570, 572, 574, 576, 577, 579, 581, 582, 584, 586, 587, 589, 591, 593, 595, 596, 598, 600, 601, 603, 605, 606, 608, 610, 612, 615, 617, 619, 627, 628, 643, 645, 647, 685, 686, 688, 702, 703, 705, 707, 708, 710, 711, 713, 715, 716, 717, 719, 720, 721, 723, 724, 725, 727, 752, 754, 756, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 887, 889, 891, 893, 895, 897, 922, 924, 926, 933, 934, 936, 945, 946, 948, 950, 951, 953, 955, 956, 958, 960, 961, 963, 966, 968, 970, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1010, 1012, 1014, 1015, 1017, 1019], "chain": [73, 74, 75, 76, 86, 87, 100, 101, 128, 129, 139, 140, 152, 169, 171, 173, 385, 387, 389, 600, 601, 603, 873, 875, 877, 899, 900, 901, 903, 916, 1064, 1065], "prune": [73, 74, 75, 76, 86, 87, 100, 101, 169, 171, 173, 385, 387, 389, 600, 601, 603, 873, 875, 877, 903, 916, 917, 918], "sequenc": [73, 74, 75, 76, 77, 78, 79, 86, 87, 100, 101, 122, 124, 130, 133, 151, 169, 171, 173, 175, 176, 321, 330, 331, 385, 387, 389, 600, 601, 603, 614, 623, 664, 839, 873, 875, 877, 878, 883, 886, 927, 929, 930, 976, 981, 984, 1009, 1010, 1013, 1015, 1018, 1042, 1051, 1056, 1057, 1064, 1065], "static_softplu": [73, 74, 169], "__getitem__": [75, 76, 129], "queri": [75, 76, 129, 130, 137, 321, 354, 364, 734, 749, 750, 1042, 1053], "slice": [75, 76, 614, 642, 643, 646, 903, 912], "represent": [75, 76, 77, 78, 79, 151, 177, 249, 253, 254, 284, 287, 291, 294, 321, 337, 338, 371, 372, 375, 385, 388, 411, 414, 423, 426, 431, 434, 537, 540, 543, 546, 614, 620, 679, 684], "asynchron": [75, 76, 77, 78, 79], "arriv": [75, 76, 77, 78, 79], "timeout": [75, 76, 77, 78, 79, 321, 330, 331, 614, 669, 674], "length": [75, 76, 77, 78, 79, 124, 133, 138, 178, 179, 180, 213, 216, 751, 802, 804, 805, 807, 839, 869, 872], "whitespac": [75, 76, 77, 78, 79], "indent": [75, 76, 77, 78, 79, 138], "extra": [75, 76, 77, 78, 79, 122, 127, 128, 135, 695, 706], "newlin": [75, 76, 77, 78, 79, 121], "handl": [75, 76, 77, 78, 79, 118, 120, 124, 125, 127, 129, 130, 131, 132, 139, 152, 175, 176, 321, 337, 338, 339, 340, 341, 355, 359, 360, 367, 370, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 1058, 1059, 1060, 1061, 1062, 1063], "color": [75, 76, 77, 78, 79, 1067, 1068], "termcolor": [75, 76, 77, 78, 79], "rebuild": [75, 76, 77, 78, 79], "constructor": [75, 76, 77, 78, 79, 130, 131, 137, 614, 621, 1064, 1065], "param": [75, 76, 77, 78, 79, 88, 89, 135, 140, 614, 620, 642, 643, 646, 647], "alphabet": [75, 76, 77, 78, 79], "preserv": [75, 76, 77, 78, 79, 124, 140, 152, 695, 729, 839, 857, 860], "__setitem__": [75, 76, 128, 129, 137], "val": [75, 76, 132, 137, 614, 656, 657, 658, 672, 673], "after": [75, 76, 122, 124, 129, 130, 134, 249, 316, 321, 371, 587, 590, 695, 702, 704, 706, 707, 709, 716, 718, 720, 722, 724, 726, 921, 922, 925, 1058, 1059, 1060, 1061, 1062, 1063], "all_fals": [75, 76], "assert_is_bool": [75, 76], "entri": [75, 76, 178, 207, 208, 210, 211, 839, 878, 903, 916], "evalu": [75, 76, 129, 371, 461, 464, 465, 468, 505, 508, 509, 512, 513, 516, 517, 520, 548, 551, 572, 575, 591, 594, 903, 904, 913, 914, 1009, 1010, 1013, 1015, 1018], "assert": [75, 76, 124, 133, 137, 138, 614, 624], "all_key_chain": [75, 76], "include_empti": [75, 76], "all_tru": [75, 76, 129, 138], "arrays_as_list": [75, 76], "intermedi": [75, 76], "as_arrai": [75, 76, 614, 651, 677], "as_bool": [75, 76], "as_on": [75, 76], "fill": [75, 76, 178, 187, 201, 202, 205, 223, 224, 226, 229, 241, 243, 244, 248, 927, 929, 930], "as_random_uniform": [75, 76], "low": [75, 76, 104, 105, 135, 927, 929, 930, 931, 933, 934, 935, 936], "uniform": [75, 76, 139, 927, 928, 929, 930, 933, 935, 1033, 1035, 1036, 1039, 1040], "boundari": [75, 76, 927, 933, 935], "interv": [75, 76, 135, 140, 178, 179, 180, 207, 208, 210, 211, 751, 814, 816, 839, 840, 843, 883, 886, 927, 929, 930, 933, 935, 1009, 1010, 1013, 1015, 1018], "as_vari": [75, 76, 124], "as_zero": [75, 76], "assert_contains_sub_contain": [75, 76], "sub_cont": [75, 76], "except": [75, 76, 121, 128, 132, 133, 137, 152, 249, 265, 268, 614, 624, 635, 658, 691, 751, 792, 794, 839, 845, 848, 883, 886, 939, 942, 1009, 1010, 1013, 1015, 1018], "diff": [75, 76, 129, 138], "screen": [75, 76, 138], "assert_contains_sub_structur": [75, 76], "check_shap": [75, 76], "assert_ident": [75, 76], "check_typ": [75, 76], "same_arrai": [75, 76, 138], "datatyp": [75, 76, 82, 83, 178, 182, 185, 218, 221, 249, 275, 307], "assert_identical_structur": [75, 76], "at_key_chain": [75, 76], "ignore_key_error": [75, 76], "ignore_non": [75, 76], "at_kei": [75, 76], "ignor": [75, 76, 122, 124, 152, 178, 213, 216, 903, 914, 1058, 1062], "substr": [75, 76], "clip_min": [75, 76], "clip_max": [75, 76], "config": [75, 76, 138, 903, 916], "duplic": [75, 76, 121, 126, 127, 133, 137, 139], "compar": [75, 76, 124, 133, 138, 614, 615, 618, 622, 623, 944, 945, 949, 950, 954, 960, 964, 965, 966, 969, 971, 974], "container_rightmost": [75, 76], "common_key_chain": [75, 76, 129], "contains_sub_contain": [75, 76], "match": [75, 76, 129, 249, 255, 258, 371, 564, 567, 614, 664], "contains_sub_structur": [75, 76], "create_if_abs": [75, 76], "inplac": [75, 76, 90, 91, 118, 120, 122, 127, 128, 137, 139, 614, 624, 655, 658, 659, 682, 695, 702, 703, 704, 705, 707, 708, 709, 710, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 1031, 1032, 1058, 1059, 1060, 1061, 1062, 1063], "cutoff_at_depth": [75, 76], "depth_cutoff": [75, 76], "cutoff_at_height": [75, 76], "height_cutoff": [75, 76], "deep_copi": [75, 76, 138], "intern": [75, 76, 121, 124, 128, 129, 131, 132, 321, 695, 732, 903, 904, 913, 914, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1064, 1065], "belong": [75, 76, 139], "dev_str": [75, 76], "diff_kei": [75, 76], "detect_key_diff": [75, 76], "detect_value_diff": [75, 76], "detect_shape_diff": [75, 76], "treat": [75, 76, 124, 136, 140, 175, 176], "detect": [75, 76, 120, 124, 133, 138, 139, 903, 904, 914], "container0": [75, 76], "axes_length": [75, 76, 614, 636, 637, 638], "rearrang": [75, 76, 614, 636, 638], "reduct": [75, 76, 124, 130, 137, 614, 637, 670, 671, 1009, 1010, 1013, 1015, 1018, 1020], "One": [75, 76, 124, 130, 135, 137, 138, 614, 637, 839, 869, 872, 927, 929, 930], "callabl": [75, 76, 124, 129, 135, 153, 154, 155, 156, 157, 158, 159, 160, 161, 175, 176, 249, 289, 290, 321, 365, 614, 620, 625, 635, 637, 899, 900, 901, 902, 903, 909, 913, 914, 915], "find_sub_contain": [75, 76], "sub_cont_to_find": [75, 76], "exsit": [75, 76], "find_sub_structur": [75, 76], "sub_struc_to_find": [75, 76], "flatten_key_chain": [75, 76, 138, 1054, 1055], "__": [75, 76, 122, 138], "above_height": [75, 76, 138], "below_depth": [75, 76, 138], "format_key_chain": [75, 76], "format_fn": [75, 76], "string": [75, 76, 126, 130, 131, 133, 135, 138, 249, 253, 254, 279, 282, 296, 320, 321, 337, 338, 339, 340, 354, 360, 366, 367, 370, 614, 634], "from_disk_as_hdf5": [75, 76, 138], "h5_obj_or_filepath": [75, 76], "slice_obj": [75, 76], "load": [75, 76, 152], "disk": [75, 76, 138], "h5py": [75, 76], "hdf5": [75, 76, 138, 1054, 1055], "h5": [75, 76], "from_disk_as_json": [75, 76, 138], "json_filepath": [75, 76], "json": [75, 76, 138], "dure": [75, 76, 125, 129, 130, 131, 132, 152, 175, 176, 321, 366, 614, 691, 695, 697, 700, 702, 704, 716, 718, 751, 775, 778, 899, 900, 901, 902, 976, 997, 1000, 1005, 1008, 1054, 1055, 1058, 1059, 1060, 1062], "from_disk_as_pickl": [75, 76, 138], "pickle_filepath": [75, 76], "from_flat_list": [75, 76], "flat_list": [75, 76], "hierarchi": [75, 76, 138], "flat": [75, 76, 614, 670, 839, 865, 868], "popul": [75, 76, 124, 130, 131, 135, 927, 928, 976, 997, 1000, 1005, 1008], "from_numpi": [75, 76, 138], "h5_file_s": [75, 76], "batch": [75, 76, 125, 129, 138, 321, 363, 364, 614, 641, 734, 747, 751, 817, 819, 899, 900, 901, 902, 921, 922, 925, 1056, 1057], "handle_inplac": [75, 76], "prime": [75, 76], "overwritten": [75, 76, 126, 128], "has_kei": [75, 76], "query_kei": [75, 76], "somewher": [75, 76], "has_key_chain": [75, 76], "include_inf": [75, 76, 614, 653, 694], "leafwis": [75, 76], "nan": [75, 76, 119, 121, 124, 177, 249, 255, 258, 371, 372, 375, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 399, 402, 403, 406, 435, 438, 439, 442, 444, 447, 461, 464, 465, 468, 469, 472, 485, 488, 493, 496, 505, 508, 509, 512, 517, 520, 521, 524, 543, 546, 560, 563, 564, 567, 568, 571, 577, 580, 582, 585, 587, 590, 600, 604, 605, 609, 610, 613, 614, 653, 694, 734, 750, 944, 945, 949, 950, 954, 960, 964, 976, 981, 984, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "well": [75, 76, 124, 132, 139, 140, 151, 614, 653, 751, 799, 801], "inf": [75, 76, 124, 177, 614, 653, 694, 751, 817, 819], "identical_array_shap": [75, 76], "identical_config": [75, 76], "identical_structur": [75, 76], "if_exist": [75, 76], "key_chains_contain": [75, 76], "sub_str": [75, 76], "join": [75, 76, 839, 845, 848, 883, 886, 1020], "list_stack": [75, 76, 138], "dim": [75, 76, 130, 614, 667, 1042, 1053], "func": [75, 76, 129, 175, 176, 321, 365, 614, 625, 695, 706, 903, 916], "map_cont": [75, 76], "include_self": [75, 76], "possibi": [75, 76], "matrix": [75, 76, 178, 213, 216, 231, 235, 236, 240, 614, 615, 618, 626, 734, 747, 751, 752, 755, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 775, 778, 779, 781, 782, 783, 785, 786, 788, 792, 794, 795, 797, 799, 801, 802, 804, 805, 807, 811, 813, 820, 822, 1042, 1052], "integ": [75, 76, 124, 129, 130, 137, 178, 179, 180, 201, 249, 291, 294, 302, 305, 308, 311, 371, 372, 375, 411, 414, 415, 418, 419, 422, 423, 426, 427, 430, 431, 434, 435, 438, 469, 472, 473, 476, 537, 540, 560, 563, 564, 567, 568, 571, 610, 613, 751, 782, 814, 816, 817, 819, 839, 878, 927, 929, 930, 937, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "max_depth": [75, 76, 321, 325, 328, 335, 345, 349, 353, 614, 652, 903, 915], "multi_map": [75, 76, 129], "map_nest": [75, 76, 86, 87, 96, 97, 100, 101, 403, 405, 411, 413, 419, 421, 423, 425, 427, 429, 431, 433, 453, 455, 473, 475, 477, 479, 481, 483, 497, 499, 501, 503, 521, 523, 525, 527, 533, 535, 537, 539, 552, 554, 560, 562, 564, 566, 775, 777, 845, 847, 883, 885], "leftmost": [75, 76, 903, 916], "multi_map_in_static_method": [75, 76, 129], "fn_name": [75, 76], "num_arrai": [75, 76, 124], "overwrite_at_key_chain": [75, 76], "overwrit": [75, 76, 132, 135, 321, 365], "target_dict": [75, 76], "return_dict": [75, 76], "prune_empti": [75, 76], "keep_non": [75, 76], "prune_key_chain": [75, 76], "key1": [75, 76, 139], "key2": [75, 76], "key3": [75, 76], "prune_key_from_key_chain": [75, 76], "prune_kei": [75, 76], "prune_keys_from_key_chain": [75, 76], "remove_key_length_limit": [75, 76], "remove_print_limit": [75, 76], "reshape_lik": [75, 76], "leading_shap": [75, 76], "return_cont": [75, 76], "restructur": [75, 76], "keep_orig": [75, 76], "transpos": [75, 76, 137, 140, 321, 352, 734, 736, 738, 740, 751, 786, 788, 792, 794, 1020, 1042, 1044, 1046, 1048], "restructure_key_chain": [75, 76], "keychain_map": [75, 76], "set_at_key_chain": [75, 76], "set_at_kei": [75, 76], "set_framework": [75, 76, 135, 137, 138, 140], "set_ivy_backend": [75, 76], "ivy_backend": [75, 76], "attribut": [75, 76, 121, 129, 130, 136, 137, 138, 139, 249, 284, 287, 289, 290, 291, 294, 321, 361], "show_sub_contain": [75, 76], "sub_cont_or_keychain": [75, 76], "seed_valu": [75, 76, 927, 937], "shuffle_h5_fil": [75, 76], "dataset": [75, 76, 138, 150, 1020], "size_ordered_arrai": [75, 76], "keychain": [75, 76], "smallest": [75, 76, 249, 284, 287, 291, 294, 371, 435, 438], "largest": [75, 76, 151, 249, 284, 287, 291, 294, 751, 802, 804], "slice_kei": [75, 76], "key_slic": [75, 76], "all_depth": [75, 76], "slice_via_kei": [75, 76], "sort_by_kei": [75, 76], "num_or_size_split": [75, 76, 135, 839, 878], "with_remaind": [75, 76, 839, 878], "constitu": [75, 76, 140], "dimension": [75, 76, 178, 179, 180, 193, 194, 213, 216, 751, 757, 759, 760, 762, 775, 778, 783, 785, 789, 791, 792, 794, 814, 816, 817, 819, 839, 878, 939, 940, 941, 942, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "evenli": [75, 76, 178, 179, 180, 207, 208, 210, 211, 839, 878], "store": [75, 76, 121, 126, 128, 129, 135, 137, 138, 139, 178, 244, 248, 614, 641, 695, 732, 751, 811, 813, 839, 878, 1054, 1055], "preserve_typ": [75, 76, 695, 729], "stop": [75, 76, 80, 81, 135, 152, 178, 179, 180, 181, 207, 208, 209, 210, 211, 212, 321, 336, 365, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 729, 899, 900, 901, 902, 1058, 1059, 1060, 1061, 1062, 1063], "structural_diff": [75, 76], "cuda": [75, 76, 135, 138, 152, 178, 207, 208, 210, 211, 321, 330, 337, 362, 614, 642, 643, 646, 667, 670, 671, 927, 928, 929, 930, 933, 935, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1064, 1065], "target": [75, 76, 118, 134, 138, 139, 140, 321, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 1020], "to_dict": [75, 76], "to_disk_as_hdf5": [75, 76, 138], "starting_index": [75, 76], "max_batch_s": [75, 76], "w": [75, 76, 90, 91, 135, 138, 139, 614, 623, 695, 697, 700, 702, 704, 705, 707, 709, 710, 716, 718, 719, 720, 722, 723, 724, 726, 727, 734, 735, 736, 737, 738, 739, 740, 741, 744], "later": [75, 76, 124, 614, 625], "to_disk_as_json": [75, 76, 138], "to_disk_as_pickl": [75, 76, 138], "to_flat_list": [75, 76], "to_iter": [75, 76, 129], "leaf_keys_onli": [75, 76], "to_iterator_kei": [75, 76], "to_iterator_valu": [75, 76], "to_json": [75, 76], "to_multi_dev": [75, 76], "multidevcontain": [75, 76, 77], "distributedarrai": [75, 76], "update_backend": [75, 76], "to_raw": [75, 76], "raw": [75, 76, 121], "trim_kei": [75, 76], "max_length": [75, 76], "try_kc": [75, 76], "tri": [75, 76], "arbitrari": [75, 76, 120, 124, 125, 129, 132, 139, 152, 178, 213, 216, 249, 260, 263, 308, 311, 321, 350, 351, 353], "concatten": [75, 76, 321, 350, 351, 352, 353, 365], "dim_siz": [75, 76, 321], "update_config": [75, 76], "global_norm": [75, 76, 88, 89, 627, 628], "vector": [75, 76, 151, 178, 213, 216, 614, 627, 629, 734, 747, 751, 757, 759, 766, 768, 775, 778, 789, 791, 802, 804, 805, 807, 814, 816, 817, 819, 820, 822, 1042, 1052], "with_default_key_color": [75, 76], "with_entries_as_list": [75, 76], "with_ivy_backend": [75, 76], "with_key_length_limit": [75, 76, 138], "with_print_ind": [75, 76, 138], "with_print_limit": [75, 76, 138], "with_print_line_spac": [75, 76], "containerwithcr": [77, 78, 80], "containerwithdatatyp": [77, 78, 82], "containerwithdevic": [77, 78, 84], "containerwithelementwis": [77, 78, 86, 129], "containerwithgener": [77, 78, 88], "containerwithgradi": [77, 78, 90], "containerwithimag": [77, 78, 92], "containerwithlay": [77, 78, 94], "containerwithlinearalgebra": [77, 78, 96], "containerwithloss": [77, 78, 98], "containerwithnorm": [77, 78, 102], "containerwithrandom": [77, 78, 104], "containerwithsearch": [77, 78, 106], "containerwithset": [77, 78, 108], "containerwithsort": [77, 78, 110], "containerwithstatist": [77, 78, 112], "containerwithutil": [77, 78, 114], "static_aco": [77, 78], "static_acosh": [77, 78], "static_arg_info": [77, 78], "static_arg_nam": [77, 78], "static_argmax": [77, 78], "static_argmin": [77, 78], "static_arrai": [77, 78], "static_array_equ": [77, 78], "static_arrays_equ": [77, 78], "static_as_ivy_dev": [77, 78], "static_as_ivy_dtyp": [77, 78], "static_as_native_dev": [77, 78], "static_as_native_dtyp": [77, 78], "static_asin": [77, 78], "static_assert_supports_inplac": [77, 78], "static_atan": [77, 78], "static_atan2": [77, 78], "static_atanh": [77, 78], "static_bitwise_and": [77, 78], "static_bitwise_invert": [77, 78], "static_bitwise_left_shift": [77, 78], "static_bitwise_or": [77, 78], "static_bitwise_right_shift": [77, 78], "static_bitwise_xor": [77, 78], "static_cache_fn": [77, 78], "static_ceil": [77, 78], "static_clear_mem_on_dev": [77, 78], "static_clip_matrix_norm": [77, 78], "static_clip_vector_norm": [77, 78], "static_closest_valid_dtyp": [77, 78], "static_concat": [77, 78], "static_constant_pad": [77, 78], "static_container_typ": [77, 78], "static_conv1d": [77, 78], "static_conv1d_transpos": [77, 78], "static_conv2d": [77, 78], "static_conv2d_transpos": [77, 78], "static_conv3d": [77, 78], "static_conv3d_transpos": [77, 78], "static_copy_arrai": [77, 78], "static_cosh": [77, 78], "static_cross": [77, 78], "static_cumprod": [77, 78], "static_cumsum": [77, 78], "static_current_backend": [77, 78], "static_current_backend_str": [77, 78], "static_default": [77, 78], "static_default_devic": [77, 78], "static_default_dtyp": [77, 78], "static_default_float_dtyp": [77, 78], "static_default_int_dtyp": [77, 78], "static_det": [77, 78], "static_dev": [77, 78], "static_dev_clon": [77, 78], "static_dev_clone_arrai": [77, 78], "static_dev_clone_it": [77, 78], "static_dev_clone_nest": [77, 78], "static_dev_dist": [77, 78], "static_dev_dist_arrai": [77, 78], "static_dev_dist_it": [77, 78], "static_dev_dist_nest": [77, 78], "static_dev_unifi": [77, 78], "static_dev_unify_arrai": [77, 78], "static_dev_unify_it": [77, 78], "static_dev_unify_nest": [77, 78], "static_dev_util": [77, 78], "static_diagon": [77, 78], "static_dropout": [77, 78], "static_dtyp": [77, 78], "static_dtype_bit": [77, 78], "static_eigh": [77, 78], "static_eigvalsh": [77, 78], "static_einops_rearrang": [77, 78], "static_einops_reduc": [77, 78], "static_einops_repeat": [77, 78], "static_einsum": [77, 78], "static_empti": [77, 78], "static_equ": [77, 78], "static_erf": [77, 78], "static_execute_with_gradi": [77, 78], "static_exist": [77, 78], "static_exp": [77, 78], "static_expand_dim": [77, 78], "static_expm1": [77, 78], "static_flip": [77, 78], "static_floor": [77, 78], "static_floor_divid": [77, 78], "static_floormod": [77, 78], "static_fourier_encod": [77, 78], "static_ful": [77, 78], "static_function_supported_dtyp": [77, 78], "static_function_unsupported_dtyp": [77, 78], "static_gath": [77, 78], "static_gelu": [77, 78], "static_get_all_arrays_in_memori": [77, 78], "static_get_all_ivy_arrays_on_dev": [77, 78], "static_get_min_bas": [77, 78], "static_get_min_denomin": [77, 78], "static_get_num_dim": [77, 78], "static_get_referrers_recurs": [77, 78], "static_gpu_is_avail": [77, 78], "static_great": [77, 78], "static_greater_equ": [77, 78], "static_handle_nest": [77, 78], "static_handle_out_argu": [77, 78], "static_has_nan": [77, 78], "static_indices_wher": [77, 78], "static_infer_devic": [77, 78], "static_infer_dtyp": [77, 78], "static_inplace_arrays_support": [77, 78], "static_inplace_decr": [77, 78], "static_inplace_incr": [77, 78], "static_inplace_upd": [77, 78], "static_inplace_variables_support": [77, 78], "static_inputs_to_native_arrai": [77, 78], "static_inv": [77, 78], "static_invalid_dtyp": [77, 78], "static_is_arrai": [77, 78], "static_is_ivy_arrai": [77, 78], "static_is_ivy_contain": [77, 78], "static_is_native_arrai": [77, 78], "static_isfinit": [77, 78], "static_isinf": [77, 78], "static_isnan": [77, 78], "static_leaky_relu": [77, 78], "static_less": [77, 78], "static_less_equ": [77, 78], "static_linear": [77, 78], "static_log": [77, 78], "static_log10": [77, 78], "static_log1p": [77, 78], "static_log2": [77, 78], "static_logaddexp": [77, 78], "static_logical_and": [77, 78], "static_logical_not": [77, 78], "static_logical_or": [77, 78], "static_logical_xor": [77, 78], "static_lstm_upd": [77, 78], "static_match_kwarg": [77, 78], "static_matmul": [77, 78], "static_matrix_norm": [77, 78], "static_matrix_pow": [77, 78], "static_matrix_rank": [77, 78], "static_matrix_transpos": [77, 78], "static_max": [77, 78], "static_maximum": [77, 78], "static_mean": [77, 78], "static_min": [77, 78], "static_minimum": [77, 78], "static_multi_head_attent": [77, 78], "static_multinomi": [77, 78], "static_multiprocess": [77, 78], "static_neg": [77, 78], "static_nonzero": [77, 78], "static_not_equ": [77, 78], "static_num_arrays_in_memori": [77, 78], "static_num_cpu_cor": [77, 78], "static_num_gpu": [77, 78], "static_num_ivy_arrays_on_dev": [77, 78], "static_one_hot": [77, 78], "static_out": [77, 78], "static_outputs_to_ivy_arrai": [77, 78], "static_percent_used_mem_on_dev": [77, 78], "static_permute_dim": [77, 78], "static_pinv": [77, 78], "static_posit": [77, 78], "static_pow": [77, 78], "static_print_all_arrays_in_memori": [77, 78], "static_print_all_ivy_arrays_on_dev": [77, 78], "static_prod": [77, 78], "static_promote_typ": [77, 78], "static_qr": [77, 78], "static_queue_timeout": [77, 78], "static_random_norm": [77, 78], "static_relu": [77, 78], "static_remaind": [77, 78], "static_repeat": [77, 78], "static_reshap": [77, 78], "static_round": [77, 78], "static_scaled_dot_product_attent": [77, 78], "static_scatter_flat": [77, 78], "static_scatter_nd": [77, 78], "static_se": [77, 78], "static_set_default_devic": [77, 78], "static_set_default_dtyp": [77, 78], "static_set_default_float_dtyp": [77, 78], "static_set_default_int_dtyp": [77, 78], "static_set_min_bas": [77, 78], "static_set_min_denomin": [77, 78], "static_set_queue_timeout": [77, 78], "static_set_shape_array_mod": [77, 78], "static_set_split_factor": [77, 78], "static_set_tmp_dir": [77, 78], "static_set_with_grad": [77, 78], "static_shap": [77, 78], "static_shape_array_mod": [77, 78], "static_shape_to_tupl": [77, 78], "static_shuffl": [77, 78], "static_sigmoid": [77, 78], "static_slogdet": [77, 78], "static_softmax": [77, 78], "static_solv": [77, 78], "static_split": [77, 78], "static_split_factor": [77, 78], "static_split_func_cal": [77, 78], "static_sqrt": [77, 78], "static_squar": [77, 78], "static_squeez": [77, 78], "static_stable_divid": [77, 78], "static_stable_pow": [77, 78], "static_stack": [77, 78], "static_std": [77, 78], "static_stop_gradi": [77, 78], "static_sum": [77, 78], "static_supports_inplac": [77, 78], "static_svd": [77, 78], "static_svdv": [77, 78], "static_swapax": [77, 78], "static_tensordot": [77, 78], "static_til": [77, 78], "static_tmp_dir": [77, 78], "static_to_devic": [77, 78], "static_to_list": [77, 78], "static_to_native_arrays_and_back": [77, 78], "static_to_scalar": [77, 78], "static_total_mem_on_dev": [77, 78], "static_tpu_is_avail": [77, 78], "static_trac": [77, 78], "static_trunc": [77, 78], "static_try_else_non": [77, 78], "static_type_promote_arrai": [77, 78], "static_unset_default_devic": [77, 78], "static_unset_default_dtyp": [77, 78], "static_unset_default_float_dtyp": [77, 78], "static_unset_default_int_dtyp": [77, 78], "static_unset_shape_array_mod": [77, 78], "static_unset_with_grad": [77, 78], "static_unstack": [77, 78], "static_used_mem_on_dev": [77, 78], "static_valid_dtyp": [77, 78], "static_value_is_nan": [77, 78], "static_var": [77, 78], "static_vari": [77, 78], "static_variable_data": [77, 78], "static_vecdot": [77, 78], "static_vector_norm": [77, 78], "static_vector_to_skew_symmetric_matrix": [77, 78], "static_wher": [77, 78], "static_with_grad": [77, 78], "static_zero_pad": [77, 78], "at_dev": [77, 79, 321, 334, 335], "static_arang": [80, 81, 179], "static_asarrai": [80, 81, 182], "static_empty_lik": [80, 81, 188], "static_ey": [80, 81, 193], "n_row": [80, 81, 178, 193, 194, 195], "n_col": [80, 81, 178, 193, 194, 195], "static_from_dlpack": [80, 81, 196], "static_full_lik": [80, 81, 202], "static_linspac": [80, 81, 207], "num": [80, 81, 135, 178, 207, 208, 209, 210, 211, 212], "endpoint": [80, 81, 178, 207, 208, 209, 210, 212], "static_logspac": [80, 81, 210], "static_meshgrid": [80, 81, 213], "static_native_arrai": [80, 81, 218], "static_on": [80, 81, 223], "static_ones_lik": [80, 81, 226], "static_tril": [80, 81, 231], "static_triu": [80, 81, 236], "static_zero": [80, 81, 241], "static_zeros_lik": [80, 81, 244], "int32": [82, 83, 88, 89, 124, 130, 178, 244, 248, 249, 270, 272, 273, 274, 279, 282, 302, 305, 614, 685, 686, 688, 689, 839, 853, 856, 976, 993, 996, 1001, 1004], "int64": [82, 83, 124, 130, 249, 270, 272, 273, 274, 320, 371, 427, 430, 939, 940, 941, 976, 993, 996, 1001, 1004], "static_astyp": [82, 83, 255], "static_broadcast_arrai": [82, 83, 260], "static_broadcast_to": [82, 83, 265], "static_can_cast": [82, 83, 270], "from_": [82, 83, 249, 270, 273, 274], "static_finfo": [82, 83, 284], "static_iinfo": [82, 83, 291], "static_is_float_dtyp": [82, 83, 297], "dtype_in": [82, 83, 249, 253, 254, 283, 296, 297, 300, 301, 302, 305, 306, 320], "static_is_int_dtyp": [82, 83, 302], "static_result_typ": [82, 83, 308], "02": [86, 87, 394, 396, 695, 697, 700], "21": [86, 87, 371, 394, 396, 431, 434, 614, 632, 751, 763, 765, 789, 791, 823, 834, 837, 976, 977, 980], "61": [86, 87, 98, 99, 371, 394, 396, 591, 594, 734, 741, 744, 823, 824, 826, 827, 828, 834, 836, 838], "96": [86, 87, 371, 439, 441, 442, 443, 600, 604, 605, 606, 695, 697, 700, 751, 789, 791, 976, 977, 980], "757": [86, 87, 371, 577, 579, 580, 581], "959": [86, 87, 371, 577, 579, 580, 581], "279": [86, 87, 371, 577, 579, 580, 581], "76": [86, 87, 371, 444, 447, 582, 584, 586, 605, 606, 695, 697, 700, 751, 808, 810, 976, 977, 980], "37": [86, 87, 104, 105, 371, 394, 397, 398, 582, 584, 586, 600, 604, 929, 931], "835": [86, 87, 582, 584, 586], "34": [86, 87, 371, 431, 434, 582, 584, 586, 587, 590], "98": [86, 87, 371, 431, 434, 582, 584, 586, 751, 789, 791, 939, 943, 976, 977, 980], "347": [86, 87, 582, 584, 586], "721": [86, 87, 582, 584, 586], "static_ab": [86, 87, 372], "static_add": [86, 87, 121, 122, 129, 385], "static_asinh": [86, 87, 394], "97": [86, 87, 371, 394, 397, 398], "75": [86, 87, 371, 394, 397, 398, 751, 772, 774, 789, 791], "static_co": [86, 87, 439], "static_divid": [86, 87, 129, 448], "static_multipli": [86, 87, 129, 543], "static_sign": [86, 87, 572], "static_sin": [86, 87, 577], "static_sinh": [86, 87, 582], "static_subtract": [86, 87, 129, 595], "static_tan": [86, 87, 122, 129, 600], "143": [86, 87, 122, 371, 600, 601, 603, 604], "38": [86, 87, 122, 371, 600, 601, 603, 604], "static_tanh": [86, 87, 605], "995": [86, 87, 371, 605, 606, 608, 609], "9999": [86, 87, 605, 606], "static_all_equ": [88, 89, 615, 617], "max_norm": [88, 89, 614, 626, 627, 628, 629], "static_gather_nd": [88, 89, 643], "static_to_numpi": [88, 89, 685, 688], "lr": [90, 91, 138, 139, 695, 702, 703, 704, 705, 707, 708, 709, 710, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 1058, 1059, 1060, 1061, 1062, 1063], "mw_tm1": [90, 91, 695, 702, 703, 704, 705, 716, 717, 718, 719], "vw_tm1": [90, 91, 695, 702, 703, 704, 705, 716, 717, 718, 719], "max_trust_ratio": [90, 91, 695, 716, 717, 718, 719, 1058, 1060], "decay_lambda": [90, 91, 695, 716, 717, 718, 719, 720, 721, 722, 723, 1058, 1060, 1061], "effective_grad": [90, 91, 695, 724, 725, 726, 727], "static_adam_step": [90, 91, 697], "87": [90, 91, 104, 105, 695, 697, 700, 701, 929, 931], "976": [90, 91, 371, 605, 609, 695, 697, 700, 701], "static_adam_upd": [90, 91, 702], "static_gradient_descent_upd": [90, 91, 707], "static_is_vari": [90, 91, 711], "static_lamb_upd": [90, 91, 716], "static_lars_upd": [90, 91, 720], "static_optimizer_upd": [90, 91, 724], "inp": [94, 95, 734, 741, 743, 744, 745], "static_depthwise_conv2d": [94, 95, 741], "73": [96, 97, 124, 371, 587, 590, 751, 752, 754, 755, 756, 921, 922, 925], "577": [96, 97, 751, 752, 754, 755, 756], "41": [96, 97, 137, 371, 431, 434, 587, 590, 751, 752, 754, 755, 756, 976, 1001, 1004], "707": [96, 97, 751, 752, 754, 755, 756], "static_choleski": [96, 97, 752], "static_rol": [96, 97, 100, 101, 122, 129, 752, 756, 840, 844, 873], "511": [98, 99, 823, 824, 826, 827, 828, 834, 836, 838], "5108256": [98, 99, 829, 831], "609438": [98, 99, 829, 831], "static_binary_cross_entropi": [98, 99, 824], "static_cross_entropi": [98, 99, 829], "20397282": [98, 99, 829, 833], "83258148": [98, 99, 829, 833], "60943794": [98, 99, 829, 833], "static_sparse_cross_entropi": [98, 99, 834], "static_clip": [100, 101, 840], "658": [102, 103, 921, 922, 924, 925, 926], "04": [102, 103, 734, 750, 921, 922, 924, 925, 926], "759": [102, 103, 921, 922, 924, 925, 926], "42": [102, 103, 104, 105, 140, 163, 169, 172, 695, 697, 700, 751, 789, 791, 922, 924, 926, 927, 929, 931, 937, 976, 977, 980], "403": [102, 103, 922, 924, 926], "62": [102, 103, 104, 105, 371, 582, 585, 922, 924, 926, 929, 931], "static_layer_norm": [102, 103, 922], "static_randint": [104, 105, 929], "20": [104, 105, 137, 371, 431, 434, 461, 464, 568, 571, 587, 590, 751, 763, 765, 789, 791, 808, 810, 927, 929, 930, 931, 939, 942, 943, 976, 977, 980], "40": [104, 105, 371, 444, 447, 587, 590, 751, 789, 791, 929, 931, 976, 977, 980], "52": [104, 105, 695, 697, 700, 751, 789, 791, 929, 931, 944, 945, 949, 976, 977, 980], "95": [104, 105, 371, 572, 575, 695, 697, 700, 929, 931], "13": [104, 105, 122, 124, 129, 371, 411, 414, 431, 434, 444, 447, 587, 590, 614, 632, 695, 697, 700, 734, 750, 751, 763, 765, 789, 791, 929, 931, 939, 943, 944, 945, 949, 976, 977, 980], "static_random_uniform": [104, 105, 933], "static_unique_al": [108, 109, 945], "static_unique_count": [108, 109, 950], "classivi": [108, 109, 839, 878, 944, 950, 951, 953, 954], "static_unique_invers": [108, 109, 955], "static_unique_valu": [108, 109, 960], "static_argsort": [110, 111, 966], "static_sort": [110, 111, 971], "static_al": [114, 115, 1010], "static_ani": [114, 115, 1015], "add_ivy_container_instance_method": 116, "containerexampl": [116, 117], "who": [118, 134, 152], "mainli": [118, 136, 138], "under": [118, 121, 122, 123, 124, 125, 129, 134, 135, 138, 140], "hood": [118, 122, 124, 125, 129, 134, 135, 138, 140], "weed": [118, 134], "behind": [118, 124, 134, 136, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726], "tour": 118, "primari": [118, 124, 126, 132, 152], "composit": [118, 124, 126, 128, 129, 132, 135, 139, 140, 152], "nestabl": [118, 121, 122, 124, 132, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 302, 305, 371, 372, 375, 385, 388, 390, 393, 394, 397, 435, 438, 469, 472, 541, 552, 555, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 614, 642, 734, 737, 741, 744, 750, 751, 752, 755, 763, 765, 839, 873, 876, 921, 922, 925, 944, 950, 954, 976, 981, 984, 1009, 1010, 1013], "dynam": [118, 130, 131, 132, 135, 175, 176], "runtim": [118, 124, 321], "h": [118, 129, 734, 737, 738, 739, 740, 741, 744, 903, 906], "j": [118, 614, 622, 623, 751, 811, 813, 976, 977, 980], "n": [118, 124, 178, 213, 216, 231, 235, 236, 240, 614, 623, 734, 746, 751, 763, 765, 775, 778, 782, 783, 785, 786, 788, 789, 791, 792, 794, 795, 797, 802, 804, 805, 807, 811, 813, 814, 816, 817, 819, 820, 822, 839, 849, 852, 853, 856, 861, 864, 883, 886, 895, 898, 927, 932, 933, 935, 939, 942, 976, 985, 988, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "borrow": 118, "taken": [119, 133, 140, 751, 763, 765], "constant": [119, 125, 139, 140, 152, 321, 330, 331, 839, 849, 852, 903, 909, 921, 922, 925, 1033, 1034, 1038, 1041, 1054, 1055, 1056, 1057], "compil": [119, 129, 134, 136, 152, 1020, 1054, 1055, 1058, 1059, 1060, 1061, 1062, 1063], "meta": [119, 128, 900, 901, 902], "overlap": 119, "sever": [119, 152, 751, 772, 774], "judgement": 119, "locat": [119, 124, 126, 131, 927, 928], "some_namespac": 119, "some_backend": 119, "another_backend": 119, "break": [119, 120, 133, 137, 152, 1020], "anyth": [119, 124, 1020], "refactor": 119, "ongo": 119, "subfold": [119, 124], "file_nam": [119, 124], "my_func": [119, 122], "nativedtyp": [119, 120, 130, 131, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 201, 202, 205, 218, 221, 223, 224, 226, 229, 241, 243, 244, 248, 249, 254, 255, 258, 277, 278, 279, 282, 307, 320, 976, 1001, 1004], "nativedevic": [119, 120, 130, 131, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 201, 202, 205, 207, 208, 210, 211, 218, 221, 223, 224, 226, 229, 241, 243, 244, 248, 321, 338, 339, 340, 354, 360, 362, 364, 366, 367, 370, 614, 667, 927, 928, 929, 930, 932, 933, 935], "my": 119, "cooler": 119, "produc": [119, 124, 321, 330, 331, 734, 750], "something_cool": 119, "category_nam": [120, 121, 125, 130, 131], "backend_nam": [120, 121, 125, 126, 127, 130, 131], "adress": 120, "conveni": [120, 130, 131, 136, 138, 139], "revisit": [120, 140], "dedic": [120, 137, 139, 695, 732, 1031, 1032], "four": [120, 122, 125, 130, 138], "tf": [120, 128, 130, 131, 132, 135, 140, 152, 1020], "jnp": [120, 130, 131, 132, 140, 1020], "jaxarrai": [120, 130, 131, 132], "wherea": [120, 122, 124, 125, 128, 130, 131, 140], "__sub__": [120, 122, 128, 129, 137], "__mul__": [120, 122, 128, 129, 137], "__div__": 120, "permit": [120, 124, 128], "dicat": 120, "addition": [120, 132], "omit": [120, 132, 944, 945, 949, 950, 954, 960, 964], "wrapper": [120, 127, 128, 129, 130, 132, 137], "contrast": [120, 121], "futher": 120, "respect": [120, 122, 124, 128, 129, 130, 133, 178, 213, 216, 371, 372, 375, 385, 388, 403, 406, 411, 414, 419, 422, 423, 426, 427, 430, 431, 434, 448, 451, 453, 456, 473, 476, 477, 480, 481, 484, 497, 500, 501, 504, 521, 524, 525, 528, 533, 536, 537, 540, 543, 546, 552, 555, 564, 567, 595, 599, 695, 697, 700, 702, 704, 706, 707, 709, 716, 718, 720, 722, 724, 726, 751, 795, 797, 899, 900, 901, 902], "absenc": 120, "pep": 120, "484": 120, "annot": [120, 133], "dictat": [120, 122, 128, 132], "brittl": 120, "intend": [120, 976, 1001, 1004], "subset": [120, 121, 124, 135], "freeli": 120, "consum": [120, 124, 129, 321], "inde": [120, 152], "flexibl": 120, "technic": [120, 129, 132, 152], "original_typ": 120, "cumbersom": 120, "readabl": [120, 128, 129, 137, 138], "account": 121, "instanti": 121, "firstli": [121, 122, 125, 128, 130, 132, 138], "templat": [121, 124, 1020], "spec": [121, 122], "api_specif": [121, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 371, 372, 375, 390, 393, 394, 397, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 577, 580, 587, 590, 591, 594, 751, 763, 765, 839, 853, 856, 873, 876, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984], "array_api": 121, "preview": 121, "render": 121, "incorrectli": [121, 133], "onlin": [121, 1020], "approxim": [121, 163, 164, 371, 377, 380, 381, 384, 390, 393, 394, 397, 399, 402, 403, 406, 439, 442, 444, 447, 461, 464, 465, 468, 505, 508, 509, 512, 513, 516, 517, 520, 560, 563, 577, 580, 582, 585, 600, 604, 605, 609, 751, 783, 785, 792, 794], "domain": [121, 371, 377, 380, 381, 384, 390, 393, 394, 397, 399, 402, 403, 406, 439, 442, 444, 447, 461, 464, 465, 468, 505, 508, 509, 512, 517, 520, 577, 580, 582, 585, 587, 590, 600, 604, 605, 609], "infin": [121, 177, 249, 255, 258, 371, 372, 375, 381, 384, 385, 388, 394, 397, 399, 402, 403, 406, 435, 438, 439, 442, 444, 447, 461, 464, 465, 468, 469, 472, 473, 476, 485, 488, 489, 492, 505, 508, 509, 512, 517, 520, 521, 524, 543, 546, 560, 563, 564, 567, 568, 571, 577, 580, 582, 585, 587, 590, 600, 604, 605, 609, 610, 613, 751, 817, 819, 976, 981, 984, 989, 992, 1009, 1010, 1013, 1015, 1018], "codomain": [121, 371, 377, 380, 381, 384, 390, 393, 394, 397, 399, 402, 403, 406, 439, 442, 444, 447, 461, 464, 465, 468, 505, 508, 509, 512, 517, 520, 577, 580, 582, 585, 587, 590, 600, 604, 605, 609], "x_i": [121, 371, 372, 375, 377, 380, 381, 384, 390, 393, 394, 397, 399, 402, 415, 418, 435, 438, 439, 442, 444, 447, 461, 464, 465, 468, 469, 472, 485, 488, 489, 492, 493, 496, 505, 508, 509, 512, 517, 520, 529, 532, 548, 551, 568, 571, 572, 575, 577, 580, 582, 585, 587, 590, 591, 594, 600, 604, 605, 609, 610, 613, 944, 945, 949, 950, 954, 960, 964, 976, 981, 984, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1008], "assum": [121, 124, 126, 130, 137, 138, 152, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 302, 305, 371, 372, 375, 385, 388, 390, 393, 394, 397, 411, 414, 431, 434, 435, 438, 439, 442, 444, 447, 469, 472, 541, 552, 555, 568, 571, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 605, 609, 614, 642, 734, 737, 741, 744, 750, 751, 752, 755, 760, 762, 763, 765, 839, 853, 856, 857, 860, 873, 876, 921, 922, 925, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984, 1009, 1010, 1013], "operand": [121, 371, 377, 380, 381, 384, 385, 388, 390, 393, 394, 397, 399, 402, 403, 406, 431, 434, 435, 438, 439, 442, 444, 447, 461, 464, 465, 468, 469, 472, 505, 508, 509, 512, 517, 520, 521, 524, 543, 546, 560, 563, 564, 567, 568, 571, 577, 580, 582, 585, 587, 590, 600, 604, 605, 609, 610, 613, 976, 977, 980, 981, 984, 989, 992, 1001, 1004], "ref": [121, 371, 427, 430, 497, 500, 543, 546, 552, 555, 564, 567, 595, 599, 839, 883, 886], "But": [121, 129, 140], "needless": 121, "info": [121, 1020], "renam": 121, "conform": [121, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 371, 372, 375, 385, 388, 390, 393, 394, 397, 411, 414, 431, 434, 435, 438, 444, 447, 465, 468, 469, 472, 501, 504, 541, 552, 555, 568, 571, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 605, 609, 751, 760, 762, 763, 765, 839, 853, 856, 857, 860, 873, 876, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984, 1009, 1010, 1013], "org": [121, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 371, 372, 375, 390, 393, 394, 397, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 577, 580, 587, 590, 591, 594, 695, 697, 700, 702, 704, 751, 763, 765, 839, 853, 856, 873, 876, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984], "elementwise_funct": [121, 371, 372, 375, 390, 393, 394, 397, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 577, 580, 587, 590, 591, 594, 751, 763, 765, 839, 873, 876, 944, 945, 949, 965, 966, 969, 976, 981, 984], "descript": [121, 124, 129, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 302, 305, 371, 372, 375, 385, 388, 390, 393, 394, 397, 411, 414, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 568, 571, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 605, 609, 614, 642, 734, 737, 741, 744, 750, 751, 752, 755, 760, 762, 763, 765, 817, 819, 839, 853, 856, 857, 860, 873, 876, 921, 922, 925, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984, 1009, 1010, 1013], "simplic": [121, 139, 151, 178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 210, 211, 213, 216, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248, 249, 270, 273, 302, 305, 371, 372, 375, 385, 388, 390, 393, 394, 397, 411, 414, 431, 434, 435, 438, 444, 447, 469, 472, 541, 552, 555, 568, 571, 572, 575, 577, 580, 587, 590, 591, 594, 600, 604, 605, 609, 614, 642, 734, 737, 741, 744, 750, 751, 752, 755, 760, 762, 763, 765, 839, 853, 856, 857, 860, 873, 876, 921, 922, 925, 944, 945, 949, 950, 954, 965, 966, 969, 976, 981, 984], "judgment": 121, "beyond": [121, 839, 873, 876], "text": 121, "func_nam": [121, 122, 125], "pure": [121, 137, 140, 152], "themselv": [121, 125, 129, 130, 131, 139, 903, 904], "operator_nam": 121, "succinct": 121, "contstructor": 121, "though": [121, 125, 130, 138, 152], "forward": [121, 124, 140, 151, 152, 1054, 1055, 1058, 1062], "_forward": [121, 135, 138, 139, 1020], "former": 121, "explicitli": [121, 125, 126, 128, 129, 132, 135, 152, 751, 766, 768, 1042, 1051, 1053, 1054, 1055], "latter": [121, 126], "implicit": [121, 124, 129, 135], "docst": 121, "eight": 122, "static_": 122, "op_nam": 122, "__r": 122, "__truediv__": [122, 128, 129], "recap": [122, 129, 139], "independ": [122, 123, 127, 129, 135, 140, 751, 757, 759, 799, 801, 927, 928], "combinatorili": 122, "variat": [122, 124], "grid": [122, 124, 151, 178, 213, 216], "vari": [122, 124, 129, 137, 944, 945, 949, 950, 954, 960, 964], "simplest": [122, 124], "small": [122, 125, 135, 139, 152, 371, 543, 546, 751, 783, 785, 792, 794, 921, 922, 925, 1056, 1057], "unus": [122, 132, 133, 175, 176], "excess": [122, 126, 137], "okai": [122, 135], "showcas": [122, 151], "demonstr": [122, 137], "replic": [122, 130], "meant": 122, "imaginari": 122, "some_flag": 122, "another_flag": 122, "jointli": 122, "three": [122, 124, 129, 134, 178, 213, 216, 1020], "x0": [122, 614, 622], "procedur": 122, "sens": [122, 129, 137], "5574077": 122, "1850398": 122, "5463025": 122, "8422884": 122, "91601413": 122, "9647598": 122, "3738229": 122, "1597457": 122, "0963247": 122, "9955841": 122, "3278579": 122, "multi": [122, 129, 134, 152, 734, 749, 751, 757, 759, 1020, 1026, 1042, 1053], "seper": [122, 614, 641], "pars": [122, 152], "satisfi": [122, 751, 820, 822], "far": [122, 131, 136, 137, 903, 904, 914], "asid": [122, 151], "irrelev": [122, 130], "increasingli": 122, "complex": [122, 138, 139, 140, 152, 751, 766, 768, 802, 804], "rule": [122, 124, 125, 128, 129, 130, 133, 249, 255, 258, 270, 273, 308, 311, 371, 407, 410, 427, 430, 448, 451, 543, 546, 564, 567, 751, 752, 755, 757, 759, 789, 791, 799, 801], "14254655": 122, "1578213": 122, "380515": 122, "17": [122, 129, 163, 165, 751, 763, 765, 927, 932], "trivial": 122, "By": [122, 125, 129, 132, 139, 140, 614, 632, 633, 751, 814, 816, 839, 865, 868, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "non": [122, 129, 130, 135, 175, 176, 249, 255, 258, 296, 371, 529, 532, 533, 536, 734, 737, 751, 760, 762, 783, 785, 802, 804, 808, 810, 814, 816, 817, 819, 939, 940, 941, 942, 976, 981, 984, 985, 988, 989, 992, 993, 996, 1005, 1008, 1009, 1010, 1013, 1015, 1018, 1054, 1055, 1058, 1062], "exlud": 122, "unit": [123, 124, 152, 163, 164, 165, 166, 321], "thoroughli": 123, "ci": [123, 124, 152], "failur": 123, "On": [124, 133, 136, 140], "fixtur": 124, "300": [124, 371, 568, 571], "hit": [124, 135], "action": 124, "eleg": 124, "intellig": 124, "sampl": [124, 734, 746, 927, 928, 932, 933, 935, 976, 997, 1000, 1005, 1008, 1042, 1050], "rang": [124, 138, 139, 140, 178, 179, 180, 207, 208, 210, 211, 944, 945, 949, 976, 993, 996, 1001, 1004, 1020], "unexplor": 124, "known": 124, "repeatedli": [124, 129, 903, 912], "upload": 124, "artifact": 124, "parametr": 124, "statement": [124, 133, 152], "plai": [124, 140], "varieti": [124, 130, 131], "wide": 124, "valid_int_dtyp": 124, "int8": [124, 130, 249, 302, 305, 320], "int16": [124, 130, 249, 270, 273, 302, 305, 976, 993, 996, 1001, 1004], "uint8": [124, 130, 249, 270, 273, 320], "uint16": [124, 130, 249, 290, 976, 993, 996, 1001, 1004], "uint32": [124, 130, 249, 290, 976, 993, 996, 1001, 1004], "uint64": [124, 130, 249, 290, 302, 305, 976, 993, 996, 1001, 1004], "custom_strategi": 124, "st": 124, "sampled_from": 124, "min_siz": 124, "max_siz": 124, "wherein": 124, "referenc": 124, "print_hypothesis_exampl": 124, "searchstrategi": 124, "randomis": 124, "simplist": 124, "intricaci": 124, "briefli": [124, 125, 138], "bound": [124, 135], "mechan": [124, 150, 152, 1020], "power": [124, 137, 138, 139, 371, 427, 430, 461, 464, 560, 563, 614, 649, 672, 681, 751, 782, 1033], "math": [124, 132, 140, 1020], "inclus": [124, 132, 178, 179, 180, 927, 929, 930], "width": 124, "losslessli": 124, "mostli": 124, "drawn": [124, 927, 928, 929, 930, 932, 933, 935], "one_of": 124, "datum": 124, "pipe": 124, "overload": 124, "shorthand": 124, "draw": [124, 927, 928, 932, 933, 935], "input_dtyp": 124, "reject": 124, "flatmap": 124, "suppos": 124, "valid": [124, 130, 135, 249, 275, 734, 735, 736, 737, 738, 739, 740, 741, 744, 839, 883, 886, 1009, 1010, 1013, 1015, 1018, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "dataobject": 124, "test_argsort": 124, "decor": [124, 125, 127, 129, 130, 131, 132], "initialis": [124, 321], "snippet": 124, "dtype_and_x": 124, "dtype_and_valu": 124, "valid_float_dtyp": 124, "list_of_length": 124, "num_positional_arg": 124, "instance_method": 124, "alpha": [124, 163, 165], "test_leaky_relu": 124, "fw": [124, 734, 735, 736, 737, 738, 739, 740, 741, 744], "float16": [124, 130, 249, 290, 320], "exhaust": 124, "num_posit": 124, "indirectli": 124, "advis": 124, "seri": 124, "9433925": 124, "401298464324817e": 124, "574352379": 124, "99999": 124, "2250738585072014e": 124, "308": 124, "103515625e": 124, "unpack": [124, 133, 614, 693], "seamlessli": 124, "edg": [124, 135, 140, 839, 840, 843, 849, 852, 895, 898, 1020], "encount": 124, "criterion": 124, "straight": [124, 137, 1020], "array_valu": 124, "valid_ax": 124, "hand": [124, 125, 133, 152], "craft": 124, "polici": [124, 151], "hoc": 124, "overview": [124, 134, 151], "array_dtyp": 124, "array_bool": 124, "na": 124, "test_concat": 124, "test_devic": 124, "array_shap": 124, "test_manipul": 124, "common_shap": 124, "test_lay": 124, "size_bound": 124, "precis": [124, 249, 284, 287, 371, 543, 546, 587, 590], "283405296074752": 124, "564049465049088": 124, "0417876997507982e": 124, "min_valu": 124, "max_valu": 124, "allow_inf": 124, "min_num_dim": 124, "wherev": 124, "reshape_shap": 124, "stand": 124, "alon": [124, 321, 360, 370], "fashion": 124, "some_sequ": 124, "06": [124, 695, 697, 700], "allow_subnorm": 124, "exclude_min": 124, "960464477539063e": 124, "08": [124, 371, 394, 397, 734, 750], "coverag": 124, "allow_nan": 124, "Such": 124, "kind": [124, 152, 249, 284, 287, 291, 294, 371, 560, 563, 976, 993, 996, 1001, 1004], "get_shap": 124, "allow_non": 124, "max_num_dim": 124, "min_dim_s": 124, "none_or_list_of_float": 124, "200": 124, "199": [124, 371, 394, 397], "99999999999997": 124, "000000000000002": 124, "125": 124, "43759670925832": 124, "get_mean_std": 124, "probabilist": 124, "811428143185347e": 124, "89": [124, 371, 431, 434, 751, 808, 810, 976, 1001, 1004], "none_or_list_float": 124, "get_bound": 124, "arrays_valu": 124, "put": [124, 152], "36418": 124, "213": 124, "21716926": 124, "get_prob": 124, "unnorm": [124, 927, 928], "099609375": 124, "get_axi": 124, "number_positional_argu": 124, "mind": [124, 128, 129], "bodi": 124, "test_valu": 124, "logic": [124, 127, 128, 130, 131, 137, 321, 357, 371, 525, 528, 529, 532, 533, 536, 1009, 1010, 1013, 1015, 1018, 1020], "enough": [124, 137, 138, 139], "autom": [124, 1020], "report": 124, "test_demo": 124, "falsifi": 124, "failing_test": 124, "traceback": 124, "123": [124, 614, 639], "assertionerror": [124, 695, 733], "shrink": 124, "prescrib": 124, "behavior": [124, 135, 152, 371, 560, 563, 564, 567, 944, 945, 949, 950, 954, 960, 964], "identifi": 124, "closest": [124, 249, 275, 371, 435, 438, 469, 472, 473, 476, 568, 571, 610, 613], "checkout": 124, "scratch": 124, "databas": 124, "therebi": 124, "debug": [124, 129, 138], "event": [124, 1020], "test_gelu": 124, "test_fil": 124, "brief": 124, "phase": [124, 152], "reus": 124, "notabl": 124, "displai": [124, 129, 138], "verbos": [124, 135, 1020, 1068], "newer": 124, "max_exampl": 124, "impact": [124, 139], "deadlin": 124, "weird": 124, "verifi": [124, 130, 131, 137, 1020, 1026], "truth": [124, 371, 453, 456, 477, 480, 481, 484, 497, 500, 501, 504, 552, 555], "opt": [124, 126, 132, 137], "defer": [124, 125, 128, 129, 130, 131, 132], "suffic": [124, 127], "catch": [124, 614, 635], "systemat": 124, "safeguard": 124, "inabl": 124, "fact": [124, 138], "categor": [125, 131], "mutual": [125, 129], "constitut": [125, 135, 976, 997, 1000, 1005, 1008], "venn": 125, "diagram": 125, "light": [125, 152], "log_pr": [125, 129, 132], "array_arg": 125, "typic": 125, "whatsoev": [125, 129], "commonli": [125, 976, 997, 1000, 1005, 1008], "outsid": [125, 131, 133, 135, 137, 140, 839, 840, 843, 883, 886], "denomin": [125, 152, 614, 640, 650, 673, 680, 681, 921, 922, 925, 1056, 1057], "divis": [125, 371, 427, 430, 448, 451, 473, 476, 564, 567, 614, 640, 650, 673, 680, 681, 695, 697, 700, 702, 704, 716, 718, 1058, 1059, 1060], "deal": [125, 152], "concurr": [125, 129], "weight": [125, 129, 139, 140, 695, 697, 700, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 734, 747, 748, 750, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1058, 1060, 1061], "modif": 125, "group": [125, 129], "cast": [125, 130, 249, 255, 258, 270, 273, 839, 845, 848, 976, 993, 996, 1001, 1004, 1020], "get_all_arrays_on_dev": 125, "nested_map": [125, 903], "index_nest": [125, 903], "implicit_backend": 126, "unless": [126, 131, 132, 152, 371, 543, 546, 614, 667], "__dict__": [126, 135, 137], "ivy_original_dict": [126, 135], "unmodifi": [126, 130], "moment": [126, 152, 695, 697, 700, 702, 704, 716, 718, 1058, 1059, 1060], "fallback": 126, "freedom": [126, 976, 997, 1000, 1005, 1008], "recommend": [126, 371, 529, 532, 533, 536, 564, 567, 976, 985, 988], "achiev": [127, 133, 138, 140], "topic": [127, 137], "_data": [128, 137], "organiz": [128, 129], "bear": [128, 129, 130], "necessarili": [128, 129], "although": [128, 129], "underpin": [128, 129, 135], "programmat": [128, 129], "backup": [128, 129], "accident": [128, 129], "absent": [128, 129], "perk": [128, 129], "auto": [128, 129, 138], "throw": [128, 137], "imposs": 128, "coupl": [128, 129, 137, 139], "anywai": 128, "secondli": [128, 130], "easier": 128, "five": [129, 138], "decis": [129, 135, 137], "arbitrarili": [129, 138], "__repr__": 129, "control": [129, 130, 132, 137, 138, 151], "__getattr__": 129, "underli": [129, 371, 411, 414, 423, 426, 431, 434, 537, 540], "__contains__": 129, "__getstate__": 129, "__setstate__": 129, "unpickl": 129, "expand": [129, 614, 641, 839, 853, 856], "children": 129, "shallowest": 129, "deepest": 129, "22": [129, 371, 431, 434, 751, 763, 765, 789, 791, 939, 943, 976, 977, 980], "retain_grad": [129, 695, 706], "dy": [129, 695, 706], "dx": [129, 695, 706], "autograd": [129, 152], "grad": [129, 138, 139, 140, 1020, 1058, 1062], "redund": 129, "num_head": [129, 734, 749, 1042, 1053], "mask": [129, 734, 749, 750], "to_q_fn": [129, 734, 749], "to_kv_fn": [129, 734, 749], "to_out_fn": [129, 132, 734, 749], "to_q_v": [129, 734, 749], "to_kv_v": [129, 734, 749], "to_out_v": [129, 734, 749], "measur": [129, 734, 749, 1042, 1053], "dot": [129, 734, 749, 750, 751, 808, 810, 814, 816, 1042, 1053], "implicitli": 129, "intuit": [129, 138, 139], "chronolog": 129, "had": [129, 132], "sequenti": [129, 139], "flow": [129, 151], "implic": 129, "slightli": [129, 135, 139], "eager": [129, 152], "bfloat16": 130, "all_dtyp": 130, "all_numeric_dtyp": 130, "all_int_dtyp": 130, "all_float_dtyp": 130, "fall": [130, 134, 1020, 1054, 1055, 1058, 1062], "invalid": [130, 133, 751, 814, 816, 1009, 1010, 1013, 1015, 1018], "thirdli": 130, "native_float32": [130, 249, 320], "importantli": [130, 137, 140, 151], "arguabl": [130, 131], "compound": 130, "overflow": [130, 371, 385, 388, 976, 1001, 1004], "arr": [130, 131], "scalar": [130, 135, 140, 152, 178, 202, 205, 614, 667, 690, 694, 751, 817, 819], "settabl": [130, 131], "mx": [130, 131, 132, 1020], "nd": [130, 131, 132, 135, 140, 1020], "deleg": 130, "idx": [131, 137, 614, 620], "tpu": [131, 321, 343, 368], "aliv": [131, 321, 355, 359, 361, 614, 648, 666, 668], "amount": [131, 321, 367, 823, 824, 827, 829, 832, 834, 837], "dual": 131, "thrown": [131, 152, 614, 658], "rare": [131, 152], "program": 132, "strictli": 132, "ration": 132, "speak": 132, "subtli": 132, "ensure_in_backend": [132, 614, 658], "x_nativ": 132, "val_n": 132, "assign": [132, 133, 137], "elif": 132, "irrespect": [132, 137, 249, 255, 258], "unspecifi": [132, 371, 560, 563, 564, 567, 751, 766, 768, 839, 883, 886], "predominantli": [132, 151], "presenc": 132, "altern": [132, 138], "_wrap_fn": 132, "maxim": [132, 135], "inner": [132, 137, 751, 766, 768, 775, 778, 899, 900, 901, 902], "third": [132, 152, 751, 802, 804, 944, 945, 949], "leverag": 132, "equival": [132, 138, 140, 178, 179, 180, 371, 427, 430, 529, 532, 533, 536, 564, 567, 751, 783, 785, 792, 794, 799, 801, 817, 819], "input_arrai": 132, "clean": [133, 135, 136, 138], "flake8": 133, "undefin": 133, "yield": [133, 939, 943], "handler": [133, 134, 136, 140, 1020], "liter": [133, 751, 817, 819], "carri": 133, "star": 133, "notimplementederror": 133, "unsuccess": 133, "exce": [133, 371, 542], "black": 133, "disobei": 133, "successfulli": 133, "accordingli": [133, 178, 213, 216, 371, 465, 468, 751, 817, 819, 939, 941, 944, 945, 949, 950, 954, 960, 964, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "comparison": 133, "sound": 134, "higher": [134, 135, 140, 152, 695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726], "fledg": [135, 136], "syntact": [135, 140], "clip_by_valu": [135, 140], "clamp": [135, 140], "fit": [135, 839, 865, 868], "construct": [135, 136, 139, 140, 839, 891, 894, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065], "power_seq": 135, "resid": [135, 139], "ml_framework": [135, 140, 178, 179, 180], "current_framework": [135, 140], "furthermor": 135, "concaten": [135, 138, 321, 350, 614, 641, 839, 845, 848, 1020], "framework_handl": 135, "face": 135, "cprint": [135, 1067], "framework_stack": 135, "_determine_framework_from_arg": 135, "valueerror": [135, 839, 879, 882], "get_framework": 135, "neither": [135, 371, 385, 388, 543, 546, 695, 733], "illustr": [135, 151], "un": [135, 249, 296], "nn": [135, 140, 178, 213, 216, 1020], "init_h": [135, 734, 748], "init_c": [135, 734, 748], "kernel": [135, 152, 734, 748], "recurrent_kernel": [135, 734, 748], "bia": [135, 139, 734, 747, 748, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "recurrent_bia": [135, 734, 748], "x_shape": 135, "batch_shap": [135, 137, 140, 614, 667, 734, 748, 749, 750, 751, 820, 822, 927, 928, 1042, 1051], "timestep": [135, 734, 748, 1042, 1051], "input_channel": [135, 139, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052], "x_flat": 135, "wi": 135, "wi_x": 135, "wii_x": 135, "wif_x": 135, "wig_x": 135, "wio_x": 135, "recurr": [135, 734, 748], "wh": 135, "lstm": [135, 734, 748, 1042], "ht": 135, "ct": 135, "hts_list": 135, "unrol": [135, 138, 734, 748], "wii_xt": 135, "wif_xt": 135, "wig_xt": 135, "wio_xt": 135, "zip": 135, "htm1": 135, "ctm1": 135, "wh_htm1": 135, "whi_htm1": 135, "whf_htm1": 135, "whg_htm1": 135, "who_htm1": 135, "ft": 135, "gt": 135, "ot": 135, "offici": 135, "reliabl": 135, "sacrific": 135, "hear": 135, "virtu": 135, "pure_ivi": 135, "reduce_mean": [135, 138, 139, 140, 1020], "reduce_sum": [135, 1020], "reduce_var": 135, "compile_graph": [135, 140], "pure_torch": 135, "cat": [135, 140], "backbon": [135, 138], "_layer": 135, "super": [135, 138, 139, 140], "random_unifrom": 135, "unclean": 135, "wx": 135, "temp": 135, "torchscript": 135, "fn": [135, 137, 153, 154, 155, 156, 157, 158, 159, 160, 161, 249, 289, 290, 321, 330, 331, 614, 620, 691, 903, 904, 909, 910, 911, 913, 914, 915, 1023, 1025], "example_input": [135, 175, 176], "static_argnum": [135, 175, 176], "static_argnam": [135, 175, 176], "jit": [135, 152], "frontend": 136, "primit": [136, 152], "hierarch": [136, 138, 139], "arraywithlinalg": 137, "arraywithlog": 137, "arraywithmath": 137, "arraywithmeta": 137, "arraywithreduct": 137, "_shape": 137, "_size": 137, "functool": 137, "mul": 137, "_dtype": 137, "_devic": 137, "_dev_str": 137, "_pre_repr": 137, "_post_repr": 137, "answer": [137, 152], "consol": 137, "typeerror": 137, "immut": 137, "behav": 137, "claim": 137, "truli": 137, "_native_wrapp": 137, "attributeerror": 137, "genuin": 137, "some_method": 137, "similarli": [137, 178, 213, 216], "rewritten": 137, "__pow__": 137, "strang": 137, "enforc": 137, "notic": 137, "appear": [137, 839, 853, 856], "invers": [137, 151, 371, 377, 380, 381, 384, 390, 393, 394, 397, 399, 402, 403, 406, 407, 410, 751, 772, 774, 792, 794], "_wrap_method": 137, "func_wrapp": [137, 153, 154, 155, 156, 157, 158, 159, 160, 161], "__name__": 137, "non_wrapped_method": 137, "_method_wrap": 137, "native_arg": 137, "native_kwarg": 137, "inner_fn": 137, "whist": 137, "unwrap": 137, "transit": 137, "needlessli": 137, "randn": 137, "_unwrap_method": 137, "method_wrap": 137, "compartment": 137, "public": [137, 614, 630], "newshap": 137, "new_shap": 137, "tidi": 137, "shorter": 137, "crystal": 137, "ton": 138, "ado": [138, 139], "incred": [138, 152], "hash": 138, "soup": 138, "walk": [138, 139], "dct": 138, "cnt": 138, "combo": [138, 1020, 1026], "hold": [138, 614, 670, 671], "1000": [138, 371, 587, 590], "uda": 138, "3333": 138, "6667": 138, "178": 138, "new_weight": 138, "0600": 138, "3100": 138, "2400": 138, "6900": 138, "delimit": 138, "autocomplet": 138, "midwai": 138, "agent": 138, "total_spe": 138, "total_height": 138, "total_width": 138, "ag": 138, "tot": 138, "total_": 138, "total_h": 138, "batch_siz": [138, 734, 735, 736, 737, 738, 739, 740, 741, 744, 927, 928], "dir": 138, "adam": [138, 139, 140, 695, 697, 700, 702, 704, 716, 718, 1020, 1058, 1060], "cnt0": 138, "cnt1": 138, "diff_0": 138, "diff_1": 138, "config0": 138, "config1": 138, "Not": [138, 139, 152, 177], "decod": 138, "l0": 138, "l1": [138, 751, 817, 819], "depth": [138, 139, 140, 151, 321, 345, 349, 353, 614, 652, 667, 903, 915, 1054, 1055], "clearer": 138, "truncat": 138, "decoder__l0": 138, "decoder__l1": 138, "encoder__l0": 138, "encoder__l1": 138, "height": 138, "l0__b": 138, "l0__w": 138, "l1__b": 138, "l1__w": 138, "printabl": 138, "obviou": 138, "foresight": 138, "untidili": 138, "update_ag": 138, "normalize_img": 138, "img": 138, "img_max": 138, "reduce_max": [138, 1020], "img_min": 138, "reduce_min": [138, 1020], "img_rang": 138, "agent_posit": 138, "agent_veloc": 138, "agent_cam_front_rgb": 138, "agent_cam_front_depth": 138, "agent_cam_rear_rgb": 138, "agent_cam_rear_depth": 138, "agent_cam_lidar": 138, "cleaner": 138, "camera": 138, "front_rgb": 138, "front_depth": 138, "rear_rgb": 138, "rear_depth": 138, "lidar": 138, "rgb": 138, "rear": 138, "veloc": 138, "cam": 138, "cam_max": 138, "cam_min": 138, "cam_rang": 138, "Of": 138, "ideal": 138, "perman": 138, "afterward": 138, "thread": 138, "incorpor": 138, "pretti": 138, "straightforward": 138, "dataload": [138, 150, 1020], "_cnt": 138, "img_": 138, "_dataset_s": 138, "_batch_siz": 138, "_count": [138, 139], "__next__": 138, "filenam": 138, "img_fnam": 138, "fname": 138, "loaded_img": 138, "cv2": 138, "imread": 138, "loader": [138, 152], "batch_slic": 138, "mymodel": [138, 1020], "linear0": [138, 139, 1020], "linear1": [138, 139, 1020], "x_in": [138, 139, 140, 1020], "loss_fn": [138, 139, 140, 1020], "0145": 138, "grad_fn": 138, "addbackward0": 138, "_create_vari": 139, "output_channel": [139, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052], "with_bia": [139, 1042, 1052], "_input_channel": 139, "_output_channel": 139, "_w_shape": 139, "_b_shape": 139, "_with_bia": 139, "8979": 139, "3198": 139, "0196": 139, "3126": 139, "3717": 139, "9687": 139, "6958": 139, "5122": 139, "3902": 139, "8800": 139, "5613": 139, "1982": 139, "nightmar": 139, "overcom": 139, "fc": 139, "9563": 139, "v0": 139, "v1": 139, "6440": 139, "key0": 139, "1823": 139, "8075": 139, "linear3": 139, "v2": 139, "2346": 139, "counter": 139, "hidden": [139, 734, 748, 1042, 1051], "fed": [139, 321, 365], "1300": 139, "decoupl": 139, "scheme": 139, "weight_initi": [139, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "glorotuniform": [139, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052], "bias_initi": [139, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "_w_init": 139, "_b_init": 139, "create_vari": [139, 1033], "var_shap": [139, 1033], "fan_out": [139, 1033], "fan_in": [139, 1033], "fan_mod": [139, 1033], "fan_sum": 139, "slight": 139, "misnom": 139, "saw": 139, "vanilla": [139, 899, 901], "descent": [139, 695, 707, 709, 1058, 1063], "lar": [139, 695, 716, 718, 720, 722, 1058], "lamb": [139, 695, 716, 718, 1058], "compile_on_next_step": [139, 1054, 1055, 1058, 1059, 1060, 1061, 1062, 1063], "_beta1": 139, "_beta2": 139, "_epsilon": 139, "_mw": 139, "_vw": 139, "_first_pass": 139, "_should_compil": 139, "_step": [139, 1058, 1062], "new_v": 139, "_lr": 139, "isinst": [139, 140, 614, 684], "_inplac": 139, "_stop_gradi": 139, "set_stat": [139, 1058, 1059, 1060, 1061, 1062, 1063], "pre": [140, 152, 321], "captur": 140, "sparse_funct": 140, "num_class": [140, 927, 928], "num_dim": 140, "new_axi": 140, "_linear": 140, "to_backend": 140, "jax_graph": 140, "learnabl": [140, 921, 922, 925, 1056, 1057], "to_ivy_modul": [140, 1031], "thinli": 140, "whilst": 140, "to_haiku_modul": 140, "hk": 140, "loss_fn_t": 140, "transform": [140, 151, 734, 746, 747], "without_apply_rng": 140, "rng": 140, "prngkei": 140, "init": 140, "update_rul": 140, "tree_multimap": 140, "vision": [150, 1020], "robot": [150, 1020], "focus": 151, "field": [151, 751, 766, 768, 795, 797, 802, 804, 944, 945, 949, 950, 954], "perfect": 151, "3d": [151, 1042, 1047, 1048], "differenti": 151, "demo": [151, 1020], "orient": 151, "pose": 151, "euler": [151, 177], "quaternion": 151, "rotat": 151, "matric": [151, 178, 213, 216, 231, 235, 236, 240, 734, 747, 751, 752, 755, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 782, 783, 785, 786, 788, 792, 794, 795, 797, 799, 801, 802, 804, 805, 807, 811, 813], "angl": [151, 371, 403, 406, 444, 447, 582, 585, 605, 609], "ivy_mech": 151, "target_facing_rotation_matrix": 151, "polar_to_cartesian_coord": 151, "ordin": [151, 751, 799, 801], "warp": 151, "optic": 151, "voxel": 151, "ivy_vis": 151, "coords_to_voxel_grid": 151, "render_pixel_coord": 151, "neural": [151, 734, 1020, 1028, 1042], "radianc": 151, "nerf": 151, "trajectori": 151, "motion": 151, "plan": [151, 1020], "mobil": 151, "ivy_robot": 151, "sample_spline_path": 151, "rigidmobil": 151, "sample_bodi": 151, "drone": 151, "sample_link": 151, "openai": 151, "swimmer": 151, "cumul": [151, 614, 632, 633], "reward": 151, "supervis": 151, "reinforc": 151, "door": [151, 152], "intersect": 151, "cartpol": 151, "mountain_car": 151, "pendulum": 151, "reacher": 151, "condit": [151, 175, 176, 903, 913, 914, 939, 943], "learnt": 151, "ture": 151, "ntm": 151, "egospher": 151, "spatial": 151, "esm": 151, "ivy_memori": 151, "egocentr": 151, "room": 151, "inspir": 151, "doubt": 152, "grate": 152, "probe": 152, "undergo": 152, "remark": 152, "surpris": 152, "backward": [152, 371, 564, 567, 751, 814, 816, 1009, 1010, 1013, 1015, 1018], "lock": 152, "contunu": 152, "minor": 152, "xla": 152, "buffer": 152, "gold": 152, "dex": 152, "lax": 152, "scan": 152, "tricki": 152, "predictor": 152, "tight": 152, "driver": 152, "schedul": 152, "dispatch": 152, "Will": 152, "ast": 152, "dynamic": 152, "cond": 152, "jacobian": 152, "checkpoint": 152, "autodiff": 152, "shine": 152, "merci": 152, "superset": 152, "cluster": 152, "compet": 152, "paradigm": 152, "parallelis": [152, 321, 330, 331], "spmd": 152, "mixtur": [152, 695, 697, 700], "expert": 152, "sophist": 152, "depart": 152, "routin": 152, "hundr": 152, "thousand": 152, "deepli": [152, 903, 905], "broadli": 152, "heavili": 152, "supplementari": 152, "Is": 152, "reusabl": 152, "fanci": 152, "fusion": 152, "lose": 152, "vmap": 152, "pmap": 152, "overhead": 152, "ineffici": 152, "eventu": 152, "supplement": 152, "backdoor": 152, "callback": 152, "record": 152, "metric": 152, "somewhat": 152, "outsourc": 152, "inputs_to_ivy_arrai": 153, "gaussian": [163, 164], "leaki": [163, 164, 165], "rectifi": [163, 165, 166], "slope": [163, 165], "39": [163, 165, 371, 394, 397, 461, 464, 695, 697, 700, 751, 789, 791, 976, 977, 980], "85": [163, 165, 371, 431, 434], "48": [163, 165, 371, 587, 590, 695, 697, 700, 751, 789, 791, 976, 977, 980], "88": [163, 165, 371, 431, 434, 751, 789, 791, 976, 977, 980], "269": [163, 167], "731": [163, 167], "214": [163, 167], "978": [163, 167], "422": [163, 168], "155": [163, 168], "0768": [163, 168], "231": [163, 168], "693": [163, 168, 371, 394, 397, 823, 834, 837], "49": [163, 168, 371, 587, 590, 976, 977, 980], "147": [163, 168], "363": [163, 168], "3461": [163, 169, 172], "6491": [163, 169, 172], "535": [163, 169, 172], "hyperbol": [163, 174, 371, 381, 384, 394, 397, 407, 410, 444, 447, 582, 585, 605, 609], "55": [163, 174, 734, 740, 751, 789, 791, 976, 977, 980], "501": [163, 174], "array_method": [169, 170, 182, 183, 188, 189, 196, 197, 202, 203, 213, 214, 218, 219, 226, 227, 231, 233, 236, 238, 244, 246, 255, 256, 260, 261, 265, 266, 270, 271, 279, 280, 284, 285, 291, 292, 297, 298, 302, 303, 308, 309, 372, 373, 377, 378, 381, 382, 385, 386, 390, 391, 394, 395, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 444, 445, 448, 449, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 505, 506, 509, 510, 513, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 537, 538, 543, 544, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 577, 578, 582, 583, 587, 588, 591, 592, 595, 597, 600, 602, 605, 607, 610, 611, 615, 616, 643, 644, 685, 687, 697, 698, 711, 712, 741, 742, 752, 753, 757, 758, 760, 761, 763, 764, 766, 767, 769, 770, 772, 773, 775, 776, 779, 780, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 799, 800, 802, 803, 805, 806, 808, 809, 811, 812, 814, 815, 817, 818, 820, 821, 824, 825, 829, 830, 834, 835, 840, 841, 845, 846, 849, 850, 853, 854, 857, 858, 861, 862, 865, 866, 869, 870, 873, 874, 879, 880, 883, 884, 887, 888, 891, 892, 895, 896, 922, 923, 945, 947, 950, 952, 955, 957, 960, 962, 966, 967, 971, 972, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 998, 1001, 1002, 1005, 1006, 1010, 1011, 1015, 1016], "container_method": [169, 171, 173, 179, 181, 182, 184, 186, 188, 190, 192, 193, 195, 196, 198, 200, 202, 204, 206, 207, 209, 210, 212, 213, 215, 217, 218, 220, 222, 223, 225, 226, 228, 230, 231, 232, 234, 236, 237, 239, 241, 242, 244, 245, 247, 255, 257, 259, 260, 262, 264, 265, 267, 269, 270, 272, 274, 279, 281, 284, 286, 288, 291, 293, 295, 297, 299, 301, 302, 304, 306, 308, 310, 312, 372, 374, 376, 377, 379, 381, 383, 385, 387, 389, 390, 392, 394, 396, 398, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 444, 446, 448, 450, 452, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 543, 545, 547, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 577, 579, 581, 582, 584, 586, 587, 589, 591, 593, 595, 596, 598, 600, 601, 603, 605, 606, 608, 610, 612, 615, 617, 619, 627, 628, 643, 645, 647, 685, 686, 688, 697, 699, 701, 702, 703, 705, 707, 708, 710, 711, 713, 715, 716, 717, 719, 720, 721, 723, 724, 725, 727, 741, 743, 745, 752, 754, 756, 775, 777, 824, 826, 828, 829, 831, 833, 834, 836, 838, 840, 842, 844, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 922, 924, 926, 929, 931, 933, 934, 936, 945, 946, 948, 950, 951, 953, 955, 956, 958, 960, 961, 963, 966, 968, 970, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1010, 1012, 1014, 1015, 1017, 1019], "faster": [175, 176], "invoc": [175, 176], "718281828459045": 177, "newaxi": 177, "alia": 177, "pi": 177, "141592653589793": 177, "mathemat": [177, 371, 385, 388, 403, 406, 465, 468, 543, 546, 751, 817, 819], "half": [178, 179, 180, 927, 929, 930, 933, 935], "chosen": [178, 179, 180, 371, 403, 406, 939, 943], "distanc": [178, 179, 180], "adjac": [178, 179, 180], "creation_funct": [178, 179, 180, 182, 185, 187, 188, 191, 193, 194, 196, 199, 201, 202, 205, 207, 208, 223, 224, 226, 229, 231, 235, 236, 240, 241, 243, 244, 248], "interpret": [178, 182, 185, 218, 221], "nativeshap": [178, 187, 201, 223, 224, 241, 243, 614, 671, 677, 679, 734, 736, 738, 740, 839, 869, 872, 927, 929, 930, 932, 933, 935], "uniniti": [178, 187, 188, 191], "elsewher": [178, 193, 194, 939, 943], "row": [178, 193, 194, 751, 799, 801, 802, 804, 927, 928, 939, 942], "column": [178, 193, 194, 751, 766, 768, 795, 797, 799, 801, 802, 804], "__dlpack__": [178, 196, 199, 321, 366], "interchang": [178, 196, 199, 839, 887, 890], "coordin": [178, 213, 216, 371, 403, 406], "cartesian": [178, 213, 216], "ij": [178, 213, 216, 976, 977, 980], "rank": [178, 213, 216, 614, 693, 751, 757, 759, 783, 785, 795, 797, 799, 801, 811, 813, 814, 816, 817, 819, 839, 849, 852, 853, 856, 883, 886, 895, 898, 939, 942, 1009, 1010, 1013, 1015, 1018], "ni": [178, 213, 216], "xi": [178, 213, 216], "n1": [178, 213, 216], "n2": [178, 213, 216], "n3": [178, 213, 216], "xv": [178, 213, 216], "yv": [178, 213, 216], "triangular": [178, 231, 235, 236, 240, 751, 752, 755, 795, 797], "innermost": [178, 231, 235, 236, 240, 751, 752, 755, 760, 762, 763, 765, 766, 768, 769, 771, 772, 774, 783, 785, 786, 788, 792, 794, 795, 797, 799, 801, 802, 804, 805, 807, 811, 813], "mxn": [178, 231, 235, 236, 240, 751, 763, 765, 783, 785, 786, 788, 792, 794, 795, 797, 805, 807, 811, 813], "y1": [178, 244, 248], "y2": [178, 244, 248], "x3": [178, 244, 248, 321, 359], "y3": [178, 244, 248], "intdtyp": [178, 244, 248, 249, 278], "defaultdtyp": [249, 250], "defaultfloatdtyp": [249, 251], "float_dtyp": [249, 277, 314], "defaultintdtyp": [249, 252], "incompat": [249, 265, 268], "occur": [249, 270, 273, 939, 940, 941, 944, 945, 949, 950, 954, 960, 964], "data_type_funct": [249, 270, 273], "floatdtyp": [249, 277], "int_dtyp": [249, 278, 315], "followng": [249, 284, 287], "occupi": [249, 284, 287, 291, 294, 614, 670, 671], "ep": [249, 284, 287, 751, 783, 785, 792, 794], "smallest_norm": [249, 284, 287], "encapsul": [249, 291, 294], "type1": [249, 307], "type2": [249, 307], "ret1": [249, 316], "ret2": [249, 316], "native_bool": [249, 320], "native_float16": [249, 320], "native_float64": [249, 320], "native_int8": [249, 320], "native_int16": [249, 320], "native_int32": [249, 320], "native_int64": [249, 320], "native_uint8": [249, 320], "native_uint64": [249, 320], "noinspect": [250, 251, 252, 322, 696], "pyshadowingnam": [250, 251, 252, 322, 696], "defaultdevic": [321, 322], "__enter__": 321, "_dev": 321, "__exit__": 321, "exc_typ": 321, "exc_val": 321, "exc_tb": 321, "exit": 321, "devcloneditem": [321, 343], "multidevitem": [321, 323, 326], "devclonedit": 321, "multidevit": [321, 324, 327, 330, 331, 335], "devclonednest": 321, "multidevnest": [321, 325, 328], "devdistitem": 321, "devdistit": 321, "devdistnest": 321, "devmanag": [321, 329], "dev_mapp": 321, "da_dim_s": 321, "safety_factor": 321, "min_dev_dim_s": 321, "max_dev_dim_step_ratio": 321, "min_unit_dev_tune_step": 321, "min_sf_tune_step": 321, "starting_split_factor": 321, "max_split_factor_step_s": 321, "tune_dev_alloc": 321, "tune_dev_split": 321, "mapper": [321, 330, 331], "receivess": 321, "ratio": [321, 695, 716, 718, 1058, 1060], "safe": [321, 330], "oom": 321, "tune": 321, "da_tune_step": 321, "ds_tune_step": 321, "to_clon": 321, "to_distribut": 321, "multidevic": [321, 330], "parallel": [321, 330, 331], "mutlidevic": [321, 330], "repeated_config_check": 321, "tune_step": 321, "devmapp": [321, 331], "ret_fn": [321, 330, 331], "queue_class": [321, 330, 331], "worker_class": [321, 330, 331], "worker": [321, 330, 331], "used_dev": [321, 330], "sf": [321, 330], "devmappermultiproc": 321, "multidev": [321, 332, 333, 334, 353], "profil": 321, "save_dir": [321, 336], "deviceic": [321, 342], "spread": [321, 353], "139740789224448": [321, 355], "physic": [321, 357], "x4": [321, 359], "process_specif": [321, 360, 370], "percentag": [321, 360], "ram": [321, 360, 367, 370], "attr_onli": [321, 361], "chunk": [321, 363, 364, 365], "max_chunk_s": [321, 365], "chunk_siz": [321, 365], "input_ax": [321, 365], "output_ax": [321, 365], "feed": [321, 365], "fist": [321, 365], "stream": [321, 366], "caveat": [321, 366], "portabl": [321, 366, 1020], "gb": [321, 367, 370], "reset": [321, 369, 614, 692], "magnitud": [371, 372, 375, 385, 388, 543, 546, 751, 802, 804, 805, 807], "princip": [371, 377, 380, 390, 393, 399, 402], "cosin": [371, 377, 380, 381, 384, 439, 442, 444, 447], "x1_i": [371, 385, 388, 403, 406, 411, 414, 419, 422, 423, 426, 427, 430, 431, 434, 448, 451, 453, 456, 473, 476, 477, 480, 481, 484, 497, 500, 501, 504, 521, 524, 525, 528, 533, 536, 537, 540, 543, 546, 552, 555, 560, 563, 564, 567, 595, 599], "x2_i": [371, 385, 388, 403, 406, 411, 414, 419, 422, 423, 426, 427, 430, 431, 434, 448, 451, 453, 456, 473, 476, 477, 480, 481, 484, 497, 500, 501, 504, 521, 524, 525, 528, 533, 536, 537, 540, 543, 546, 552, 555, 560, 563, 564, 567, 595, 599], "finit": [371, 385, 388, 403, 406, 485, 488, 543, 546, 560, 563, 564, 567], "nor": [371, 385, 388, 543, 546, 695, 733], "nearest": [371, 385, 388, 543, 546, 568, 571], "2019": [371, 385, 388, 465, 468, 543, 546], "commut": [371, 385, 388], "sine": [371, 390, 393, 394, 397, 577, 580, 582, 585], "57": [371, 390, 393, 394, 397, 431, 434, 444, 447], "524": [371, 390, 393], "644": [371, 390, 393], "201": [371, 390, 393, 568, 571], "305": [371, 390, 393], "412": [371, 390, 393], "44": [371, 394, 397, 568, 571, 587, 590, 591, 594, 751, 789, 791, 939, 943, 976, 977, 980], "809": [371, 394, 397], "569": [371, 394, 397], "733": [371, 394, 397], "68": [371, 394, 397, 921, 922, 925], "quotient": [371, 403, 406], "notat": [371, 403, 406, 976, 977, 980], "denot": [371, 403, 406, 695, 733], "quadrant": [371, 403, 406], "3\u03c0": [371, 403, 406], "549": [371, 407, 410], "bitwis": [371, 411, 414, 423, 426, 431, 434, 537, 540], "AND": [371, 411, 414, 525, 528, 1009, 1010, 1013], "binari": [371, 411, 414, 423, 426, 431, 434, 537, 540, 823, 824, 827], "invert": [371, 415, 418], "arithmet": [371, 427, 430, 976, 985, 988], "propag": [371, 427, 430, 976, 981, 984, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1008], "thu": [371, 427, 430, 560, 563, 564, 567, 751, 766, 768], "lh": [371, 427, 430], "rh": [371, 427, 430], "xor": [371, 431, 434, 537, 540], "78": [371, 431, 434, 572, 575, 751, 789, 791, 976, 977, 980], "91": [371, 431, 434, 751, 789, 791, 976, 977, 980], "66": [371, 431, 434, 751, 789, 791, 976, 977, 980], "77": [371, 431, 434, 751, 789, 791, 976, 977, 980], "79": [371, 431, 434], "26": [371, 431, 434, 582, 585, 695, 697, 700, 734, 741, 744, 751, 763, 765, 789, 791, 808, 810, 976, 977, 980], "27": [371, 431, 434, 444, 447, 582, 585, 587, 590, 734, 750, 751, 789, 791, 976, 977, 980], "74": [371, 431, 434], "59": [371, 431, 434], "654": [371, 439, 442], "122": [371, 444, 447], "368": [371, 444, 447], "670": [371, 444, 447], "202": [371, 444, 447, 568, 571], "548": [371, 444, 447, 582, 585], "1490": [371, 444, 447], "dividend": [371, 448, 451, 564, 567], "divisor": [371, 448, 451, 564, 567, 695, 697, 700, 702, 704, 716, 718, 976, 997, 1000, 1005, 1008, 1058, 1059, 1060], "gauss": [371, 457, 460], "exponenti": [371, 457, 460, 461, 464, 521, 524, 560, 563], "logarithm": [371, 461, 464, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 751, 798], "72": [371, 461, 464, 695, 697, 700, 751, 789, 791, 976, 977, 980], "fdlibm": [371, 465, 468], "compliant": [371, 465, 468, 529, 532, 533, 536, 976, 981, 984, 985, 988, 989, 992], "greatest": [371, 469, 472, 473, 476], "out_i": [371, 485, 488, 489, 492, 493, 496], "threshold": [371, 541, 542], "y_i": [371, 548, 551], "expon": [371, 560, 563, 614, 681], "versu": [371, 560, 563], "odd": [371, 560, 563], "modulu": [371, 564, 567], "primarili": [371, 564, 567], "5654": [371, 568, 571], "034": [371, 568, 571], "433": [371, 568, 571], "343": [371, 568, 571], "30": [371, 568, 571, 751, 789, 791, 976, 977, 980, 1033, 1039], "81": [371, 568, 571, 591, 594, 976, 977, 980], "527": [371, 568, 571], "301": [371, 568, 571], "124": [371, 572, 575], "46": [371, 572, 575], "932": [371, 577, 580], "746": [371, 577, 580], "443": [371, 577, 580], "657": [371, 577, 580], "253": [371, 582, 585], "indistinguish": [371, 587, 590], "infinit": [371, 587, 590], "83": [371, 587, 590], "32455532": [371, 587, 590], "89897949": [371, 587, 590], "50": [371, 587, 590, 751, 789, 791, 939, 942, 976, 977, 980], "31": [371, 587, 590], "169": [371, 587, 590], "47": [371, 587, 590], "93": [371, 587, 590], "35": [371, 587, 590, 734, 750, 751, 757, 759, 939, 943, 976, 977, 980], "09": [371, 591, 594, 734, 750], "546": [371, 600, 604], "842": [371, 600, 604], "916": [371, 600, 604, 823, 824, 827], "996": [371, 600, 604], "328": [371, 600, 604], "real": [371, 605, 609], "462": [371, 605, 609], "604": [371, 605, 609], "984": [371, 605, 609], "997": [371, 605, 609], "decim": [371, 610, 613], "inspect": [614, 620, 1024, 1025], "downscal": [614, 626, 627, 629], "60": [614, 632, 751, 789, 791, 976, 977, 980], "default_v": [614, 635], "catch_except": [614, 635], "rev": [614, 635], "with_cal": [614, 635], "arrang": [614, 636], "mod": [614, 640], "max_freq": [614, 641], "num_band": [614, 641], "fourier": [614, 641], "band": [614, 641], "linearli": [614, 641, 751, 799, 801], "oppos": [614, 641], "geometr": [614, 641], "seen_set": [614, 652], "local_set": [614, 652], "decrement": [614, 656], "allow_dupl": [614, 664], "forkserv": [614, 665], "spawn": [614, 665], "hot": [614, 667], "scatter": [614, 667, 670, 671], "tmp_dr": [614, 676], "temporari": [614, 676], "min_denomin": [614, 680], "stabil": [614, 680, 681, 965, 966, 969, 971, 974], "_min_denomin": [614, 680], "min_bas": [614, 681], "_min_bas": [614, 681, 921, 922, 925, 1056, 1057], "100000023841858": [614, 684], "200000047683716": [614, 684], "299999952316284": [614, 684], "400000095367432": [614, 684], "599999904632568": [614, 684], "gradienttrack": [695, 696], "delta": [695, 697, 700], "cost": [695, 697, 700, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 899, 900, 901, 902], "ws": [695, 697, 700, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726], "en": [695, 697, 700, 702, 704], "wikipedia": [695, 697, 700, 702, 704], "wiki": [695, 697, 700, 702, 704], "stochastic_gradient_desc": [695, 697, 700, 702, 704], "dc": [695, 697, 700, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726], "dw": [695, 697, 700, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726], "averag": [695, 697, 700, 702, 704, 716, 718, 899, 900, 901], "forget": [695, 697, 700, 702, 704, 716, 718, 1058, 1059, 1060], "004": [695, 697, 700], "009": [695, 697, 700], "86": [695, 697, 700], "28": [695, 697, 700, 734, 737, 740, 741, 744, 751, 789, 791, 976, 977, 980], "0125": [695, 697, 700], "601": [695, 697, 700], "025": [695, 697, 700], "992": [695, 697, 700], "209": [695, 697, 700, 944, 945, 949], "271": [695, 697, 700], "0717": [695, 697, 700], "142": [695, 697, 700], "182": [695, 697, 700], "624": [695, 697, 700, 927, 933, 935], "744": [695, 697, 700], "626": [695, 697, 700], "65": [695, 697, 700, 751, 789, 791, 976, 977, 980], "024": [695, 697, 700], "096": [695, 697, 700], "216": [695, 697, 700], "384": [695, 697, 700], "rate": [695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726, 899, 900, 901, 902, 1042, 1053, 1058, 1059, 1060, 1061, 1062, 1063], "ws_new": [695, 702, 704, 707, 709, 716, 718, 720, 722, 724, 726], "retain": [695, 706], "trust": [695, 716, 718, 1058, 1060], "decai": [695, 716, 718, 720, 722, 1058, 1060, 1061], "layerwis": [695, 720, 722, 1058, 1061], "with_grads_stack": [695, 733], "nwc": [734, 735, 736, 1042, 1043, 1044], "convolut": [734, 735, 736, 737, 738, 739, 740, 741, 744, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "d_in": [734, 735, 736, 737, 738, 739, 740, 741, 744], "d_out": [734, 735, 736, 737, 738, 739, 740], "slide": [734, 735, 736, 737, 738, 739, 740, 741, 744, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "ncw": [734, 735, 736, 1042, 1043, 1044], "wio": [734, 735], "output_shap": [734, 736, 738, 740, 1042, 1044, 1046, 1048], "fh": [734, 737, 738, 739, 740, 741, 744], "nchw": [734, 737, 738, 741, 744, 1042, 1045, 1046, 1049], "hwio": [734, 737], "unequ": [734, 737], "unsqueez": [734, 737, 741, 744], "ndhwc": [734, 739, 740, 1042, 1047, 1048], "volum": [734, 739], "fd": [734, 739, 740], "ncdhw": [734, 739, 740, 1042, 1047, 1048], "dhwio": [734, 739], "258": [734, 740], "depthwis": [734, 741, 744, 1042, 1049], "hwi": [734, 741, 744], "333": [734, 741, 744], "prob": [734, 746, 927, 928, 1042, 1050], "randomli": [734, 746, 1042, 1050], "bernoulli": [734, 746], "out_featur": [734, 746, 747], "incom": [734, 747], "outer_batch_shap": [734, 747], "inner_batch_shap": [734, 747], "in_featur": [734, 747], "cell": [734, 748, 1042, 1051], "num_queri": [734, 749, 750], "x_feat_dim": [734, 749], "num_kei": [734, 749, 750], "cont_feat_dim": [734, 749], "numhead": [734, 749], "feat_dim": [734, 749, 750], "out_feat_dim": [734, 749], "score": [734, 750], "03": [734, 750, 921, 922, 925], "decomposit": [751, 752, 755, 795, 797, 802, 804], "symmetr": [751, 752, 755, 766, 768, 769, 771, 820, 822], "u": [751, 752, 755, 802, 804], "vif": [751, 757, 759], "92": [751, 760, 762], "293": [751, 760, 762], "46997": [751, 760, 762], "eigendecomposit": [751, 766, 768], "qlq\u1d40": [751, 766, 768], "orthogon": [751, 766, 768], "eig": [751, 766, 768], "eigenvalu": [751, 766, 768, 769, 771], "eigenvector": [751, 766, 768], "prepend": [751, 775, 778], "singular": [751, 783, 785, 792, 794, 802, 804, 805, 807], "toler": [751, 783, 785, 792, 794], "largest_singular_valu": [751, 783, 785, 792, 794], "array_lik": [751, 789, 791], "84": [751, 789, 791, 976, 977, 980], "105": [751, 789, 791, 823, 824, 827], "112": [751, 789, 791, 976, 977, 980], "104": [751, 789, 791, 976, 977, 980], "120": [751, 789, 791], "moor": [751, 792, 794], "penros": [751, 792, 794], "pseudo": [751, 792, 794], "orthonorm": [751, 795, 797, 802, 804], "2d": [751, 798, 1042, 1045, 1046, 1049], "logdet": [751, 798], "coeffici": [751, 799, 801], "usvh": [751, 802, 804], "vh": [751, 802, 804], "hermitian": [751, 802, 804], "et": [751, 802, 804], "cetera": [751, 802, 804], "adjoint": [751, 802, 804], "reconstruct": [751, 802, 804, 944, 945, 949, 955, 959], "reconstructed_x": [751, 802, 804], "contract": [751, 808, 810, 976, 977, 980], "doubl": [751, 808, 810], "singleton": [751, 817, 819, 839, 879, 882, 939, 941, 976, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1013, 1015, 1018], "manhattan": [751, 817, 819], "l2": [751, 817, 819], "euclidean": [751, 817, 819], "mathbf": [751, 820, 822], "mathbb": [751, 820, 822], "skew": [751, 820, 822], "entropi": [823, 824, 827, 829, 832, 834, 837], "predict": [823, 824, 827, 829, 832, 834, 837], "smooth": [823, 824, 827, 829, 832, 834, 837], "discret": [823, 829, 832], "35667497": [823, 829, 832], "spars": [823, 834, 837], "logit": [823, 834, 837], "793291": [823, 834, 837], "512926": [823, 834, 837], "before_1": [839, 849, 852, 895, 898], "after_1": [839, 849, 852, 895, 898], "before_n": [839, 849, 852, 895, 898], "after_n": [839, 849, 852, 895, 898], "manipulation_funct": [839, 853, 856], "reorder": [839, 857, 860], "permut": [839, 861, 864, 887, 890], "repetit": [839, 865, 868, 891, 894], "famili": [839, 883, 886], "intxx": [839, 883, 886], "floatxx": [839, 883, 886], "fomaml_step": 899, "inner_cost_fn": [899, 900, 901], "outer_cost_fn": [899, 900, 901], "inner_grad_step": [899, 900, 901, 902], "inner_learning_r": [899, 900, 901, 902], "inner_optimization_step": [899, 900, 901, 902], "inner_batch_fn": [899, 900, 901], "outer_batch_fn": [899, 900, 901], "average_across_step": [899, 900, 901], "inner_v": [899, 900, 901], "keep_inner_v": [899, 900, 901], "outer_v": [899, 900, 901], "keep_outer_v": [899, 900, 901], "return_inner_v": [899, 900, 901, 902], "num_task": [899, 900, 901, 902], "maml": [899, 900, 901], "recev": [899, 900, 901], "0x7f50c134e280": [899, 900, 901, 902], "maml_step": 899, "rece": [899, 901], "reptile_step": 899, "cost_fn": [899, 902], "reptil": [899, 902], "receivng": [899, 902], "all_nested_indic": 903, "include_nest": [903, 904], "_index": [903, 904, 914], "_base": [903, 904, 913, 914], "copy_nest": 903, "to_mut": [903, 905, 915], "mutabl": [903, 905, 915], "insert_into_nest_at_index": 903, "insert_into_nest_at_indic": 903, "map_nest_at_index": 903, "map_nest_at_indic": 903, "multi_index_nest": 903, "nested_ani": 903, "check_nest": [903, 913, 914], "conditon": [903, 913, 914], "nested_indices_wher": 903, "stop_after_n_found": [903, 914], "_depth": [903, 915], "_tuple_check_fn": [903, 915], "_list_check_fn": [903, 915], "_dict_check_fn": [903, 915], "nested_multi_map": 903, "nest0": [903, 916], "ivy_arrai": [903, 916], "funciton": [903, 916], "prune_nest_at_index": 903, "prune_nest_at_indic": 903, "set_nest_at_index": 903, "set_nest_at_indic": 903, "mini": [921, 922, 925, 1056, 1057], "gamma": [921, 922, 925], "beta": [921, 922, 925], "894": [921, 922, 925], "772": [921, 922, 925], "796": [921, 922, 925], "population_s": [927, 928], "num_sampl": [927, 928], "home": [927, 928, 932], "uniformli": [927, 929, 930, 933, 935], "highest": [927, 929, 930], "parameter": [927, 932, 933, 935], "6444774682897879": [927, 932], "811": [927, 932], "508": [927, 932], "564": [927, 932], "7268672": [927, 932], "968": [927, 932], "175": [927, 932, 944, 945, 949], "064": [927, 932], "40935726": [927, 932], "556": [927, 932], "26431865": [927, 933, 935], "475": [927, 933, 935], "878": [927, 933, 935], "861": [927, 933, 935], "89150229": [927, 933, 935], "89629126": [927, 933, 935], "94198485": [927, 933, 935], "91405606": [927, 933, 935], "72848724": [927, 933, 935], "7550739": [927, 933, 935], "00109": [927, 933, 935], "occurr": [939, 940, 941, 944, 945, 949], "43": [939, 943], "x_j": [944, 945, 949, 950, 954, 960, 964], "impli": [944, 945, 949, 950, 954, 960, 964], "inverse_indic": [944, 945, 949, 955, 959], "aggreg": [944, 945, 949], "fourth": [944, 945, 949], "607": [944, 945, 949], "735": [944, 945, 949], "667": [944, 945, 949], "381": [944, 945, 949], "857": [944, 945, 949], "0396": [944, 945, 949], "166": [944, 945, 949], "58": [944, 945, 949], "828": [944, 945, 949], "144": [944, 945, 949], "40501155": [944, 945, 949], "77361575": [944, 945, 949], "97776199": [944, 945, 949], "36831157": [944, 945, 949], "89148434": [944, 945, 949], "9512272": [944, 945, 949], "67542176": [944, 945, 949], "41985657": [944, 945, 949], "23478023": [944, 945, 949], "1141": [944, 945, 949], "8101": [944, 945, 949], "9298": [944, 945, 949], "8460": [944, 945, 949], "2119": [944, 945, 949], "3519": [944, 945, 949], "6252": [944, 945, 949], "4033": [944, 945, 949], "7443": [944, 945, 949], "2577": [944, 945, 949], "3707": [944, 945, 949], "0545": [944, 945, 949], "3238": [944, 945, 949], "5944": [944, 945, 949], "0775": [944, 945, 949], "4327": [944, 945, 949], "176": [944, 945, 949], "889": [944, 945, 949], "763": [944, 945, 949], "071": [944, 945, 949], "262": [944, 945, 949], "456": [944, 945, 949], "114": [944, 945, 949], "349": [944, 945, 949], "615": [944, 945, 949], "594": [944, 945, 949], "335": [944, 945, 949], "212": [944, 945, 949], "457": [944, 945, 949], "827": [944, 945, 949], "set_funct": [944, 950, 954], "ascend": [965, 966, 969], "einstein": [976, 977, 980], "summat": [976, 977, 980], "seq": [976, 977, 980], "jk": [976, 977, 980], "ik": [976, 977, 980], "126": [976, 977, 980], "510": [976, 977, 980], "108": [976, 977, 980], "117": [976, 977, 980], "sentinel": [976, 981, 984, 989, 992], "unsign": [976, 993, 996, 1001, 1004], "degre": [976, 997, 1000, 1005, 1008], "bessel": [976, 997, 1000, 1005, 1008], "8164966": [976, 997, 1000], "varianc": [976, 1005, 1008], "unbias": [976, 1005, 1008], "simplicit": [1009, 1010, 1013], "grow": 1020, "ai": 1020, "got": 1020, "colab": 1020, "sharp": 1020, "weekli": 1020, "immedi": 1020, "favorit": 1020, "jax_concat": 1020, "tf_concat": 1020, "np_concat": 1020, "mx_concat": 1020, "torch_concat": 1020, "prompt": 1020, "get_devic": 1020, "reduce_prod": 1020, "gradient_imag": 1020, "linalg": 1020, "bilinear_resampl": 1020, "stack_imag": 1020, "neural_net": 1020, "ecosystem": [1020, 1026], "popular": [1020, 1026], "acceler": 1020, "articl": 1020, "lenton2021ivi": 1020, "inter": 1020, "lenton": 1020, "daniel": 1020, "pardo": 1020, "fabio": 1020, "falck": 1020, "fabian": 1020, "jame": 1020, "stephen": 1020, "clark": 1020, "ronald": 1020, "journal": 1020, "arxiv": 1020, "preprint": 1020, "2102": 1020, "02886": 1020, "2021": 1020, "add_array_spec": 1023, "fn_array_spec": 1023, "geglu": 1028, "native_modul": [1031, 1032], "native_module_class": [1031, 1032], "firstlayersiren": 1033, "kaimingnorm": [1033, 1037], "negative_slop": 1033, "Ones": 1033, "siren": 1033, "w0": [1033, 1039], "filter_s": [1042, 1043, 1044], "1d": [1042, 1043, 1044], "conv1dtranspos": 1042, "filter_shap": [1042, 1045, 1046, 1047, 1048, 1049], "conv2dtranspos": 1042, "conv3dtranspos": 1042, "depthwiseconv2d": 1042, "num_channel": [1042, 1049], "bernoul": [1042, 1050], "num_lay": [1042, 1051], "return_sequ": [1042, 1051], "return_st": [1042, 1051], "get_initial_st": [1042, 1051], "dens": [1042, 1052], "multiheadattent": 1042, "query_dim": [1042, 1053], "head_dim": [1042, 1053], "dropout_r": [1042, 1053], "context_dim": [1042, 1053], "with_to_q_fn": [1042, 1053], "with_to_kv_fn": [1042, 1053], "with_to_out_fn": [1042, 1053], "build_mod": [1042, 1053, 1054, 1055], "on_init": [1042, 1053, 1054, 1055], "__call__": [1042, 1053, 1054, 1055], "store_var": [1054, 1055], "arg_stateful_idx": [1054, 1055], "kwarg_stateful_idx": [1054, 1055], "fallback_to_non_compil": [1054, 1055, 1058, 1062], "with_partial_v": [1054, 1055], "initialz": [1054, 1055], "from_cal": [1054, 1055], "check_submod_ret": [1054, 1055], "get_mod_kei": [1054, 1055], "top_mod": [1054, 1055], "mod_depth": [1054, 1055], "mod_height": [1054, 1055], "mod_with_top_mod_key_chain": [1054, 1055], "save_weight": [1054, 1055], "weights_path": [1054, 1055], "show_mod_in_top_mod": [1054, 1055], "upper_depth": [1054, 1055], "lower_depth": [1054, 1055], "show_structur": [1054, 1055], "show_v_in_top_v": [1054, 1055], "sub_mod": [1054, 1055], "show_v": [1054, 1055], "track_submod_call_ord": [1054, 1055], "track_submod_ret": [1054, 1055], "v_with_top_v_key_chain": [1054, 1055], "layernorm": 1056, "normalized_shap": [1056, 1057], "elementwise_affin": [1056, 1057], "trail": [1056, 1057], "affin": [1056, 1057], "init_on_first_step": [1058, 1062], "ignore_miss": [1058, 1062], "overriden": [1058, 1062], "sgd": 1058, "stochast": [1058, 1063], "sub_modul": [1064, 1065]}, "objects": {"ivy": [[23, 0, 0, "-", "Array"], [72, 0, 0, "-", "Container"], [0, 0, 0, "-", "backend_handler"], [153, 0, 0, "-", "func_wrapper"], [1023, 0, 0, "-", "inspection"], [1027, 0, 0, "-", "stateful"], [1067, 0, 0, "-", "verbosity"]], "ivy.Array": [[23, 1, 1, "", "__delattr__"], [23, 1, 1, "", "__format__"], [23, 1, 1, "", "__getattribute__"], [23, 1, 1, "", "__init_subclass__"], [23, 1, 1, "", "__new__"], [23, 1, 1, "", "__reduce__"], [23, 1, 1, "", "__reduce_ex__"], [23, 1, 1, "", "__setattr__"], [23, 1, 1, "", "__sizeof__"], [23, 1, 1, "", "__str__"], [23, 1, 1, "", "__subclasshook__"]], "ivy.Container": [[72, 1, 1, "", "__delattr__"], [72, 1, 1, "", "__delitem__"], [72, 1, 1, "", "__format__"], [72, 1, 1, "", "__getattribute__"], [72, 1, 1, "", "__init_subclass__"], [72, 1, 1, "", "__iter__"], [72, 1, 1, "", "__len__"], [72, 1, 1, "", "__new__"], [72, 1, 1, "", "__reduce__"], [72, 1, 1, "", "__reduce_ex__"], [72, 1, 1, "", "__reversed__"], [72, 1, 1, "", "__sizeof__"], [72, 1, 1, "", "__str__"], [72, 1, 1, "", "__subclasshook__"], [72, 1, 1, "", "clear"], [72, 1, 1, "", "fromkeys"], [72, 1, 1, "", "get"], [72, 1, 1, "", "items"], [72, 1, 1, "", "keys"], [72, 1, 1, "", "pop"], [72, 1, 1, "", "popitem"], [72, 1, 1, "", "setdefault"], [72, 1, 1, "", "update"], [72, 1, 1, "", "values"]], "ivy.array": [[24, 0, 0, "-", "activations"], [26, 0, 0, "-", "array"], [29, 0, 0, "-", "conversions"], [34, 0, 0, "-", "creation"], [36, 0, 0, "-", "data_type"], [38, 0, 0, "-", "device"], [40, 0, 0, "-", "elementwise"], [42, 0, 0, "-", "general"], [44, 0, 0, "-", "gradients"], [46, 0, 0, "-", "image"], [48, 0, 0, "-", "layers"], [50, 0, 0, "-", "linear_algebra"], [52, 0, 0, "-", "losses"], [54, 0, 0, "-", "manipulation"], [56, 0, 0, "-", "norms"], [58, 0, 0, "-", "random"], [60, 0, 0, "-", "searching"], [62, 0, 0, "-", "set"], [64, 0, 0, "-", "sorting"], [66, 0, 0, "-", "statistical"], [68, 0, 0, "-", "utility"], [70, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[25, 2, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[25, 3, 1, "", "softplus"]], "ivy.array.array": [[27, 2, 1, "", "Array"], [28, 2, 1, "", "Variable"]], "ivy.array.array.Array": [[27, 4, 1, "", "T"], [27, 3, 1, "", "__add__"], [27, 3, 1, "", "__init__"], [27, 3, 1, "", "__le__"], [27, 3, 1, "", "__radd__"], [27, 3, 1, "", "adam_update"], [27, 3, 1, "", "arange"], [27, 3, 1, "", "arg_info"], [27, 3, 1, "", "arg_names"], [27, 3, 1, "", "argmax"], [27, 3, 1, "", "argmin"], [27, 3, 1, "", "array"], [27, 3, 1, "", "array_equal"], [27, 3, 1, "", "arrays_equal"], [27, 3, 1, "", "as_ivy_dev"], [27, 3, 1, "", "as_ivy_dtype"], [27, 3, 1, "", "as_native_dev"], [27, 3, 1, "", "as_native_dtype"], [27, 3, 1, "", "assert_supports_inplace"], [27, 3, 1, "", "cache_fn"], [27, 3, 1, "", "clear_mem_on_dev"], [27, 3, 1, "", "clip_matrix_norm"], [27, 3, 1, "", "clip_vector_norm"], [27, 3, 1, "", "closest_valid_dtype"], [27, 3, 1, "", "container_types"], [27, 3, 1, "", "conv1d"], [27, 3, 1, "", "conv1d_transpose"], [27, 3, 1, "", "conv2d"], [27, 3, 1, "", "conv2d_transpose"], [27, 3, 1, "", "conv3d"], [27, 3, 1, "", "conv3d_transpose"], [27, 3, 1, "", "copy_array"], [27, 3, 1, "", "cumprod"], [27, 3, 1, "", "cumsum"], [27, 3, 1, "", "current_backend"], [27, 3, 1, "", "current_backend_str"], [27, 4, 1, "", "data"], [27, 3, 1, "", "default"], [27, 3, 1, "", "default_device"], [27, 3, 1, "", "default_dtype"], [27, 3, 1, "", "default_float_dtype"], [27, 3, 1, "", "default_int_dtype"], [27, 3, 1, "", "dev"], [27, 3, 1, "", "dev_clone"], [27, 3, 1, "", "dev_clone_array"], [27, 3, 1, "", "dev_clone_iter"], [27, 3, 1, "", "dev_clone_nest"], [27, 3, 1, "", "dev_dist"], [27, 3, 1, "", "dev_dist_array"], [27, 3, 1, "", "dev_dist_iter"], [27, 3, 1, "", "dev_dist_nest"], [27, 3, 1, "", "dev_unify"], [27, 3, 1, "", "dev_unify_array"], [27, 3, 1, "", "dev_unify_iter"], [27, 3, 1, "", "dev_unify_nest"], [27, 3, 1, "", "dev_util"], [27, 4, 1, "", "device"], [27, 3, 1, "", "dropout"], [27, 4, 1, "", "dtype"], [27, 3, 1, "", "dtype_bits"], [27, 3, 1, "", "einops_rearrange"], [27, 3, 1, "", "einops_reduce"], [27, 3, 1, "", "einops_repeat"], [27, 3, 1, "", "empty"], [27, 3, 1, "", "execute_with_gradients"], [27, 3, 1, "", "exists"], [27, 3, 1, "", "eye"], [27, 3, 1, "", "floormod"], [27, 3, 1, "", "fourier_encode"], [27, 3, 1, "", "full"], [27, 3, 1, "", "function_supported_dtypes"], [27, 3, 1, "", "function_unsupported_dtypes"], [27, 3, 1, "", "gather"], [27, 3, 1, "", "gelu"], [27, 3, 1, "", "get_all_arrays_in_memory"], [27, 3, 1, "", "get_all_ivy_arrays_on_dev"], [27, 3, 1, "", "get_min_base"], [27, 3, 1, "", "get_min_denominator"], [27, 3, 1, "", "get_num_dims"], [27, 3, 1, "", "get_referrers_recursive"], [27, 3, 1, "", "gpu_is_available"], [27, 3, 1, "", "gradient_descent_update"], [27, 3, 1, "", "handle_nestable"], [27, 3, 1, "", "handle_out_argument"], [27, 3, 1, "", "has_nans"], [27, 3, 1, "", "indices_where"], [27, 3, 1, "", "infer_device"], [27, 3, 1, "", "infer_dtype"], [27, 3, 1, "", "inplace_arrays_supported"], [27, 3, 1, "", "inplace_decrement"], [27, 3, 1, "", "inplace_increment"], [27, 3, 1, "", "inplace_update"], [27, 3, 1, "", "inplace_variables_supported"], [27, 3, 1, "", "inputs_to_native_arrays"], [27, 3, 1, "", "invalid_dtype"], [27, 3, 1, "", "is_array"], [27, 3, 1, "", "is_ivy_array"], [27, 3, 1, "", "is_ivy_container"], [27, 3, 1, "", "is_native_array"], [27, 4, 1, "", "is_variable"], [27, 3, 1, "", "lamb_update"], [27, 3, 1, "", "lars_update"], [27, 3, 1, "", "leaky_relu"], [27, 3, 1, "", "linear"], [27, 3, 1, "", "linspace"], [27, 3, 1, "", "logspace"], [27, 3, 1, "", "lstm_update"], [27, 4, 1, "", "mT"], [27, 3, 1, "", "match_kwargs"], [27, 3, 1, "", "matrix_power"], [27, 3, 1, "", "maximum"], [27, 3, 1, "", "minimum"], [27, 3, 1, "", "multi_head_attention"], [27, 3, 1, "", "multinomial"], [27, 3, 1, "", "multiprocessing"], [27, 4, 1, "", "ndim"], [27, 3, 1, "", "nonzero"], [27, 3, 1, "", "num_arrays_in_memory"], [27, 3, 1, "", "num_cpu_cores"], [27, 3, 1, "", "num_gpus"], [27, 3, 1, "", "num_ivy_arrays_on_dev"], [27, 3, 1, "", "one_hot"], [27, 3, 1, "", "ones"], [27, 3, 1, "", "optimizer_update"], [27, 3, 1, "", "outputs_to_ivy_arrays"], [27, 3, 1, "", "percent_used_mem_on_dev"], [27, 3, 1, "", "print_all_arrays_in_memory"], [27, 3, 1, "", "print_all_ivy_arrays_on_dev"], [27, 3, 1, "", "promote_types"], [27, 3, 1, "", "queue_timeout"], [27, 3, 1, "", "randint"], [27, 3, 1, "", "random_normal"], [27, 3, 1, "", "random_uniform"], [27, 3, 1, "", "relu"], [27, 3, 1, "", "scaled_dot_product_attention"], [27, 3, 1, "", "scatter_flat"], [27, 3, 1, "", "scatter_nd"], [27, 3, 1, "", "seed"], [27, 3, 1, "", "set_default_device"], [27, 3, 1, "", "set_default_dtype"], [27, 3, 1, "", "set_default_float_dtype"], [27, 3, 1, "", "set_default_int_dtype"], [27, 3, 1, "", "set_min_base"], [27, 3, 1, "", "set_min_denominator"], [27, 3, 1, "", "set_queue_timeout"], [27, 3, 1, "", "set_shape_array_mode"], [27, 3, 1, "", "set_split_factor"], [27, 3, 1, "", "set_tmp_dir"], [27, 3, 1, "", "set_with_grads"], [27, 4, 1, "", "shape"], [27, 3, 1, "", "shape_array_mode"], [27, 3, 1, "", "shape_to_tuple"], [27, 3, 1, "", "shuffle"], [27, 3, 1, "", "sigmoid"], [27, 4, 1, "", "size"], [27, 3, 1, "", "slogdet"], [27, 3, 1, "", "softmax"], [27, 3, 1, "", "split"], [27, 3, 1, "", "split_factor"], [27, 3, 1, "", "split_func_call"], [27, 3, 1, "", "stable_divide"], [27, 3, 1, "", "stable_pow"], [27, 3, 1, "", "stop_gradient"], [27, 3, 1, "", "supports_inplace"], [27, 3, 1, "", "tmp_dir"], [27, 3, 1, "", "to_device"], [27, 3, 1, "", "to_list"], [27, 3, 1, "", "to_native_arrays_and_back"], [27, 3, 1, "", "to_scalar"], [27, 3, 1, "", "total_mem_on_dev"], [27, 3, 1, "", "tpu_is_available"], [27, 3, 1, "", "try_else_none"], [27, 3, 1, "", "type_promote_arrays"], [27, 3, 1, "", "unset_default_device"], [27, 3, 1, "", "unset_default_dtype"], [27, 3, 1, "", "unset_default_float_dtype"], [27, 3, 1, "", "unset_default_int_dtype"], [27, 3, 1, "", "unset_shape_array_mode"], [27, 3, 1, "", "unset_with_grads"], [27, 3, 1, "", "unstack"], [27, 3, 1, "", "used_mem_on_dev"], [27, 3, 1, "", "valid_dtype"], [27, 3, 1, "", "value_is_nan"], [27, 3, 1, "", "variable"], [27, 3, 1, "", "variable_data"], [27, 3, 1, "", "where"], [27, 3, 1, "", "with_grads"], [27, 3, 1, "", "zeros"]], "ivy.array.array.Variable": [[28, 3, 1, "", "__init__"]], "ivy.array.array_methods": [[373, 1, 1, "", "abs"], [378, 1, 1, "", "acos"], [382, 1, 1, "", "acosh"], [698, 1, 1, "", "adam_step"], [386, 1, 1, "", "add"], [1011, 1, 1, "", "all"], [616, 1, 1, "", "all_equal"], [1016, 1, 1, "", "any"], [967, 1, 1, "", "argsort"], [183, 1, 1, "", "asarray"], [391, 1, 1, "", "asin"], [395, 1, 1, "", "asinh"], [256, 1, 1, "", "astype"], [400, 1, 1, "", "atan"], [404, 1, 1, "", "atan2"], [408, 1, 1, "", "atanh"], [825, 1, 1, "", "binary_cross_entropy"], [412, 1, 1, "", "bitwise_and"], [416, 1, 1, "", "bitwise_invert"], [420, 1, 1, "", "bitwise_left_shift"], [424, 1, 1, "", "bitwise_or"], [428, 1, 1, "", "bitwise_right_shift"], [432, 1, 1, "", "bitwise_xor"], [261, 1, 1, "", "broadcast_arrays"], [266, 1, 1, "", "broadcast_to"], [271, 1, 1, "", "can_cast"], [436, 1, 1, "", "ceil"], [753, 1, 1, "", "cholesky"], [841, 1, 1, "", "clip"], [846, 1, 1, "", "concat"], [850, 1, 1, "", "constant_pad"], [440, 1, 1, "", "cos"], [445, 1, 1, "", "cosh"], [758, 1, 1, "", "cross"], [830, 1, 1, "", "cross_entropy"], [742, 1, 1, "", "depthwise_conv2d"], [761, 1, 1, "", "det"], [764, 1, 1, "", "diagonal"], [449, 1, 1, "", "divide"], [280, 1, 1, "", "dtype"], [767, 1, 1, "", "eigh"], [770, 1, 1, "", "eigvalsh"], [978, 1, 1, "", "einsum"], [189, 1, 1, "", "empty_like"], [454, 1, 1, "", "equal"], [458, 1, 1, "", "erf"], [462, 1, 1, "", "exp"], [854, 1, 1, "", "expand_dims"], [466, 1, 1, "", "expm1"], [285, 1, 1, "", "finfo"], [858, 1, 1, "", "flip"], [470, 1, 1, "", "floor"], [474, 1, 1, "", "floor_divide"], [197, 1, 1, "", "from_dlpack"], [203, 1, 1, "", "full_like"], [644, 1, 1, "", "gather_nd"], [478, 1, 1, "", "greater"], [482, 1, 1, "", "greater_equal"], [292, 1, 1, "", "iinfo"], [773, 1, 1, "", "inv"], [298, 1, 1, "", "is_float_dtype"], [303, 1, 1, "", "is_int_dtype"], [712, 1, 1, "", "is_variable"], [486, 1, 1, "", "isfinite"], [490, 1, 1, "", "isinf"], [494, 1, 1, "", "isnan"], [923, 1, 1, "", "layer_norm"], [498, 1, 1, "", "less"], [502, 1, 1, "", "less_equal"], [506, 1, 1, "", "log"], [510, 1, 1, "", "log10"], [514, 1, 1, "", "log1p"], [518, 1, 1, "", "log2"], [522, 1, 1, "", "logaddexp"], [526, 1, 1, "", "logical_and"], [530, 1, 1, "", "logical_not"], [534, 1, 1, "", "logical_or"], [538, 1, 1, "", "logical_xor"], [776, 1, 1, "", "matmul"], [780, 1, 1, "", "matrix_norm"], [784, 1, 1, "", "matrix_rank"], [787, 1, 1, "", "matrix_transpose"], [982, 1, 1, "", "max"], [986, 1, 1, "", "mean"], [214, 1, 1, "", "meshgrid"], [990, 1, 1, "", "min"], [544, 1, 1, "", "multiply"], [219, 1, 1, "", "native_array"], [549, 1, 1, "", "negative"], [553, 1, 1, "", "not_equal"], [227, 1, 1, "", "ones_like"], [790, 1, 1, "", "outer"], [862, 1, 1, "", "permute_dims"], [793, 1, 1, "", "pinv"], [557, 1, 1, "", "positive"], [561, 1, 1, "", "pow"], [994, 1, 1, "", "prod"], [796, 1, 1, "", "qr"], [565, 1, 1, "", "remainder"], [866, 1, 1, "", "repeat"], [870, 1, 1, "", "reshape"], [309, 1, 1, "", "result_type"], [874, 1, 1, "", "roll"], [569, 1, 1, "", "round"], [573, 1, 1, "", "sign"], [578, 1, 1, "", "sin"], [583, 1, 1, "", "sinh"], [170, 1, 1, "", "softplus"], [800, 1, 1, "", "solve"], [972, 1, 1, "", "sort"], [835, 1, 1, "", "sparse_cross_entropy"], [588, 1, 1, "", "sqrt"], [592, 1, 1, "", "square"], [880, 1, 1, "", "squeeze"], [884, 1, 1, "", "stack"], [998, 1, 1, "", "std"], [597, 1, 1, "", "subtract"], [1002, 1, 1, "", "sum"], [803, 1, 1, "", "svd"], [806, 1, 1, "", "svdvals"], [888, 1, 1, "", "swapaxes"], [602, 1, 1, "", "tan"], [607, 1, 1, "", "tanh"], [809, 1, 1, "", "tensordot"], [892, 1, 1, "", "tile"], [687, 1, 1, "", "to_numpy"], [812, 1, 1, "", "trace"], [233, 1, 1, "", "tril"], [238, 1, 1, "", "triu"], [611, 1, 1, "", "trunc"], [947, 1, 1, "", "unique_all"], [952, 1, 1, "", "unique_counts"], [957, 1, 1, "", "unique_inverse"], [962, 1, 1, "", "unique_values"], [1006, 1, 1, "", "var"], [815, 1, 1, "", "vecdot"], [818, 1, 1, "", "vector_norm"], [821, 1, 1, "", "vector_to_skew_symmetric_matrix"], [896, 1, 1, "", "zero_pad"], [246, 1, 1, "", "zeros_like"]], "ivy.array.conversions": [[30, 1, 1, "", "args_to_ivy"], [31, 1, 1, "", "args_to_native"], [32, 1, 1, "", "to_ivy"], [33, 1, 1, "", "to_native"]], "ivy.array.creation": [[35, 2, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[35, 3, 1, "", "asarray"], [35, 3, 1, "", "empty_like"], [35, 3, 1, "", "from_dlpack"], [35, 3, 1, "", "full_like"], [35, 3, 1, "", "meshgrid"], [35, 3, 1, "", "native_array"], [35, 3, 1, "", "ones_like"], [35, 3, 1, "", "tril"], [35, 3, 1, "", "triu"], [35, 3, 1, "", "zeros_like"]], "ivy.array.data_type": [[37, 2, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[37, 3, 1, "", "astype"], [37, 3, 1, "", "broadcast_arrays"], [37, 3, 1, "", "broadcast_to"], [37, 3, 1, "", "can_cast"], [37, 3, 1, "", "dtype"], [37, 3, 1, "", "finfo"], [37, 3, 1, "", "iinfo"], [37, 3, 1, "", "is_float_dtype"], [37, 3, 1, "", "is_int_dtype"], [37, 3, 1, "", "result_type"]], "ivy.array.device": [[39, 2, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[41, 2, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[41, 3, 1, "", "abs"], [41, 3, 1, "", "acos"], [41, 3, 1, "", "acosh"], [41, 3, 1, "", "add"], [41, 3, 1, "", "asin"], [41, 3, 1, "", "asinh"], [41, 3, 1, "", "atan"], [41, 3, 1, "", "atan2"], [41, 3, 1, "", "atanh"], [41, 3, 1, "", "bitwise_and"], [41, 3, 1, "", "bitwise_invert"], [41, 3, 1, "", "bitwise_left_shift"], [41, 3, 1, "", "bitwise_or"], [41, 3, 1, "", "bitwise_right_shift"], [41, 3, 1, "", "bitwise_xor"], [41, 3, 1, "", "ceil"], [41, 3, 1, "", "cos"], [41, 3, 1, "", "cosh"], [41, 3, 1, "", "divide"], [41, 3, 1, "", "equal"], [41, 3, 1, "", "erf"], [41, 3, 1, "", "exp"], [41, 3, 1, "", "expm1"], [41, 3, 1, "", "floor"], [41, 3, 1, "", "floor_divide"], [41, 3, 1, "", "greater"], [41, 3, 1, "", "greater_equal"], [41, 3, 1, "", "isfinite"], [41, 3, 1, "", "isinf"], [41, 3, 1, "", "isnan"], [41, 3, 1, "", "less"], [41, 3, 1, "", "less_equal"], [41, 3, 1, "", "log"], [41, 3, 1, "", "log10"], [41, 3, 1, "", "log1p"], [41, 3, 1, "", "log2"], [41, 3, 1, "", "logaddexp"], [41, 3, 1, "", "logical_and"], [41, 3, 1, "", "logical_not"], [41, 3, 1, "", "logical_or"], [41, 3, 1, "", "logical_xor"], [41, 3, 1, "", "multiply"], [41, 3, 1, "", "negative"], [41, 3, 1, "", "not_equal"], [41, 3, 1, "", "positive"], [41, 3, 1, "", "pow"], [41, 3, 1, "", "remainder"], [41, 3, 1, "", "round"], [41, 3, 1, "", "sign"], [41, 3, 1, "", "sin"], [41, 3, 1, "", "sinh"], [41, 3, 1, "", "sqrt"], [41, 3, 1, "", "square"], [41, 3, 1, "", "subtract"], [41, 3, 1, "", "tan"], [41, 3, 1, "", "tanh"], [41, 3, 1, "", "trunc"]], "ivy.array.general": [[43, 2, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[43, 3, 1, "", "all_equal"], [43, 3, 1, "", "gather_nd"], [43, 3, 1, "", "to_numpy"]], "ivy.array.gradients": [[45, 2, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[45, 3, 1, "", "adam_step"], [45, 3, 1, "", "is_variable"]], "ivy.array.image": [[47, 2, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[49, 2, 1, "", "ArrayWithLayers"]], "ivy.array.layers.ArrayWithLayers": [[49, 3, 1, "", "depthwise_conv2d"]], "ivy.array.linear_algebra": [[51, 2, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[51, 3, 1, "", "cholesky"], [51, 3, 1, "", "cross"], [51, 3, 1, "", "det"], [51, 3, 1, "", "diagonal"], [51, 3, 1, "", "eigh"], [51, 3, 1, "", "eigvalsh"], [51, 3, 1, "", "inv"], [51, 3, 1, "", "matmul"], [51, 3, 1, "", "matrix_norm"], [51, 3, 1, "", "matrix_rank"], [51, 3, 1, "", "matrix_transpose"], [51, 3, 1, "", "outer"], [51, 3, 1, "", "pinv"], [51, 3, 1, "", "qr"], [51, 3, 1, "", "solve"], [51, 3, 1, "", "svd"], [51, 3, 1, "", "svdvals"], [51, 3, 1, "", "tensordot"], [51, 3, 1, "", "trace"], [51, 3, 1, "", "vecdot"], [51, 3, 1, "", "vector_norm"], [51, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[53, 2, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[53, 3, 1, "", "binary_cross_entropy"], [53, 3, 1, "", "cross_entropy"], [53, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[55, 2, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[55, 3, 1, "", "clip"], [55, 3, 1, "", "concat"], [55, 3, 1, "", "constant_pad"], [55, 3, 1, "", "expand_dims"], [55, 3, 1, "", "flip"], [55, 3, 1, "", "permute_dims"], [55, 3, 1, "", "repeat"], [55, 3, 1, "", "reshape"], [55, 3, 1, "", "roll"], [55, 3, 1, "", "squeeze"], [55, 3, 1, "", "stack"], [55, 3, 1, "", "swapaxes"], [55, 3, 1, "", "tile"], [55, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[57, 2, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[57, 3, 1, "", "layer_norm"]], "ivy.array.random": [[59, 2, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[61, 2, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[63, 2, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[63, 3, 1, "", "unique_all"], [63, 3, 1, "", "unique_counts"], [63, 3, 1, "", "unique_inverse"], [63, 3, 1, "", "unique_values"]], "ivy.array.sorting": [[65, 2, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[65, 3, 1, "", "argsort"], [65, 3, 1, "", "sort"]], "ivy.array.statistical": [[67, 2, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[67, 3, 1, "", "einsum"], [67, 3, 1, "", "max"], [67, 3, 1, "", "mean"], [67, 3, 1, "", "min"], [67, 3, 1, "", "prod"], [67, 3, 1, "", "std"], [67, 3, 1, "", "sum"], [67, 3, 1, "", "var"]], "ivy.array.utility": [[69, 2, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[69, 3, 1, "", "all"], [69, 3, 1, "", "any"]], "ivy.array.wrapping": [[71, 1, 1, "", "add_ivy_array_instance_methods"]], "ivy.backend_handler": [[0, 2, 1, "", "ContextManager"], [2, 1, 1, "", "choose_random_backend"], [3, 1, 1, "", "clear_backend_stack"], [4, 1, 1, "", "current_backend"], [5, 1, 1, "", "get_backend"], [6, 1, 1, "", "set_backend"], [7, 1, 1, "", "try_import_ivy_jax"], [8, 1, 1, "", "try_import_ivy_mxnet"], [9, 1, 1, "", "try_import_ivy_numpy"], [10, 1, 1, "", "try_import_ivy_tf"], [11, 1, 1, "", "try_import_ivy_torch"], [12, 1, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 3, 1, "", "__init__"]], "ivy.container": [[73, 0, 0, "-", "activations"], [75, 0, 0, "-", "base"], [77, 0, 0, "-", "container"], [80, 0, 0, "-", "creation"], [82, 0, 0, "-", "data_type"], [84, 0, 0, "-", "device"], [86, 0, 0, "-", "elementwise"], [88, 0, 0, "-", "general"], [90, 0, 0, "-", "gradients"], [92, 0, 0, "-", "image"], [94, 0, 0, "-", "layers"], [96, 0, 0, "-", "linear_algebra"], [98, 0, 0, "-", "losses"], [100, 0, 0, "-", "manipulation"], [102, 0, 0, "-", "norms"], [104, 0, 0, "-", "random"], [106, 0, 0, "-", "searching"], [108, 0, 0, "-", "set"], [110, 0, 0, "-", "sorting"], [112, 0, 0, "-", "statistical"], [114, 0, 0, "-", "utility"], [116, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[74, 2, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[74, 3, 1, "", "softplus"], [74, 3, 1, "", "static_softplus"]], "ivy.container.base": [[76, 2, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[76, 3, 1, "", "__getitem__"], [76, 3, 1, "", "__init__"], [76, 3, 1, "", "__setitem__"], [76, 3, 1, "", "all_false"], [76, 3, 1, "", "all_key_chains"], [76, 3, 1, "", "all_true"], [76, 3, 1, "", "arrays_as_lists"], [76, 3, 1, "", "as_arrays"], [76, 3, 1, "", "as_bools"], [76, 3, 1, "", "as_ones"], [76, 3, 1, "", "as_random_uniform"], [76, 3, 1, "", "as_variables"], [76, 3, 1, "", "as_zeros"], [76, 3, 1, "", "assert_contains_sub_container"], [76, 3, 1, "", "assert_contains_sub_structure"], [76, 3, 1, "", "assert_identical"], [76, 3, 1, "", "assert_identical_structure"], [76, 3, 1, "", "at_key_chain"], [76, 3, 1, "", "at_key_chains"], [76, 3, 1, "", "at_keys"], [76, 3, 1, "", "clip"], [76, 3, 1, "", "combine"], [76, 3, 1, "", "common_key_chains"], [76, 4, 1, "", "config"], [76, 3, 1, "", "contains_sub_container"], [76, 3, 1, "", "contains_sub_structure"], [76, 3, 1, "", "copy"], [76, 3, 1, "", "create_if_absent"], [76, 3, 1, "", "cutoff_at_depth"], [76, 3, 1, "", "cutoff_at_height"], [76, 3, 1, "", "deep_copy"], [76, 4, 1, "", "dev"], [76, 3, 1, "", "dev_clone"], [76, 3, 1, "", "dev_dist"], [76, 4, 1, "", "dev_str"], [76, 3, 1, "", "diff"], [76, 3, 1, "", "dtype"], [76, 3, 1, "", "einops_rearrange"], [76, 3, 1, "", "einops_reduce"], [76, 3, 1, "", "einops_repeat"], [76, 3, 1, "", "find_sub_container"], [76, 3, 1, "", "find_sub_structure"], [76, 3, 1, "", "flatten_key_chain"], [76, 3, 1, "", "flatten_key_chains"], [76, 3, 1, "", "format_key_chains"], [76, 3, 1, "", "from_disk_as_hdf5"], [76, 3, 1, "", "from_disk_as_json"], [76, 3, 1, "", "from_disk_as_pickled"], [76, 3, 1, "", "from_flat_list"], [76, 3, 1, "", "from_numpy"], [76, 3, 1, "", "gather"], [76, 3, 1, "", "gather_nd"], [76, 3, 1, "", "h5_file_size"], [76, 3, 1, "", "handle_inplace"], [76, 3, 1, "", "has_key"], [76, 3, 1, "", "has_key_chain"], [76, 3, 1, "", "has_nans"], [76, 3, 1, "", "identical"], [76, 3, 1, "", "identical_array_shapes"], [76, 3, 1, "", "identical_configs"], [76, 3, 1, "", "identical_structure"], [76, 3, 1, "", "if_exists"], [76, 3, 1, "", "inplace_update"], [76, 4, 1, "", "ivy"], [76, 3, 1, "", "key_chains_containing"], [76, 3, 1, "", "list_join"], [76, 3, 1, "", "list_stack"], [76, 3, 1, "", "map"], [76, 3, 1, "", "map_conts"], [76, 3, 1, "", "matrix_norm"], [76, 4, 1, "", "max_depth"], [76, 3, 1, "", "maximum"], [76, 3, 1, "", "minimum"], [76, 3, 1, "", "multi_map"], [76, 3, 1, "", "multi_map_in_static_method"], [76, 3, 1, "", "num_arrays"], [76, 3, 1, "", "overwrite_at_key_chain"], [76, 3, 1, "", "overwrite_at_key_chains"], [76, 3, 1, "", "prune_empty"], [76, 3, 1, "", "prune_key_chain"], [76, 3, 1, "", "prune_key_chains"], [76, 3, 1, "", "prune_key_from_key_chains"], [76, 3, 1, "", "prune_keys"], [76, 3, 1, "", "prune_keys_from_key_chains"], [76, 3, 1, "", "reduce"], [76, 3, 1, "", "remove_key_length_limit"], [76, 3, 1, "", "remove_print_limit"], [76, 3, 1, "", "reshape_like"], [76, 3, 1, "", "restructure"], [76, 3, 1, "", "restructure_key_chains"], [76, 3, 1, "", "set_at_key_chain"], [76, 3, 1, "", "set_at_key_chains"], [76, 3, 1, "", "set_at_keys"], [76, 3, 1, "", "set_framework"], [76, 3, 1, "", "set_ivy_backend"], [76, 4, 1, "", "shape"], [76, 4, 1, "", "shapes"], [76, 3, 1, "", "show"], [76, 3, 1, "", "show_sub_container"], [76, 3, 1, "", "shuffle"], [76, 3, 1, "", "shuffle_h5_file"], [76, 3, 1, "", "size_ordered_arrays"], [76, 3, 1, "", "slice_keys"], [76, 3, 1, "", "slice_via_key"], [76, 3, 1, "", "sort_by_key"], [76, 3, 1, "", "split"], [76, 3, 1, "", "stop_gradients"], [76, 3, 1, "", "structural_diff"], [76, 3, 1, "", "to_device"], [76, 3, 1, "", "to_dict"], [76, 3, 1, "", "to_disk_as_hdf5"], [76, 3, 1, "", "to_disk_as_json"], [76, 3, 1, "", "to_disk_as_pickled"], [76, 3, 1, "", "to_flat_list"], [76, 3, 1, "", "to_iterator"], [76, 3, 1, "", "to_iterator_keys"], [76, 3, 1, "", "to_iterator_values"], [76, 3, 1, "", "to_ivy"], [76, 3, 1, "", "to_jsonable"], [76, 3, 1, "", "to_list"], [76, 3, 1, "", "to_multi_dev"], [76, 3, 1, "", "to_native"], [76, 3, 1, "", "to_numpy"], [76, 3, 1, "", "to_raw"], [76, 3, 1, "", "trim_key"], [76, 3, 1, "", "try_kc"], [76, 3, 1, "", "unify"], [76, 3, 1, "", "unstack"], [76, 3, 1, "", "update_config"], [76, 3, 1, "", "vector_norm"], [76, 3, 1, "", "with_default_key_color"], [76, 3, 1, "", "with_entries_as_lists"], [76, 3, 1, "", "with_ivy_backend"], [76, 3, 1, "", "with_key_length_limit"], [76, 3, 1, "", "with_print_indent"], [76, 3, 1, "", "with_print_limit"], [76, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[78, 2, 1, "", "Container"], [79, 2, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[78, 3, 1, "", "__add__"], [78, 3, 1, "", "__init__"], [78, 3, 1, "", "__radd__"], [78, 3, 1, "", "arange"], [78, 3, 1, "", "arg_info"], [78, 3, 1, "", "arg_names"], [78, 3, 1, "", "argmax"], [78, 3, 1, "", "argmin"], [78, 3, 1, "", "array"], [78, 3, 1, "", "array_equal"], [78, 3, 1, "", "arrays_equal"], [78, 3, 1, "", "as_ivy_dev"], [78, 3, 1, "", "as_ivy_dtype"], [78, 3, 1, "", "as_native_dev"], [78, 3, 1, "", "as_native_dtype"], [78, 3, 1, "", "assert_supports_inplace"], [78, 3, 1, "", "cache_fn"], [78, 3, 1, "", "clear_mem_on_dev"], [78, 3, 1, "", "clip_matrix_norm"], [78, 3, 1, "", "closest_valid_dtype"], [78, 3, 1, "", "container_types"], [78, 3, 1, "", "conv1d"], [78, 3, 1, "", "conv1d_transpose"], [78, 3, 1, "", "conv2d"], [78, 3, 1, "", "conv2d_transpose"], [78, 3, 1, "", "conv3d"], [78, 3, 1, "", "conv3d_transpose"], [78, 3, 1, "", "copy_array"], [78, 3, 1, "", "cross"], [78, 3, 1, "", "cumprod"], [78, 3, 1, "", "cumsum"], [78, 3, 1, "", "current_backend"], [78, 3, 1, "", "current_backend_str"], [78, 3, 1, "", "default"], [78, 3, 1, "", "default_device"], [78, 3, 1, "", "default_dtype"], [78, 3, 1, "", "default_float_dtype"], [78, 3, 1, "", "default_int_dtype"], [78, 3, 1, "", "det"], [78, 3, 1, "", "dev_clone_array"], [78, 3, 1, "", "dev_clone_iter"], [78, 3, 1, "", "dev_clone_nest"], [78, 3, 1, "", "dev_dist_array"], [78, 3, 1, "", "dev_dist_iter"], [78, 3, 1, "", "dev_dist_nest"], [78, 3, 1, "", "dev_unify"], [78, 3, 1, "", "dev_unify_array"], [78, 3, 1, "", "dev_unify_iter"], [78, 3, 1, "", "dev_unify_nest"], [78, 3, 1, "", "dev_util"], [78, 3, 1, "", "diagonal"], [78, 3, 1, "", "dropout"], [78, 3, 1, "", "dtype_bits"], [78, 3, 1, "", "eigh"], [78, 3, 1, "", "eigvalsh"], [78, 3, 1, "", "empty"], [78, 3, 1, "", "execute_with_gradients"], [78, 3, 1, "", "exists"], [78, 3, 1, "", "eye"], [78, 3, 1, "", "floormod"], [78, 3, 1, "", "fourier_encode"], [78, 3, 1, "", "full"], [78, 3, 1, "", "function_supported_dtypes"], [78, 3, 1, "", "function_unsupported_dtypes"], [78, 3, 1, "", "gelu"], [78, 3, 1, "", "get_all_arrays_in_memory"], [78, 3, 1, "", "get_all_ivy_arrays_on_dev"], [78, 3, 1, "", "get_min_base"], [78, 3, 1, "", "get_min_denominator"], [78, 3, 1, "", "get_num_dims"], [78, 3, 1, "", "get_referrers_recursive"], [78, 3, 1, "", "gpu_is_available"], [78, 3, 1, "", "handle_nestable"], [78, 3, 1, "", "handle_out_argument"], [78, 3, 1, "", "indices_where"], [78, 3, 1, "", "infer_device"], [78, 3, 1, "", "infer_dtype"], [78, 3, 1, "", "inplace_arrays_supported"], [78, 3, 1, "", "inplace_decrement"], [78, 3, 1, "", "inplace_increment"], [78, 3, 1, "", "inplace_variables_supported"], [78, 3, 1, "", "inputs_to_native_arrays"], [78, 3, 1, "", "inv"], [78, 3, 1, "", "invalid_dtype"], [78, 3, 1, "", "is_ivy_container"], [78, 3, 1, "", "leaky_relu"], [78, 3, 1, "", "linear"], [78, 3, 1, "", "linspace"], [78, 3, 1, "", "logspace"], [78, 3, 1, "", "lstm_update"], [78, 3, 1, "", "match_kwargs"], [78, 3, 1, "", "matrix_power"], [78, 3, 1, "", "matrix_rank"], [78, 3, 1, "", "matrix_transpose"], [78, 3, 1, "", "multi_head_attention"], [78, 3, 1, "", "multinomial"], [78, 3, 1, "", "multiprocessing"], [78, 3, 1, "", "nonzero"], [78, 3, 1, "", "num_arrays_in_memory"], [78, 3, 1, "", "num_cpu_cores"], [78, 3, 1, "", "num_gpus"], [78, 3, 1, "", "num_ivy_arrays_on_dev"], [78, 3, 1, "", "one_hot"], [78, 3, 1, "", "ones"], [78, 3, 1, "", "outer"], [78, 3, 1, "", "outputs_to_ivy_arrays"], [78, 3, 1, "", "percent_used_mem_on_dev"], [78, 3, 1, "", "pinv"], [78, 3, 1, "", "print_all_arrays_in_memory"], [78, 3, 1, "", "print_all_ivy_arrays_on_dev"], [78, 3, 1, "", "promote_types"], [78, 3, 1, "", "qr"], [78, 3, 1, "", "queue_timeout"], [78, 3, 1, "", "randint"], [78, 3, 1, "", "random_normal"], [78, 3, 1, "", "relu"], [78, 3, 1, "", "scaled_dot_product_attention"], [78, 3, 1, "", "scatter_flat"], [78, 3, 1, "", "scatter_nd"], [78, 3, 1, "", "seed"], [78, 3, 1, "", "set_default_device"], [78, 3, 1, "", "set_default_dtype"], [78, 3, 1, "", "set_default_float_dtype"], [78, 3, 1, "", "set_default_int_dtype"], [78, 3, 1, "", "set_min_base"], [78, 3, 1, "", "set_min_denominator"], [78, 3, 1, "", "set_queue_timeout"], [78, 3, 1, "", "set_shape_array_mode"], [78, 3, 1, "", "set_split_factor"], [78, 3, 1, "", "set_tmp_dir"], [78, 3, 1, "", "set_with_grads"], [78, 3, 1, "", "shape_array_mode"], [78, 3, 1, "", "shape_to_tuple"], [78, 3, 1, "", "sigmoid"], [78, 3, 1, "", "slogdet"], [78, 3, 1, "", "softmax"], [78, 3, 1, "", "solve"], [78, 3, 1, "", "split_factor"], [78, 3, 1, "", "split_func_call"], [78, 3, 1, "", "stable_divide"], [78, 3, 1, "", "stable_pow"], [78, 3, 1, "", "static_acos"], [78, 3, 1, "", "static_acosh"], [78, 3, 1, "", "static_arg_info"], [78, 3, 1, "", "static_arg_names"], [78, 3, 1, "", "static_argmax"], [78, 3, 1, "", "static_argmin"], [78, 3, 1, "", "static_array"], [78, 3, 1, "", "static_array_equal"], [78, 3, 1, "", "static_arrays_equal"], [78, 3, 1, "", "static_as_ivy_dev"], [78, 3, 1, "", "static_as_ivy_dtype"], [78, 3, 1, "", "static_as_native_dev"], [78, 3, 1, "", "static_as_native_dtype"], [78, 3, 1, "", "static_asin"], [78, 3, 1, "", "static_assert_supports_inplace"], [78, 3, 1, "", "static_atan"], [78, 3, 1, "", "static_atan2"], [78, 3, 1, "", "static_atanh"], [78, 3, 1, "", "static_bitwise_and"], [78, 3, 1, "", "static_bitwise_invert"], [78, 3, 1, "", "static_bitwise_left_shift"], [78, 3, 1, "", "static_bitwise_or"], [78, 3, 1, "", "static_bitwise_right_shift"], [78, 3, 1, "", "static_bitwise_xor"], [78, 3, 1, "", "static_cache_fn"], [78, 3, 1, "", "static_ceil"], [78, 3, 1, "", "static_clear_mem_on_dev"], [78, 3, 1, "", "static_clip_matrix_norm"], [78, 3, 1, "", "static_clip_vector_norm"], [78, 3, 1, "", "static_closest_valid_dtype"], [78, 3, 1, "", "static_concat"], [78, 3, 1, "", "static_constant_pad"], [78, 3, 1, "", "static_container_types"], [78, 3, 1, "", "static_conv1d"], [78, 3, 1, "", "static_conv1d_transpose"], [78, 3, 1, "", "static_conv2d"], [78, 3, 1, "", "static_conv2d_transpose"], [78, 3, 1, "", "static_conv3d"], [78, 3, 1, "", "static_conv3d_transpose"], [78, 3, 1, "", "static_copy_array"], [78, 3, 1, "", "static_cosh"], [78, 3, 1, "", "static_cross"], [78, 3, 1, "", "static_cumprod"], [78, 3, 1, "", "static_cumsum"], [78, 3, 1, "", "static_current_backend"], [78, 3, 1, "", "static_current_backend_str"], [78, 3, 1, "", "static_default"], [78, 3, 1, "", "static_default_device"], [78, 3, 1, "", "static_default_dtype"], [78, 3, 1, "", "static_default_float_dtype"], [78, 3, 1, "", "static_default_int_dtype"], [78, 3, 1, "", "static_det"], [78, 3, 1, "", "static_dev"], [78, 3, 1, "", "static_dev_clone"], [78, 3, 1, "", "static_dev_clone_array"], [78, 3, 1, "", "static_dev_clone_iter"], [78, 3, 1, "", "static_dev_clone_nest"], [78, 3, 1, "", "static_dev_dist"], [78, 3, 1, "", "static_dev_dist_array"], [78, 3, 1, "", "static_dev_dist_iter"], [78, 3, 1, "", "static_dev_dist_nest"], [78, 3, 1, "", "static_dev_unify"], [78, 3, 1, "", "static_dev_unify_array"], [78, 3, 1, "", "static_dev_unify_iter"], [78, 3, 1, "", "static_dev_unify_nest"], [78, 3, 1, "", "static_dev_util"], [78, 3, 1, "", "static_diagonal"], [78, 3, 1, "", "static_dropout"], [78, 3, 1, "", "static_dtype"], [78, 3, 1, "", "static_dtype_bits"], [78, 3, 1, "", "static_eigh"], [78, 3, 1, "", "static_eigvalsh"], [78, 3, 1, "", "static_einops_rearrange"], [78, 3, 1, "", "static_einops_reduce"], [78, 3, 1, "", "static_einops_repeat"], [78, 3, 1, "", "static_einsum"], [78, 3, 1, "", "static_empty"], [78, 3, 1, "", "static_equal"], [78, 3, 1, "", "static_erf"], [78, 3, 1, "", "static_execute_with_gradients"], [78, 3, 1, "", "static_exists"], [78, 3, 1, "", "static_exp"], [78, 3, 1, "", "static_expand_dims"], [78, 3, 1, "", "static_expm1"], [78, 3, 1, "", "static_flip"], [78, 3, 1, "", "static_floor"], [78, 3, 1, "", "static_floor_divide"], [78, 3, 1, "", "static_floormod"], [78, 3, 1, "", "static_fourier_encode"], [78, 3, 1, "", "static_full"], [78, 3, 1, "", "static_function_supported_dtypes"], [78, 3, 1, "", "static_function_unsupported_dtypes"], [78, 3, 1, "", "static_gather"], [78, 3, 1, "", "static_gelu"], [78, 3, 1, "", "static_get_all_arrays_in_memory"], [78, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [78, 3, 1, "", "static_get_min_base"], [78, 3, 1, "", "static_get_min_denominator"], [78, 3, 1, "", "static_get_num_dims"], [78, 3, 1, "", "static_get_referrers_recursive"], [78, 3, 1, "", "static_gpu_is_available"], [78, 3, 1, "", "static_greater"], [78, 3, 1, "", "static_greater_equal"], [78, 3, 1, "", "static_handle_nestable"], [78, 3, 1, "", "static_handle_out_argument"], [78, 3, 1, "", "static_has_nans"], [78, 3, 1, "", "static_indices_where"], [78, 3, 1, "", "static_infer_device"], [78, 3, 1, "", "static_infer_dtype"], [78, 3, 1, "", "static_inplace_arrays_supported"], [78, 3, 1, "", "static_inplace_decrement"], [78, 3, 1, "", "static_inplace_increment"], [78, 3, 1, "", "static_inplace_update"], [78, 3, 1, "", "static_inplace_variables_supported"], [78, 3, 1, "", "static_inputs_to_native_arrays"], [78, 3, 1, "", "static_inv"], [78, 3, 1, "", "static_invalid_dtype"], [78, 3, 1, "", "static_is_array"], [78, 3, 1, "", "static_is_ivy_array"], [78, 3, 1, "", "static_is_ivy_container"], [78, 3, 1, "", "static_is_native_array"], [78, 3, 1, "", "static_isfinite"], [78, 3, 1, "", "static_isinf"], [78, 3, 1, "", "static_isnan"], [78, 3, 1, "", "static_leaky_relu"], [78, 3, 1, "", "static_less"], [78, 3, 1, "", "static_less_equal"], [78, 3, 1, "", "static_linear"], [78, 3, 1, "", "static_log"], [78, 3, 1, "", "static_log10"], [78, 3, 1, "", "static_log1p"], [78, 3, 1, "", "static_log2"], [78, 3, 1, "", "static_logaddexp"], [78, 3, 1, "", "static_logical_and"], [78, 3, 1, "", "static_logical_not"], [78, 3, 1, "", "static_logical_or"], [78, 3, 1, "", "static_logical_xor"], [78, 3, 1, "", "static_lstm_update"], [78, 3, 1, "", "static_match_kwargs"], [78, 3, 1, "", "static_matmul"], [78, 3, 1, "", "static_matrix_norm"], [78, 3, 1, "", "static_matrix_power"], [78, 3, 1, "", "static_matrix_rank"], [78, 3, 1, "", "static_matrix_transpose"], [78, 3, 1, "", "static_max"], [78, 3, 1, "", "static_maximum"], [78, 3, 1, "", "static_mean"], [78, 3, 1, "", "static_min"], [78, 3, 1, "", "static_minimum"], [78, 3, 1, "", "static_multi_head_attention"], [78, 3, 1, "", "static_multinomial"], [78, 3, 1, "", "static_multiprocessing"], [78, 3, 1, "", "static_negative"], [78, 3, 1, "", "static_nonzero"], [78, 3, 1, "", "static_not_equal"], [78, 3, 1, "", "static_num_arrays_in_memory"], [78, 3, 1, "", "static_num_cpu_cores"], [78, 3, 1, "", "static_num_gpus"], [78, 3, 1, "", "static_num_ivy_arrays_on_dev"], [78, 3, 1, "", "static_one_hot"], [78, 3, 1, "", "static_outer"], [78, 3, 1, "", "static_outputs_to_ivy_arrays"], [78, 3, 1, "", "static_percent_used_mem_on_dev"], [78, 3, 1, "", "static_permute_dims"], [78, 3, 1, "", "static_pinv"], [78, 3, 1, "", "static_positive"], [78, 3, 1, "", "static_pow"], [78, 3, 1, "", "static_print_all_arrays_in_memory"], [78, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [78, 3, 1, "", "static_prod"], [78, 3, 1, "", "static_promote_types"], [78, 3, 1, "", "static_qr"], [78, 3, 1, "", "static_queue_timeout"], [78, 3, 1, "", "static_random_normal"], [78, 3, 1, "", "static_relu"], [78, 3, 1, "", "static_remainder"], [78, 3, 1, "", "static_repeat"], [78, 3, 1, "", "static_reshape"], [78, 3, 1, "", "static_round"], [78, 3, 1, "", "static_scaled_dot_product_attention"], [78, 3, 1, "", "static_scatter_flat"], [78, 3, 1, "", "static_scatter_nd"], [78, 3, 1, "", "static_seed"], [78, 3, 1, "", "static_set_default_device"], [78, 3, 1, "", "static_set_default_dtype"], [78, 3, 1, "", "static_set_default_float_dtype"], [78, 3, 1, "", "static_set_default_int_dtype"], [78, 3, 1, "", "static_set_min_base"], [78, 3, 1, "", "static_set_min_denominator"], [78, 3, 1, "", "static_set_queue_timeout"], [78, 3, 1, "", "static_set_shape_array_mode"], [78, 3, 1, "", "static_set_split_factor"], [78, 3, 1, "", "static_set_tmp_dir"], [78, 3, 1, "", "static_set_with_grads"], [78, 3, 1, "", "static_shape"], [78, 3, 1, "", "static_shape_array_mode"], [78, 3, 1, "", "static_shape_to_tuple"], [78, 3, 1, "", "static_shuffle"], [78, 3, 1, "", "static_sigmoid"], [78, 3, 1, "", "static_slogdet"], [78, 3, 1, "", "static_softmax"], [78, 3, 1, "", "static_solve"], [78, 3, 1, "", "static_split"], [78, 3, 1, "", "static_split_factor"], [78, 3, 1, "", "static_split_func_call"], [78, 3, 1, "", "static_sqrt"], [78, 3, 1, "", "static_square"], [78, 3, 1, "", "static_squeeze"], [78, 3, 1, "", "static_stable_divide"], [78, 3, 1, "", "static_stable_pow"], [78, 3, 1, "", "static_stack"], [78, 3, 1, "", "static_std"], [78, 3, 1, "", "static_stop_gradient"], [78, 3, 1, "", "static_sum"], [78, 3, 1, "", "static_supports_inplace"], [78, 3, 1, "", "static_svd"], [78, 3, 1, "", "static_svdvals"], [78, 3, 1, "", "static_swapaxes"], [78, 3, 1, "", "static_tensordot"], [78, 3, 1, "", "static_tile"], [78, 3, 1, "", "static_tmp_dir"], [78, 3, 1, "", "static_to_device"], [78, 3, 1, "", "static_to_list"], [78, 3, 1, "", "static_to_native_arrays_and_back"], [78, 3, 1, "", "static_to_scalar"], [78, 3, 1, "", "static_total_mem_on_dev"], [78, 3, 1, "", "static_tpu_is_available"], [78, 3, 1, "", "static_trace"], [78, 3, 1, "", "static_trunc"], [78, 3, 1, "", "static_try_else_none"], [78, 3, 1, "", "static_type_promote_arrays"], [78, 3, 1, "", "static_unset_default_device"], [78, 3, 1, "", "static_unset_default_dtype"], [78, 3, 1, "", "static_unset_default_float_dtype"], [78, 3, 1, "", "static_unset_default_int_dtype"], [78, 3, 1, "", "static_unset_shape_array_mode"], [78, 3, 1, "", "static_unset_with_grads"], [78, 3, 1, "", "static_unstack"], [78, 3, 1, "", "static_used_mem_on_dev"], [78, 3, 1, "", "static_valid_dtype"], [78, 3, 1, "", "static_value_is_nan"], [78, 3, 1, "", "static_var"], [78, 3, 1, "", "static_variable"], [78, 3, 1, "", "static_variable_data"], [78, 3, 1, "", "static_vecdot"], [78, 3, 1, "", "static_vector_norm"], [78, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [78, 3, 1, "", "static_where"], [78, 3, 1, "", "static_with_grads"], [78, 3, 1, "", "static_zero_pad"], [78, 3, 1, "", "stop_gradient"], [78, 3, 1, "", "supports_inplace"], [78, 3, 1, "", "svd"], [78, 3, 1, "", "svdvals"], [78, 3, 1, "", "tensordot"], [78, 3, 1, "", "tmp_dir"], [78, 3, 1, "", "to_native_arrays_and_back"], [78, 3, 1, "", "to_scalar"], [78, 3, 1, "", "total_mem_on_dev"], [78, 3, 1, "", "tpu_is_available"], [78, 3, 1, "", "trace"], [78, 3, 1, "", "try_else_none"], [78, 3, 1, "", "type_promote_arrays"], [78, 3, 1, "", "unset_default_device"], [78, 3, 1, "", "unset_default_dtype"], [78, 3, 1, "", "unset_default_float_dtype"], [78, 3, 1, "", "unset_default_int_dtype"], [78, 3, 1, "", "unset_shape_array_mode"], [78, 3, 1, "", "unset_with_grads"], [78, 3, 1, "", "used_mem_on_dev"], [78, 3, 1, "", "valid_dtype"], [78, 3, 1, "", "value_is_nan"], [78, 3, 1, "", "variable"], [78, 3, 1, "", "variable_data"], [78, 3, 1, "", "vecdot"], [78, 3, 1, "", "vector_to_skew_symmetric_matrix"], [78, 3, 1, "", "where"], [78, 3, 1, "", "with_grads"], [78, 3, 1, "", "zeros"]], "ivy.container.container.MultiDevContainer": [[79, 3, 1, "", "__init__"], [79, 3, 1, "", "at_dev"], [79, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[374, 1, 1, "", "abs"], [379, 1, 1, "", "acos"], [383, 1, 1, "", "acosh"], [699, 1, 1, "", "adam_step"], [703, 1, 1, "", "adam_update"], [387, 1, 1, "", "add"], [1012, 1, 1, "", "all"], [617, 1, 1, "", "all_equal"], [1017, 1, 1, "", "any"], [968, 1, 1, "", "argsort"], [184, 1, 1, "", "asarray"], [392, 1, 1, "", "asin"], [396, 1, 1, "", "asinh"], [257, 1, 1, "", "astype"], [401, 1, 1, "", "atan"], [405, 1, 1, "", "atan2"], [409, 1, 1, "", "atanh"], [826, 1, 1, "", "binary_cross_entropy"], [413, 1, 1, "", "bitwise_and"], [417, 1, 1, "", "bitwise_invert"], [421, 1, 1, "", "bitwise_left_shift"], [425, 1, 1, "", "bitwise_or"], [429, 1, 1, "", "bitwise_right_shift"], [433, 1, 1, "", "bitwise_xor"], [262, 1, 1, "", "broadcast_arrays"], [267, 1, 1, "", "broadcast_to"], [272, 1, 1, "", "can_cast"], [437, 1, 1, "", "ceil"], [754, 1, 1, "", "cholesky"], [842, 1, 1, "", "clip"], [628, 1, 1, "", "clip_vector_norm"], [847, 1, 1, "", "concat"], [851, 1, 1, "", "constant_pad"], [441, 1, 1, "", "cos"], [446, 1, 1, "", "cosh"], [831, 1, 1, "", "cross_entropy"], [743, 1, 1, "", "depthwise_conv2d"], [450, 1, 1, "", "divide"], [281, 1, 1, "", "dtype"], [979, 1, 1, "", "einsum"], [190, 1, 1, "", "empty_like"], [455, 1, 1, "", "equal"], [459, 1, 1, "", "erf"], [463, 1, 1, "", "exp"], [855, 1, 1, "", "expand_dims"], [467, 1, 1, "", "expm1"], [286, 1, 1, "", "finfo"], [859, 1, 1, "", "flip"], [471, 1, 1, "", "floor"], [475, 1, 1, "", "floor_divide"], [198, 1, 1, "", "from_dlpack"], [204, 1, 1, "", "full_like"], [645, 1, 1, "", "gather_nd"], [708, 1, 1, "", "gradient_descent_update"], [479, 1, 1, "", "greater"], [483, 1, 1, "", "greater_equal"], [293, 1, 1, "", "iinfo"], [299, 1, 1, "", "is_float_dtype"], [304, 1, 1, "", "is_int_dtype"], [713, 1, 1, "", "is_variable"], [487, 1, 1, "", "isfinite"], [491, 1, 1, "", "isinf"], [495, 1, 1, "", "isnan"], [717, 1, 1, "", "lamb_update"], [721, 1, 1, "", "lars_update"], [924, 1, 1, "", "layer_norm"], [499, 1, 1, "", "less"], [503, 1, 1, "", "less_equal"], [507, 1, 1, "", "log"], [511, 1, 1, "", "log10"], [515, 1, 1, "", "log1p"], [519, 1, 1, "", "log2"], [523, 1, 1, "", "logaddexp"], [527, 1, 1, "", "logical_and"], [531, 1, 1, "", "logical_not"], [535, 1, 1, "", "logical_or"], [539, 1, 1, "", "logical_xor"], [777, 1, 1, "", "matmul"], [983, 1, 1, "", "max"], [987, 1, 1, "", "mean"], [215, 1, 1, "", "meshgrid"], [991, 1, 1, "", "min"], [545, 1, 1, "", "multiply"], [220, 1, 1, "", "native_array"], [550, 1, 1, "", "negative"], [554, 1, 1, "", "not_equal"], [228, 1, 1, "", "ones_like"], [725, 1, 1, "", "optimizer_update"], [863, 1, 1, "", "permute_dims"], [558, 1, 1, "", "positive"], [562, 1, 1, "", "pow"], [995, 1, 1, "", "prod"], [934, 1, 1, "", "random_uniform"], [566, 1, 1, "", "remainder"], [867, 1, 1, "", "repeat"], [871, 1, 1, "", "reshape"], [310, 1, 1, "", "result_type"], [875, 1, 1, "", "roll"], [570, 1, 1, "", "round"], [574, 1, 1, "", "sign"], [579, 1, 1, "", "sin"], [584, 1, 1, "", "sinh"], [171, 1, 1, "", "softplus"], [973, 1, 1, "", "sort"], [836, 1, 1, "", "sparse_cross_entropy"], [589, 1, 1, "", "sqrt"], [593, 1, 1, "", "square"], [881, 1, 1, "", "squeeze"], [885, 1, 1, "", "stack"], [376, 1, 1, "", "static_abs"], [701, 1, 1, "", "static_adam_step"], [705, 1, 1, "", "static_adam_update"], [389, 1, 1, "", "static_add"], [1014, 1, 1, "", "static_all"], [619, 1, 1, "", "static_all_equal"], [1019, 1, 1, "", "static_any"], [181, 1, 1, "", "static_arange"], [970, 1, 1, "", "static_argsort"], [186, 1, 1, "", "static_asarray"], [398, 1, 1, "", "static_asinh"], [259, 1, 1, "", "static_astype"], [828, 1, 1, "", "static_binary_cross_entropy"], [264, 1, 1, "", "static_broadcast_arrays"], [269, 1, 1, "", "static_broadcast_to"], [274, 1, 1, "", "static_can_cast"], [756, 1, 1, "", "static_cholesky"], [844, 1, 1, "", "static_clip"], [443, 1, 1, "", "static_cos"], [833, 1, 1, "", "static_cross_entropy"], [745, 1, 1, "", "static_depthwise_conv2d"], [452, 1, 1, "", "static_divide"], [192, 1, 1, "", "static_empty_like"], [195, 1, 1, "", "static_eye"], [288, 1, 1, "", "static_finfo"], [200, 1, 1, "", "static_from_dlpack"], [206, 1, 1, "", "static_full_like"], [647, 1, 1, "", "static_gather_nd"], [710, 1, 1, "", "static_gradient_descent_update"], [295, 1, 1, "", "static_iinfo"], [301, 1, 1, "", "static_is_float_dtype"], [306, 1, 1, "", "static_is_int_dtype"], [715, 1, 1, "", "static_is_variable"], [719, 1, 1, "", "static_lamb_update"], [723, 1, 1, "", "static_lars_update"], [926, 1, 1, "", "static_layer_norm"], [209, 1, 1, "", "static_linspace"], [212, 1, 1, "", "static_logspace"], [217, 1, 1, "", "static_meshgrid"], [547, 1, 1, "", "static_multiply"], [222, 1, 1, "", "static_native_array"], [225, 1, 1, "", "static_ones"], [230, 1, 1, "", "static_ones_like"], [727, 1, 1, "", "static_optimizer_update"], [931, 1, 1, "", "static_randint"], [936, 1, 1, "", "static_random_uniform"], [312, 1, 1, "", "static_result_type"], [877, 1, 1, "", "static_roll"], [576, 1, 1, "", "static_sign"], [581, 1, 1, "", "static_sin"], [586, 1, 1, "", "static_sinh"], [173, 1, 1, "", "static_softplus"], [975, 1, 1, "", "static_sort"], [838, 1, 1, "", "static_sparse_cross_entropy"], [596, 1, 1, "", "static_subtract"], [601, 1, 1, "", "static_tan"], [606, 1, 1, "", "static_tanh"], [686, 1, 1, "", "static_to_numpy"], [232, 1, 1, "", "static_tril"], [237, 1, 1, "", "static_triu"], [946, 1, 1, "", "static_unique_all"], [951, 1, 1, "", "static_unique_counts"], [956, 1, 1, "", "static_unique_inverse"], [961, 1, 1, "", "static_unique_values"], [242, 1, 1, "", "static_zeros"], [245, 1, 1, "", "static_zeros_like"], [999, 1, 1, "", "std"], [598, 1, 1, "", "subtract"], [1003, 1, 1, "", "sum"], [889, 1, 1, "", "swapaxes"], [603, 1, 1, "", "tan"], [608, 1, 1, "", "tanh"], [893, 1, 1, "", "tile"], [688, 1, 1, "", "to_numpy"], [234, 1, 1, "", "tril"], [239, 1, 1, "", "triu"], [612, 1, 1, "", "trunc"], [948, 1, 1, "", "unique_all"], [953, 1, 1, "", "unique_counts"], [958, 1, 1, "", "unique_inverse"], [963, 1, 1, "", "unique_values"], [1007, 1, 1, "", "var"], [897, 1, 1, "", "zero_pad"], [247, 1, 1, "", "zeros_like"]], "ivy.container.creation": [[81, 2, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[81, 3, 1, "", "asarray"], [81, 3, 1, "", "empty_like"], [81, 3, 1, "", "from_dlpack"], [81, 3, 1, "", "full_like"], [81, 3, 1, "", "meshgrid"], [81, 3, 1, "", "native_array"], [81, 3, 1, "", "ones_like"], [81, 3, 1, "", "static_arange"], [81, 3, 1, "", "static_asarray"], [81, 3, 1, "", "static_empty_like"], [81, 3, 1, "", "static_eye"], [81, 3, 1, "", "static_from_dlpack"], [81, 3, 1, "", "static_full_like"], [81, 3, 1, "", "static_linspace"], [81, 3, 1, "", "static_logspace"], [81, 3, 1, "", "static_meshgrid"], [81, 3, 1, "", "static_native_array"], [81, 3, 1, "", "static_ones"], [81, 3, 1, "", "static_ones_like"], [81, 3, 1, "", "static_tril"], [81, 3, 1, "", "static_triu"], [81, 3, 1, "", "static_zeros"], [81, 3, 1, "", "static_zeros_like"], [81, 3, 1, "", "tril"], [81, 3, 1, "", "triu"], [81, 3, 1, "", "zeros_like"]], "ivy.container.data_type": [[83, 2, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[83, 3, 1, "", "astype"], [83, 3, 1, "", "broadcast_arrays"], [83, 3, 1, "", "broadcast_to"], [83, 3, 1, "", "can_cast"], [83, 3, 1, "", "dtype"], [83, 3, 1, "", "finfo"], [83, 3, 1, "", "iinfo"], [83, 3, 1, "", "is_float_dtype"], [83, 3, 1, "", "is_int_dtype"], [83, 3, 1, "", "result_type"], [83, 3, 1, "", "static_astype"], [83, 3, 1, "", "static_broadcast_arrays"], [83, 3, 1, "", "static_broadcast_to"], [83, 3, 1, "", "static_can_cast"], [83, 3, 1, "", "static_finfo"], [83, 3, 1, "", "static_iinfo"], [83, 3, 1, "", "static_is_float_dtype"], [83, 3, 1, "", "static_is_int_dtype"], [83, 3, 1, "", "static_result_type"]], "ivy.container.device": [[85, 2, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[87, 2, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[87, 3, 1, "", "abs"], [87, 3, 1, "", "acos"], [87, 3, 1, "", "acosh"], [87, 3, 1, "", "add"], [87, 3, 1, "", "asin"], [87, 3, 1, "", "asinh"], [87, 3, 1, "", "atan"], [87, 3, 1, "", "atan2"], [87, 3, 1, "", "atanh"], [87, 3, 1, "", "bitwise_and"], [87, 3, 1, "", "bitwise_invert"], [87, 3, 1, "", "bitwise_left_shift"], [87, 3, 1, "", "bitwise_or"], [87, 3, 1, "", "bitwise_right_shift"], [87, 3, 1, "", "bitwise_xor"], [87, 3, 1, "", "ceil"], [87, 3, 1, "", "cos"], [87, 3, 1, "", "cosh"], [87, 3, 1, "", "divide"], [87, 3, 1, "", "equal"], [87, 3, 1, "", "erf"], [87, 3, 1, "", "exp"], [87, 3, 1, "", "expm1"], [87, 3, 1, "", "floor"], [87, 3, 1, "", "floor_divide"], [87, 3, 1, "", "greater"], [87, 3, 1, "", "greater_equal"], [87, 3, 1, "", "isfinite"], [87, 3, 1, "", "isinf"], [87, 3, 1, "", "isnan"], [87, 3, 1, "", "less"], [87, 3, 1, "", "less_equal"], [87, 3, 1, "", "log"], [87, 3, 1, "", "log10"], [87, 3, 1, "", "log1p"], [87, 3, 1, "", "log2"], [87, 3, 1, "", "logaddexp"], [87, 3, 1, "", "logical_and"], [87, 3, 1, "", "logical_not"], [87, 3, 1, "", "logical_or"], [87, 3, 1, "", "logical_xor"], [87, 3, 1, "", "multiply"], [87, 3, 1, "", "negative"], [87, 3, 1, "", "not_equal"], [87, 3, 1, "", "positive"], [87, 3, 1, "", "pow"], [87, 3, 1, "", "remainder"], [87, 3, 1, "", "round"], [87, 3, 1, "", "sign"], [87, 3, 1, "", "sin"], [87, 3, 1, "", "sinh"], [87, 3, 1, "", "sqrt"], [87, 3, 1, "", "square"], [87, 3, 1, "", "static_abs"], [87, 3, 1, "", "static_add"], [87, 3, 1, "", "static_asinh"], [87, 3, 1, "", "static_cos"], [87, 3, 1, "", "static_divide"], [87, 3, 1, "", "static_multiply"], [87, 3, 1, "", "static_sign"], [87, 3, 1, "", "static_sin"], [87, 3, 1, "", "static_sinh"], [87, 3, 1, "", "static_subtract"], [87, 3, 1, "", "static_tan"], [87, 3, 1, "", "static_tanh"], [87, 3, 1, "", "subtract"], [87, 3, 1, "", "tan"], [87, 3, 1, "", "tanh"], [87, 3, 1, "", "trunc"]], "ivy.container.general": [[89, 2, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[89, 3, 1, "", "all_equal"], [89, 3, 1, "", "clip_vector_norm"], [89, 3, 1, "", "gather_nd"], [89, 3, 1, "", "static_all_equal"], [89, 3, 1, "", "static_gather_nd"], [89, 3, 1, "", "static_to_numpy"], [89, 3, 1, "", "to_numpy"]], "ivy.container.gradients": [[91, 2, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[91, 3, 1, "", "adam_step"], [91, 3, 1, "", "adam_update"], [91, 3, 1, "", "gradient_descent_update"], [91, 3, 1, "", "is_variable"], [91, 3, 1, "", "lamb_update"], [91, 3, 1, "", "lars_update"], [91, 3, 1, "", "optimizer_update"], [91, 3, 1, "", "static_adam_step"], [91, 3, 1, "", "static_adam_update"], [91, 3, 1, "", "static_gradient_descent_update"], [91, 3, 1, "", "static_is_variable"], [91, 3, 1, "", "static_lamb_update"], [91, 3, 1, "", "static_lars_update"], [91, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[93, 2, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[95, 2, 1, "", "ContainerWithLayers"]], "ivy.container.layers.ContainerWithLayers": [[95, 3, 1, "", "depthwise_conv2d"], [95, 3, 1, "", "static_depthwise_conv2d"]], "ivy.container.linear_algebra": [[97, 2, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[97, 3, 1, "", "cholesky"], [97, 3, 1, "", "matmul"], [97, 3, 1, "", "static_cholesky"]], "ivy.container.losses": [[99, 2, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[99, 3, 1, "", "binary_cross_entropy"], [99, 3, 1, "", "cross_entropy"], [99, 3, 1, "", "sparse_cross_entropy"], [99, 3, 1, "", "static_binary_cross_entropy"], [99, 3, 1, "", "static_cross_entropy"], [99, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[101, 2, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[101, 3, 1, "", "clip"], [101, 3, 1, "", "concat"], [101, 3, 1, "", "constant_pad"], [101, 3, 1, "", "expand_dims"], [101, 3, 1, "", "flip"], [101, 3, 1, "", "permute_dims"], [101, 3, 1, "", "repeat"], [101, 3, 1, "", "reshape"], [101, 3, 1, "", "roll"], [101, 3, 1, "", "squeeze"], [101, 3, 1, "", "stack"], [101, 3, 1, "", "static_clip"], [101, 3, 1, "", "static_roll"], [101, 3, 1, "", "swapaxes"], [101, 3, 1, "", "tile"], [101, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[103, 2, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[103, 3, 1, "", "layer_norm"], [103, 3, 1, "", "static_layer_norm"]], "ivy.container.random": [[105, 2, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[105, 3, 1, "", "random_uniform"], [105, 3, 1, "", "static_randint"], [105, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[107, 2, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[109, 2, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[109, 3, 1, "", "static_unique_all"], [109, 3, 1, "", "static_unique_counts"], [109, 3, 1, "", "static_unique_inverse"], [109, 3, 1, "", "static_unique_values"], [109, 3, 1, "", "unique_all"], [109, 3, 1, "", "unique_counts"], [109, 3, 1, "", "unique_inverse"], [109, 3, 1, "", "unique_values"]], "ivy.container.sorting": [[111, 2, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[111, 3, 1, "", "argsort"], [111, 3, 1, "", "sort"], [111, 3, 1, "", "static_argsort"], [111, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[113, 2, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[113, 3, 1, "", "einsum"], [113, 3, 1, "", "max"], [113, 3, 1, "", "mean"], [113, 3, 1, "", "min"], [113, 3, 1, "", "prod"], [113, 3, 1, "", "std"], [113, 3, 1, "", "sum"], [113, 3, 1, "", "var"]], "ivy.container.utility": [[115, 2, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[115, 3, 1, "", "all"], [115, 3, 1, "", "any"], [115, 3, 1, "", "static_all"], [115, 3, 1, "", "static_any"]], "ivy.container.wrapping": [[117, 1, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[154, 1, 1, "", "handle_nestable"], [155, 1, 1, "", "handle_out_argument"], [156, 1, 1, "", "infer_device"], [157, 1, 1, "", "infer_dtype"], [158, 1, 1, "", "inputs_to_ivy_arrays"], [159, 1, 1, "", "inputs_to_native_arrays"], [160, 1, 1, "", "outputs_to_ivy_arrays"], [161, 1, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[163, 0, 0, "-", "activations"], [175, 0, 0, "-", "compilation"], [177, 0, 0, "-", "constants"], [178, 0, 0, "-", "creation"], [249, 0, 0, "-", "data_type"], [321, 0, 0, "-", "device"], [371, 0, 0, "-", "elementwise"], [614, 0, 0, "-", "general"], [695, 0, 0, "-", "gradients"], [734, 0, 0, "-", "layers"], [751, 0, 0, "-", "linear_algebra"], [823, 0, 0, "-", "losses"], [839, 0, 0, "-", "manipulation"], [899, 0, 0, "-", "meta"], [903, 0, 0, "-", "nest"], [921, 0, 0, "-", "norms"], [927, 0, 0, "-", "random"], [939, 0, 0, "-", "searching"], [944, 0, 0, "-", "set"], [965, 0, 0, "-", "sorting"], [976, 0, 0, "-", "statistical"], [1009, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[164, 1, 1, "", "gelu"], [165, 1, 1, "", "leaky_relu"], [166, 1, 1, "", "relu"], [167, 1, 1, "", "sigmoid"], [168, 1, 1, "", "softmax"], [172, 1, 1, "", "softplus"], [174, 1, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[176, 1, 1, "", "compile"]], "ivy.functional.ivy.constants": [[177, 5, 1, "", "e"], [177, 5, 1, "", "inf"], [177, 5, 1, "", "nan"], [177, 5, 1, "", "newaxis"], [177, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[180, 1, 1, "", "arange"], [178, 1, 1, "", "array"], [185, 1, 1, "", "asarray"], [187, 1, 1, "", "empty"], [191, 1, 1, "", "empty_like"], [194, 1, 1, "", "eye"], [199, 1, 1, "", "from_dlpack"], [201, 1, 1, "", "full"], [205, 1, 1, "", "full_like"], [208, 1, 1, "", "linspace"], [211, 1, 1, "", "logspace"], [216, 1, 1, "", "meshgrid"], [221, 1, 1, "", "native_array"], [224, 1, 1, "", "ones"], [229, 1, 1, "", "ones_like"], [235, 1, 1, "", "tril"], [240, 1, 1, "", "triu"], [243, 1, 1, "", "zeros"], [248, 1, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[249, 2, 1, "", "DefaultDtype"], [249, 2, 1, "", "DefaultFloatDtype"], [249, 2, 1, "", "DefaultIntDtype"], [253, 1, 1, "", "as_ivy_dtype"], [254, 1, 1, "", "as_native_dtype"], [258, 1, 1, "", "astype"], [263, 1, 1, "", "broadcast_arrays"], [268, 1, 1, "", "broadcast_to"], [273, 1, 1, "", "can_cast"], [275, 1, 1, "", "closest_valid_dtype"], [276, 1, 1, "", "default_dtype"], [277, 1, 1, "", "default_float_dtype"], [278, 1, 1, "", "default_int_dtype"], [282, 1, 1, "", "dtype"], [283, 1, 1, "", "dtype_bits"], [287, 1, 1, "", "finfo"], [289, 1, 1, "", "function_supported_dtypes"], [290, 1, 1, "", "function_unsupported_dtypes"], [294, 1, 1, "", "iinfo"], [296, 1, 1, "", "invalid_dtype"], [300, 1, 1, "", "is_float_dtype"], [305, 1, 1, "", "is_int_dtype"], [307, 1, 1, "", "promote_types"], [311, 1, 1, "", "result_type"], [313, 1, 1, "", "set_default_dtype"], [314, 1, 1, "", "set_default_float_dtype"], [315, 1, 1, "", "set_default_int_dtype"], [316, 1, 1, "", "type_promote_arrays"], [317, 1, 1, "", "unset_default_dtype"], [318, 1, 1, "", "unset_default_float_dtype"], [319, 1, 1, "", "unset_default_int_dtype"], [320, 1, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[249, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[249, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[249, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[321, 2, 1, "", "DefaultDevice"], [323, 2, 1, "", "DevClonedItem"], [324, 2, 1, "", "DevClonedIter"], [325, 2, 1, "", "DevClonedNest"], [326, 2, 1, "", "DevDistItem"], [327, 2, 1, "", "DevDistIter"], [328, 2, 1, "", "DevDistNest"], [321, 2, 1, "", "DevManager"], [330, 2, 1, "", "DevMapper"], [331, 2, 1, "", "DevMapperMultiProc"], [321, 2, 1, "", "MultiDev"], [333, 2, 1, "", "MultiDevItem"], [334, 2, 1, "", "MultiDevIter"], [335, 2, 1, "", "MultiDevNest"], [336, 2, 1, "", "Profiler"], [337, 1, 1, "", "as_ivy_dev"], [338, 1, 1, "", "as_native_dev"], [339, 1, 1, "", "clear_mem_on_dev"], [340, 1, 1, "", "default_device"], [341, 1, 1, "", "dev"], [342, 1, 1, "", "dev_clone"], [343, 1, 1, "", "dev_clone_array"], [344, 1, 1, "", "dev_clone_iter"], [345, 1, 1, "", "dev_clone_nest"], [346, 1, 1, "", "dev_dist"], [347, 1, 1, "", "dev_dist_array"], [348, 1, 1, "", "dev_dist_iter"], [349, 1, 1, "", "dev_dist_nest"], [350, 1, 1, "", "dev_unify"], [351, 1, 1, "", "dev_unify_array"], [352, 1, 1, "", "dev_unify_iter"], [353, 1, 1, "", "dev_unify_nest"], [354, 1, 1, "", "dev_util"], [355, 1, 1, "", "get_all_ivy_arrays_on_dev"], [356, 1, 1, "", "gpu_is_available"], [357, 1, 1, "", "num_cpu_cores"], [358, 1, 1, "", "num_gpus"], [359, 1, 1, "", "num_ivy_arrays_on_dev"], [360, 1, 1, "", "percent_used_mem_on_dev"], [361, 1, 1, "", "print_all_ivy_arrays_on_dev"], [362, 1, 1, "", "set_default_device"], [363, 1, 1, "", "set_split_factor"], [364, 1, 1, "", "split_factor"], [365, 1, 1, "", "split_func_call"], [366, 1, 1, "", "to_device"], [367, 1, 1, "", "total_mem_on_dev"], [368, 1, 1, "", "tpu_is_available"], [369, 1, 1, "", "unset_default_device"], [370, 1, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[321, 3, 1, "", "__enter__"], [321, 3, 1, "", "__exit__"], [321, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[321, 3, 1, "", "__init__"], [321, 3, 1, "", "da_tune_step"], [321, 4, 1, "", "dim_size"], [321, 3, 1, "", "ds_tune_step"], [321, 3, 1, "", "map"], [321, 3, 1, "", "repeated_config_check"], [321, 4, 1, "", "tune_step"], [321, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[330, 3, 1, "", "__init__"], [330, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[331, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[321, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[333, 3, 1, "", "__init__"], [333, 3, 1, "", "items"], [333, 3, 1, "", "keys"], [333, 4, 1, "", "shape"], [333, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[334, 3, 1, "", "__init__"], [334, 3, 1, "", "at_dev"], [334, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[335, 3, 1, "", "__init__"], [335, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[336, 3, 1, "", "__init__"], [336, 3, 1, "", "start"], [336, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[375, 1, 1, "", "abs"], [380, 1, 1, "", "acos"], [384, 1, 1, "", "acosh"], [388, 1, 1, "", "add"], [393, 1, 1, "", "asin"], [397, 1, 1, "", "asinh"], [402, 1, 1, "", "atan"], [406, 1, 1, "", "atan2"], [410, 1, 1, "", "atanh"], [414, 1, 1, "", "bitwise_and"], [418, 1, 1, "", "bitwise_invert"], [422, 1, 1, "", "bitwise_left_shift"], [426, 1, 1, "", "bitwise_or"], [430, 1, 1, "", "bitwise_right_shift"], [434, 1, 1, "", "bitwise_xor"], [438, 1, 1, "", "ceil"], [442, 1, 1, "", "cos"], [447, 1, 1, "", "cosh"], [451, 1, 1, "", "divide"], [456, 1, 1, "", "equal"], [460, 1, 1, "", "erf"], [464, 1, 1, "", "exp"], [468, 1, 1, "", "expm1"], [472, 1, 1, "", "floor"], [476, 1, 1, "", "floor_divide"], [480, 1, 1, "", "greater"], [484, 1, 1, "", "greater_equal"], [488, 1, 1, "", "isfinite"], [492, 1, 1, "", "isinf"], [496, 1, 1, "", "isnan"], [500, 1, 1, "", "less"], [504, 1, 1, "", "less_equal"], [508, 1, 1, "", "log"], [512, 1, 1, "", "log10"], [516, 1, 1, "", "log1p"], [520, 1, 1, "", "log2"], [524, 1, 1, "", "logaddexp"], [528, 1, 1, "", "logical_and"], [532, 1, 1, "", "logical_not"], [536, 1, 1, "", "logical_or"], [540, 1, 1, "", "logical_xor"], [541, 1, 1, "", "maximum"], [542, 1, 1, "", "minimum"], [546, 1, 1, "", "multiply"], [551, 1, 1, "", "negative"], [555, 1, 1, "", "not_equal"], [559, 1, 1, "", "positive"], [563, 1, 1, "", "pow"], [567, 1, 1, "", "remainder"], [571, 1, 1, "", "round"], [575, 1, 1, "", "sign"], [580, 1, 1, "", "sin"], [585, 1, 1, "", "sinh"], [590, 1, 1, "", "sqrt"], [594, 1, 1, "", "square"], [599, 1, 1, "", "subtract"], [604, 1, 1, "", "tan"], [609, 1, 1, "", "tanh"], [613, 1, 1, "", "trunc"]], "ivy.functional.ivy.general": [[618, 1, 1, "", "all_equal"], [620, 1, 1, "", "arg_info"], [621, 1, 1, "", "arg_names"], [622, 1, 1, "", "array_equal"], [623, 1, 1, "", "arrays_equal"], [624, 1, 1, "", "assert_supports_inplace"], [625, 1, 1, "", "cache_fn"], [626, 1, 1, "", "clip_matrix_norm"], [629, 1, 1, "", "clip_vector_norm"], [630, 1, 1, "", "container_types"], [631, 1, 1, "", "copy_array"], [632, 1, 1, "", "cumprod"], [633, 1, 1, "", "cumsum"], [634, 1, 1, "", "current_backend_str"], [635, 1, 1, "", "default"], [636, 1, 1, "", "einops_rearrange"], [637, 1, 1, "", "einops_reduce"], [638, 1, 1, "", "einops_repeat"], [639, 1, 1, "", "exists"], [640, 1, 1, "", "floormod"], [641, 1, 1, "", "fourier_encode"], [642, 1, 1, "", "gather"], [646, 1, 1, "", "gather_nd"], [648, 1, 1, "", "get_all_arrays_in_memory"], [649, 1, 1, "", "get_min_base"], [650, 1, 1, "", "get_min_denominator"], [651, 1, 1, "", "get_num_dims"], [652, 1, 1, "", "get_referrers_recursive"], [653, 1, 1, "", "has_nans"], [654, 1, 1, "", "indices_where"], [655, 1, 1, "", "inplace_arrays_supported"], [656, 1, 1, "", "inplace_decrement"], [657, 1, 1, "", "inplace_increment"], [658, 1, 1, "", "inplace_update"], [659, 1, 1, "", "inplace_variables_supported"], [660, 1, 1, "", "is_array"], [661, 1, 1, "", "is_ivy_array"], [662, 1, 1, "", "is_ivy_container"], [663, 1, 1, "", "is_native_array"], [664, 1, 1, "", "match_kwargs"], [665, 1, 1, "", "multiprocessing"], [666, 1, 1, "", "num_arrays_in_memory"], [667, 1, 1, "", "one_hot"], [668, 1, 1, "", "print_all_arrays_in_memory"], [669, 1, 1, "", "queue_timeout"], [670, 1, 1, "", "scatter_flat"], [671, 1, 1, "", "scatter_nd"], [672, 1, 1, "", "set_min_base"], [673, 1, 1, "", "set_min_denominator"], [674, 1, 1, "", "set_queue_timeout"], [675, 1, 1, "", "set_shape_array_mode"], [676, 1, 1, "", "set_tmp_dir"], [677, 1, 1, "", "shape"], [678, 1, 1, "", "shape_array_mode"], [679, 1, 1, "", "shape_to_tuple"], [680, 1, 1, "", "stable_divide"], [681, 1, 1, "", "stable_pow"], [682, 1, 1, "", "supports_inplace"], [683, 1, 1, "", "tmp_dir"], [684, 1, 1, "", "to_list"], [689, 1, 1, "", "to_numpy"], [690, 1, 1, "", "to_scalar"], [691, 1, 1, "", "try_else_none"], [692, 1, 1, "", "unset_shape_array_mode"], [693, 1, 1, "", "unstack"], [694, 1, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[695, 2, 1, "", "GradientTracking"], [700, 1, 1, "", "adam_step"], [704, 1, 1, "", "adam_update"], [706, 1, 1, "", "execute_with_gradients"], [709, 1, 1, "", "gradient_descent_update"], [714, 1, 1, "", "is_variable"], [718, 1, 1, "", "lamb_update"], [722, 1, 1, "", "lars_update"], [726, 1, 1, "", "optimizer_update"], [728, 1, 1, "", "set_with_grads"], [729, 1, 1, "", "stop_gradient"], [730, 1, 1, "", "unset_with_grads"], [731, 1, 1, "", "variable"], [732, 1, 1, "", "variable_data"], [733, 1, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[695, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[735, 1, 1, "", "conv1d"], [736, 1, 1, "", "conv1d_transpose"], [737, 1, 1, "", "conv2d"], [738, 1, 1, "", "conv2d_transpose"], [739, 1, 1, "", "conv3d"], [740, 1, 1, "", "conv3d_transpose"], [744, 1, 1, "", "depthwise_conv2d"], [746, 1, 1, "", "dropout"], [747, 1, 1, "", "linear"], [748, 1, 1, "", "lstm_update"], [749, 1, 1, "", "multi_head_attention"], [750, 1, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[755, 1, 1, "", "cholesky"], [759, 1, 1, "", "cross"], [762, 1, 1, "", "det"], [765, 1, 1, "", "diagonal"], [768, 1, 1, "", "eigh"], [771, 1, 1, "", "eigvalsh"], [774, 1, 1, "", "inv"], [778, 1, 1, "", "matmul"], [781, 1, 1, "", "matrix_norm"], [782, 1, 1, "", "matrix_power"], [785, 1, 1, "", "matrix_rank"], [788, 1, 1, "", "matrix_transpose"], [791, 1, 1, "", "outer"], [794, 1, 1, "", "pinv"], [797, 1, 1, "", "qr"], [798, 1, 1, "", "slogdet"], [801, 1, 1, "", "solve"], [804, 1, 1, "", "svd"], [807, 1, 1, "", "svdvals"], [810, 1, 1, "", "tensordot"], [813, 1, 1, "", "trace"], [816, 1, 1, "", "vecdot"], [819, 1, 1, "", "vector_norm"], [822, 1, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[827, 1, 1, "", "binary_cross_entropy"], [832, 1, 1, "", "cross_entropy"], [837, 1, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[843, 1, 1, "", "clip"], [848, 1, 1, "", "concat"], [852, 1, 1, "", "constant_pad"], [856, 1, 1, "", "expand_dims"], [860, 1, 1, "", "flip"], [864, 1, 1, "", "permute_dims"], [868, 1, 1, "", "repeat"], [872, 1, 1, "", "reshape"], [876, 1, 1, "", "roll"], [878, 1, 1, "", "split"], [882, 1, 1, "", "squeeze"], [886, 1, 1, "", "stack"], [890, 1, 1, "", "swapaxes"], [894, 1, 1, "", "tile"], [898, 1, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[900, 1, 1, "", "fomaml_step"], [901, 1, 1, "", "maml_step"], [902, 1, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[904, 1, 1, "", "all_nested_indices"], [905, 1, 1, "", "copy_nest"], [906, 1, 1, "", "index_nest"], [907, 1, 1, "", "insert_into_nest_at_index"], [908, 1, 1, "", "insert_into_nest_at_indices"], [909, 1, 1, "", "map"], [910, 1, 1, "", "map_nest_at_index"], [911, 1, 1, "", "map_nest_at_indices"], [912, 1, 1, "", "multi_index_nest"], [913, 1, 1, "", "nested_any"], [914, 1, 1, "", "nested_indices_where"], [915, 1, 1, "", "nested_map"], [916, 1, 1, "", "nested_multi_map"], [917, 1, 1, "", "prune_nest_at_index"], [918, 1, 1, "", "prune_nest_at_indices"], [919, 1, 1, "", "set_nest_at_index"], [920, 1, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[925, 1, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[928, 1, 1, "", "multinomial"], [930, 1, 1, "", "randint"], [932, 1, 1, "", "random_normal"], [935, 1, 1, "", "random_uniform"], [937, 1, 1, "", "seed"], [938, 1, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[940, 1, 1, "", "argmax"], [941, 1, 1, "", "argmin"], [942, 1, 1, "", "nonzero"], [943, 1, 1, "", "where"]], "ivy.functional.ivy.set": [[949, 1, 1, "", "unique_all"], [954, 1, 1, "", "unique_counts"], [959, 1, 1, "", "unique_inverse"], [964, 1, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[969, 1, 1, "", "argsort"], [974, 1, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[980, 1, 1, "", "einsum"], [984, 1, 1, "", "max"], [988, 1, 1, "", "mean"], [992, 1, 1, "", "min"], [996, 1, 1, "", "prod"], [1000, 1, 1, "", "std"], [1004, 1, 1, "", "sum"], [1008, 1, 1, "", "var"]], "ivy.functional.ivy.utility": [[1013, 1, 1, "", "all"], [1018, 1, 1, "", "any"]], "ivy.inspection": [[1024, 1, 1, "", "add_array_specs"], [1025, 1, 1, "", "fn_array_spec"]], "ivy.stateful": [[1028, 0, 0, "-", "activations"], [1031, 0, 0, "-", "converters"], [1033, 0, 0, "-", "initializers"], [1042, 0, 0, "-", "layers"], [1054, 0, 0, "-", "module"], [1056, 0, 0, "-", "norms"], [1058, 0, 0, "-", "optimizers"], [1064, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1029, 2, 1, "", "GEGLU"], [1030, 2, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1029, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1030, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[1032, 1, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1033, 2, 1, "", "Constant"], [1035, 2, 1, "", "FirstLayerSiren"], [1036, 2, 1, "", "GlorotUniform"], [1033, 2, 1, "", "KaimingNormal"], [1038, 2, 1, "", "Ones"], [1039, 2, 1, "", "Siren"], [1033, 2, 1, "", "Uniform"], [1041, 2, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1033, 3, 1, "", "__init__"], [1033, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1035, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1036, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1033, 3, 1, "", "__init__"], [1033, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1038, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1039, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1033, 3, 1, "", "__init__"], [1033, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1041, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[1043, 2, 1, "", "Conv1D"], [1044, 2, 1, "", "Conv1DTranspose"], [1045, 2, 1, "", "Conv2D"], [1046, 2, 1, "", "Conv2DTranspose"], [1047, 2, 1, "", "Conv3D"], [1048, 2, 1, "", "Conv3DTranspose"], [1049, 2, 1, "", "DepthwiseConv2D"], [1050, 2, 1, "", "Dropout"], [1051, 2, 1, "", "LSTM"], [1052, 2, 1, "", "Linear"], [1053, 2, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1043, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1044, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1045, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1046, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1047, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1048, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1049, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1050, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1051, 3, 1, "", "__init__"], [1051, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1052, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1053, 3, 1, "", "__init__"]], "ivy.stateful.module": [[1055, 2, 1, "", "Module"]], "ivy.stateful.module.Module": [[1055, 3, 1, "", "__init__"], [1055, 3, 1, "", "build"], [1055, 4, 1, "", "build_mode"], [1055, 4, 1, "", "built"], [1055, 3, 1, "", "check_submod_rets"], [1055, 3, 1, "", "get_mod_key"], [1055, 3, 1, "", "mod_depth"], [1055, 3, 1, "", "mod_height"], [1055, 3, 1, "", "mod_with_top_mod_key_chain"], [1055, 3, 1, "", "save_weights"], [1055, 3, 1, "", "show_mod_in_top_mod"], [1055, 3, 1, "", "show_structure"], [1055, 3, 1, "", "show_v_in_top_v"], [1055, 3, 1, "", "sub_mods"], [1055, 3, 1, "", "track_submod_call_order"], [1055, 3, 1, "", "track_submod_rets"], [1055, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1057, 2, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1057, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1059, 2, 1, "", "Adam"], [1060, 2, 1, "", "LAMB"], [1061, 2, 1, "", "LARS"], [1062, 2, 1, "", "Optimizer"], [1063, 2, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1059, 3, 1, "", "__init__"], [1059, 3, 1, "", "set_state"], [1059, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1060, 3, 1, "", "__init__"], [1060, 3, 1, "", "set_state"], [1060, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1061, 3, 1, "", "__init__"], [1061, 3, 1, "", "set_state"], [1061, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1062, 3, 1, "", "__init__"], [1062, 3, 1, "", "set_state"], [1062, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1063, 3, 1, "", "__init__"], [1063, 3, 1, "", "set_state"], [1063, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1065, 2, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1065, 3, 1, "", "__init__"]], "ivy.verbosity": [[1068, 1, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 119, 126, 135, 152], "handler": [0, 135], "choose_random_backend": 2, "clear_backend_stack": 3, "current_backend": 4, "get_backend": 5, "set_backend": 6, "try_import_ivy_jax": 7, "try_import_ivy_mxnet": 8, "try_import_ivy_numpi": 9, "try_import_ivy_tf": 10, "try_import_ivy_torch": 11, "unset_backend": 12, "background": [13, 1020], "ml": 14, "explos": 14, "standard": 15, "skeptic": 15, "complimentari": 15, "vs": [15, 152], "competit": 15, "do": [15, 124], "work": [15, 21], "The": [15, 19, 137, 152], "arrai": [15, 23, 26, 27, 120, 123, 128, 137, 170, 183, 189, 197, 203, 214, 219, 227, 233, 238, 246, 256, 261, 266, 271, 280, 285, 292, 298, 303, 309, 373, 378, 382, 386, 391, 395, 400, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 445, 449, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 494, 498, 502, 506, 510, 514, 518, 522, 526, 530, 534, 538, 544, 549, 553, 557, 561, 565, 569, 573, 578, 583, 588, 592, 597, 602, 607, 611, 616, 644, 687, 698, 712, 742, 753, 758, 761, 764, 767, 770, 773, 776, 780, 784, 787, 790, 793, 796, 800, 803, 806, 809, 812, 815, 818, 821, 825, 830, 835, 841, 846, 850, 854, 858, 862, 866, 870, 874, 880, 884, 888, 892, 896, 923, 947, 952, 957, 962, 967, 972, 978, 982, 986, 990, 994, 998, 1002, 1006, 1011, 1016], "api": [15, 20, 119, 123, 129, 135, 137, 139, 140], "why": [16, 124], "unifi": [16, 137], "No": [16, 18], "more": 16, "re": 16, "implement": 16, "infinit": 16, "shelf": 16, "life": 16, "contribut": [17, 1020], "set": [18, 62, 108, 126, 944], "up": 18, "clone": 18, "ivi": [18, 119, 122, 124, 128, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 170, 171, 172, 173, 180, 181, 183, 184, 185, 186, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 203, 204, 205, 206, 208, 209, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 280, 281, 282, 285, 286, 287, 288, 292, 293, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 309, 310, 311, 312, 373, 374, 375, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 454, 455, 456, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 480, 482, 483, 484, 486, 487, 488, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 503, 504, 506, 507, 508, 510, 511, 512, 514, 515, 516, 518, 519, 520, 522, 523, 524, 526, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 616, 617, 618, 619, 628, 629, 644, 645, 646, 647, 686, 687, 688, 689, 698, 699, 700, 701, 703, 704, 705, 708, 709, 710, 712, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 742, 743, 744, 745, 753, 754, 755, 756, 758, 759, 761, 762, 764, 765, 767, 768, 770, 771, 773, 774, 776, 777, 778, 780, 781, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 800, 801, 803, 804, 806, 807, 809, 810, 812, 813, 815, 816, 818, 819, 821, 822, 825, 826, 827, 828, 830, 831, 832, 833, 835, 836, 837, 838, 841, 842, 843, 844, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 862, 863, 864, 866, 867, 868, 870, 871, 872, 874, 875, 876, 877, 880, 881, 882, 884, 885, 886, 888, 889, 890, 892, 893, 894, 896, 897, 898, 923, 924, 925, 926, 930, 931, 934, 935, 936, 946, 947, 948, 949, 951, 952, 953, 954, 956, 957, 958, 959, 961, 962, 963, 964, 967, 968, 969, 970, 972, 973, 974, 975, 978, 979, 980, 982, 983, 984, 986, 987, 988, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019], "pycharm": 18, "virtual": 18, "environ": 18, "docker": [18, 19, 21], "us": [18, 21, 138], "miniconda": [18, 21], "venv": [18, 21], "interpret": 18, "window": 18, "maco": 18, "ubuntu": 18, "github": 18, "codespac": 18, "pre": [18, 133], "commit": [18, 19, 133], "basic": 19, "get": 19, "help": 19, "todo": 19, "list": 19, "issu": 19, "manag": 19, "your": 19, "fork": 19, "who": 19, "To": 19, "ask": 19, "With": 19, "command": 19, "line": 19, "browser": 19, "pull": 19, "request": 19, "small": 19, "often": 19, "run": 19, "test": [19, 123, 124], "local": 19, "open": 20, "task": 20, "function": [20, 120, 124, 125, 127, 129, 130, 131, 135, 140, 152], "format": [20, 133], "frontend": [20, 140], "build": [21, 135], "doc": 21, "dockerless": 21, "document": 21, "pipelin": [21, 152], "make_doc": 21, "sh": 21, "entrypoint": 21, "_make_doc": 21, "generate_src_rst_fil": 21, "py": 21, "sphinx": 21, "correct_built_html_fil": 21, "remove_fil": 21, "data": [22, 36, 82, 124, 130, 138, 152, 249, 944, 945, 949, 950, 954, 960, 964], "class": [22, 137, 1027], "activ": [24, 73, 163, 1028], "arraywithactiv": 25, "variabl": [28, 731], "convers": 29, "args_to_ivi": 30, "args_to_n": 31, "to_ivi": 32, "to_n": 33, "creation": [34, 80, 178], "arraywithcr": 35, "type": [36, 82, 125, 130, 152, 249], "arraywithdatatyp": 37, "devic": [38, 84, 120, 131, 321], "arraywithdevic": 39, "elementwis": [40, 86, 371], "arraywithelementwis": 41, "gener": [42, 88, 124, 614], "arraywithgener": 43, "gradient": [44, 90, 695], "arraywithgradi": 45, "imag": [46, 92], "arraywithimag": 47, "layer": [48, 94, 734, 1042], "arraywithlay": 49, "linear": [50, 96, 747, 751, 1052], "algebra": [50, 96, 751], "arraywithlinearalgebra": 51, "loss": [52, 98, 823], "arraywithloss": 53, "manipul": [54, 100, 839], "arraywithmanipul": 55, "norm": [56, 102, 921, 1056], "arraywithnorm": 57, "random": [58, 104, 927], "arraywithrandom": 59, "search": [60, 106, 939], "arraywithsearch": 61, "arraywithset": 63, "sort": [64, 110, 965, 971, 972, 973, 974], "arraywithsort": 65, "statist": [66, 112, 976], "arraywithstatist": 67, "util": [68, 114, 1009], "arraywithutil": 69, "wrap": [70, 116, 127], "add_ivy_array_instance_method": 71, "contain": [72, 77, 78, 129, 138, 171, 173, 181, 184, 186, 190, 192, 195, 198, 200, 204, 206, 209, 212, 215, 217, 220, 222, 225, 228, 230, 232, 234, 237, 239, 242, 245, 247, 257, 259, 262, 264, 267, 269, 272, 274, 281, 286, 288, 293, 295, 299, 301, 304, 306, 310, 312, 374, 376, 379, 383, 387, 389, 392, 396, 398, 401, 405, 409, 413, 417, 421, 425, 429, 433, 437, 441, 443, 446, 450, 452, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 495, 499, 503, 507, 511, 515, 519, 523, 527, 531, 535, 539, 545, 547, 550, 554, 558, 562, 566, 570, 574, 576, 579, 581, 584, 586, 589, 593, 596, 598, 601, 603, 606, 608, 612, 617, 619, 628, 645, 647, 686, 688, 699, 701, 703, 705, 708, 710, 713, 715, 717, 719, 721, 723, 725, 727, 743, 745, 754, 756, 777, 826, 828, 831, 833, 836, 838, 842, 844, 847, 851, 855, 859, 863, 867, 871, 875, 877, 881, 885, 889, 893, 897, 924, 926, 931, 934, 936, 946, 948, 951, 953, 956, 958, 961, 963, 968, 970, 973, 975, 979, 983, 987, 991, 995, 999, 1003, 1007, 1012, 1014, 1017, 1019], "containerwithactiv": 74, "base": 75, "containerbas": 76, "multidevcontain": 79, "containerwithcr": 81, "containerwithdatatyp": 83, "containerwithdevic": 85, "containerwithelementwis": 87, "containerwithgener": 89, "containerwithgradi": 91, "containerwithimag": 93, "containerwithlay": 95, "containerwithlinearalgebra": 97, "containerwithloss": 99, "containerwithmanipul": 101, "containerwithnorm": 103, "containerwithrandom": 105, "containerwithsearch": 107, "containerwithset": 109, "containerwithsort": 111, "containerwithstatist": 113, "containerwithutil": 115, "add_ivy_container_instance_method": 117, "deep": 118, "dive": 118, "navig": 119, "code": 119, "categor": 119, "submodul": 119, "design": [119, 134, 1020], "argument": [120, 130, 131, 132], "exampl": [120, 122, 133], "out": [120, 132], "dtype": [120, 279, 280, 281, 282], "number": 120, "oper": [120, 137, 152], "integ": 120, "sequenc": 120, "nestabl": [120, 125, 129], "docstr": [121, 122], "tan": [122, 600, 602, 603, 604], "roll": [122, 873, 874, 875, 876], "add": [122, 385, 386, 387, 388], "hypothesi": 124, "import": 124, "strategi": 124, "integr": 124, "we": 124, "need": 124, "helper": 124, "how": 124, "write": 124, "effect": 124, "bonu": 124, "extend": 124, "featur": 124, "self": 124, "consist": 124, "explicit": 124, "test_array_funct": 124, "primari": 125, "composit": 125, "mix": 125, "standalon": 125, "conveni": 125, "nativ": 128, "handl": 128, "instanc": [129, 137], "method": [129, 137, 138], "static": 129, "special": 129, "modul": [130, 131, 139, 1054, 1055], "other": [130, 131], "inplac": 132, "updat": 132, "copi": 132, "lint": 133, "check": [133, 152], "hook": 133, "automat": 133, "reformat": 133, "befor": 133, "block": 135, "framework": [135, 136, 1027], "graph": [135, 140], "compil": [135, 140, 175, 176], "monkei": 137, "patch": 137, "construct": 138, "represent": 138, "recurs": 138, "built": 138, "ins": 138, "access": 138, "save": 138, "load": 138, "comparison": 138, "custom": [138, 152], "case": 138, "compartment": 138, "configur": 138, "network": [138, 140], "weight": 138, "state": [139, 152], "initi": [139, 1033], "optim": [139, 1058, 1062], "transpil": 140, "role": 140, "convert": [140, 1031], "model": [140, 147, 152], "builder": 142, "ecosystem": 143, "gym": [144, 151], "mech": 145, "memori": [146, 151], "robot": [148, 151], "vision": [149, 151], "extens": [150, 1020], "appli": 151, "librari": 151, "mechan": 151, "faq": 152, "maintain": 152, "version": 152, "dynam": 152, "size": 152, "shape": [152, 677, 944, 945, 949, 950, 954, 960, 964], "control": 152, "flow": 152, "auto": 152, "differenti": 152, "replica": 152, "parallel": 152, "support": 152, "altern": 152, "structur": 152, "func": 153, "wrapper": 153, "handle_nest": 154, "handle_out_argu": 155, "infer_devic": 156, "infer_dtyp": 157, "inputs_to_ivy_arrai": 158, "inputs_to_native_arrai": 159, "outputs_to_ivy_arrai": 160, "to_native_arrays_and_back": 161, "gelu": [164, 1030], "leaky_relu": 165, "relu": 166, "sigmoid": 167, "softmax": 168, "softplu": [169, 170, 171, 172], "static_softplu": 173, "tanh": [174, 605, 607, 608, 609], "constant": 177, "note": [178, 196, 199], "arang": [179, 180], "static_arang": 181, "asarrai": [182, 183, 184, 185], "static_asarrai": 186, "empti": 187, "empty_lik": [188, 189, 190, 191], "static_empty_lik": 192, "ey": [193, 194], "static_ey": 195, "from_dlpack": [196, 197, 198, 199], "static_from_dlpack": 200, "full": 201, "full_lik": [202, 203, 204, 205], "static_full_lik": 206, "linspac": [207, 208], "static_linspac": 209, "logspac": [210, 211], "static_logspac": 212, "meshgrid": [213, 214, 215, 216], "static_meshgrid": 217, "native_arrai": [218, 219, 220, 221], "static_native_arrai": 222, "ones": [223, 224], "static_on": 225, "ones_lik": [226, 227, 228, 229], "static_ones_lik": 230, "tril": [231, 233, 234, 235], "static_tril": 232, "triu": [236, 238, 239, 240], "static_triu": 237, "zero": [241, 243, 1041], "static_zero": 242, "zeros_lik": [244, 246, 247, 248], "static_zeros_lik": 245, "as_ivy_dtyp": 253, "as_native_dtyp": 254, "astyp": [255, 256, 257, 258], "static_astyp": 259, "broadcast_arrai": [260, 261, 262, 263], "static_broadcast_arrai": 264, "broadcast_to": [265, 266, 267, 268], "static_broadcast_to": 269, "can_cast": [270, 271, 272, 273], "static_can_cast": 274, "closest_valid_dtyp": 275, "default_dtyp": 276, "default_float_dtyp": 277, "default_int_dtyp": 278, "dtype_bit": 283, "finfo": [284, 285, 286, 287], "static_finfo": 288, "function_supported_dtyp": 289, "function_unsupported_dtyp": 290, "iinfo": [291, 292, 293, 294], "static_iinfo": 295, "invalid_dtyp": 296, "is_float_dtyp": [297, 298, 299, 300], "static_is_float_dtyp": 301, "is_int_dtyp": [302, 303, 304, 305], "static_is_int_dtyp": 306, "promote_typ": 307, "result_typ": [308, 309, 310, 311], "static_result_typ": 312, "set_default_dtyp": 313, "set_default_float_dtyp": 314, "set_default_int_dtyp": 315, "type_promote_arrai": 316, "unset_default_dtyp": 317, "unset_default_float_dtyp": 318, "unset_default_int_dtyp": 319, "valid_dtyp": 320, "devcloneditem": 323, "devclonedit": 324, "devclonednest": 325, "devdistitem": 326, "devdistit": 327, "devdistnest": 328, "devmapp": 330, "devmappermultiproc": 331, "multidevitem": 333, "multidevit": 334, "multidevnest": 335, "profil": 336, "as_ivy_dev": 337, "as_native_dev": 338, "clear_mem_on_dev": 339, "default_devic": 340, "dev": 341, "dev_clon": 342, "dev_clone_arrai": 343, "dev_clone_it": 344, "dev_clone_nest": 345, "dev_dist": 346, "dev_dist_arrai": 347, "dev_dist_it": 348, "dev_dist_nest": 349, "dev_unifi": 350, "dev_unify_arrai": 351, "dev_unify_it": 352, "dev_unify_nest": 353, "dev_util": 354, "get_all_ivy_arrays_on_dev": 355, "gpu_is_avail": 356, "num_cpu_cor": 357, "num_gpu": 358, "num_ivy_arrays_on_dev": 359, "percent_used_mem_on_dev": 360, "print_all_ivy_arrays_on_dev": 361, "set_default_devic": 362, "set_split_factor": 363, "split_factor": 364, "split_func_cal": 365, "to_devic": 366, "total_mem_on_dev": 367, "tpu_is_avail": 368, "unset_default_devic": 369, "used_mem_on_dev": 370, "ab": [372, 373, 374, 375], "static_ab": 376, "aco": [377, 378, 379, 380], "acosh": [381, 382, 383, 384], "static_add": 389, "asin": [390, 391, 392, 393], "asinh": [394, 395, 396, 397], "static_asinh": 398, "atan": [399, 400, 401, 402], "atan2": [403, 404, 405, 406], "atanh": [407, 408, 409, 410], "bitwise_and": [411, 412, 413, 414], "bitwise_invert": [415, 416, 417, 418], "bitwise_left_shift": [419, 420, 421, 422], "bitwise_or": [423, 424, 425, 426], "bitwise_right_shift": [427, 428, 429, 430], "bitwise_xor": [431, 432, 433, 434], "ceil": [435, 436, 437, 438], "co": [439, 440, 441, 442], "static_co": 443, "cosh": [444, 445, 446, 447], "divid": [448, 449, 450, 451], "static_divid": 452, "equal": [453, 454, 455, 456], "erf": [457, 458, 459, 460], "exp": [461, 462, 463, 464], "expm1": [465, 466, 467, 468], "floor": [469, 470, 471, 472], "floor_divid": [473, 474, 475, 476], "greater": [477, 478, 479, 480], "greater_equ": [481, 482, 483, 484], "isfinit": [485, 486, 487, 488], "isinf": [489, 490, 491, 492], "isnan": [493, 494, 495, 496], "less": [497, 498, 499, 500], "less_equ": [501, 502, 503, 504], "log": [505, 506, 507, 508], "log10": [509, 510, 511, 512], "log1p": [513, 514, 515, 516], "log2": [517, 518, 519, 520], "logaddexp": [521, 522, 523, 524], "logical_and": [525, 526, 527, 528], "logical_not": [529, 530, 531, 532], "logical_or": [533, 534, 535, 536], "logical_xor": [537, 538, 539, 540], "maximum": 541, "minimum": 542, "multipli": [543, 544, 545, 546], "static_multipli": 547, "neg": [548, 549, 550, 551], "not_equ": [552, 553, 554, 555], "posit": [556, 557, 558, 559], "pow": [560, 561, 562, 563], "remaind": [564, 565, 566, 567], "round": [568, 569, 570, 571], "sign": [572, 573, 574, 575], "static_sign": 576, "sin": [577, 578, 579, 580], "static_sin": 581, "sinh": [582, 583, 584, 585], "static_sinh": 586, "sqrt": [587, 588, 589, 590], "squar": [591, 592, 593, 594], "subtract": [595, 597, 598, 599], "static_subtract": 596, "static_tan": 601, "static_tanh": 606, "trunc": [610, 611, 612, 613], "all_equ": [615, 616, 617, 618], "static_all_equ": 619, "arg_info": 620, "arg_nam": 621, "array_equ": 622, "arrays_equ": 623, "assert_supports_inplac": 624, "cache_fn": 625, "clip_matrix_norm": 626, "clip_vector_norm": [627, 628, 629], "container_typ": 630, "copy_arrai": 631, "cumprod": 632, "cumsum": 633, "current_backend_str": 634, "default": 635, "einops_rearrang": 636, "einops_reduc": 637, "einops_repeat": 638, "exist": 639, "floormod": 640, "fourier_encod": 641, "gather": 642, "gather_nd": [643, 644, 645, 646], "static_gather_nd": 647, "get_all_arrays_in_memori": 648, "get_min_bas": 649, "get_min_denomin": 650, "get_num_dim": 651, "get_referrers_recurs": 652, "has_nan": 653, "indices_wher": 654, "inplace_arrays_support": 655, "inplace_decr": 656, "inplace_incr": 657, "inplace_upd": 658, "inplace_variables_support": 659, "is_arrai": 660, "is_ivy_arrai": 661, "is_ivy_contain": 662, "is_native_arrai": 663, "match_kwarg": 664, "multiprocess": 665, "num_arrays_in_memori": 666, "one_hot": 667, "print_all_arrays_in_memori": 668, "queue_timeout": 669, "scatter_flat": 670, "scatter_nd": 671, "set_min_bas": 672, "set_min_denomin": 673, "set_queue_timeout": 674, "set_shape_array_mod": 675, "set_tmp_dir": 676, "shape_array_mod": 678, "shape_to_tupl": 679, "stable_divid": 680, "stable_pow": 681, "supports_inplac": 682, "tmp_dir": 683, "to_list": 684, "to_numpi": [685, 687, 688, 689], "static_to_numpi": 686, "to_scalar": 690, "try_else_non": 691, "unset_shape_array_mod": 692, "unstack": 693, "value_is_nan": 694, "adam_step": [697, 698, 699, 700], "static_adam_step": 701, "adam_upd": [702, 703, 704], "static_adam_upd": 705, "execute_with_gradi": 706, "gradient_descent_upd": [707, 708, 709], "static_gradient_descent_upd": 710, "is_vari": [711, 712, 713, 714], "static_is_vari": 715, "lamb_upd": [716, 717, 718], "static_lamb_upd": 719, "lars_upd": [720, 721, 722], "static_lars_upd": 723, "optimizer_upd": [724, 725, 726], "static_optimizer_upd": 727, "set_with_grad": 728, "stop_gradi": 729, "unset_with_grad": 730, "variable_data": 732, "with_grad": 733, "conv1d": [735, 1043], "conv1d_transpos": 736, "conv2d": [737, 1045], "conv2d_transpos": 738, "conv3d": [739, 1047], "conv3d_transpos": 740, "depthwise_conv2d": [741, 742, 743, 744], "static_depthwise_conv2d": 745, "dropout": [746, 1050], "lstm_updat": 748, "multi_head_attent": 749, "scaled_dot_product_attent": 750, "choleski": [752, 753, 754, 755], "static_choleski": 756, "cross": [757, 758, 759], "det": [760, 761, 762], "diagon": [763, 764, 765], "eigh": [766, 767, 768], "eigvalsh": [769, 770, 771], "inv": [772, 773, 774], "matmul": [775, 776, 777, 778], "matrix_norm": [779, 780, 781], "matrix_pow": 782, "matrix_rank": [783, 784, 785], "matrix_transpos": [786, 787, 788], "outer": [789, 790, 791], "pinv": [792, 793, 794], "qr": [795, 796, 797], "slogdet": 798, "solv": [799, 800, 801], "svd": [802, 803, 804], "svdval": [805, 806, 807], "tensordot": [808, 809, 810], "trace": [811, 812, 813], "vecdot": [814, 815, 816], "vector_norm": [817, 818, 819], "vector_to_skew_symmetric_matrix": [820, 821, 822], "binary_cross_entropi": [824, 825, 826, 827], "static_binary_cross_entropi": 828, "cross_entropi": [829, 830, 831, 832], "static_cross_entropi": 833, "sparse_cross_entropi": [834, 835, 836, 837], "static_sparse_cross_entropi": 838, "clip": [840, 841, 842, 843], "static_clip": 844, "concat": [845, 846, 847, 848], "constant_pad": [849, 850, 851, 852], "expand_dim": [853, 854, 855, 856], "flip": [857, 858, 859, 860], "permute_dim": [861, 862, 863, 864], "repeat": [865, 866, 867, 868], "reshap": [869, 870, 871, 872], "static_rol": 877, "split": 878, "squeez": [879, 880, 881, 882], "stack": [883, 884, 885, 886], "swapax": [887, 888, 889, 890], "tile": [891, 892, 893, 894], "zero_pad": [895, 896, 897, 898], "meta": 899, "fomaml_step": 900, "maml_step": 901, "reptile_step": 902, "nest": 903, "all_nested_indic": 904, "copy_nest": 905, "index_nest": 906, "insert_into_nest_at_index": 907, "insert_into_nest_at_indic": 908, "map": 909, "map_nest_at_index": 910, "map_nest_at_indic": 911, "multi_index_nest": 912, "nested_ani": 913, "nested_indices_wher": 914, "nested_map": 915, "nested_multi_map": 916, "prune_nest_at_index": 917, "prune_nest_at_indic": 918, "set_nest_at_index": 919, "set_nest_at_indic": 920, "layer_norm": [922, 923, 924, 925], "static_layer_norm": 926, "multinomi": 928, "randint": [929, 930], "static_randint": 931, "random_norm": 932, "random_uniform": [933, 934, 935], "static_random_uniform": 936, "seed": 937, "shuffl": 938, "argmax": 940, "argmin": 941, "nonzero": 942, "where": 943, "depend": [944, 945, 949, 950, 954, 960, 964], "output": [944, 945, 949, 950, 954, 960, 964], "unique_al": [945, 947, 948, 949], "static_unique_al": 946, "unique_count": [950, 952, 953, 954], "static_unique_count": 951, "unique_invers": [955, 957, 958, 959], "static_unique_invers": 956, "unique_valu": [960, 962, 963, 964], "static_unique_valu": 961, "argsort": [966, 967, 968, 969], "static_argsort": 970, "static_sort": 975, "einsum": [977, 978, 979, 980], "max": [981, 982, 983, 984], "mean": [985, 986, 987, 988], "min": [989, 990, 991, 992], "prod": [993, 994, 995, 996], "std": [997, 998, 999, 1000], "sum": [1001, 1002, 1003, 1004], "var": [1005, 1006, 1007, 1008], "all": [1010, 1011, 1012, 1013], "static_al": 1014, "ani": [1015, 1016, 1017, 1018], "static_ani": 1019, "content": 1020, "overview": 1020, "quick": 1020, "start": 1020, "roadmap": [1020, 1026], "citat": 1020, "inspect": 1023, "add_array_spec": 1024, "fn_array_spec": 1025, "geglu": 1029, "to_ivy_modul": 1032, "firstlayersiren": 1035, "glorotuniform": 1036, "Ones": 1038, "siren": 1039, "conv1dtranspos": 1044, "conv2dtranspos": 1046, "conv3dtranspos": 1048, "depthwiseconv2d": 1049, "lstm": 1051, "multiheadattent": 1053, "layernorm": 1057, "adam": 1059, "lamb": 1060, "lar": 1061, "sgd": 1063, "sequenti": [1064, 1065], "verbos": 1067, "cprint": 1068}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})