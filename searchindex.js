Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/adam_step", "array/array_methods/add", "array/array_methods/add_ivy_array_instance_methods", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argsort", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/cholesky", "array/array_methods/clip", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross", "array/array_methods/cross_entropy", "array/array_methods/det", "array/array_methods/diagonal", "array/array_methods/divide", "array/array_methods/eigh", "array/array_methods/eigvalsh", "array/array_methods/einsum", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/gather_nd", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/inv", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/layer_norm", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/matrix_norm", "array/array_methods/matrix_rank", "array/array_methods/matrix_transpose", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/min", "array/array_methods/multiply", "array/array_methods/negative", "array/array_methods/not_equal", "array/array_methods/outer", "array/array_methods/permute_dims", "array/array_methods/pinv", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/qr", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/solve", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/svd", "array/array_methods/svdvals", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tensordot", "array/array_methods/tile", "array/array_methods/trace", "array/array_methods/trunc", "array/array_methods/var", "array/array_methods/vecdot", "array/array_methods/vector_norm", "array/array_methods/vector_to_skew_symmetric_matrix", "array/array_methods/zero_pad", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_step", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/add_ivy_container_instance_methods", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/at_dev", "container/container_methods/at_devs", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/cholesky", "container/container_methods/clip", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross_entropy", "container/container_methods/divide", "container/container_methods/einsum", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/gather_nd", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/is_variable", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/max", "container/container_methods/mean", "container/container_methods/min", "container/container_methods/multiply", "container/container_methods/negative", "container/container_methods/not_equal", "container/container_methods/optimizer_update", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/random_uniform", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stack", "container/container_methods/static_abs", "container/container_methods/static_adam_step", "container/container_methods/static_adam_update", "container/container_methods/static_add", "container/container_methods/static_all_equal", "container/container_methods/static_argsort", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_can_cast", "container/container_methods/static_cholesky", "container/container_methods/static_clip", "container/container_methods/static_cross_entropy", "container/container_methods/static_divide", "container/container_methods/static_gather_nd", "container/container_methods/static_gradient_descent_update", "container/container_methods/static_is_variable", "container/container_methods/static_lamb_update", "container/container_methods/static_lars_update", "container/container_methods/static_multiply", "container/container_methods/static_optimizer_update", "container/container_methods/static_randint", "container/container_methods/static_random_uniform", "container/container_methods/static_roll", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_subtract", "container/container_methods/static_tan", "container/container_methods/static_tanh", "container/container_methods/std", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tile", "container/container_methods/trunc", "container/container_methods/var", "container/container_methods/zero_pad", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/adam_step.rst", "array/array_methods/add.rst", "array/array_methods/add_ivy_array_instance_methods.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argsort.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/cholesky.rst", "array/array_methods/clip.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/det.rst", "array/array_methods/diagonal.rst", "array/array_methods/divide.rst", "array/array_methods/eigh.rst", "array/array_methods/eigvalsh.rst", "array/array_methods/einsum.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/gather_nd.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/inv.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/layer_norm.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/matrix_norm.rst", "array/array_methods/matrix_rank.rst", "array/array_methods/matrix_transpose.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/min.rst", "array/array_methods/multiply.rst", "array/array_methods/negative.rst", "array/array_methods/not_equal.rst", "array/array_methods/outer.rst", "array/array_methods/permute_dims.rst", "array/array_methods/pinv.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/qr.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/solve.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/svd.rst", "array/array_methods/svdvals.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tensordot.rst", "array/array_methods/tile.rst", "array/array_methods/trace.rst", "array/array_methods/trunc.rst", "array/array_methods/var.rst", "array/array_methods/vecdot.rst", "array/array_methods/vector_norm.rst", "array/array_methods/vector_to_skew_symmetric_matrix.rst", "array/array_methods/zero_pad.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_step.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/add_ivy_container_instance_methods.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/at_dev.rst", "container/container_methods/at_devs.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/cholesky.rst", "container/container_methods/clip.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/divide.rst", "container/container_methods/einsum.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/gather_nd.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/is_variable.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/max.rst", "container/container_methods/mean.rst", "container/container_methods/min.rst", "container/container_methods/multiply.rst", "container/container_methods/negative.rst", "container/container_methods/not_equal.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/random_uniform.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stack.rst", "container/container_methods/static_abs.rst", "container/container_methods/static_adam_step.rst", "container/container_methods/static_adam_update.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_cholesky.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_gather_nd.rst", "container/container_methods/static_gradient_descent_update.rst", "container/container_methods/static_is_variable.rst", "container/container_methods/static_lamb_update.rst", "container/container_methods/static_lars_update.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_optimizer_update.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_tan.rst", "container/container_methods/static_tanh.rst", "container/container_methods/std.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tile.rst", "container/container_methods/trunc.rst", "container/container_methods/var.rst", "container/container_methods/zero_pad.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array methods", "abs array", "acos array", "acosh array", "adam_step array", "add array", "add_ivy_array_instance_methods array", "all array", "all_equal array", "any array", "argsort array", "asin array", "asinh array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "can_cast array", "ceil array", "cholesky array", "clip array", "concat array", "constant_pad array", "cos array", "cosh array", "cross array", "cross_entropy array", "det array", "diagonal array", "divide array", "eigh array", "eigvalsh array", "einsum array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "flip array", "floor array", "floor_divide array", "gather_nd array", "greater array", "greater_equal array", "inv array", "isfinite array", "isinf array", "isnan array", "layer_norm array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "matrix_norm array", "matrix_rank array", "matrix_transpose array", "max array", "mean array", "min array", "multiply array", "negative array", "not_equal array", "outer array", "permute_dims array", "pinv array", "positive array", "pow array", "prod array", "qr array", "remainder array", "repeat array", "reshape array", "roll array", "round array", "sign array", "sin array", "sinh array", "solve array", "sort array", "sparse_cross_entropy array", "sqrt array", "square array", "squeeze array", "stack array", "std array", "subtract array", "sum array", "svd array", "svdvals array", "swapaxes array", "tan array", "tanh array", "tensordot array", "tile array", "trace array", "trunc array", "var array", "vecdot array", "vector_norm array", "vector_to_skew_symmetric_matrix array", "zero_pad array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Container methods", "abs container", "acos container", "acosh container", "adam_step container", "adam_update container", "add container", "add_ivy_container_instance_methods container", "all container", "all_equal container", "any container", "argsort container", "asin container", "asinh container", "at_dev container", "at_devs container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "can_cast container", "ceil container", "cholesky container", "clip container", "clip_vector_norm container", "concat container", "constant_pad container", "cos container", "cosh container", "cross_entropy container", "divide container", "einsum container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "flip container", "floor container", "floor_divide container", "gather_nd container", "gradient_descent_update container", "greater container", "greater_equal container", "is_variable container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "max container", "mean container", "min container", "multiply container", "negative container", "not_equal container", "optimizer_update container", "permute_dims container", "positive container", "pow container", "prod container", "random_uniform container", "remainder container", "repeat container", "reshape container", "roll container", "round container", "sign container", "sin container", "sinh container", "sort container", "sparse_cross_entropy container", "sqrt container", "square container", "squeeze container", "stack container", "static_abs container", "static_adam_step container", "static_adam_update container", "static_add container", "static_all_equal container", "static_argsort container", "static_binary_cross_entropy container", "static_can_cast container", "static_cholesky container", "static_clip container", "static_cross_entropy container", "static_divide container", "static_gather_nd container", "static_gradient_descent_update container", "static_is_variable container", "static_lamb_update container", "static_lars_update container", "static_multiply container", "static_optimizer_update container", "static_randint container", "static_random_uniform container", "static_roll container", "static_sort container", "static_sparse_cross_entropy container", "static_subtract container", "static_tan container", "static_tanh container", "std container", "subtract container", "sum container", "swapaxes container", "tan container", "tanh container", "tile container", "trunc container", "var container", "zero_pad container", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 2, 8, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 172, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 280, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 361, 362, 364, 368, 369, 370, 371, 373, 375, 376, 378, 379, 380, 390, 391, 392, 433, 456, 470, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 758, 765, 802, 808, 827, 832, 834, 836, 838, 868, 1035, 1037, 1047, 1070, 1073, 1133, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 361, 363, 365, 366, 367, 369, 370, 371, 372, 373, 374, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 526, 530, 534, 539, 543, 547, 551, 555, 559, 563, 567, 571, 575, 579, 583, 587, 591, 595, 600, 604, 608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 680, 684, 688, 689, 690, 695, 699, 703, 707, 711, 715, 719, 723, 727, 731, 735, 739, 744, 749, 754, 758, 759, 764, 765, 766, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 839, 843, 844, 848, 852, 856, 860, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 889, 892, 895, 898, 901, 904, 907, 911, 914, 915, 918, 921, 924, 927, 930, 931, 934, 937, 940, 943, 946, 949, 952, 955, 956, 961, 966, 971, 972, 977, 981, 985, 989, 993, 997, 1001, 1005, 1010, 1011, 1015, 1019, 1023, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1058, 1059, 1060, 1063, 1064, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1086, 1091, 1092, 1096, 1100, 1104, 1108, 1112, 1116, 1120, 1124, 1125, 1129, 1133, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180], "arrai": [0, 1, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 179, 180, 181, 182, 183, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 392, 393, 401, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 439, 440, 441, 442, 444, 445, 446, 451, 453, 456, 458, 459, 461, 465, 470, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 504, 508, 510, 514, 515, 520, 521, 523, 524, 525, 526, 529, 530, 533, 534, 536, 537, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 585, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 618, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 745, 747, 748, 749, 750, 752, 753, 754, 757, 758, 759, 761, 762, 763, 766, 767, 768, 770, 771, 773, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 804, 805, 807, 810, 811, 812, 814, 815, 820, 821, 824, 826, 827, 828, 830, 831, 832, 834, 836, 837, 838, 839, 841, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 974, 975, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1047, 1048, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1136, 1138, 1154, 1162, 1165], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 368, 369, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180], "base": [0, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 177, 178, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 356, 364, 367, 369, 375, 391, 414, 424, 433, 470, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 520, 608, 652, 655, 656, 659, 660, 663, 664, 667, 707, 710, 758, 793, 816, 823, 832, 1075, 1076, 1077, 1079, 1091, 1092, 1095, 1119, 1140, 1141, 1142, 1145, 1147, 1148, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177], "abc": [0, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 179, 180, 377, 470, 479, 485, 758, 783, 1166, 1167, 1170, 1174], "activ": [1, 2, 8, 158, 159, 178, 184, 191, 352, 353, 355, 356, 358, 360, 379, 404, 405, 406, 407, 408, 409, 410, 1133, 1141, 1142], "support": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 361, 362, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 380, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1137, 1138, 1139, 1141, 1142, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1180], "framework": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 359, 363, 365, 366, 367, 368, 371, 373, 374, 377, 380, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1180], "array_method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 442, 443, 521, 522, 527, 530, 531, 535, 539, 540, 543, 544, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 575, 576, 579, 580, 583, 584, 588, 592, 596, 601, 604, 605, 609, 612, 613, 617, 620, 621, 625, 628, 629, 632, 633, 636, 637, 640, 641, 644, 645, 648, 649, 652, 653, 656, 657, 660, 661, 664, 665, 668, 669, 672, 673, 676, 677, 680, 681, 684, 685, 690, 691, 695, 696, 699, 700, 703, 704, 707, 708, 711, 712, 715, 716, 719, 720, 723, 724, 727, 728, 731, 732, 735, 736, 739, 741, 746, 751, 754, 755, 759, 760, 787, 788, 834, 835, 884, 885, 889, 890, 893, 895, 896, 898, 899, 901, 902, 905, 906, 907, 908, 911, 912, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 932, 935, 936, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 952, 953, 956, 957, 961, 962, 966, 967, 972, 973, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 998, 1001, 1002, 1005, 1006, 1011, 1012, 1015, 1016, 1019, 1020, 1023, 1024, 1027, 1028, 1054, 1055, 1081, 1082, 1086, 1087, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1117, 1120, 1121, 1125, 1126, 1129, 1130], "ab": [2, 128, 129, 184, 279, 322, 323, 364, 367, 520, 525, 707, 710, 883, 949, 951, 1133], "self": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 179, 180, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 368, 369, 375, 377, 378, 379, 380, 442, 443, 444, 470, 521, 522, 523, 527, 528, 529, 530, 531, 532, 535, 536, 537, 539, 540, 541, 543, 544, 545, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 563, 564, 565, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 585, 588, 589, 590, 592, 593, 594, 596, 597, 598, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 617, 618, 619, 620, 621, 622, 625, 626, 627, 628, 629, 630, 632, 633, 634, 636, 637, 638, 640, 641, 642, 644, 645, 646, 648, 649, 650, 652, 653, 654, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 686, 690, 691, 692, 695, 696, 697, 699, 700, 701, 703, 704, 705, 707, 708, 709, 711, 712, 713, 715, 716, 717, 719, 720, 721, 723, 724, 725, 727, 728, 729, 731, 732, 733, 735, 736, 737, 739, 741, 742, 746, 747, 748, 751, 752, 753, 754, 755, 756, 759, 760, 761, 771, 772, 787, 788, 789, 834, 835, 836, 839, 840, 844, 845, 848, 849, 852, 853, 856, 857, 860, 861, 884, 885, 886, 889, 890, 893, 895, 896, 898, 899, 901, 902, 905, 906, 907, 908, 909, 911, 912, 915, 916, 918, 919, 921, 922, 924, 925, 927, 928, 930, 931, 932, 935, 936, 937, 938, 940, 941, 943, 944, 946, 947, 949, 950, 952, 953, 956, 957, 958, 961, 962, 963, 966, 967, 968, 972, 973, 974, 977, 978, 979, 981, 982, 983, 985, 986, 987, 989, 990, 991, 993, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1054, 1055, 1056, 1064, 1065, 1081, 1082, 1083, 1086, 1087, 1088, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1102, 1104, 1105, 1106, 1108, 1109, 1110, 1112, 1113, 1114, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1129, 1130, 1131, 1133, 1170, 1174], "out": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 174, 175, 176, 179, 180, 181, 182, 184, 185, 186, 187, 190, 192, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 284, 285, 287, 288, 289, 290, 291, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 322, 323, 324, 325, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 377, 378, 379, 380, 391, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 439, 441, 470, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 770, 771, 772, 773, 775, 776, 777, 780, 781, 782, 784, 786, 787, 788, 789, 790, 791, 798, 811, 814, 815, 832, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1074, 1075, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1154, 1162], "none": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 160, 162, 165, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 360, 362, 365, 369, 370, 371, 372, 373, 375, 377, 379, 380, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 439, 441, 442, 444, 446, 448, 449, 450, 453, 456, 470, 479, 480, 488, 489, 512, 513, 514, 515, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 763, 764, 770, 771, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 796, 798, 799, 803, 809, 811, 814, 815, 816, 817, 822, 823, 829, 832, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1041, 1046, 1047, 1048, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1143, 1144, 1145, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177], "instanc": [2, 3, 6, 7, 8, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 158, 159, 179, 180, 181, 182, 184, 185, 188, 190, 191, 193, 210, 211, 212, 213, 228, 230, 268, 280, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 352, 353, 357, 361, 362, 364, 365, 368, 370, 372, 373, 378, 379, 380, 393, 401, 403, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 443, 444, 445, 470, 479, 511, 520, 521, 522, 523, 524, 534, 535, 536, 539, 542, 550, 555, 559, 562, 579, 582, 583, 584, 585, 586, 591, 603, 616, 617, 618, 620, 627, 628, 631, 668, 688, 689, 695, 698, 699, 702, 715, 718, 731, 734, 735, 738, 744, 746, 747, 749, 751, 752, 753, 758, 759, 760, 761, 775, 786, 787, 788, 789, 802, 826, 828, 834, 835, 836, 838, 870, 873, 876, 882, 883, 884, 885, 886, 887, 889, 891, 892, 955, 956, 959, 971, 972, 973, 974, 985, 988, 989, 992, 997, 1000, 1005, 1006, 1007, 1008, 1010, 1019, 1022, 1053, 1054, 1057, 1058, 1063, 1064, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1092, 1095, 1096, 1099, 1119, 1124, 1125, 1128, 1143, 1144], "variant": [2, 3, 6, 7, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 361, 362, 442, 443, 444, 446, 521, 522, 523, 525, 535, 536, 538, 550, 555, 583, 584, 585, 617, 618, 620, 668, 745, 746, 747, 750, 751, 752, 753, 759, 760, 761, 763, 787, 788, 789, 791, 834, 835, 836, 838, 884, 885, 886, 888, 972, 973, 974, 976, 1005, 1006, 1007, 1009, 1060, 1062], "thi": [2, 3, 6, 7, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 391, 392, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 442, 443, 444, 445, 446, 470, 494, 498, 502, 509, 514, 519, 520, 521, 522, 523, 524, 525, 534, 535, 536, 538, 539, 542, 550, 555, 559, 562, 575, 578, 579, 582, 583, 584, 585, 586, 591, 612, 615, 616, 617, 618, 620, 668, 676, 679, 680, 683, 699, 702, 711, 714, 715, 718, 731, 734, 735, 738, 744, 745, 746, 747, 749, 750, 751, 752, 753, 758, 759, 760, 761, 763, 785, 786, 787, 788, 789, 791, 802, 813, 818, 832, 834, 835, 836, 838, 839, 841, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 868, 870, 873, 879, 882, 883, 884, 885, 886, 888, 892, 894, 911, 913, 930, 971, 972, 973, 974, 976, 985, 988, 989, 992, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1015, 1018, 1035, 1041, 1047, 1048, 1053, 1054, 1057, 1060, 1062, 1070, 1071, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1091, 1096, 1099, 1100, 1103, 1112, 1115, 1120, 1123, 1124, 1125, 1128, 1133, 1139, 1166, 1167, 1170, 1171, 1172, 1173, 1174, 1175], "simpli": [2, 3, 6, 7, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 179, 180, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 356, 361, 362, 364, 365, 368, 369, 371, 372, 373, 375, 379, 380, 442, 443, 444, 446, 520, 521, 522, 523, 525, 535, 536, 538, 550, 555, 583, 584, 585, 612, 615, 617, 618, 620, 668, 745, 746, 747, 750, 751, 752, 753, 759, 760, 761, 763, 787, 788, 789, 791, 834, 835, 836, 838, 884, 885, 886, 888, 972, 973, 974, 976, 1005, 1006, 1007, 1009, 1060, 1062], "wrap": [2, 3, 6, 7, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 117, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 159, 179, 180, 181, 182, 183, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 353, 359, 361, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 377, 380, 392, 393, 401, 442, 443, 444, 446, 521, 522, 523, 525, 535, 536, 538, 550, 555, 583, 584, 585, 617, 618, 620, 668, 745, 746, 747, 750, 751, 752, 753, 758, 759, 760, 761, 763, 769, 787, 788, 789, 791, 832, 834, 835, 836, 838, 868, 884, 885, 886, 888, 972, 973, 974, 976, 1005, 1006, 1007, 1009, 1060, 1062], "function": [2, 3, 6, 7, 8, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 117, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 158, 159, 160, 164, 165, 166, 174, 179, 180, 184, 185, 188, 190, 191, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 352, 353, 356, 358, 359, 360, 361, 362, 363, 364, 366, 368, 372, 374, 376, 377, 378, 379, 390, 391, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 533, 534, 535, 536, 537, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 584, 585, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 617, 618, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 841, 843, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 973, 974, 975, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1136, 1138, 1140, 1141, 1142, 1170, 1173, 1175], "so": [2, 3, 6, 7, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 117, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 174, 175, 179, 180, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 355, 356, 360, 361, 362, 364, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 392, 393, 401, 442, 443, 444, 446, 521, 522, 523, 525, 535, 536, 538, 550, 555, 583, 584, 585, 617, 618, 620, 668, 745, 746, 747, 750, 751, 752, 753, 759, 760, 761, 763, 787, 788, 789, 791, 834, 835, 836, 838, 884, 885, 886, 888, 972, 973, 974, 976, 1005, 1006, 1007, 1009, 1035, 1036, 1046, 1060, 1062, 1133], "docstr": [2, 3, 6, 7, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 357, 358, 359, 360, 365, 369, 373, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 433, 442, 443, 444, 445, 446, 520, 521, 522, 523, 524, 525, 534, 535, 536, 538, 539, 542, 550, 555, 559, 562, 579, 582, 583, 584, 585, 586, 591, 616, 617, 618, 620, 668, 699, 702, 715, 718, 731, 734, 735, 738, 744, 745, 746, 747, 749, 750, 751, 752, 753, 759, 760, 761, 763, 787, 788, 789, 791, 834, 835, 836, 838, 883, 884, 885, 886, 888, 892, 971, 972, 973, 974, 976, 985, 988, 989, 992, 1005, 1006, 1007, 1008, 1009, 1060, 1062, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1124, 1125, 1128], "also": [2, 3, 6, 7, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 174, 175, 179, 180, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 354, 355, 356, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 392, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 443, 444, 445, 446, 520, 521, 522, 523, 524, 525, 534, 535, 536, 538, 539, 542, 550, 555, 559, 562, 579, 582, 583, 584, 585, 586, 591, 616, 617, 618, 620, 668, 699, 702, 715, 718, 731, 734, 735, 738, 744, 745, 746, 747, 749, 750, 751, 752, 753, 758, 759, 760, 761, 763, 786, 787, 788, 789, 791, 802, 832, 834, 835, 836, 838, 839, 841, 870, 873, 879, 882, 883, 884, 885, 886, 888, 892, 971, 972, 973, 974, 976, 985, 988, 989, 992, 1005, 1006, 1007, 1008, 1009, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1045, 1046, 1047, 1053, 1054, 1057, 1060, 1062, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1124, 1125, 1128, 1154, 1164], "appli": [2, 3, 6, 7, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 117, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 179, 180, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 355, 356, 357, 361, 362, 364, 365, 367, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 390, 392, 403, 404, 405, 406, 407, 408, 409, 410, 433, 442, 443, 444, 446, 461, 521, 522, 523, 525, 535, 536, 538, 550, 555, 583, 584, 585, 617, 618, 620, 668, 745, 746, 747, 750, 751, 752, 753, 758, 759, 760, 761, 763, 780, 781, 782, 787, 788, 789, 791, 832, 834, 835, 836, 838, 852, 854, 856, 858, 870, 879, 881, 882, 883, 884, 885, 886, 888, 906, 915, 917, 924, 926, 955, 956, 959, 961, 964, 966, 969, 971, 972, 973, 974, 976, 1005, 1006, 1007, 1009, 1015, 1018, 1031, 1032, 1033, 1035, 1041, 1044, 1047, 1048, 1053, 1054, 1057, 1060, 1062, 1133, 1140, 1141, 1142, 1168, 1169], "minim": [2, 3, 6, 7, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 361, 372, 375, 442, 443, 444, 446, 521, 522, 523, 525, 535, 536, 538, 550, 555, 583, 584, 585, 617, 618, 620, 668, 745, 746, 747, 750, 751, 752, 753, 759, 760, 761, 763, 787, 788, 789, 791, 834, 835, 836, 838, 884, 885, 886, 888, 972, 973, 974, 976, 1005, 1006, 1007, 1009, 1060, 1062], "chang": [2, 3, 6, 7, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 176, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 355, 356, 357, 358, 361, 363, 364, 369, 375, 379, 392, 442, 443, 444, 446, 470, 521, 522, 523, 525, 535, 536, 538, 550, 555, 583, 584, 585, 617, 618, 620, 668, 745, 746, 747, 750, 751, 752, 753, 759, 760, 761, 763, 787, 788, 789, 791, 834, 835, 836, 838, 883, 884, 885, 886, 888, 889, 891, 971, 972, 973, 974, 976, 1001, 1004, 1005, 1006, 1007, 1009, 1035, 1037, 1047, 1060, 1062, 1133, 1139], "exampl": [2, 3, 6, 7, 8, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 158, 159, 160, 164, 165, 166, 172, 176, 181, 182, 184, 185, 188, 190, 191, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 352, 353, 355, 356, 357, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 378, 379, 380, 391, 392, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 421, 422, 425, 427, 428, 431, 432, 433, 439, 442, 443, 444, 445, 446, 454, 455, 470, 489, 490, 492, 504, 505, 506, 507, 508, 511, 513, 515, 517, 518, 520, 521, 522, 523, 524, 525, 534, 535, 536, 538, 539, 542, 550, 555, 558, 559, 562, 563, 566, 575, 578, 579, 582, 583, 584, 585, 586, 587, 591, 603, 608, 616, 617, 618, 620, 624, 627, 628, 631, 644, 647, 668, 688, 689, 695, 698, 699, 702, 715, 718, 731, 734, 735, 738, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 766, 767, 775, 776, 783, 786, 787, 788, 789, 790, 791, 794, 805, 820, 821, 826, 827, 828, 832, 834, 835, 836, 837, 838, 870, 871, 873, 875, 876, 877, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 895, 897, 904, 915, 917, 921, 923, 934, 940, 942, 943, 945, 955, 956, 959, 961, 964, 966, 969, 971, 972, 973, 974, 975, 976, 977, 980, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1092, 1095, 1112, 1115, 1116, 1119, 1124, 1125, 1128, 1133], "us": [2, 3, 8, 128, 129, 158, 159, 160, 165, 172, 175, 176, 179, 180, 181, 182, 183, 184, 185, 191, 322, 323, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 391, 392, 403, 405, 406, 407, 408, 409, 410, 413, 433, 452, 470, 479, 480, 505, 509, 512, 513, 514, 515, 517, 519, 520, 521, 522, 523, 539, 542, 559, 562, 579, 582, 591, 603, 627, 628, 631, 688, 689, 695, 698, 699, 702, 715, 718, 731, 734, 758, 786, 793, 794, 808, 814, 815, 816, 817, 822, 823, 832, 834, 837, 839, 841, 852, 854, 856, 858, 870, 876, 878, 879, 881, 882, 883, 884, 887, 892, 895, 897, 911, 913, 955, 956, 959, 971, 985, 988, 989, 992, 997, 1000, 1005, 1008, 1019, 1022, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1044, 1045, 1046, 1048, 1053, 1054, 1057, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1091, 1092, 1095, 1119, 1124, 1125, 1128, 1133, 1154, 1162, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173], "x": [2, 3, 7, 25, 26, 27, 28, 47, 49, 88, 99, 106, 107, 117, 120, 121, 124, 125, 128, 129, 130, 131, 138, 139, 142, 143, 160, 164, 172, 179, 180, 181, 182, 184, 185, 190, 210, 211, 212, 213, 228, 230, 268, 278, 279, 282, 284, 286, 287, 288, 291, 293, 298, 300, 301, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 346, 347, 358, 360, 361, 362, 365, 366, 369, 372, 373, 375, 377, 378, 379, 380, 403, 404, 405, 406, 407, 408, 409, 410, 414, 416, 418, 420, 422, 425, 426, 428, 429, 430, 431, 432, 433, 439, 441, 442, 443, 444, 445, 446, 451, 470, 489, 490, 491, 492, 495, 496, 504, 508, 513, 515, 520, 521, 522, 523, 524, 525, 526, 529, 530, 533, 534, 535, 536, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 579, 582, 583, 584, 585, 586, 587, 590, 591, 594, 603, 604, 607, 608, 612, 615, 616, 617, 618, 620, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 652, 655, 656, 659, 660, 663, 664, 667, 668, 676, 679, 688, 689, 695, 698, 703, 706, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 757, 758, 766, 767, 768, 770, 771, 773, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 797, 798, 800, 801, 802, 804, 805, 806, 807, 811, 820, 821, 824, 826, 827, 828, 830, 831, 832, 843, 848, 850, 851, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 911, 913, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 934, 936, 937, 939, 940, 942, 943, 945, 949, 951, 955, 956, 959, 961, 964, 966, 969, 971, 972, 973, 974, 975, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1035, 1036, 1041, 1045, 1046, 1047, 1053, 1054, 1057, 1058, 1060, 1061, 1062, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1085, 1086, 1089, 1090, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1154, 1165], "2": [2, 3, 6, 7, 10, 25, 26, 27, 28, 36, 47, 49, 88, 106, 107, 108, 114, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 160, 164, 179, 180, 181, 182, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 355, 356, 358, 362, 366, 369, 373, 374, 375, 377, 378, 379, 380, 392, 403, 405, 406, 407, 408, 410, 413, 414, 421, 422, 425, 427, 428, 432, 433, 439, 442, 443, 444, 445, 446, 470, 489, 490, 492, 504, 506, 508, 515, 520, 521, 522, 523, 524, 525, 534, 535, 536, 538, 539, 542, 547, 550, 551, 554, 555, 559, 562, 563, 566, 575, 578, 579, 582, 583, 584, 585, 586, 587, 591, 603, 608, 616, 617, 618, 620, 624, 627, 628, 631, 644, 647, 664, 667, 668, 688, 689, 695, 698, 699, 702, 715, 718, 731, 734, 735, 738, 744, 745, 746, 747, 749, 750, 751, 752, 753, 758, 759, 760, 761, 762, 766, 767, 770, 771, 773, 776, 783, 786, 787, 788, 789, 790, 791, 805, 820, 821, 826, 832, 834, 835, 836, 837, 838, 870, 873, 874, 875, 876, 877, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 895, 896, 897, 904, 906, 907, 910, 911, 913, 915, 917, 921, 923, 924, 926, 927, 929, 934, 940, 941, 942, 943, 945, 949, 950, 951, 955, 956, 959, 966, 969, 971, 972, 973, 974, 975, 976, 977, 980, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1019, 1022, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1092, 1095, 1096, 1099, 1119, 1124, 1125, 1128, 1133], "6": [2, 3, 6, 7, 26, 28, 128, 129, 132, 133, 142, 143, 181, 182, 184, 185, 190, 211, 279, 282, 291, 298, 322, 323, 324, 325, 340, 341, 358, 362, 366, 369, 377, 378, 379, 403, 405, 406, 408, 414, 422, 470, 492, 508, 520, 521, 522, 523, 524, 525, 534, 535, 536, 538, 539, 542, 559, 562, 563, 566, 579, 582, 583, 584, 585, 586, 591, 603, 616, 627, 628, 631, 668, 688, 689, 695, 698, 715, 718, 731, 734, 735, 738, 744, 749, 758, 767, 776, 786, 787, 790, 791, 821, 826, 832, 834, 835, 837, 870, 873, 876, 877, 882, 883, 889, 891, 892, 895, 897, 921, 923, 934, 940, 942, 955, 956, 959, 966, 969, 971, 972, 973, 975, 977, 980, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1008, 1010, 1019, 1022, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1070, 1071, 1074, 1075, 1076, 1077, 1091, 1092, 1095, 1096, 1099, 1119], "1": [2, 3, 6, 7, 10, 12, 25, 26, 27, 28, 33, 34, 36, 47, 49, 56, 88, 94, 95, 106, 107, 113, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 160, 166, 172, 175, 176, 179, 180, 181, 182, 184, 185, 188, 190, 193, 195, 210, 211, 212, 213, 219, 228, 230, 240, 264, 268, 273, 274, 280, 282, 283, 284, 286, 287, 288, 289, 291, 298, 299, 300, 301, 302, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 347, 358, 362, 365, 369, 372, 373, 374, 375, 377, 378, 379, 380, 392, 403, 405, 406, 407, 408, 410, 414, 415, 422, 423, 424, 425, 427, 428, 432, 433, 439, 442, 443, 444, 445, 446, 453, 470, 474, 477, 479, 484, 489, 490, 492, 494, 498, 502, 504, 507, 508, 515, 520, 521, 522, 523, 524, 526, 529, 530, 533, 534, 535, 536, 538, 539, 542, 550, 551, 554, 555, 559, 562, 563, 566, 575, 578, 579, 582, 583, 584, 585, 586, 587, 590, 591, 594, 603, 608, 612, 615, 616, 617, 618, 620, 624, 627, 628, 631, 644, 647, 652, 655, 656, 659, 660, 663, 664, 667, 668, 688, 689, 695, 698, 699, 702, 707, 710, 715, 718, 719, 722, 723, 726, 731, 734, 735, 738, 744, 745, 746, 747, 749, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 766, 767, 775, 776, 783, 786, 787, 788, 789, 790, 791, 805, 811, 814, 815, 820, 821, 823, 826, 827, 828, 830, 832, 834, 835, 836, 837, 838, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 896, 897, 904, 915, 917, 921, 923, 931, 933, 934, 940, 942, 943, 945, 946, 947, 948, 949, 951, 955, 956, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1035, 1047, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1096, 1099, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1176, 1177], "0": [2, 3, 6, 10, 26, 27, 28, 29, 30, 36, 44, 47, 56, 88, 99, 100, 106, 107, 110, 112, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 144, 145, 154, 155, 160, 164, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 193, 210, 211, 212, 213, 215, 216, 225, 228, 238, 239, 240, 264, 268, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 294, 295, 298, 299, 300, 304, 305, 306, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 356, 360, 361, 362, 375, 377, 378, 379, 380, 403, 405, 406, 407, 408, 409, 410, 414, 415, 419, 423, 424, 428, 429, 430, 431, 432, 433, 439, 442, 444, 445, 446, 453, 470, 472, 475, 479, 482, 486, 489, 490, 492, 495, 496, 497, 498, 499, 500, 501, 502, 504, 508, 511, 513, 514, 518, 520, 521, 522, 524, 525, 526, 529, 530, 533, 534, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 567, 570, 575, 578, 579, 582, 583, 584, 585, 586, 587, 590, 591, 594, 603, 608, 612, 615, 616, 617, 618, 620, 627, 628, 631, 652, 655, 656, 659, 664, 667, 668, 688, 689, 690, 693, 695, 698, 699, 702, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 766, 767, 770, 771, 773, 775, 776, 777, 783, 786, 787, 790, 791, 796, 805, 811, 814, 815, 820, 826, 827, 828, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 873, 875, 876, 877, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 895, 896, 897, 904, 934, 940, 942, 943, 944, 945, 949, 951, 955, 956, 959, 961, 964, 966, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 992, 993, 996, 997, 1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1027, 1029, 1035, 1047, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1112, 1113, 1114, 1115, 1116, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1128, 1133, 1145, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177], "y": [2, 3, 7, 10, 26, 27, 28, 47, 49, 88, 106, 107, 128, 129, 130, 131, 138, 139, 142, 143, 181, 182, 184, 185, 190, 193, 211, 212, 213, 228, 230, 268, 279, 282, 283, 287, 288, 291, 298, 300, 304, 305, 310, 311, 322, 323, 324, 325, 332, 333, 336, 337, 340, 341, 360, 362, 366, 369, 375, 377, 403, 405, 406, 407, 408, 409, 410, 414, 421, 422, 425, 427, 428, 432, 433, 439, 470, 490, 504, 508, 513, 520, 521, 522, 523, 524, 525, 534, 535, 536, 538, 539, 542, 550, 551, 554, 555, 559, 562, 563, 566, 575, 578, 579, 582, 583, 584, 585, 586, 587, 591, 603, 608, 616, 617, 618, 620, 627, 628, 631, 668, 688, 689, 695, 698, 699, 702, 715, 718, 731, 734, 735, 738, 744, 745, 746, 747, 749, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 766, 767, 775, 776, 783, 784, 786, 787, 788, 789, 790, 791, 820, 826, 827, 828, 832, 843, 870, 876, 877, 879, 883, 884, 885, 886, 887, 888, 889, 891, 892, 904, 921, 923, 940, 942, 943, 945, 955, 956, 959, 961, 964, 966, 969, 971, 972, 973, 974, 975, 976, 977, 980, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1019, 1022, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1080, 1081, 1084, 1091, 1092, 1095, 1096, 1099, 1112, 1115, 1116, 1119, 1124, 1125, 1128], "print": [2, 3, 6, 7, 8, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 158, 159, 160, 164, 165, 166, 172, 179, 180, 181, 182, 183, 184, 185, 190, 191, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 352, 353, 355, 362, 369, 375, 377, 378, 379, 403, 405, 406, 407, 408, 409, 410, 414, 421, 422, 425, 427, 428, 431, 432, 433, 439, 442, 443, 444, 445, 446, 454, 455, 470, 490, 504, 505, 506, 507, 508, 510, 513, 517, 520, 521, 522, 523, 524, 525, 534, 535, 536, 538, 539, 542, 550, 555, 558, 559, 562, 563, 566, 575, 578, 579, 582, 583, 584, 585, 586, 587, 591, 603, 608, 616, 617, 618, 620, 624, 627, 628, 631, 644, 647, 668, 688, 689, 695, 698, 699, 702, 715, 718, 731, 734, 735, 738, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 766, 767, 775, 776, 783, 786, 787, 788, 789, 790, 791, 794, 812, 820, 821, 826, 827, 828, 832, 834, 835, 837, 838, 870, 871, 873, 875, 876, 877, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 895, 897, 904, 921, 923, 934, 940, 942, 943, 945, 955, 956, 959, 961, 964, 966, 969, 971, 972, 973, 974, 975, 976, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1014, 1019, 1022, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1092, 1095, 1096, 1099, 1112, 1115, 1116, 1119, 1124, 1125, 1128, 1133], "return": [2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 160, 164, 165, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 347, 348, 349, 350, 351, 360, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 469, 470, 479, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1045, 1046, 1047, 1048, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1136, 1138, 1143, 1144, 1154, 1163, 1164, 1170, 1174], "type": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 319, 322, 323, 324, 325, 326, 327, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 359, 360, 361, 362, 367, 368, 369, 371, 372, 373, 375, 377, 378, 380, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 469, 470, 486, 487, 488, 489, 490, 492, 502, 503, 504, 505, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 797, 798, 800, 801, 802, 804, 805, 806, 807, 811, 814, 815, 816, 817, 820, 822, 823, 824, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 839, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 862, 863, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1045, 1046, 1047, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165], "aco": [2, 128, 129, 184, 322, 323, 520, 530, 1133], "acosh": [2, 128, 129, 184, 322, 323, 433, 454, 455, 520, 529, 590, 594, 1133], "adam_step": [2, 132, 133, 184, 280, 326, 327, 832, 838], "mw": [2, 6, 132, 133, 184, 188, 280, 326, 327, 379, 832, 834, 835, 836, 837, 838, 839, 841], "vw": [2, 6, 132, 133, 184, 188, 280, 326, 327, 379, 832, 834, 835, 836, 837, 838, 839, 841], "step": [2, 6, 132, 133, 176, 179, 180, 184, 188, 189, 238, 280, 281, 294, 326, 327, 355, 356, 358, 362, 366, 368, 369, 370, 371, 375, 378, 379, 380, 391, 414, 415, 423, 424, 470, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 852, 853, 854, 855, 856, 858, 860, 862, 1031, 1032, 1033, 1034, 1133, 1170, 1171, 1172, 1173, 1174, 1175], "beta1": [2, 6, 132, 133, 184, 188, 189, 238, 280, 281, 294, 326, 327, 379, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 852, 853, 854, 855, 1170, 1171, 1172], "9": [2, 6, 7, 28, 128, 129, 132, 133, 142, 143, 181, 182, 184, 188, 189, 190, 238, 280, 281, 282, 294, 298, 322, 323, 326, 327, 340, 341, 358, 362, 378, 379, 520, 534, 535, 536, 538, 559, 562, 563, 566, 668, 688, 689, 715, 718, 731, 734, 735, 738, 758, 786, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 852, 853, 854, 855, 870, 873, 876, 877, 883, 884, 887, 889, 891, 892, 895, 897, 921, 923, 934, 940, 942, 971, 972, 973, 975, 989, 992, 997, 1000, 1005, 1008, 1010, 1058, 1059, 1060, 1061, 1062, 1070, 1074, 1075, 1076, 1091, 1092, 1095, 1119, 1170, 1171, 1172], "beta2": [2, 6, 132, 133, 184, 188, 189, 238, 280, 281, 294, 326, 327, 379, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 852, 853, 854, 855, 1170, 1171, 1172], "999": [2, 6, 132, 133, 184, 188, 189, 238, 280, 281, 294, 305, 311, 322, 323, 326, 327, 379, 520, 550, 555, 749, 750, 752, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 852, 853, 854, 855, 1170, 1171, 1172], "epsilon": [2, 6, 18, 34, 56, 95, 132, 133, 140, 141, 144, 145, 184, 188, 189, 203, 219, 238, 240, 274, 280, 281, 285, 289, 294, 302, 326, 327, 334, 335, 338, 339, 365, 369, 372, 379, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 852, 853, 854, 855, 883, 906, 915, 917, 924, 926, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 1053, 1054, 1055, 1056, 1057, 1168, 1169, 1170, 1171, 1172], "1e": [2, 6, 18, 34, 56, 95, 132, 133, 140, 141, 144, 145, 184, 188, 189, 203, 219, 238, 240, 274, 280, 281, 285, 289, 294, 302, 326, 327, 334, 335, 338, 339, 365, 369, 372, 379, 380, 758, 794, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 852, 853, 854, 855, 883, 934, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 1053, 1054, 1055, 1056, 1057, 1133, 1170, 1171, 1172, 1173, 1175], "07": [2, 6, 18, 34, 95, 132, 133, 140, 141, 184, 188, 189, 203, 219, 238, 274, 280, 281, 285, 289, 294, 302, 326, 327, 334, 335, 379, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 852, 853, 854, 855, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 1170, 1171, 1172], "With": [2, 6, 10, 130, 131, 132, 133, 175, 176, 179, 180, 181, 182, 184, 193, 279, 282, 283, 287, 288, 291, 298, 300, 304, 305, 322, 323, 324, 325, 332, 333, 336, 337, 340, 341, 355, 362, 364, 375, 403, 405, 406, 407, 408, 409, 410, 414, 425, 433, 442, 445, 470, 492, 508, 520, 521, 524, 525, 534, 538, 539, 542, 550, 555, 559, 562, 579, 582, 583, 586, 591, 603, 616, 627, 628, 631, 668, 688, 689, 695, 698, 699, 702, 715, 718, 731, 734, 735, 738, 744, 745, 749, 750, 753, 758, 759, 760, 761, 762, 763, 767, 775, 776, 783, 786, 787, 790, 791, 821, 826, 827, 828, 832, 834, 835, 837, 870, 873, 876, 877, 882, 883, 884, 887, 888, 889, 891, 892, 895, 897, 911, 913, 940, 942, 955, 956, 959, 966, 969, 971, 972, 975, 976, 985, 988, 989, 992, 997, 1000, 1005, 1008, 1009, 1010, 1019, 1022, 1053, 1054, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1092, 1095, 1119, 1124, 1125, 1128], "input": [2, 6, 117, 120, 121, 132, 133, 179, 180, 181, 182, 183, 184, 188, 279, 280, 282, 283, 287, 288, 291, 298, 300, 304, 305, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 392, 393, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 458, 459, 460, 461, 465, 470, 479, 480, 489, 490, 491, 492, 494, 495, 498, 502, 508, 514, 515, 520, 521, 524, 525, 526, 529, 530, 533, 534, 537, 538, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 745, 748, 749, 750, 753, 754, 757, 758, 759, 762, 763, 764, 766, 767, 768, 770, 771, 773, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 795, 797, 798, 800, 801, 802, 804, 805, 806, 807, 811, 814, 815, 820, 821, 824, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 843, 848, 850, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 888, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 976, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1169], "dcdw": [2, 6, 132, 133, 184, 188, 189, 231, 238, 239, 280, 281, 292, 294, 295, 326, 327, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 852, 853, 854, 855, 856, 857, 858, 859], "3": [2, 6, 7, 10, 25, 28, 47, 49, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 181, 182, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 355, 358, 362, 366, 369, 375, 377, 378, 379, 380, 403, 405, 406, 407, 408, 413, 414, 422, 425, 428, 431, 432, 433, 442, 443, 444, 445, 446, 470, 489, 492, 508, 515, 520, 521, 523, 524, 525, 534, 535, 536, 538, 539, 542, 550, 555, 559, 562, 575, 578, 579, 582, 583, 585, 586, 591, 603, 608, 616, 617, 618, 620, 624, 627, 628, 631, 644, 647, 668, 688, 689, 695, 698, 699, 702, 715, 718, 731, 734, 735, 738, 744, 745, 747, 749, 750, 752, 753, 758, 759, 760, 761, 766, 767, 776, 783, 786, 787, 788, 789, 790, 791, 820, 821, 826, 828, 832, 834, 835, 836, 837, 838, 870, 871, 872, 873, 875, 876, 877, 882, 883, 884, 886, 887, 888, 889, 891, 892, 895, 897, 904, 915, 917, 921, 923, 934, 940, 942, 943, 945, 952, 954, 955, 956, 959, 966, 969, 971, 972, 973, 974, 975, 976, 977, 980, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1014, 1019, 1022, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1092, 1095, 1096, 1099, 1116, 1119, 1124, 1125, 1128, 1133], "adam_step_delta": [2, 6, 132, 133, 184, 188, 280, 326, 327, 832, 834, 835, 836, 837, 838], "639": [2, 6, 132, 133, 832, 834, 835, 837], "11": [2, 6, 132, 133, 181, 182, 184, 190, 282, 298, 322, 323, 340, 341, 362, 369, 520, 534, 536, 538, 559, 562, 668, 715, 718, 758, 776, 786, 834, 835, 883, 895, 897, 921, 923, 955, 966, 969, 971, 989, 992, 997, 1000, 1058, 1060, 1061, 1062, 1070, 1074, 1075, 1076, 1091, 1092, 1095, 1119], "32": [2, 6, 132, 133, 378, 403, 405, 520, 579, 582, 834, 835, 870, 873, 876, 883, 921, 923, 1070, 1074, 1091, 1092, 1095, 1119], "63": [2, 6, 132, 133, 184, 212, 287, 332, 333, 520, 731, 734, 834, 835, 883, 884, 886, 887, 888, 921, 923, 1091, 1092, 1095, 1119], "00121": [2, 6, 132, 133, 834, 835], "0102": [2, 6, 132, 133, 834, 835], "0397": [2, 6, 132, 133, 834, 835], "add": [2, 8, 128, 129, 158, 159, 179, 180, 181, 182, 184, 191, 282, 283, 322, 323, 324, 325, 352, 353, 355, 356, 357, 359, 360, 361, 365, 366, 368, 369, 373, 375, 377, 392, 520, 521, 524, 538, 668, 759, 763, 1053, 1054, 1057, 1133, 1139, 1168, 1169], "x2": [2, 7, 10, 16, 19, 21, 22, 23, 24, 33, 37, 41, 48, 50, 51, 57, 58, 63, 64, 66, 67, 68, 75, 77, 78, 82, 85, 93, 101, 108, 113, 128, 129, 130, 131, 138, 139, 179, 180, 184, 190, 193, 201, 204, 206, 207, 208, 209, 220, 222, 229, 232, 233, 241, 242, 247, 248, 250, 251, 252, 256, 258, 262, 265, 282, 283, 290, 296, 303, 307, 322, 323, 324, 325, 332, 333, 362, 373, 433, 465, 470, 508, 520, 534, 535, 536, 537, 538, 551, 552, 553, 554, 559, 560, 561, 562, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 595, 596, 597, 598, 599, 600, 601, 602, 603, 611, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 644, 645, 646, 647, 648, 649, 650, 651, 668, 669, 670, 671, 672, 673, 674, 675, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 700, 701, 702, 707, 708, 709, 710, 711, 712, 713, 714, 739, 740, 741, 742, 743, 758, 759, 760, 761, 762, 763, 870, 875, 883, 889, 890, 891, 907, 908, 909, 910, 921, 922, 923, 931, 932, 933, 940, 941, 942, 946, 947, 948, 1070, 1074], "4": [2, 7, 28, 128, 129, 142, 143, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 190, 210, 211, 213, 228, 230, 268, 279, 280, 282, 286, 288, 291, 298, 300, 304, 305, 310, 311, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 358, 362, 366, 369, 375, 377, 378, 379, 380, 403, 405, 406, 408, 414, 422, 425, 428, 432, 433, 442, 444, 445, 446, 470, 492, 508, 520, 521, 523, 524, 525, 534, 535, 536, 538, 539, 542, 550, 551, 554, 555, 559, 562, 579, 582, 583, 585, 586, 591, 603, 616, 618, 620, 627, 628, 631, 668, 688, 689, 695, 698, 699, 702, 715, 718, 731, 734, 735, 738, 744, 745, 747, 749, 750, 752, 753, 758, 767, 776, 785, 786, 787, 789, 790, 791, 821, 826, 832, 834, 836, 837, 838, 870, 873, 874, 875, 877, 880, 882, 883, 884, 887, 889, 891, 892, 895, 897, 904, 915, 917, 921, 923, 940, 942, 943, 945, 955, 966, 969, 971, 972, 973, 974, 975, 976, 977, 980, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1019, 1022, 1053, 1054, 1057, 1058, 1059, 1060, 1062, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1092, 1095, 1096, 1099, 1119, 1124, 1125, 1128, 1133, 1170, 1171, 1172, 1173, 1175], "5": [2, 7, 10, 26, 27, 28, 47, 128, 129, 130, 131, 138, 139, 142, 143, 181, 182, 184, 185, 188, 190, 210, 211, 213, 228, 268, 279, 280, 282, 286, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 336, 337, 340, 341, 356, 358, 362, 366, 373, 377, 378, 379, 403, 405, 406, 408, 414, 422, 425, 428, 431, 432, 433, 442, 444, 445, 446, 470, 492, 508, 520, 521, 523, 524, 525, 534, 535, 536, 538, 539, 542, 550, 555, 558, 559, 562, 575, 578, 579, 582, 583, 584, 585, 586, 591, 603, 616, 617, 618, 620, 627, 628, 631, 668, 688, 689, 695, 698, 699, 702, 715, 718, 731, 734, 735, 738, 744, 745, 747, 748, 749, 750, 752, 753, 758, 759, 760, 767, 776, 786, 787, 790, 791, 821, 826, 832, 834, 836, 837, 838, 870, 873, 875, 876, 882, 883, 884, 885, 887, 889, 891, 892, 895, 897, 904, 921, 923, 940, 942, 943, 945, 955, 966, 969, 971, 972, 973, 974, 975, 976, 977, 980, 985, 988, 989, 992, 997, 1000, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1019, 1022, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1092, 1095, 1096, 1099, 1119, 1124, 1125, 1128, 1154, 1165], "z": [2, 7, 49, 128, 129, 130, 131, 181, 182, 184, 190, 230, 282, 291, 322, 323, 324, 325, 362, 366, 369, 375, 377, 470, 504, 520, 534, 535, 536, 538, 559, 562, 579, 582, 603, 627, 628, 631, 668, 688, 689, 758, 766, 767, 786, 787, 788, 789, 791, 820, 883, 889, 891, 955, 956, 959, 961, 964, 971, 972, 975, 1070, 1071, 1091, 1092, 1095, 1096, 1099, 1119], "7": [2, 7, 28, 128, 129, 142, 143, 181, 182, 184, 190, 282, 298, 322, 323, 340, 341, 356, 358, 362, 365, 369, 372, 403, 405, 406, 470, 492, 520, 521, 524, 534, 535, 536, 538, 559, 562, 563, 566, 579, 582, 583, 586, 591, 603, 608, 616, 627, 628, 631, 668, 688, 689, 715, 718, 731, 734, 744, 749, 758, 767, 776, 786, 832, 834, 837, 839, 841, 852, 854, 870, 876, 877, 882, 883, 884, 887, 889, 891, 892, 895, 897, 921, 923, 940, 942, 955, 956, 959, 961, 964, 966, 969, 971, 972, 973, 975, 985, 988, 989, 992, 997, 1000, 1010, 1019, 1022, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1070, 1074, 1075, 1076, 1091, 1092, 1095, 1119], "add_ivy_array_instance_method": [2, 158], "cl": [2, 8, 158, 159, 184, 191, 352, 353], "modul": [2, 8, 158, 159, 160, 164, 165, 176, 179, 180, 181, 182, 183, 184, 191, 352, 353, 355, 358, 364, 365, 366, 368, 372, 375, 376, 378, 380, 391, 392, 758, 809, 1058, 1059, 1063, 1133, 1140, 1141, 1142, 1143, 1144, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1169, 1176, 1177], "to_ignor": [2, 8, 158, 159, 184, 191, 352, 353, 1035, 1046], "loop": [2, 8, 158, 159, 184, 191, 352, 353, 366, 392, 1031, 1032, 1033, 1034], "over": [2, 8, 158, 159, 160, 164, 174, 176, 179, 180, 184, 191, 352, 353, 355, 361, 362, 366, 372, 377, 392, 883, 911, 913, 940, 942, 946, 948, 949, 951, 1053, 1054, 1057, 1058, 1064, 1066, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1168, 1169], "all": [2, 8, 117, 118, 119, 120, 121, 156, 157, 158, 159, 174, 175, 176, 179, 180, 184, 191, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 391, 392, 393, 401, 411, 412, 414, 415, 429, 430, 470, 479, 504, 510, 758, 759, 762, 766, 767, 792, 812, 827, 870, 880, 883, 931, 933, 940, 942, 949, 951, 971, 989, 992, 1005, 1008, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1046, 1047, 1048, 1058, 1059, 1064, 1066, 1124, 1133, 1136, 1138], "gener": [2, 8, 131, 158, 159, 179, 180, 184, 191, 325, 352, 353, 356, 357, 358, 359, 360, 361, 362, 365, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 391, 392, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 539, 542, 579, 582, 583, 586, 591, 616, 699, 702, 711, 714, 731, 734, 735, 738, 759, 762, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 848, 850, 971, 985, 988, 1005, 1008, 1058, 1059, 1060, 1061, 1064, 1066, 1068, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1133, 1170, 1174], "etc": [2, 8, 158, 159, 176, 179, 180, 184, 191, 352, 353, 355, 356, 357, 360, 362, 364, 368, 369, 370, 373, 375, 377, 378, 392, 414, 423, 424, 758, 786, 787, 790, 811, 814, 815, 1058, 1059, 1060, 1061, 1064, 1066, 1075, 1076, 1077, 1079, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1176, 1177], "_wrap_funct": [2, 8, 158, 159, 184, 191, 352, 353, 365, 367], "paramet": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 164, 165, 179, 180, 181, 182, 183, 184, 191, 352, 353, 360, 361, 364, 377, 378, 391, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 479, 480, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 759, 762, 764, 765, 766, 767, 768, 769, 770, 771, 773, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 837, 839, 841, 843, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1136, 1138, 1143, 1144, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177], "we": [2, 8, 158, 159, 160, 165, 166, 172, 173, 174, 175, 176, 184, 191, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 391, 392, 832, 843, 1133, 1139], "want": [2, 8, 158, 159, 160, 165, 175, 184, 191, 352, 353, 354, 355, 356, 364, 378, 379, 380, 392], "list": [2, 8, 117, 118, 119, 120, 121, 158, 159, 179, 180, 184, 188, 191, 280, 326, 327, 352, 353, 355, 357, 358, 360, 362, 370, 371, 373, 375, 378, 379, 380, 392, 414, 415, 416, 417, 425, 426, 427, 431, 433, 440, 470, 479, 480, 489, 491, 492, 495, 496, 499, 500, 514, 758, 767, 821, 826, 830, 834, 836, 838, 870, 871, 872, 873, 874, 875, 876, 877, 883, 940, 942, 971, 977, 980, 989, 992, 1010, 1015, 1018, 1035, 1036, 1037, 1041, 1046, 1047, 1053, 1054, 1057, 1070, 1073, 1124, 1125, 1128, 1129, 1132, 1133, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "option": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 165, 179, 180, 181, 182, 184, 191, 352, 353, 355, 356, 360, 361, 362, 365, 369, 370, 371, 372, 373, 375, 380, 392, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 439, 441, 447, 448, 449, 450, 457, 469, 470, 489, 513, 514, 515, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 764, 770, 771, 773, 776, 777, 778, 780, 781, 782, 784, 786, 787, 790, 798, 809, 811, 814, 815, 822, 823, 832, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1041, 1046, 1047, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1074, 1075, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "iter": [2, 8, 117, 118, 119, 120, 121, 158, 159, 176, 179, 180, 181, 182, 183, 184, 191, 352, 353, 369, 375, 378, 411, 412, 470, 492, 493, 495, 496, 497, 498, 501, 514, 758, 759, 762, 815, 820, 971, 981, 984, 997, 1000, 1010, 1023, 1026, 1027, 1030, 1035, 1036, 1037, 1041, 1045, 1046, 1047], "ani": [2, 8, 117, 118, 119, 156, 157, 158, 159, 160, 164, 172, 174, 175, 176, 179, 180, 184, 191, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 392, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 442, 445, 470, 515, 520, 521, 524, 534, 539, 542, 583, 586, 600, 603, 616, 627, 628, 631, 648, 651, 699, 702, 731, 734, 735, 738, 744, 758, 759, 762, 779, 780, 781, 782, 783, 786, 797, 804, 805, 806, 807, 822, 823, 832, 843, 870, 873, 880, 882, 971, 1005, 1008, 1031, 1032, 1033, 1034, 1035, 1041, 1045, 1053, 1054, 1057, 1058, 1064, 1066, 1091, 1096, 1099, 1124, 1125, 1128, 1133], "item": [2, 8, 117, 121, 158, 159, 179, 180, 370, 375, 377, 378, 380, 433, 448, 470, 479, 480, 482, 489, 491, 493, 495, 497, 501, 758, 774, 796, 822, 823, 1035, 1040, 1041, 1042, 1043, 1047, 1051, 1052, 1133, 1166, 1167], "don": [2, 8, 158, 159, 176, 184, 191, 352, 353, 355, 356, 357, 370, 379, 392], "t": [2, 8, 158, 159, 160, 165, 175, 176, 184, 191, 352, 353, 355, 356, 357, 358, 362, 370, 375, 377, 378, 379, 380, 392, 758, 767, 870, 879, 880], "an": [2, 8, 117, 120, 121, 158, 159, 175, 176, 179, 180, 184, 191, 352, 353, 355, 356, 357, 358, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 392, 403, 406, 407, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 439, 440, 441, 442, 445, 453, 458, 459, 461, 470, 492, 496, 515, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 769, 770, 771, 773, 775, 784, 785, 786, 798, 802, 804, 805, 806, 807, 827, 828, 829, 832, 848, 850, 865, 867, 868, 870, 873, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 914, 915, 917, 918, 920, 924, 926, 927, 929, 930, 931, 933, 934, 943, 945, 946, 948, 949, 951, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 1001, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1035, 1041, 1053, 1054, 1057, 1058, 1060, 1061, 1069, 1070, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1143, 1144, 1166, 1167, 1170, 1171, 1172, 1174], "default": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 165, 179, 180, 181, 182, 183, 184, 191, 352, 353, 356, 361, 362, 365, 366, 369, 370, 371, 373, 379, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 439, 441, 448, 449, 450, 451, 470, 479, 480, 489, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 509, 511, 512, 513, 514, 515, 518, 519, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 759, 762, 764, 770, 771, 773, 776, 777, 780, 781, 782, 784, 785, 786, 787, 790, 795, 796, 797, 798, 799, 802, 803, 804, 805, 807, 808, 809, 811, 813, 814, 815, 818, 820, 822, 823, 830, 831, 832, 834, 837, 839, 841, 843, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1045, 1046, 1047, 1048, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1143, 1144, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177], "As": [2, 8, 158, 159, 174, 184, 191, 352, 353, 356, 364, 365, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 392, 1075, 1076, 1077, 1079], "shown": [2, 8, 158, 159, 179, 180, 184, 191, 352, 353, 356, 362, 373, 375, 377, 392, 520, 559, 562, 579, 582, 591, 715, 718, 749, 883, 892, 971, 985, 988, 989, 992, 1075, 1076, 1077, 1080, 1081, 1084], "appropri": [2, 8, 158, 159, 184, 191, 352, 353, 356, 367, 520, 534, 690, 693, 1070, 1071], "from": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 164, 165, 166, 174, 175, 176, 179, 180, 181, 182, 183, 184, 191, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 392, 414, 415, 416, 418, 420, 421, 422, 425, 426, 428, 432, 433, 442, 445, 461, 470, 479, 480, 489, 504, 508, 513, 514, 520, 624, 731, 734, 758, 779, 786, 787, 790, 826, 832, 839, 841, 852, 854, 870, 878, 881, 883, 895, 897, 934, 946, 948, 971, 989, 992, 1001, 1004, 1011, 1014, 1031, 1032, 1033, 1034, 1035, 1037, 1047, 1048, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1070, 1074, 1075, 1076, 1078, 1091, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1139, 1143, 1144, 1154, 1162, 1165, 1170, 1174], "our": [2, 8, 158, 159, 174, 175, 184, 191, 352, 353, 354, 355, 356, 362, 369, 374, 377, 378, 379, 380, 392, 1133], "toi": [2, 8, 158, 159, 184, 191, 352, 353], "arrayexampl": [2, 8, 158, 159], "import": [2, 8, 158, 159, 160, 164, 175, 184, 191, 352, 353, 357, 360, 361, 362, 366, 368, 369, 370, 371, 372, 375, 377, 378, 380, 392, 470, 511, 1133, 1139], "pass": [2, 8, 158, 159, 160, 164, 179, 180, 181, 182, 183, 184, 191, 352, 353, 357, 361, 362, 363, 364, 365, 366, 368, 369, 372, 373, 377, 392, 433, 447, 470, 479, 514, 520, 551, 554, 758, 769, 802, 832, 868, 1031, 1032, 1033, 1143, 1144, 1166, 1167, 1170, 1174, 1176, 1177], "hasattr": [2, 8, 158, 159, 184, 191, 352, 353, 377], "relu": [2, 8, 158, 159, 181, 182, 378, 379, 403, 404, 405, 1133], "softmax": [2, 8, 158, 159, 181, 182, 403, 870, 881, 882, 1133], "true": [2, 8, 10, 12, 25, 94, 103, 124, 125, 130, 131, 138, 139, 152, 153, 158, 159, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 362, 364, 365, 369, 370, 372, 375, 377, 378, 379, 380, 403, 404, 411, 412, 414, 423, 433, 439, 442, 443, 444, 445, 446, 470, 489, 506, 510, 511, 520, 521, 523, 525, 528, 529, 530, 532, 536, 537, 538, 539, 541, 543, 545, 549, 550, 551, 553, 555, 557, 559, 561, 562, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 582, 583, 585, 589, 590, 593, 594, 597, 598, 599, 602, 603, 604, 606, 610, 611, 612, 614, 618, 619, 620, 622, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 679, 680, 682, 683, 684, 686, 690, 692, 694, 695, 697, 699, 701, 702, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 740, 742, 745, 747, 748, 750, 752, 753, 754, 756, 758, 759, 760, 761, 762, 763, 766, 767, 768, 769, 771, 772, 776, 783, 785, 787, 789, 791, 797, 798, 805, 820, 826, 828, 831, 832, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 870, 878, 883, 884, 886, 887, 888, 907, 909, 911, 913, 934, 935, 937, 949, 951, 955, 956, 958, 959, 960, 961, 963, 964, 965, 966, 968, 969, 970, 971, 972, 974, 976, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1010, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1045, 1046, 1048, 1054, 1056, 1058, 1059, 1064, 1065, 1067, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1106, 1107, 1108, 1110, 1111, 1112, 1114, 1115, 1116, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1127, 1128, 1129, 1131, 1132, 1154, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175], "axi": [2, 9, 11, 12, 29, 33, 34, 44, 46, 72, 73, 74, 83, 86, 88, 94, 95, 98, 99, 100, 102, 112, 113, 114, 138, 139, 140, 141, 142, 143, 152, 153, 154, 155, 156, 157, 179, 180, 184, 192, 194, 195, 215, 219, 225, 227, 253, 254, 255, 263, 266, 268, 273, 274, 277, 278, 284, 289, 300, 301, 302, 306, 308, 314, 334, 335, 336, 337, 346, 347, 348, 349, 350, 351, 362, 365, 369, 370, 372, 373, 375, 377, 380, 391, 403, 408, 414, 423, 424, 470, 472, 475, 482, 495, 496, 497, 498, 499, 500, 501, 502, 514, 758, 776, 777, 786, 830, 883, 889, 890, 891, 895, 897, 946, 947, 948, 949, 950, 951, 955, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 977, 978, 979, 980, 981, 984, 985, 986, 987, 988, 989, 990, 991, 992, 997, 998, 999, 1000, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1058, 1069, 1070, 1071, 1072, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132], "keepdim": [2, 9, 11, 69, 72, 73, 74, 83, 100, 102, 112, 114, 138, 139, 154, 155, 156, 157, 179, 180, 184, 192, 194, 253, 254, 255, 263, 306, 308, 314, 348, 349, 350, 351, 758, 830, 883, 911, 912, 913, 949, 950, 951, 1070, 1071, 1072, 1091, 1092, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132], "fals": [2, 9, 10, 11, 12, 27, 69, 72, 73, 74, 83, 94, 100, 102, 112, 114, 117, 118, 119, 120, 121, 130, 131, 138, 139, 152, 153, 154, 155, 156, 157, 160, 167, 168, 169, 170, 171, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 362, 369, 372, 378, 379, 380, 433, 439, 442, 444, 445, 446, 451, 470, 489, 490, 501, 505, 506, 509, 514, 517, 519, 520, 521, 523, 525, 528, 529, 530, 532, 536, 537, 538, 539, 541, 543, 545, 549, 550, 551, 553, 555, 557, 559, 561, 562, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 589, 590, 593, 594, 597, 598, 599, 602, 603, 604, 606, 610, 611, 612, 614, 618, 619, 620, 622, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 679, 680, 682, 683, 684, 686, 690, 692, 694, 695, 697, 699, 701, 702, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 740, 742, 745, 747, 748, 750, 752, 753, 754, 756, 758, 759, 760, 761, 762, 763, 766, 767, 771, 772, 776, 779, 783, 785, 787, 789, 791, 795, 802, 804, 805, 807, 808, 820, 830, 832, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 883, 884, 885, 886, 887, 888, 907, 909, 911, 912, 913, 934, 949, 950, 951, 956, 958, 960, 961, 963, 965, 966, 968, 970, 971, 972, 974, 976, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1010, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1045, 1046, 1047, 1048, 1054, 1056, 1058, 1059, 1064, 1065, 1067, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1143, 1144, 1166, 1167, 1170, 1171, 1172, 1173, 1174, 1175], "all_equ": [2, 130, 131, 184, 283, 324, 325, 758, 763], "equality_matrix": [2, 10, 130, 131, 184, 193, 283, 324, 325, 758, 759, 760, 761, 762, 763], "contain": [2, 10, 117, 120, 121, 130, 131, 174, 177, 178, 179, 180, 183, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 362, 364, 365, 370, 372, 373, 374, 375, 376, 379, 380, 392, 403, 406, 407, 409, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 470, 491, 492, 495, 504, 508, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 759, 760, 762, 764, 767, 770, 771, 773, 775, 776, 783, 786, 787, 790, 797, 806, 826, 827, 828, 832, 834, 837, 839, 844, 848, 852, 856, 860, 870, 873, 876, 877, 882, 883, 884, 887, 889, 891, 892, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 981, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1005, 1008, 1010, 1011, 1015, 1019, 1022, 1023, 1027, 1031, 1032, 1033, 1034, 1035, 1048, 1053, 1054, 1057, 1058, 1059, 1060, 1063, 1064, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165, 1166, 1167, 1170, 1174, 1176, 1177], "x1": [2, 10, 130, 131, 184, 193, 282, 283, 290, 296, 303, 322, 323, 324, 325, 362, 373, 433, 465, 470, 508, 520, 534, 537, 538, 551, 554, 559, 562, 567, 570, 571, 574, 575, 578, 579, 582, 595, 598, 599, 600, 603, 611, 619, 620, 623, 624, 627, 628, 631, 644, 647, 648, 651, 668, 671, 672, 675, 680, 683, 684, 687, 688, 689, 690, 693, 694, 699, 702, 707, 710, 711, 714, 739, 740, 743, 758, 759, 760, 761, 762, 763, 766, 870, 875, 883, 889, 891, 907, 910, 921, 923, 931, 933, 940, 942, 946, 948, 1070, 1074], "mix": [2, 10, 130, 131, 181, 182, 184, 359, 362, 364, 375, 433, 461, 470, 508, 520, 534, 559, 562, 579, 582, 603, 627, 628, 631, 688, 689, 699, 702, 758, 759, 760, 775, 783, 786, 787, 790, 826, 827, 828, 870, 873, 876, 877, 882, 883, 884, 887, 940, 942, 955, 956, 959, 966, 969, 971, 972, 975, 1053, 1054, 1057, 1070, 1074, 1091, 1092, 1095, 1100, 1103, 1119], "nativearrai": [2, 10, 49, 117, 120, 121, 130, 131, 360, 362, 365, 368, 369, 372, 373, 375, 377, 380, 393, 401, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 418, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 439, 440, 441, 442, 445, 451, 453, 456, 458, 459, 461, 465, 470, 489, 490, 492, 508, 514, 515, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 759, 760, 762, 766, 767, 770, 771, 773, 775, 776, 777, 780, 781, 782, 784, 785, 786, 787, 788, 790, 795, 797, 798, 800, 801, 802, 811, 814, 815, 820, 821, 826, 827, 828, 830, 831, 832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1035, 1037, 1047, 1053, 1054, 1057, 1058, 1059, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "native_arrai": [2, 10, 130, 131, 160, 166, 172, 181, 182, 184, 193, 283, 324, 325, 403, 405, 406, 407, 408, 409, 410, 414, 425, 433, 442, 445, 470, 492, 508, 520, 521, 524, 539, 542, 559, 562, 579, 582, 583, 586, 603, 616, 627, 628, 631, 688, 689, 695, 698, 699, 702, 731, 734, 735, 738, 749, 758, 759, 760, 761, 762, 763, 767, 775, 776, 783, 786, 787, 790, 821, 826, 827, 828, 832, 834, 837, 870, 873, 876, 877, 882, 883, 889, 891, 892, 895, 897, 940, 942, 955, 956, 959, 966, 969, 971, 972, 975, 985, 988, 989, 992, 997, 1000, 1010, 1019, 1022, 1053, 1054, 1057, 1058, 1059, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1091, 1092, 1095, 1096, 1099, 1119, 1124, 1125, 1128], "argsort": [2, 152, 153, 184, 346, 347, 1080], "descend": [2, 12, 94, 152, 153, 184, 195, 273, 284, 301, 346, 347, 883, 934, 936, 937, 939, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090], "stabl": [2, 12, 94, 152, 153, 184, 195, 273, 284, 301, 346, 347, 355, 375, 392, 758, 793, 794, 816, 817, 822, 823, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090], "asin": [2, 128, 129, 184, 322, 323, 520, 1133], "asinh": [2, 128, 129, 184, 322, 323, 520, 1133], "atan": [2, 128, 129, 184, 322, 323, 520, 555, 1133], "atan2": [2, 128, 129, 184, 322, 323, 520, 1133], "atanh": [2, 128, 129, 184, 322, 323, 520, 550, 748, 753, 1133], "binary_cross_entropi": [2, 140, 141, 184, 334, 335, 955], "pred": [2, 18, 34, 95, 140, 141, 184, 203, 219, 274, 285, 289, 302, 334, 335, 365, 369, 372, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970], "bitwise_and": [2, 128, 129, 184, 322, 323, 520], "bitwise_invert": [2, 128, 129, 184, 322, 323, 520], "bitwise_left_shift": [2, 128, 129, 184, 322, 323, 520], "bitwise_or": [2, 128, 129, 184, 322, 323, 520], "bitwise_right_shift": [2, 128, 129, 184, 322, 323, 520], "bitwise_xor": [2, 128, 129, 184, 322, 323, 520], "can_cast": [2, 124, 125, 184, 286, 318, 319, 365, 370, 433, 446], "dtype": [2, 25, 83, 102, 124, 125, 154, 155, 179, 180, 184, 210, 263, 286, 308, 318, 319, 348, 349, 360, 362, 365, 370, 371, 377, 414, 415, 416, 417, 418, 419, 421, 422, 423, 426, 427, 428, 431, 432, 433, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 469, 470, 510, 520, 575, 578, 758, 766, 767, 811, 827, 870, 878, 971, 985, 988, 1053, 1054, 1057, 1058, 1064, 1066, 1070, 1071, 1072, 1080, 1086, 1089, 1091, 1092, 1108, 1109, 1110, 1111, 1112, 1115, 1116, 1117, 1118, 1124, 1125, 1128, 1133, 1145, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1176, 1177], "float32": [2, 25, 124, 125, 184, 210, 286, 318, 319, 362, 370, 433, 437, 438, 442, 443, 444, 445, 446, 454, 1053, 1054, 1057], "float64": [2, 25, 124, 125, 370, 433, 439, 442, 443, 445, 454], "bool": [2, 25, 117, 118, 119, 120, 121, 124, 125, 179, 180, 184, 191, 352, 353, 362, 369, 370, 372, 380, 411, 412, 414, 421, 433, 439, 442, 443, 445, 448, 449, 450, 451, 454, 457, 458, 459, 469, 470, 489, 490, 505, 514, 517, 520, 559, 562, 563, 566, 571, 574, 579, 582, 600, 603, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 672, 675, 676, 679, 680, 683, 699, 702, 758, 759, 762, 766, 767, 776, 779, 783, 785, 795, 797, 802, 804, 805, 806, 807, 820, 830, 831, 832, 865, 883, 884, 887, 911, 913, 934, 949, 951, 971, 1010, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1045, 1046, 1047, 1058, 1059, 1070, 1071, 1072, 1080, 1081, 1084, 1086, 1089, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "ceil": [2, 128, 129, 184, 322, 323, 414, 415, 520, 1133], "choleski": [2, 138, 139, 184, 287, 332, 333, 883, 888], "upper": [2, 27, 138, 139, 179, 180, 184, 212, 287, 332, 333, 414, 419, 430, 883, 884, 885, 886, 887, 888, 927, 929, 1058, 1064, 1066], "clip": [2, 142, 143, 179, 180, 184, 288, 336, 337, 365, 369, 372, 375, 378, 380, 520, 688, 689, 758, 770, 771, 773, 971, 976, 1133], "x_min": [2, 28, 142, 143, 179, 180, 184, 213, 288, 336, 337, 375, 380, 971, 972, 973, 974, 975, 976], "x_max": [2, 28, 142, 143, 179, 180, 184, 213, 288, 336, 337, 375, 380, 971, 972, 973, 974, 975, 976], "roll": [2, 28, 142, 143, 184, 300, 336, 337, 369, 373, 971, 972, 973, 1009], "8": [2, 28, 142, 143, 181, 182, 184, 282, 298, 322, 323, 340, 341, 355, 358, 362, 369, 374, 378, 403, 407, 470, 492, 520, 534, 538, 559, 562, 583, 586, 591, 603, 627, 628, 631, 668, 688, 689, 715, 718, 731, 734, 735, 738, 749, 758, 767, 786, 832, 834, 837, 870, 877, 883, 889, 891, 892, 895, 897, 921, 923, 940, 942, 955, 956, 959, 971, 972, 973, 975, 989, 992, 997, 1000, 1010, 1058, 1059, 1060, 1061, 1062, 1070, 1074, 1075, 1076, 1091, 1092, 1095, 1119, 1133, 1154, 1165], "concat": [2, 142, 143, 179, 180, 184, 336, 337, 470, 499, 500, 501, 502, 514, 758, 785, 971, 1133], "xs": [2, 29, 142, 143, 184, 215, 336, 337, 369, 470, 493, 497, 499, 500, 501, 758, 759, 762, 767, 832, 843, 971, 977, 978, 979, 980], "constant_pad": [2, 142, 143, 184, 336, 337, 971], "pad_width": [2, 30, 116, 142, 143, 184, 216, 315, 336, 337, 971, 981, 982, 983, 984, 1027, 1028, 1029, 1030], "valu": [2, 30, 142, 143, 179, 180, 181, 182, 183, 184, 216, 315, 336, 337, 356, 362, 364, 365, 369, 370, 371, 372, 373, 375, 377, 380, 392, 414, 415, 419, 421, 422, 423, 424, 433, 439, 448, 449, 450, 470, 482, 513, 514, 520, 521, 524, 526, 534, 539, 542, 547, 583, 586, 598, 600, 603, 604, 607, 616, 619, 620, 623, 624, 627, 628, 631, 644, 647, 648, 651, 688, 689, 690, 693, 699, 702, 703, 706, 707, 710, 715, 718, 749, 754, 757, 758, 770, 771, 773, 774, 779, 785, 786, 787, 790, 796, 799, 803, 813, 814, 815, 816, 817, 818, 831, 832, 834, 837, 839, 841, 843, 852, 854, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 880, 881, 882, 883, 894, 906, 915, 917, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 949, 951, 971, 972, 975, 981, 982, 983, 984, 997, 1000, 1001, 1004, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1039, 1040, 1041, 1042, 1043, 1048, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1068, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174], "co": [2, 128, 129, 175, 184, 322, 323, 375, 391, 520, 529, 530, 594, 758, 785, 1133], "cosh": [2, 128, 129, 184, 322, 323, 520, 529, 530, 1133], "cross": [2, 138, 139, 181, 182, 883, 955, 956, 959, 961, 964, 966, 969, 1133], "cross_entropi": [2, 140, 141, 184, 334, 335, 365, 369, 372, 955, 966, 969], "det": [2, 138, 139, 181, 182, 883, 930], "diagon": [2, 138, 139, 181, 182, 414, 419, 429, 430, 883, 943, 945], "offset": [2, 36, 56, 110, 138, 139, 144, 145, 184, 240, 338, 339, 883, 895, 896, 897, 943, 944, 945, 1053, 1054, 1055, 1056, 1057], "axis1": [2, 36, 105, 138, 139, 142, 143, 184, 309, 336, 337, 883, 895, 896, 897, 971, 1019, 1020, 1021, 1022], "axis2": [2, 36, 138, 139, 883, 895, 896, 897], "divid": [2, 128, 129, 179, 180, 184, 322, 323, 362, 368, 520, 619, 620, 623, 758, 822, 971, 1010], "eigh": [2, 138, 139, 181, 182, 883], "namedtupl": [2, 38, 84, 138, 139, 883, 898, 899, 900, 927, 928, 929, 934, 1075, 1076, 1077], "eigvalsh": [2, 138, 139, 181, 182, 883], "einsum": [2, 154, 155, 184, 348, 349, 1091, 1119], "equat": [2, 40, 154, 155, 184, 221, 348, 349, 883, 931, 933, 1091, 1092, 1093, 1094, 1095, 1119], "equal": [2, 128, 129, 179, 180, 184, 322, 323, 362, 369, 370, 414, 419, 421, 422, 433, 439, 520, 567, 570, 575, 578, 628, 632, 635, 636, 639, 707, 710, 715, 718, 758, 759, 762, 766, 767, 883, 895, 897, 906, 915, 917, 924, 926, 971, 972, 975, 981, 984, 1010, 1027, 1030, 1058, 1064, 1066, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1100, 1103, 1112, 1115, 1116, 1120, 1123], "erf": [2, 128, 129, 184, 322, 323, 520], "exp": [2, 128, 129, 184, 322, 323, 520, 537, 612, 615, 668, 671, 1133], "expand_dim": [2, 142, 143, 184, 336, 337, 375, 378, 971, 1133], "expm1": [2, 128, 129, 184, 322, 323, 520], "flip": [2, 142, 143, 184, 336, 337, 377, 378, 380, 520, 563, 566, 971, 997, 1000, 1133], "floor": [2, 128, 129, 184, 322, 323, 520, 575, 578, 620, 758, 784, 1133], "floor_divid": [2, 128, 129, 184, 322, 323, 520, 598, 619], "gather_nd": [2, 130, 131, 179, 180, 184, 291, 324, 325, 758, 791, 1133], "indic": [2, 49, 130, 131, 179, 180, 184, 230, 291, 324, 325, 358, 376, 380, 403, 408, 520, 719, 722, 758, 786, 787, 788, 789, 790, 791, 798, 811, 814, 815, 870, 871, 872, 873, 874, 875, 876, 877, 883, 949, 951, 971, 1005, 1008, 1035, 1036, 1038, 1040, 1042, 1043, 1044, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1070, 1071, 1072, 1073, 1075, 1076, 1078, 1080, 1081, 1084, 1086, 1089, 1133, 1136, 1138, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1166, 1167], "union": [2, 49, 103, 117, 120, 121, 130, 131, 138, 139, 179, 180, 360, 362, 365, 368, 369, 370, 371, 372, 373, 375, 380, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 469, 470, 486, 487, 488, 489, 490, 492, 495, 496, 497, 498, 503, 509, 511, 513, 514, 515, 516, 519, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 759, 762, 766, 767, 770, 771, 773, 776, 777, 780, 781, 782, 784, 785, 786, 787, 788, 790, 795, 797, 798, 800, 801, 802, 811, 814, 815, 820, 821, 826, 827, 828, 830, 831, 832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 935, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1046, 1047, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "greater": [2, 128, 129, 179, 180, 184, 322, 323, 520, 526, 539, 542, 551, 554, 567, 570, 575, 578, 598, 603, 616, 619, 620, 623, 628, 707, 710, 711, 714, 719, 722, 754, 757, 883, 889, 891, 971, 1011, 1014, 1058, 1064, 1066], "greater_equ": [2, 128, 129, 184, 322, 323, 520, 603, 627], "inv": [2, 138, 139, 181, 182, 377, 883, 924, 1133], "isfinit": [2, 128, 129, 184, 322, 323, 520], "isinf": [2, 128, 129, 184, 322, 323, 520], "isnan": [2, 128, 129, 184, 322, 323, 520], "layer_norm": [2, 144, 145, 184, 338, 339, 1053], "normalized_idx": [2, 56, 144, 145, 184, 240, 338, 339, 1053, 1054, 1055, 1056, 1057], "05": [2, 56, 144, 145, 184, 240, 338, 339, 470, 832, 834, 837, 1053, 1054, 1055, 1056, 1057], "scale": [2, 56, 144, 145, 184, 240, 338, 339, 369, 470, 512, 513, 832, 856, 858, 870, 878, 881, 882, 1053, 1054, 1055, 1056, 1057, 1154, 1162, 1165, 1170, 1173], "new_std": [2, 56, 144, 145, 184, 240, 338, 339, 1053, 1054, 1055, 1056, 1057, 1168, 1169], "less": [2, 128, 129, 175, 179, 180, 184, 322, 323, 356, 362, 369, 373, 374, 375, 520, 526, 529, 530, 533, 539, 542, 551, 554, 583, 586, 590, 594, 652, 655, 656, 659, 664, 667, 707, 710, 711, 714, 719, 722, 731, 734, 883, 906, 915, 917, 924, 926, 949, 951, 1058, 1064, 1066, 1091, 1120, 1123], "less_equ": [2, 128, 129, 184, 322, 323, 520], "log": [2, 128, 129, 184, 322, 323, 355, 356, 365, 369, 372, 375, 378, 414, 424, 520, 537, 611, 660, 663, 668, 671, 883, 894, 930, 1133], "log10": [2, 128, 129, 184, 322, 323, 520], "log1p": [2, 128, 129, 184, 322, 323, 520], "log2": [2, 128, 129, 184, 322, 323, 520], "logaddexp": [2, 128, 129, 184, 322, 323, 520, 537, 611], "logical_and": [2, 128, 129, 184, 322, 323, 520, 1133], "logical_not": [2, 128, 129, 184, 322, 323, 520, 1133], "logical_or": [2, 128, 129, 184, 322, 323, 520, 1133], "logical_xor": [2, 128, 129, 184, 322, 323, 520], "matmul": [2, 138, 139, 184, 332, 333, 360, 366, 375, 883, 934, 1133], "matrix_norm": [2, 138, 139, 179, 180, 883], "ord": [2, 69, 114, 138, 139, 179, 180, 883, 911, 912, 913, 949, 950, 951], "fro": [2, 69, 138, 139, 883, 911, 912, 913], "matrix_rank": [2, 138, 139, 181, 182, 883], "rtol": [2, 70, 80, 138, 139, 883, 906, 915, 916, 917, 924, 925, 926], "matrix_transpos": [2, 138, 139, 181, 182, 377, 883], "max": [2, 154, 155, 179, 180, 184, 348, 349, 433, 453, 456, 520, 688, 758, 770, 771, 773, 781, 814, 815, 883, 906, 915, 917, 924, 926, 1091, 1170, 1172], "mean": [2, 154, 155, 179, 180, 184, 191, 348, 349, 352, 353, 355, 356, 359, 362, 365, 369, 370, 371, 372, 375, 377, 378, 379, 380, 391, 392, 470, 499, 500, 501, 502, 514, 758, 781, 1031, 1032, 1033, 1034, 1035, 1041, 1058, 1063, 1075, 1076, 1091, 1133, 1145], "min": [2, 154, 155, 179, 180, 184, 348, 349, 433, 453, 456, 520, 689, 758, 781, 814, 815, 822, 883, 927, 929, 934, 936, 937, 939, 949, 951, 1091], "multipli": [2, 128, 129, 184, 322, 323, 362, 366, 368, 520, 758, 776], "neg": [2, 128, 129, 184, 322, 323, 365, 369, 372, 403, 405, 414, 415, 419, 520, 632, 635, 636, 639, 690, 693, 707, 710, 711, 714, 883, 934, 946, 948, 949, 951, 971, 989, 992, 1005, 1008, 1124, 1125, 1128, 1129, 1132], "not_equ": [2, 128, 129, 184, 322, 323, 520], "outer": [2, 138, 139, 181, 182, 883, 1031, 1032, 1033, 1034], "permute_dim": [2, 142, 143, 184, 336, 337, 971], "ax": [2, 79, 108, 138, 139, 142, 143, 179, 180, 184, 260, 336, 337, 360, 362, 370, 377, 470, 514, 758, 776, 883, 911, 913, 931, 933, 940, 941, 942, 949, 951, 971, 981, 984, 989, 992, 993, 994, 995, 996, 1005, 1008, 1011, 1014, 1019, 1022, 1027, 1030, 1070, 1071, 1072, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "pinv": [2, 138, 139, 181, 182, 883, 906, 1133], "posit": [2, 117, 118, 119, 128, 129, 184, 322, 323, 373, 378, 391, 413, 414, 419, 433, 453, 470, 494, 498, 502, 520, 521, 524, 632, 635, 636, 639, 690, 693, 711, 714, 758, 785, 883, 884, 887, 971, 985, 988, 1005, 1008, 1058, 1068, 1070, 1073, 1124, 1125, 1128, 1129, 1132, 1143, 1144], "pow": [2, 128, 129, 184, 322, 323, 520], "prod": [2, 154, 155, 179, 180, 184, 348, 349, 362, 370, 758, 781, 1091], "qr": [2, 138, 139, 181, 182, 883], "mode": [2, 84, 138, 139, 179, 180, 355, 362, 369, 392, 411, 412, 470, 499, 500, 501, 502, 514, 520, 534, 690, 693, 883, 927, 928, 929], "reduc": [2, 84, 138, 139, 179, 180, 377, 470, 514, 758, 781, 883, 927, 928, 929, 1070, 1071, 1072, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "remaind": [2, 128, 129, 179, 180, 184, 322, 323, 520, 758, 784, 971, 1010], "repeat": [2, 142, 143, 179, 180, 184, 336, 337, 356, 361, 362, 366, 368, 369, 758, 782, 971, 1023, 1026], "reshap": [2, 142, 143, 179, 180, 184, 336, 337, 372, 375, 377, 380, 971, 1133], "shape": [2, 87, 142, 143, 179, 180, 184, 188, 267, 280, 298, 299, 326, 327, 336, 337, 340, 341, 356, 360, 361, 362, 370, 371, 372, 373, 375, 377, 378, 379, 380, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 439, 440, 441, 470, 482, 510, 515, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 770, 771, 773, 776, 780, 781, 782, 784, 787, 790, 795, 798, 811, 814, 815, 821, 832, 834, 836, 838, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1067, 1069, 1070, 1071, 1073, 1074, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1119, 1124, 1125, 1128, 1129, 1132, 1133, 1154, 1156, 1157, 1158, 1159, 1160, 1161, 1168, 1169], "shift": [2, 88, 142, 143, 184, 268, 300, 336, 337, 362, 373, 520, 567, 570, 575, 578, 971, 1005, 1006, 1007, 1008, 1009], "round": [2, 128, 129, 174, 175, 176, 184, 322, 323, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 520, 534, 583, 586, 598, 616, 619, 620, 623, 690, 693, 731, 734, 754, 757, 1133], "sign": [2, 128, 129, 175, 184, 322, 323, 355, 376, 380, 414, 415, 520, 521, 524, 534, 551, 554, 575, 578, 690, 693, 711, 714, 883, 894, 930, 1075, 1076, 1077, 1079, 1091, 1108, 1111, 1116], "sin": [2, 128, 129, 184, 322, 323, 368, 375, 520, 758, 785, 1133], "sinh": [2, 128, 129, 184, 322, 323, 520, 1133], "solv": [2, 138, 139, 181, 182, 376, 391, 883], "sort": [2, 153, 179, 180, 181, 182, 183, 184, 347, 360, 883, 898, 900, 934, 936, 937, 939, 1081, 1084], "sparse_cross_entropi": [2, 140, 141, 184, 334, 335, 955], "sqrt": [2, 128, 129, 184, 322, 323, 520, 883, 949, 951], "squar": [2, 128, 129, 184, 322, 323, 520, 731, 734, 870, 873, 883, 884, 887, 892, 894, 898, 900, 901, 903, 904, 914, 930, 931, 933, 934], "squeez": [2, 142, 143, 184, 336, 337, 971, 1133], "stack": [2, 142, 143, 179, 180, 184, 336, 337, 375, 414, 429, 430, 883, 892, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 914, 915, 917, 918, 920, 924, 926, 927, 929, 934, 936, 937, 939, 943, 945, 971, 1035, 1036, 1045, 1046, 1133, 1154, 1163], "std": [2, 154, 155, 184, 348, 349, 362, 1058, 1063, 1075, 1076, 1091], "correct": [2, 100, 112, 154, 155, 184, 306, 314, 348, 349, 356, 357, 359, 365, 369, 370, 371, 373, 433, 465, 971, 972, 975, 1091, 1112, 1113, 1114, 1115, 1120, 1121, 1122, 1123, 1133], "subtract": [2, 128, 129, 184, 322, 323, 362, 368, 520], "sum": [2, 154, 155, 179, 180, 184, 348, 349, 365, 369, 370, 372, 375, 470, 499, 500, 501, 502, 514, 520, 534, 537, 611, 668, 671, 758, 777, 781, 814, 815, 870, 882, 883, 934, 943, 945, 949, 951, 1091, 1092, 1095, 1112, 1115], "svd": [2, 138, 139, 181, 182, 883, 937, 1133], "full_matric": [2, 103, 138, 139, 883, 934, 935, 937], "tupl": [2, 103, 117, 118, 119, 120, 121, 138, 139, 179, 180, 360, 369, 370, 371, 373, 377, 378, 379, 392, 414, 416, 417, 421, 426, 427, 431, 433, 441, 455, 470, 489, 758, 785, 821, 870, 873, 876, 877, 880, 883, 906, 915, 917, 924, 926, 934, 935, 937, 940, 942, 949, 951, 971, 977, 980, 981, 984, 989, 992, 993, 996, 1001, 1004, 1005, 1008, 1011, 1014, 1015, 1018, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1040, 1042, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1052, 1058, 1063, 1064, 1066, 1070, 1073, 1075, 1076, 1077, 1078, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "svdval": [2, 138, 139, 181, 182, 883, 936], "swapax": [2, 142, 143, 184, 336, 337, 971], "axis0": [2, 105, 142, 143, 184, 309, 336, 337, 971, 1019, 1020, 1021, 1022], "tan": [2, 128, 129, 184, 304, 322, 323, 361, 365, 369, 372, 373, 375, 520, 539, 542, 550, 555, 745, 753, 1075, 1076, 1077, 1080, 1081, 1084, 1133], "56": [2, 106, 128, 129, 184, 304, 310, 322, 323, 362, 520, 550, 555, 731, 734, 744, 745, 746, 747, 753, 832, 834, 837, 883, 921, 923, 1091, 1092, 1095, 1119], "19": [2, 106, 128, 129, 184, 304, 310, 322, 323, 362, 520, 550, 555, 579, 582, 744, 745, 746, 747, 753, 883, 895, 897], "tanh": [2, 128, 129, 184, 305, 322, 323, 375, 403, 520, 550, 555, 750, 1133], "762": [2, 107, 128, 129, 184, 311, 322, 323, 403, 410, 520, 550, 555, 749, 751, 752], "964": [2, 107, 128, 129, 184, 311, 322, 323, 403, 410, 520, 550, 555, 749, 751, 752], "tensordot": [2, 138, 139, 181, 182, 883], "tile": [2, 142, 143, 184, 336, 337, 971, 1133], "rep": [2, 109, 142, 143, 184, 312, 336, 337, 971, 1023, 1024, 1025, 1026], "trace": [2, 138, 139, 179, 180, 181, 182, 375, 392, 758, 804, 805, 807, 883], "trunc": [2, 128, 129, 184, 322, 323, 520], "var": [2, 154, 155, 184, 191, 348, 349, 352, 353, 362, 375, 1031, 1032, 1033, 1091], "vecdot": [2, 138, 139, 181, 182, 883], "vector_norm": [2, 138, 139, 179, 180, 883], "vector_to_skew_symmetric_matrix": [2, 138, 139, 181, 182, 883, 1133], "zero_pad": [2, 142, 143, 184, 336, 337, 971, 1133], "method": [3, 6, 7, 8, 10, 25, 26, 27, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 158, 159, 179, 180, 181, 182, 183, 185, 188, 190, 191, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 352, 353, 357, 360, 361, 362, 364, 365, 368, 373, 375, 376, 379, 380, 392, 403, 405, 406, 407, 408, 409, 410, 414, 420, 442, 443, 444, 446, 520, 521, 522, 523, 525, 535, 536, 538, 539, 542, 550, 555, 559, 562, 579, 582, 583, 584, 585, 586, 591, 603, 616, 617, 618, 620, 627, 628, 631, 668, 688, 689, 695, 698, 699, 702, 715, 718, 731, 734, 735, 738, 745, 746, 747, 749, 750, 751, 752, 753, 758, 759, 760, 761, 763, 774, 775, 786, 787, 788, 789, 791, 814, 815, 826, 828, 832, 834, 835, 836, 838, 852, 854, 856, 858, 870, 876, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 955, 956, 959, 971, 972, 973, 974, 976, 985, 988, 989, 992, 997, 1000, 1005, 1006, 1007, 1009, 1010, 1019, 1022, 1035, 1036, 1046, 1047, 1048, 1053, 1054, 1057, 1058, 1060, 1062, 1063, 1064, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1092, 1095, 1096, 1099, 1119, 1124, 1125, 1128, 1133, 1154, 1165, 1166, 1167], "collect": [117, 179, 180, 364, 391, 403, 411, 470, 758, 832, 870, 955, 1035, 1048, 1053, 1058, 1140, 1154, 1168, 1170], "accept": [117, 355, 356, 361, 362, 364, 365, 368, 369, 371, 372, 373, 377, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 534, 539, 542, 559, 562, 579, 582, 583, 586, 591, 616, 676, 679, 680, 683, 699, 702, 711, 714, 715, 718, 731, 734, 735, 738, 744, 749, 758, 786, 870, 873, 882, 883, 892, 971, 985, 988, 989, 992, 1005, 1008, 1053, 1054, 1057, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1100, 1103, 1124, 1125, 1128, 1133], "args_to_ivi": 117, "arg": [117, 118, 119, 160, 164, 179, 180, 358, 375, 377, 379, 470, 479, 494, 498, 502, 514, 758, 815, 1143, 1144, 1166, 1167], "include_deriv": [117, 118, 119, 120, 121, 1035, 1037, 1047], "kwarg": [117, 118, 119, 160, 164, 177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 375, 377, 379, 470, 479, 494, 498, 502, 758, 808, 1143, 1144, 1166, 1167], "keyword": [117, 118, 119, 179, 180, 181, 182, 183, 360, 370, 371, 372, 373, 378, 414, 425, 470, 479, 480, 494, 498, 502, 758, 765, 808, 1035, 1041, 1091, 1116, 1166, 1167], "variabl": [117, 118, 119, 120, 121, 179, 180, 181, 182, 361, 366, 369, 370, 372, 373, 378, 379, 380, 392, 758, 768, 800, 801, 802, 803, 804, 805, 807, 824, 832, 839, 841, 843, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 865, 868, 870, 881, 883, 931, 933, 1031, 1032, 1033, 1034, 1053, 1054, 1057, 1133, 1143, 1144, 1145, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177], "form": [117, 118, 119, 120, 121, 175, 179, 180, 354, 365, 379, 380, 414, 416, 426, 429, 430, 758, 764, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 870, 883, 884, 887, 892, 895, 897, 898, 900, 901, 903, 904, 906, 915, 917, 918, 920, 924, 926, 927, 929, 931, 933, 934, 936, 937, 939, 943, 945, 1035, 1037, 1047], "nest": [117, 118, 119, 120, 121, 179, 180, 181, 182, 183, 360, 365, 368, 369, 377, 378, 379, 392, 470, 494, 498, 502, 758, 826, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1166, 1167, 1170, 1171, 1172, 1173, 1174, 1175], "otherwis": [117, 118, 119, 120, 121, 160, 172, 179, 180, 368, 370, 371, 373, 375, 377, 414, 415, 433, 439, 442, 445, 448, 449, 450, 470, 489, 520, 632, 635, 636, 639, 640, 643, 758, 768, 829, 832, 848, 850, 865, 883, 884, 887, 892, 946, 948, 949, 951, 1031, 1032, 1033, 1035, 1048, 1070, 1071, 1072, 1074, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "argument": [117, 118, 119, 120, 121, 160, 164, 165, 174, 179, 180, 181, 182, 183, 357, 359, 360, 361, 362, 364, 365, 366, 368, 369, 375, 377, 378, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 461, 470, 479, 480, 494, 498, 502, 520, 521, 524, 534, 539, 542, 583, 586, 616, 699, 702, 731, 734, 735, 738, 744, 758, 764, 765, 769, 779, 786, 808, 815, 870, 873, 882, 971, 1005, 1008, 1035, 1041, 1053, 1054, 1057, 1091, 1096, 1099, 1116, 1124, 1125, 1128, 1136, 1138, 1143, 1144, 1166, 1167], "ar": [117, 118, 119, 174, 175, 176, 179, 180, 181, 182, 183, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 391, 392, 393, 401, 414, 415, 470, 479, 480, 504, 508, 510, 514, 520, 587, 676, 679, 680, 683, 715, 718, 723, 726, 744, 758, 759, 762, 766, 767, 768, 792, 798, 799, 803, 810, 812, 824, 870, 879, 883, 889, 891, 906, 907, 910, 911, 913, 915, 917, 924, 926, 934, 936, 937, 939, 946, 948, 971, 972, 975, 989, 992, 1005, 1008, 1035, 1037, 1041, 1047, 1058, 1063, 1064, 1066, 1070, 1071, 1072, 1073, 1075, 1076, 1133, 1176, 1177], "unchang": [117, 118, 119, 120, 121], "The": [117, 118, 119, 120, 121, 160, 164, 165, 173, 174, 176, 179, 180, 181, 182, 183, 354, 355, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 391, 403, 404, 405, 408, 410, 411, 412, 414, 415, 420, 424, 429, 430, 433, 437, 438, 439, 447, 452, 454, 455, 457, 460, 465, 469, 470, 479, 480, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 509, 510, 511, 512, 513, 514, 516, 519, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 690, 693, 699, 702, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 744, 748, 749, 753, 754, 757, 758, 764, 766, 769, 770, 778, 779, 785, 787, 790, 800, 801, 802, 804, 805, 806, 807, 809, 814, 815, 816, 817, 818, 821, 822, 823, 831, 832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 865, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 955, 956, 959, 961, 964, 966, 969, 971, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1010, 1023, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1063, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1143, 1144, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174], "check": [117, 118, 119, 120, 121, 174, 175, 176, 179, 180, 355, 356, 369, 374, 375, 377, 378, 379, 380, 391, 433, 447, 454, 455, 457, 469, 470, 509, 519, 758, 768, 783, 797, 804, 805, 806, 807, 824, 831, 832, 848, 850, 883, 898, 900, 1035, 1036, 1045, 1046, 1047, 1133], "dict": [117, 118, 119, 120, 121, 160, 172, 179, 180, 181, 182, 183, 369, 378, 379, 470, 479, 480, 489, 492, 495, 496, 497, 498, 758, 764, 780, 781, 782, 1035, 1037, 1038, 1041, 1044, 1047, 1048], "whether": [117, 118, 119, 120, 121, 179, 180, 181, 182, 183, 184, 191, 352, 353, 354, 355, 370, 372, 373, 403, 404, 411, 412, 433, 439, 451, 457, 458, 459, 469, 470, 489, 490, 501, 505, 506, 509, 510, 514, 517, 519, 520, 640, 643, 758, 759, 762, 766, 767, 776, 779, 783, 785, 795, 797, 799, 802, 803, 804, 805, 806, 807, 808, 820, 824, 830, 831, 832, 839, 841, 843, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 865, 870, 878, 883, 898, 900, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1045, 1046, 1047, 1048, 1058, 1059, 1124, 1125, 1128, 1129, 1132, 1143, 1144, 1154, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175], "recurs": [117, 118, 119, 120, 121, 179, 180, 355, 358, 365, 369, 379, 392, 1035, 1036, 1037, 1045, 1046, 1047], "deriv": [117, 118, 119, 120, 121, 370, 371, 377, 379, 414, 418, 422, 428, 432, 832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 1035, 1037, 1047, 1166, 1170, 1174, 1176], "str": [117, 118, 119, 160, 165, 179, 180, 370, 371, 411, 412, 414, 425, 433, 437, 447, 448, 449, 452, 453, 456, 457, 458, 459, 462, 463, 464, 469, 470, 486, 489, 490, 492, 495, 496, 497, 498, 514, 758, 764, 778, 780, 781, 782, 809, 814, 815, 870, 871, 873, 875, 876, 877, 883, 927, 929, 1031, 1032, 1033, 1034, 1035, 1041, 1091, 1092, 1095, 1119], "kei": [117, 118, 119, 179, 180, 181, 182, 183, 369, 378, 470, 482, 758, 764, 774, 870, 881, 882, 1031, 1032, 1033, 1035, 1038, 1044, 1048, 1143, 1144, 1154, 1165, 1170, 1174], "word": [117, 118, 119, 414, 415, 1058, 1064, 1066, 1143, 1144], "ret": [117, 118, 119, 120, 121, 160, 164, 165, 172, 179, 180, 360, 361, 375, 380, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 445, 447, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 469, 470, 479, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 514, 515, 516, 517, 519, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 759, 762, 764, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 814, 815, 820, 822, 823, 824, 826, 827, 828, 830, 831, 832, 834, 837, 839, 841, 843, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1045, 1046, 1047, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1136, 1138, 1143, 1144, 1170, 1174], "same": [117, 118, 119, 174, 176, 179, 180, 355, 356, 358, 360, 362, 364, 365, 368, 369, 371, 372, 373, 375, 377, 379, 380, 414, 415, 418, 422, 425, 428, 429, 430, 432, 433, 439, 440, 441, 470, 479, 480, 514, 520, 521, 524, 534, 563, 566, 583, 586, 616, 690, 693, 711, 714, 715, 718, 719, 722, 754, 757, 758, 784, 786, 787, 790, 811, 814, 815, 832, 848, 850, 865, 870, 871, 872, 873, 874, 875, 876, 877, 882, 883, 884, 887, 889, 891, 892, 895, 897, 898, 900, 901, 903, 904, 906, 918, 920, 924, 926, 927, 929, 931, 933, 934, 943, 945, 946, 948, 971, 977, 980, 989, 992, 993, 996, 1005, 1008, 1011, 1014, 1015, 1018, 1031, 1032, 1033, 1035, 1048, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1116, 1119, 1120, 1123, 1133, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "convert": [117, 118, 119, 120, 121, 176, 179, 180, 368, 375, 392, 393, 401, 414, 416, 426, 433, 437, 438, 470, 486, 487, 488, 489, 509, 516, 519, 758, 821, 827, 828, 883, 952, 954, 1035, 1037, 1047, 1048, 1144], "args_to_n": [117, 372, 377], "nativ": [117, 119, 120, 121, 160, 166, 179, 180, 370, 372, 377, 378, 414, 426, 433, 437, 438, 447, 470, 486, 487, 488, 489, 490, 509, 516, 519, 758, 802, 804, 807, 1143, 1144], "backend": [117, 119, 121, 164, 165, 166, 172, 174, 179, 180, 356, 357, 359, 361, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 376, 377, 380, 433, 454, 455, 457, 469, 470, 505, 507, 517, 758, 799, 802, 803, 809, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 868, 1133, 1139, 1143, 1144, 1170, 1171, 1172, 1173, 1174, 1175], "to_ivi": [117, 179, 180, 377, 1035, 1048], "If": [117, 120, 121, 160, 164, 165, 166, 174, 179, 180, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 380, 392, 414, 415, 417, 418, 419, 421, 422, 425, 427, 428, 429, 430, 431, 432, 433, 439, 441, 461, 470, 489, 513, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 551, 554, 583, 586, 587, 590, 591, 594, 608, 611, 612, 615, 616, 652, 655, 656, 659, 664, 667, 668, 671, 676, 679, 680, 683, 690, 693, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 744, 749, 754, 757, 758, 802, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 883, 884, 887, 889, 891, 906, 911, 913, 915, 917, 924, 926, 927, 929, 931, 933, 934, 946, 948, 949, 951, 955, 956, 959, 961, 964, 966, 969, 971, 985, 988, 989, 992, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1031, 1032, 1033, 1035, 1047, 1048, 1058, 1063, 1064, 1066, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133], "set": [117, 120, 121, 151, 160, 164, 165, 166, 172, 174, 179, 180, 345, 354, 356, 359, 360, 365, 367, 368, 369, 370, 371, 372, 375, 377, 378, 470, 489, 499, 500, 511, 512, 513, 514, 520, 551, 554, 758, 759, 762, 816, 817, 818, 819, 832, 839, 841, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 883, 889, 891, 906, 911, 913, 915, 917, 924, 926, 931, 933, 1035, 1036, 1045, 1046, 1047, 1051, 1052, 1058, 1068, 1070, 1071, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1112, 1115, 1120, 1123, 1154, 1163, 1170, 1171, 1172, 1173, 1174, 1175], "leaf": [117, 120, 121, 179, 180, 365, 369, 378, 1035, 1036, 1045, 1046], "within": [117, 120, 121, 356, 364, 379, 392, 414, 415, 1058, 1064, 1066], "mayb": [117, 120, 121, 355, 375, 377], "manner": [117, 120, 121, 174, 179, 180, 360, 361, 371, 378, 391, 392, 1035, 1047], "travers": [117, 120, 121, 179, 180, 369, 375, 377, 1035, 1047], "lowest": [117, 120, 121, 179, 180, 365, 392, 1035, 1047, 1058, 1060, 1061], "leav": [117, 120, 121, 179, 180, 181, 182, 184, 361, 362, 364, 365, 369, 370, 372, 373, 378, 379, 971, 1015, 1018, 1035, 1036, 1037, 1045, 1046, 1047], "search": [117, 120, 121, 149, 174, 179, 180, 343, 355, 360, 362, 364, 1071, 1072, 1073, 1074], "s": [117, 120, 121, 160, 164, 165, 166, 172, 175, 176, 179, 180, 354, 355, 356, 358, 359, 361, 362, 364, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 392, 413, 414, 425, 429, 430, 433, 454, 455, 470, 489, 513, 520, 711, 714, 758, 767, 832, 839, 841, 844, 846, 852, 854, 860, 862, 883, 934, 936, 937, 939, 1035, 1041, 1047, 1091, 1112, 1115, 1120, 1123, 1133, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1176, 1177], "case": [117, 120, 121, 175, 179, 180, 181, 182, 183, 355, 356, 357, 360, 361, 362, 365, 366, 368, 369, 370, 371, 372, 373, 375, 377, 379, 380, 392, 414, 425, 470, 509, 516, 519, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 551, 554, 579, 582, 583, 586, 587, 590, 591, 594, 608, 611, 612, 615, 616, 652, 655, 656, 659, 664, 667, 668, 671, 690, 693, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 744, 749, 754, 757, 758, 802, 814, 815, 883, 911, 913, 971, 1001, 1004, 1035, 1038, 1044, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1112, 1115, 1116, 1120, 1123, 1154, 1165, 1166, 1167, 1170, 1174], "to_n": [117, 179, 180], "convers": [118, 119, 120, 121, 176, 179, 180, 374, 376, 380, 391, 392, 1133, 1139], "arraywithcr": 122, "creation": [123, 179, 180, 181, 182, 183, 317, 360, 370, 371, 375, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432], "data_typ": [124, 125, 318, 319, 360, 370, 433, 437, 438, 439, 440, 441, 442, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469], "arraywithdatatyp": 124, "arraywithdevic": [126, 377], "devic": [127, 175, 179, 180, 184, 264, 298, 299, 321, 340, 341, 356, 359, 360, 365, 367, 370, 377, 378, 392, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 758, 786, 787, 790, 811, 814, 815, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1143, 1144, 1145, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1176, 1177], "arraywithelementwis": [128, 357, 368], "elementwis": [129, 179, 180, 323, 360, 365, 375, 380, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757], "arraywithgener": [130, 377], "arraywithgradi": [132, 377], "gradient": [133, 179, 180, 327, 360, 369, 378, 379, 391, 392, 470, 514, 834, 837, 839, 841, 843, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 865, 866, 867, 868, 869, 1031, 1032, 1033, 1034, 1133, 1170, 1171, 1172, 1173, 1174, 1175], "arraywithimag": [134, 377], "imag": [135, 329, 355, 358, 360, 375, 376, 378, 380, 391, 870, 871, 872, 873, 874, 876, 877, 1133], "arraywithlay": 136, "layer": [137, 174, 331, 360, 361, 375, 376, 379, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 1053, 1054, 1057, 1133, 1145, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1176, 1177], "linear_algebra": [138, 139, 332, 333, 360, 377, 883, 884, 887, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954], "arraywithlinearalgebra": 138, "arraywithloss": 140, "loss": [141, 335, 360, 365, 378, 379, 380, 956, 959, 961, 964, 966, 969, 1133], "arraywithmanipul": 142, "manipul": [143, 174, 337, 360, 380, 391, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030], "arraywithnorm": 144, "norm": [145, 179, 180, 339, 360, 758, 770, 771, 773, 883, 911, 913, 949, 951, 1054, 1057, 1133, 1169, 1170, 1172], "arraywithrandom": [146, 377], "random": [147, 179, 180, 341, 360, 371, 380, 391, 1059, 1060, 1061, 1063, 1064, 1066, 1068, 1069, 1133], "arraywithsearch": 148, "arraywithset": 150, "arraywithsort": 152, "arraywithstatist": 154, "statist": [155, 184, 191, 349, 352, 353, 360, 370, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123], "arraywithutil": 156, "util": [157, 351, 360, 371, 470, 503, 1125, 1128, 1129, 1132], "backend_handl": [160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 1133], "contextmanag": [160, 161], "object": [160, 179, 180, 181, 182, 183, 184, 377, 380, 414, 420, 433, 453, 470, 515, 832, 1035, 1038, 1040, 1042, 1043, 1044, 1049, 1050, 1051, 1052, 1058, 1069, 1145, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1166, 1167], "__init__": [160, 161, 164, 165, 179, 180, 181, 182, 183, 184, 360, 366, 370, 375, 377, 378, 379, 380, 433, 434, 435, 436, 470, 471, 478, 479, 480, 481, 482, 483, 484, 485, 832, 833, 1058, 1059, 1063, 1133, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177], "choose_random_backend": 160, "exclud": [160, 162, 362, 375, 414, 415, 1058, 1064, 1066], "clear_backend_stack": 160, "current_backend": [160, 181, 182, 360, 365], "current": [160, 164, 165, 172, 176, 179, 180, 181, 182, 183, 355, 356, 357, 358, 365, 371, 375, 380, 391, 392, 433, 454, 455, 457, 469, 470, 479, 503, 504, 508, 510, 758, 792, 799, 803, 810, 812, 1035, 1036, 1045, 1046, 1133], "prioriti": [160, 164, 179, 180, 356, 372], "global_backend": [160, 164], "which": [160, 164, 165, 174, 175, 176, 179, 180, 181, 182, 183, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 391, 392, 403, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 442, 445, 447, 451, 453, 456, 457, 469, 470, 479, 480, 490, 495, 496, 497, 498, 499, 500, 501, 502, 504, 508, 510, 512, 513, 514, 520, 711, 714, 758, 764, 776, 777, 779, 786, 787, 790, 792, 798, 802, 810, 811, 812, 814, 815, 830, 832, 839, 841, 843, 844, 846, 852, 854, 856, 858, 860, 862, 865, 867, 868, 870, 881, 883, 889, 891, 895, 897, 911, 913, 931, 933, 934, 946, 948, 949, 951, 955, 961, 964, 966, 969, 971, 977, 980, 989, 992, 997, 1000, 1005, 1008, 1010, 1015, 1018, 1035, 1040, 1041, 1042, 1043, 1048, 1049, 1050, 1051, 1052, 1058, 1059, 1060, 1061, 1064, 1066, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1136, 1138, 1143, 1144, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1176, 1177], "try": [160, 164, 173, 175, 176, 179, 180, 355, 356, 357, 358, 368, 369, 377, 392, 758, 829, 1133], "infer": [160, 164, 359, 366, 370, 371, 375, 380, 411, 412, 414, 415, 416, 418, 421, 422, 426, 428, 432, 520, 624, 758, 795, 820, 971, 1001, 1004], "when": [160, 164, 174, 175, 179, 180, 181, 182, 183, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 380, 392, 433, 439, 470, 520, 534, 612, 615, 707, 710, 758, 769, 802, 823, 955, 956, 959, 961, 964, 966, 969, 1035, 1046, 1070, 1071, 1072, 1074, 1091, 1096, 1099, 1104, 1107, 1112, 1115, 1120, 1123, 1133, 1166, 1167], "global": [160, 164, 165, 166, 172, 179, 180, 181, 182, 183, 365, 366, 370, 371, 375, 433, 448, 449, 450, 470, 479, 480, 512, 513, 514, 758, 793, 794, 813, 816, 817, 818, 822, 823, 1053, 1054, 1057, 1168, 1169], "numpi": [160, 164, 165, 166, 174, 175, 179, 180, 356, 357, 364, 366, 370, 371, 372, 373, 375, 377, 380, 758, 827, 1091, 1092, 1095, 1119, 1133], "np": [160, 164, 368, 370, 371, 372, 373, 377, 378, 380, 1133], "py": [160, 164, 165, 356, 360, 361, 365, 366, 370, 371, 373, 375, 377, 379, 380, 1058, 1059, 1063], "noqa": [160, 164, 165, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 534, 559, 562, 579, 582, 583, 586, 591, 699, 702, 715, 718, 731, 734, 735, 738, 744, 749, 883, 892, 971, 985, 988, 989, 992, 1005, 1008, 1091, 1096, 1099], "set_backend": [160, 164, 165, 172, 365, 366, 367, 370, 433, 454, 455, 470, 511, 758, 820, 1133], "ha": [160, 164, 165, 174, 175, 176, 179, 180, 356, 361, 362, 365, 366, 367, 370, 371, 375, 377, 379, 380, 391, 392, 414, 425, 470, 489, 520, 521, 524, 690, 693, 707, 710, 883, 894, 907, 910, 930, 931, 933, 934, 943, 945, 971, 985, 988, 1011, 1014, 1075, 1076, 1077, 1079, 1091, 1100, 1103, 1108, 1111, 1112, 1115, 1116, 1120, 1123], "jax": [160, 164, 165, 166, 175, 176, 356, 357, 366, 370, 371, 372, 373, 375, 377, 380, 392, 832, 848, 850, 1075, 1076, 1077, 1079, 1133], "get_backend": [160, 365, 366], "specifi": [160, 165, 179, 180, 359, 364, 365, 370, 371, 372, 373, 375, 378, 379, 380, 414, 415, 417, 421, 423, 424, 427, 429, 430, 431, 433, 439, 441, 470, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 508, 510, 513, 514, 515, 520, 711, 714, 758, 764, 776, 786, 787, 790, 797, 830, 883, 895, 897, 911, 913, 940, 942, 943, 945, 946, 948, 949, 951, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 989, 992, 1005, 1008, 1011, 1014, 1015, 1018, 1027, 1030, 1035, 1040, 1042, 1043, 1049, 1050, 1051, 1052, 1070, 1071, 1072, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1091, 1092, 1095, 1108, 1111, 1116, 1119, 1124, 1125, 1128, 1129, 1132], "isn": [160, 165, 356, 378, 392], "associ": [160, 165, 356, 365, 367, 392, 520, 534, 690, 693, 883, 906, 915, 917, 924, 926, 952, 954], "retriev": [160, 165, 356, 758, 764], "i": [160, 165, 356, 358, 359, 375, 378, 380, 414, 415, 425, 520, 521, 524, 551, 554, 567, 570, 575, 578, 583, 586, 598, 616, 619, 620, 623, 632, 635, 688, 689, 695, 698, 707, 710, 711, 714, 758, 766, 767, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 883, 889, 891, 906, 907, 910, 915, 917, 924, 926, 931, 933, 934, 943, 945, 949, 951, 971, 1015, 1018, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1112, 1115, 1116, 1119, 1120, 1123], "e": [160, 165, 175, 176, 354, 356, 358, 359, 369, 378, 392, 413, 414, 425, 433, 438, 461, 470, 486, 520, 521, 524, 551, 554, 567, 570, 575, 578, 583, 586, 598, 608, 616, 619, 620, 623, 632, 635, 652, 655, 660, 663, 688, 689, 695, 698, 707, 710, 711, 714, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 883, 889, 891, 906, 907, 910, 915, 917, 924, 926, 931, 933, 934, 949, 951, 971, 1015, 1018, 1058, 1063, 1064, 1066, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123], "one": [160, 165, 175, 176, 179, 180, 184, 193, 279, 282, 283, 287, 288, 291, 298, 300, 322, 323, 324, 325, 332, 333, 336, 337, 340, 341, 355, 356, 362, 365, 368, 369, 370, 372, 373, 374, 377, 378, 380, 392, 414, 415, 425, 433, 440, 442, 445, 470, 499, 500, 501, 502, 514, 521, 525, 538, 668, 758, 759, 761, 762, 763, 787, 791, 808, 811, 814, 815, 883, 884, 888, 907, 910, 911, 913, 921, 923, 927, 929, 946, 948, 949, 951, 971, 972, 976, 985, 988, 989, 992, 1005, 1008, 1009, 1011, 1014, 1060, 1062, 1070, 1071, 1073, 1075, 1076, 1077, 1078, 1079, 1091, 1092, 1095, 1119, 1133], "torch": [160, 165, 172, 356, 360, 365, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 392, 411, 412, 433, 454, 455, 470, 511, 758, 820, 971, 985, 988, 1133], "tensorflow": [160, 165, 172, 175, 176, 356, 357, 370, 371, 372, 373, 375, 380, 392, 1133], "mxnet": [160, 165, 175, 357, 370, 371, 372, 375, 380, 1133], "either": [160, 165, 172, 179, 180, 355, 356, 358, 361, 362, 365, 366, 369, 370, 371, 375, 377, 378, 392, 414, 420, 520, 534, 537, 551, 554, 611, 636, 639, 652, 655, 656, 659, 664, 667, 668, 671, 690, 693, 711, 714, 719, 722, 723, 726, 744, 758, 779, 804, 808, 809, 883, 907, 910, 1031, 1032, 1033, 1034, 1091, 1108, 1111, 1116, 1154, 1165, 1166, 1167], "doesn": [160, 165, 355, 358, 362, 370, 375, 392], "matter": [160, 165, 174, 362], "been": [160, 165, 356, 361, 365, 366, 369, 370, 371, 373, 375, 391, 392, 470, 489, 758, 780, 781, 782, 1058, 1059], "ivy_np": [160, 165], "ivy_jax": [160, 165], "subsequ": [160, 166, 355, 362, 364, 365, 368, 372, 373, 379], "call": [160, 166, 172, 175, 181, 182, 184, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 392, 470, 514, 758, 813, 818, 829, 832, 843, 1035, 1036, 1041, 1045, 1046, 1154, 1165, 1166, 1167, 1170, 1174], "ndarrai": [160, 166, 368, 370, 371, 372, 373, 377, 414, 416, 426, 758, 827], "Or": [160, 166, 378], "jaxlib": [160, 166, 355, 370, 371, 373, 377], "xla_extens": [160, 166, 370, 371, 373, 377], "devicearrai": [160, 166, 377], "try_import_ivy_jax": 160, "warn": [160, 167, 168, 169, 170, 171], "try_import_ivy_mxnet": 160, "try_import_ivy_numpi": 160, "try_import_ivy_tf": 160, "try_import_ivy_torch": 160, "unset_backend": [160, 366], "unset": [160, 172, 366, 375, 377], "adjust": [160, 172, 1091, 1112, 1115, 1120, 1123], "previous": [160, 172, 355, 358, 364, 365, 375, 758, 769], "implement": [160, 172, 357, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 392, 433, 439, 461, 470, 515, 520, 521, 524, 526, 529, 530, 533, 539, 542, 543, 546, 547, 551, 554, 587, 590, 591, 594, 608, 612, 615, 652, 655, 656, 659, 660, 663, 664, 667, 690, 693, 707, 710, 711, 714, 723, 726, 727, 730, 744, 749, 883, 898, 900, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1133], "wa": [160, 172, 175, 179, 180, 362, 375, 377, 758, 829, 1035, 1048, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "last": [160, 172, 176, 179, 180, 356, 362, 366, 392, 403, 408, 470, 489, 870, 880, 883, 889, 891, 895, 897, 911, 913, 943, 945, 946, 948, 955, 961, 964, 966, 969, 971, 989, 992, 1005, 1008, 1010, 1015, 1018, 1080, 1081, 1084, 1086, 1089, 1124, 1125, 1128, 1129, 1132, 1154, 1164], "henc": [160, 172, 1075, 1076, 1077, 1079], "here": [160, 172, 355, 356, 357, 360, 362, 369, 373, 375, 376, 377, 378, 379, 380, 391, 392], "tensor": [160, 172, 174, 179, 180, 360, 365, 366, 368, 370, 371, 372, 373, 375, 377, 378, 379, 380, 392, 414, 423, 424, 433, 451, 520, 559, 562, 688, 689, 758, 811, 814, 815, 870, 878, 880, 883, 940, 942, 971, 985, 988, 1001, 1004, 1010, 1058, 1059, 1070, 1073, 1133, 1154, 1162, 1164], "howev": [160, 172, 175, 355, 357, 361, 364, 365, 366, 368, 369, 370, 371, 372, 373, 377, 378, 379, 380, 392], "befor": [160, 172, 179, 180, 355, 356, 357, 361, 364, 368, 370, 371, 372, 375, 378, 392, 470, 514, 520, 754, 757, 870, 881, 882, 1031, 1032, 1033, 1035, 1047, 1075, 1076, 1077, 1079, 1091, 1108, 1111, 1116], "becom": [160, 172, 174, 176, 356, 362, 369, 375, 380, 392, 971, 972, 975], "swap": [160, 172, 971, 1019, 1022], "python": [160, 172, 173, 174, 175, 355, 356, 358, 375, 377, 378, 392, 414, 415, 470, 509, 519, 520, 711, 714, 1133, 1139], "op": [160, 172, 360, 375, 392], "eagertensor": [160, 172], "def": [161, 357, 360, 362, 365, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 434, 435, 436, 471, 478, 481, 833, 1133, 1146, 1149, 1152], "ml": [173, 175, 176, 354, 374, 375, 376, 378, 379, 380, 391, 1133, 1139], "explos": [173, 175, 1133], "A": [173, 174, 175, 176, 179, 180, 181, 182, 183, 358, 359, 364, 365, 369, 370, 371, 375, 378, 392, 414, 419, 426, 470, 479, 480, 514, 520, 703, 706, 758, 794, 826, 883, 894, 921, 923, 930, 931, 933, 934, 971, 1010, 1015, 1018, 1035, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1091, 1092, 1095, 1119, 1124, 1125, 1128, 1129, 1132, 1133, 1176, 1177], "huge": [173, 175, 378, 1133], "number": [173, 174, 179, 180, 181, 182, 183, 184, 355, 362, 369, 371, 372, 375, 378, 380, 411, 412, 413, 414, 415, 416, 419, 423, 424, 425, 426, 433, 440, 452, 453, 456, 458, 459, 461, 470, 506, 507, 508, 520, 534, 551, 554, 583, 586, 598, 616, 619, 620, 623, 688, 689, 690, 693, 707, 710, 711, 714, 715, 718, 719, 722, 754, 757, 758, 759, 762, 785, 794, 795, 810, 828, 831, 870, 881, 883, 894, 898, 900, 915, 917, 930, 934, 946, 948, 971, 972, 975, 981, 984, 993, 996, 997, 1000, 1005, 1008, 1010, 1015, 1018, 1023, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1058, 1059, 1068, 1070, 1073, 1075, 1076, 1077, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165], "tool": [173, 176, 356, 376, 380, 391, 392, 1133], "have": [173, 174, 175, 176, 179, 180, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 391, 392, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 439, 440, 441, 453, 470, 515, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 770, 771, 773, 776, 780, 781, 782, 784, 787, 790, 798, 811, 814, 815, 832, 848, 850, 865, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133], "explod": [173, 174, 1133], "onto": [173, 174, 470, 499, 500, 1035, 1041, 1047, 1133], "scene": [173, 174, 359, 374, 376, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 1133], "b": [173, 176, 181, 182, 184, 185, 188, 190, 193, 210, 211, 212, 213, 228, 230, 268, 279, 280, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 310, 311, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 336, 337, 340, 341, 354, 359, 362, 365, 366, 369, 374, 375, 376, 378, 379, 380, 390, 433, 442, 444, 445, 446, 470, 492, 520, 521, 523, 524, 525, 534, 536, 538, 539, 542, 550, 555, 559, 562, 579, 582, 583, 585, 586, 591, 603, 616, 618, 620, 627, 628, 631, 668, 695, 698, 699, 702, 715, 718, 731, 734, 735, 738, 744, 745, 747, 749, 750, 752, 753, 758, 759, 761, 762, 763, 766, 767, 775, 776, 783, 786, 787, 789, 790, 791, 828, 832, 834, 836, 837, 838, 870, 873, 876, 877, 882, 883, 884, 886, 887, 888, 889, 891, 892, 921, 923, 931, 933, 940, 942, 952, 954, 955, 956, 959, 971, 972, 974, 975, 976, 985, 988, 989, 992, 997, 1000, 1005, 1007, 1008, 1009, 1015, 1018, 1019, 1022, 1053, 1054, 1057, 1058, 1060, 1062, 1063, 1064, 1066, 1070, 1072, 1073, 1074, 1080, 1081, 1084, 1091, 1092, 1095, 1096, 1099, 1119, 1124, 1125, 1128, 1133, 1139], "why": [173, 175, 356, 369, 372, 373, 377, 1133], "unifi": [173, 175, 179, 180, 368, 375, 392, 470, 499, 500, 501, 502, 514, 1133], "should": [173, 175, 179, 180, 181, 182, 183, 184, 191, 352, 353, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 378, 379, 411, 412, 414, 425, 429, 430, 433, 441, 470, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 608, 611, 612, 615, 616, 632, 635, 636, 639, 640, 643, 644, 647, 652, 655, 656, 659, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 690, 693, 699, 702, 707, 710, 711, 714, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 769, 802, 811, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 870, 882, 883, 884, 887, 889, 891, 892, 895, 897, 904, 906, 907, 910, 915, 917, 921, 923, 924, 926, 927, 929, 931, 933, 934, 940, 942, 943, 945, 946, 948, 949, 951, 971, 1001, 1004, 1058, 1069, 1070, 1071, 1072, 1075, 1076, 1077, 1079, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1133], "them": [173, 174, 175, 176, 364, 366, 368, 369, 375, 377, 378, 379, 392, 1133], "c": [173, 175, 176, 184, 298, 340, 341, 354, 359, 362, 365, 369, 374, 375, 376, 378, 392, 520, 699, 702, 758, 766, 767, 775, 828, 832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 870, 876, 971, 1015, 1018, 1060, 1062, 1070, 1073, 1091, 1092, 1095, 1112, 1115, 1119, 1120, 1123, 1133, 1139], "standard": [173, 359, 360, 361, 363, 364, 368, 372, 373, 392, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 453, 520, 521, 524, 534, 539, 542, 559, 562, 579, 582, 583, 586, 591, 616, 699, 702, 715, 718, 731, 734, 735, 738, 744, 749, 883, 892, 971, 985, 988, 989, 992, 1005, 1008, 1053, 1054, 1057, 1058, 1063, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1112, 1115, 1120, 1123, 1124, 1125, 1128, 1133, 1139, 1168, 1169], "re": [173, 174, 175, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 380, 392, 470, 514, 758, 780, 883, 940, 942, 971, 1005, 1008, 1070, 1074, 1133], "collabor": [173, 174, 175, 1133], "consortium": [173, 175, 1133, 1139], "data": [173, 175, 179, 180, 181, 182, 183, 359, 360, 361, 365, 367, 369, 371, 372, 373, 377, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 437, 438, 439, 441, 442, 445, 447, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 465, 469, 470, 472, 473, 474, 475, 476, 477, 482, 483, 484, 486, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 690, 693, 699, 702, 707, 710, 711, 714, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 766, 767, 804, 805, 807, 824, 832, 848, 850, 868, 870, 879, 883, 884, 887, 889, 891, 892, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 931, 933, 934, 940, 942, 943, 945, 946, 948, 949, 951, 971, 985, 988, 989, 992, 993, 996, 1001, 1004, 1005, 1008, 1011, 1014, 1015, 1018, 1058, 1069, 1070, 1071, 1072, 1073, 1080, 1081, 1084, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1139, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165], "api": [173, 174, 355, 356, 359, 361, 362, 364, 365, 367, 368, 370, 371, 372, 373, 374, 376, 378, 392, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 534, 539, 542, 559, 562, 579, 582, 583, 586, 591, 616, 699, 702, 715, 718, 731, 734, 735, 738, 744, 749, 883, 892, 971, 985, 988, 989, 992, 1005, 1008, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1124, 1125, 1128, 1133, 1139], "open": [174, 175, 176, 354, 355, 358, 361, 391, 414, 415, 1058, 1060, 1061, 1064, 1066, 1133], "project": [174, 175, 176, 355, 356, 358, 360, 366, 377, 379, 391, 392, 1058, 1059, 1063], "grown": 174, "consider": [174, 362, 373], "recent": [174, 175, 355, 356], "year": [174, 176, 392, 1133], "especi": [174, 355], "deep": [174, 179, 180, 354, 356, 357, 374, 378, 1133], "learn": [174, 175, 355, 357, 359, 365, 374, 380, 391, 520, 624, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 1031, 1032, 1033, 1034, 1133, 1170, 1171, 1172, 1173, 1174, 1175], "can": [174, 175, 176, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 391, 392, 414, 416, 426, 433, 442, 445, 470, 512, 513, 514, 883, 904, 971, 1001, 1004, 1058, 1060, 1061, 1133, 1139], "seen": [174, 175, 362, 377, 378], "rapidli": 174, "increas": [174, 470, 494, 498, 502, 971, 981, 984, 1027, 1030, 1035, 1047], "github": [174, 356, 357, 361, 364], "repo": [174, 175, 176, 355, 356, 363, 375, 377, 378, 379, 380, 391, 1133, 1139], "term": [174, 356, 369, 870, 880, 1154, 1164], "time": [174, 175, 176, 355, 356, 357, 364, 365, 369, 370, 373, 375, 378, 380, 392, 832, 839, 841, 852, 854, 870, 880, 971, 1023, 1026, 1031, 1032, 1033, 1034, 1070, 1071, 1072, 1075, 1076, 1077, 1154, 1165, 1166, 1167], "These": [174, 175, 176, 356, 361, 362, 364, 365, 369, 370, 372, 373, 375, 376, 378, 379, 380, 392, 883, 898, 900, 1133, 1139], "written": [174, 355, 360, 361, 368, 372, 373, 375, 377, 380, 392], "mani": [174, 175, 176, 179, 180, 355, 356, 357, 361, 362, 365, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 392, 971, 1010], "differ": [174, 175, 176, 179, 180, 181, 182, 183, 355, 356, 359, 360, 361, 362, 364, 365, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 392, 433, 453, 470, 491, 492, 495, 496, 520, 534, 690, 693, 739, 743, 870, 879, 971, 1015, 1018, 1091, 1108, 1111, 1116, 1133], "while": [174, 175, 179, 180, 181, 182, 183, 355, 356, 362, 366, 372, 379, 380, 392, 520, 676, 679, 680, 683, 1075, 1076, 1091, 1100, 1103], "wonder": [174, 176, 377], "thing": [174, 175, 176, 355, 356, 357, 366, 377, 378], "research": [174, 391], "develop": [174, 175, 176, 354, 355, 356, 357, 391, 392, 1133], "consid": [174, 175, 179, 180, 360, 365, 376, 377, 378, 520, 676, 679, 680, 683, 1075, 1076, 1077, 1079], "speed": 174, "evolv": 174, "sharabl": 174, "code": [174, 175, 176, 179, 180, 181, 182, 183, 184, 188, 280, 326, 327, 355, 356, 357, 358, 359, 361, 362, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 390, 392, 403, 405, 406, 407, 408, 409, 410, 470, 492, 515, 520, 579, 582, 735, 738, 832, 834, 836, 837, 838, 870, 876, 877, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1092, 1095, 1119, 1133, 1139], "significantli": 174, "hinder": [174, 373], "librari": [174, 175, 176, 375, 380, 390, 392, 470, 515, 520, 612, 615, 676, 679, 680, 683, 883, 898, 900, 1075, 1076, 1077, 1079, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1133], "outdat": 174, "month": 174, "rigor": 174, "maintain": [174, 356, 1080, 1081, 1084, 1086, 1089], "against": [174, 179, 180, 364, 392, 433, 440, 883, 906, 907, 910, 911, 913, 915, 917, 924, 926, 1070, 1071], "newest": 174, "version": [174, 175, 176, 355, 361, 375, 377, 883, 898, 900, 1133], "For": [174, 175, 176, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 392, 414, 415, 425, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 551, 554, 583, 586, 587, 590, 591, 594, 608, 611, 612, 615, 616, 652, 655, 656, 659, 664, 667, 668, 671, 690, 693, 707, 710, 711, 714, 715, 718, 723, 726, 727, 730, 731, 734, 744, 749, 754, 757, 832, 848, 850, 868, 883, 934, 943, 945, 971, 972, 975, 1015, 1018, 1075, 1076, 1077, 1079, 1091, 1096, 1099, 1104, 1107, 1116, 1143, 1144], "softwar": [174, 175, 355, 356], "pipelin": [174, 368, 380], "where": [174, 175, 176, 179, 180, 181, 182, 354, 355, 356, 357, 358, 361, 365, 366, 368, 369, 370, 371, 372, 375, 378, 379, 380, 392, 414, 421, 422, 425, 520, 551, 554, 608, 660, 663, 690, 693, 707, 710, 758, 798, 802, 811, 883, 898, 900, 906, 915, 917, 924, 926, 927, 929, 934, 936, 937, 939, 943, 945, 946, 948, 971, 972, 975, 981, 984, 985, 988, 993, 996, 1015, 1018, 1027, 1030, 1035, 1036, 1046, 1058, 1059, 1070, 1073, 1091, 1112, 1115, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133], "rapid": [174, 175, 355], "prototyp": 174, "vital": [174, 380], "signific": [174, 175, 392], "bottleneck": 174, "new": [174, 175, 176, 179, 180, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 367, 369, 370, 372, 374, 377, 380, 391, 414, 417, 420, 421, 422, 427, 428, 431, 432, 433, 465, 520, 550, 555, 558, 660, 663, 703, 706, 748, 753, 758, 780, 781, 782, 785, 786, 787, 790, 814, 815, 816, 817, 822, 823, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 971, 985, 988, 1001, 1004, 1015, 1018, 1035, 1040, 1051, 1052, 1053, 1054, 1057, 1133, 1143, 1144, 1154, 1164, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175], "futur": [174, 176, 355, 356, 377, 392, 883, 898, 900], "avail": [174, 179, 180, 355, 356, 361, 371, 392, 470, 489, 505, 506, 507, 517, 758, 781], "specif": [174, 179, 180, 357, 365, 368, 369, 370, 371, 372, 373, 375, 376, 377, 379, 380, 391, 392, 433, 461, 470, 512, 515, 520, 676, 679, 680, 683, 758, 780, 781, 782, 809, 883, 898, 900, 940, 942, 971, 1015, 1018, 1031, 1032, 1033, 1034, 1058, 1059, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1133, 1136, 1138, 1139, 1166, 1167], "quickli": [174, 176, 355, 356, 378, 379], "obsolet": [174, 176], "user": [174, 175, 355, 356, 358, 359, 364, 366, 369, 372, 374, 392, 1154, 1165, 1166, 1167], "constantli": 174, "invent": 174, "wheel": 174, "desir": [174, 179, 180, 433, 439, 442, 445, 470, 515, 758, 798, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165], "provid": [174, 179, 180, 355, 356, 361, 362, 365, 368, 369, 370, 371, 372, 373, 375, 379, 391, 392, 411, 412, 414, 425, 433, 448, 449, 450, 457, 461, 469, 470, 489, 758, 779, 811, 815, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 883, 946, 948, 971, 989, 992, 1015, 1018, 1070, 1071, 1091, 1112, 1115, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165, 1170, 1171, 1172, 1173, 1174, 1175], "simultan": [174, 176], "modern": [174, 175], "simpl": [174, 355, 356, 360, 361, 362, 364, 365, 368, 369, 370, 371, 372, 375, 377, 379, 380, 392, 758, 783], "scalabl": [174, 375], "must": [174, 176, 179, 180, 181, 182, 183, 355, 356, 357, 360, 361, 362, 365, 368, 369, 370, 371, 373, 375, 379, 380, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 439, 440, 441, 470, 499, 500, 501, 502, 514, 515, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 770, 771, 773, 776, 780, 781, 782, 784, 787, 790, 798, 811, 814, 815, 832, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1170, 1174], "determin": [174, 179, 180, 361, 365, 369, 370, 371, 433, 442, 445, 447, 452, 457, 458, 459, 469, 470, 505, 506, 507, 517, 520, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 567, 570, 571, 574, 575, 578, 579, 582, 587, 590, 591, 594, 595, 608, 611, 612, 615, 632, 635, 636, 639, 640, 643, 652, 655, 656, 659, 664, 667, 668, 671, 684, 687, 690, 693, 707, 710, 711, 714, 723, 726, 727, 730, 731, 734, 744, 748, 749, 753, 758, 759, 762, 766, 767, 797, 799, 803, 804, 805, 806, 807, 824, 831, 832, 848, 850, 870, 881, 883, 884, 887, 889, 891, 892, 894, 895, 897, 904, 906, 907, 910, 915, 917, 921, 923, 924, 926, 930, 931, 933, 943, 945, 946, 948, 949, 951, 1031, 1032, 1033, 1034, 1075, 1076, 1077, 1079, 1124, 1125, 1128, 1129, 1132], "exactli": [174, 176, 362, 369, 371, 1133, 1139], "common": [174, 179, 180, 357, 362, 365, 367, 369, 371, 392], "ground": [174, 364], "li": 174, "between": [174, 179, 180, 181, 182, 183, 362, 364, 365, 368, 369, 373, 374, 376, 377, 378, 380, 391, 414, 415, 433, 453, 520, 551, 554, 707, 710, 955, 956, 959, 961, 964, 966, 969, 971, 985, 988, 1015, 1018, 1035, 1041, 1058, 1060, 1061, 1075, 1076, 1077, 1079, 1133, 1170, 1172], "find": [174, 179, 180, 355, 356, 375, 378, 1075, 1076, 1077, 1079, 1133], "exist": [174, 175, 179, 180, 181, 182, 355, 357, 358, 361, 362, 363, 364, 365, 366, 367, 372, 375, 392, 758, 779, 1170, 1174], "essenti": [174, 175, 357, 362, 365, 371], "order": [174, 179, 180, 181, 182, 183, 355, 356, 358, 361, 362, 366, 368, 369, 370, 371, 373, 377, 378, 380, 392, 520, 551, 554, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 883, 898, 900, 911, 913, 934, 936, 937, 939, 949, 951, 971, 989, 992, 1031, 1032, 1033, 1070, 1073, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1176, 1177], "design": [174, 175, 359, 372, 375, 377, 392], "univers": 174, "abstract": [174, 369, 379, 392, 470, 485, 1170, 1174], "In": [174, 176, 355, 356, 360, 361, 362, 365, 366, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 392, 470, 509, 515, 516, 519, 520, 534, 690, 693, 711, 714, 758, 764, 802, 971, 1001, 1004, 1058, 1064, 1066, 1133], "languag": [174, 176, 375], "first": [174, 175, 355, 356, 358, 362, 365, 368, 369, 373, 375, 377, 378, 380, 411, 412, 414, 423, 424, 433, 460, 465, 470, 489, 501, 520, 534, 537, 559, 562, 567, 570, 571, 574, 575, 578, 579, 582, 598, 600, 603, 611, 619, 620, 623, 627, 628, 631, 644, 647, 648, 651, 668, 671, 672, 675, 680, 683, 684, 687, 690, 693, 699, 702, 707, 710, 739, 743, 758, 766, 832, 843, 883, 889, 891, 895, 897, 898, 900, 907, 910, 921, 923, 927, 929, 934, 940, 942, 946, 948, 971, 977, 980, 1005, 1008, 1015, 1018, 1019, 1022, 1031, 1032, 1033, 1034, 1035, 1036, 1045, 1046, 1058, 1069, 1070, 1071, 1072, 1075, 1076, 1077, 1154, 1165, 1166, 1167, 1170, 1174], "see": [174, 354, 355, 356, 357, 363, 365, 369, 371, 373, 377, 378, 391, 392, 414, 415, 420, 423, 424, 433, 441, 461, 520, 534, 537, 559, 562, 567, 570, 571, 574, 575, 578, 579, 582, 595, 611, 612, 615, 644, 647, 668, 671, 680, 683, 684, 687, 690, 693, 699, 702, 707, 710, 711, 714, 739, 743, 883, 906, 915, 917, 924, 926, 931, 933, 946, 948, 949, 951, 1070, 1072, 1075, 1076, 1077, 1079, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133], "clear": [174, 175, 176, 356, 357, 362, 364, 370, 371, 375, 377, 470, 488], "front": [174, 374, 375, 378, 1133, 1139], "runner": 174, "look": [174, 355, 356, 358, 360, 362, 365, 366, 369, 370, 371, 373, 375, 377, 379, 380, 1133], "littl": [174, 377], "deeper": [174, 356, 359, 374, 470, 494, 498, 502, 1035, 1046, 1047], "follow": [174, 175, 179, 180, 355, 356, 357, 358, 360, 361, 362, 364, 366, 368, 369, 370, 371, 372, 374, 375, 377, 378, 379, 380, 392, 433, 456, 470, 514, 520, 711, 714, 758, 800, 801, 802, 822, 823, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 870, 881, 882, 883, 927, 929, 949, 951, 1035, 1041, 1047, 1075, 1076, 1077, 1079, 1133, 1154, 1164, 1170, 1174], "core": [174, 355, 357, 371, 375, 380, 470, 506, 1133], "principl": 174, "oper": [174, 179, 180, 181, 182, 184, 355, 357, 361, 362, 365, 368, 369, 371, 372, 378, 379, 414, 423, 424, 433, 461, 520, 534, 575, 578, 579, 582, 603, 627, 628, 631, 695, 698, 699, 702, 711, 714, 735, 738, 758, 768, 780, 781, 782, 824, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 870, 871, 872, 873, 874, 875, 876, 877, 879], "expos": [174, 375, 379, 758, 774], "almost": [174, 356, 369, 376, 378], "ident": [174, 176, 179, 180, 365, 367, 369, 377, 378, 392, 470, 504, 1035, 1048, 1133], "uniqu": [174, 365, 369, 392, 470, 479, 480, 1031, 1032, 1033, 1034, 1035, 1041, 1075, 1076, 1077, 1078, 1079], "syntax": [174, 175], "There": [174, 355, 356, 362, 365, 368, 369, 370, 375, 378, 392], "onli": [174, 179, 180, 354, 355, 356, 360, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 390, 392, 470, 510, 520, 676, 679, 680, 683, 883, 907, 910, 927, 929, 971, 989, 992, 1035, 1036, 1037, 1045, 1046, 1070, 1071, 1072, 1091, 1100, 1103, 1133, 1170, 1171, 1172, 1173, 1174, 1175], "wai": [174, 175, 355, 366, 372, 377, 378, 379, 380, 392], "unsurprisingli": [174, 362], "fundament": [174, 369, 375], "consist": [174, 179, 180, 368, 372, 470, 502, 883, 898, 900, 1091, 1092, 1095, 1119, 1166, 1167], "each": [174, 175, 176, 179, 180, 181, 182, 183, 184, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 380, 391, 392, 403, 406, 407, 409, 414, 425, 433, 440, 470, 479, 480, 491, 492, 493, 494, 495, 496, 497, 501, 514, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 759, 762, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 870, 871, 872, 873, 874, 875, 876, 877, 878, 883, 884, 887, 889, 891, 892, 898, 900, 906, 907, 910, 915, 917, 918, 920, 924, 926, 931, 933, 934, 971, 981, 984, 997, 1000, 1005, 1008, 1010, 1015, 1018, 1023, 1026, 1027, 1030, 1035, 1041, 1048, 1058, 1059, 1070, 1073, 1075, 1076, 1077, 1091, 1092, 1095, 1119, 1133, 1139, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177], "veri": [174, 175, 355, 356, 360, 362, 364, 365, 369, 371, 372, 373, 376, 378, 379, 380, 392, 1133], "similar": [174, 360, 369, 370, 371, 378, 392, 520, 711, 714, 870, 881, 1154, 1165], "convent": [174, 391, 883, 907, 910, 1091, 1092, 1095, 1119], "those": [174, 179, 180, 355, 356, 357, 369, 375, 380, 414, 415, 832, 868, 883, 927, 929, 934, 971, 972, 975], "introduc": [174, 369, 378, 971, 1005, 1008, 1075, 1076], "2006": 174, "therefor": [174, 356, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 375, 377, 379, 392, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 534, 539, 542, 583, 586, 616, 699, 702, 731, 734, 735, 738, 744, 758, 786, 870, 873, 882, 971, 1005, 1008, 1053, 1054, 1057, 1091, 1096, 1099, 1124, 1125, 1128], "present": [174, 179, 180, 356, 363, 369, 370, 371, 372, 373, 375], "itself": [174, 355, 356, 369, 372, 373, 379, 391, 392, 758, 764, 1035, 1047], "cut": 174, "cloth": 174, "adher": [174, 175, 361, 363, 375, 380], "semant": [174, 375, 380, 520, 711, 714], "up": [174, 175, 176, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 391, 392], "hopefulli": [174, 175, 176, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391], "paint": [174, 375], "pictur": [174, 375], "how": [174, 176, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 391, 392, 1133, 1139, 1154, 1165, 1166, 1167], "pleas": [174, 175, 176, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 1133], "discuss": [174, 175, 176, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 392, 1133], "faq": [174, 175, 176, 375, 377, 378, 379, 380, 391], "reach": [174, 175, 176, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 470, 494, 498, 502, 1035, 1047], "discord": [174, 175, 176, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 391, 1133], "you": [174, 175, 176, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 391, 392, 1133, 1139], "question": [174, 175, 176, 355, 356, 362, 364, 375, 377, 378, 379, 380, 391, 392, 1133], "central": 175, "goal": [175, 357], "being": [175, 176, 179, 180, 355, 356, 362, 364, 367, 368, 369, 370, 371, 372, 373, 375, 378, 391, 392, 414, 415, 758, 813, 818, 1075, 1078, 1133], "would": [175, 355, 356, 358, 359, 361, 362, 364, 366, 367, 368, 369, 372, 373, 374, 375, 377, 379, 380, 392, 403, 408, 470, 515, 1133], "entir": [175, 176, 179, 180, 356, 362, 363, 364, 368, 369, 372, 377, 378, 379, 380, 392, 470, 514, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1154, 1163], "forgiven": 175, "rais": [175, 179, 180, 356, 372, 375, 377, 433, 441, 520, 608, 707, 710, 758, 768, 793, 802, 816, 823, 829, 883, 907, 910, 914, 946, 948, 971, 1011, 1014, 1015, 1018, 1070, 1073, 1091, 1096, 1099, 1104, 1107, 1124, 1125, 1128, 1129, 1132, 1166, 1167, 1170, 1174], "eyebrow": 175, "somehow": 175, "pytorch": [175, 176, 357, 365, 370, 371, 372, 373, 375, 377, 380, 392, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 1133, 1170, 1171, 1172, 1173, 1174, 1175], "other": [175, 179, 180, 181, 182, 184, 355, 356, 360, 361, 362, 364, 365, 368, 369, 372, 375, 377, 379, 380, 390, 391, 392, 411, 412, 414, 415, 520, 612, 615, 758, 759, 762, 764, 832, 843, 1058, 1064, 1066, 1075, 1078, 1091, 1112, 1115, 1120, 1123, 1133], "strong": [175, 392], "industri": 175, "back": [175, 368, 374, 375, 377, 392, 1133, 1139, 1166, 1167, 1170, 1174], "momentum": 175, "won": [175, 176, 356, 380], "ad": [175, 184, 191, 352, 353, 355, 356, 357, 360, 361, 362, 364, 365, 367, 368, 369, 370, 372, 373, 375, 379, 392, 758, 822, 823, 883, 898, 900, 971, 985, 988, 1176, 1177], "just": [175, 176, 355, 356, 361, 362, 364, 365, 372, 375, 377, 378, 392, 1091, 1092, 1095, 1119, 1154, 1163], "make": [175, 176, 355, 356, 357, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 375, 377, 378, 380, 470], "problem": [175, 356, 368, 377], "even": [175, 176, 355, 356, 361, 365, 370, 371, 373, 377, 378, 379, 380, 392, 520, 707, 710, 715, 718], "wors": 175, "rather": [175, 179, 180, 360, 361, 364, 369, 380, 392, 414, 415, 470, 514, 758, 804, 805, 807, 832, 848, 850], "funni": 175, "comic": 175, "strip": 175, "easi": [175, 355, 356, 365, 369], "feasibl": 175, "space": [175, 414, 415, 423, 424, 758, 785], "unlik": [175, 362, 369, 470], "charger": 175, "charact": 175, "encod": [175, 378, 758, 785], "instant": [175, 1133], "messag": [175, 356, 375, 377, 1179, 1180], "much": [175, 356, 360, 368, 369, 372, 375, 377, 378], "doe": [175, 179, 180, 356, 358, 359, 360, 361, 362, 364, 365, 366, 370, 372, 373, 375, 377, 378, 392, 520, 579, 582, 758, 802, 971, 1010], "mandat": [175, 364, 372], "adopt": [175, 356, 368], "continu": [175, 176, 363, 364, 392], "own": [175, 176, 355, 361, 375, 392], "signatur": [175, 360, 361, 362, 369, 370, 371, 372, 373, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 539, 542, 579, 582, 583, 586, 591, 616, 699, 702, 731, 734, 735, 738, 971, 985, 988, 1005, 1008, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099], "replac": [175, 179, 180, 356, 358, 362, 364, 367, 369, 370, 371, 375, 377, 380, 392, 758, 814, 815, 971, 972, 975, 1058, 1059], "your": [175, 176, 354, 355, 357, 358, 360, 361, 378, 379, 392, 1133], "10": [175, 177, 178, 179, 180, 181, 182, 183, 184, 238, 294, 298, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 355, 358, 362, 369, 375, 377, 378, 414, 421, 424, 470, 520, 559, 562, 563, 566, 591, 603, 627, 628, 631, 656, 659, 731, 734, 758, 776, 786, 813, 818, 832, 852, 853, 854, 855, 870, 876, 883, 892, 895, 897, 921, 923, 940, 942, 971, 989, 992, 997, 1000, 1010, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1070, 1073, 1075, 1076, 1091, 1092, 1095, 1096, 1099, 1119, 1170, 1172], "100": [175, 176, 184, 298, 340, 341, 378, 379, 380, 392, 520, 731, 734, 1060, 1062, 1133], "despit": [175, 369, 371], "distinct": [175, 361, 369, 372, 374, 1075, 1076, 1077, 1079, 1133], "still": [175, 179, 180, 361, 364, 370, 377, 379, 392, 1133], "believ": [175, 356], "share": [175, 179, 180, 362, 364, 365, 366, 369, 375, 433, 465], "bring": [175, 375, 376], "benefit": [175, 176, 355, 356, 368, 369, 372, 377, 378, 392], "unrel": [175, 356], "what": [175, 176, 356, 359, 361, 362, 367, 369, 373, 374, 375, 377, 378, 379, 380, 391, 392, 1133], "again": [175, 176, 356, 360, 362, 369, 372, 378, 380, 392], "contrari": 175, "bumpi": 175, "road": 175, "allud": [175, 378], "most": [175, 179, 180, 355, 356, 360, 364, 365, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 392, 883, 898, 900], "technolog": 175, "sector": [175, 520, 529, 530, 533, 543, 546, 550, 555, 558, 590, 594, 748, 753], "full": [175, 176, 181, 182, 356, 361, 370, 373, 375, 392, 414, 433, 453, 520, 603, 627, 628, 631, 870, 876, 883, 927, 929, 931, 933, 934, 1053, 1054, 1057], "success": 175, "reason": [175, 356, 360, 362, 365, 368, 369, 370, 372, 375, 377, 520, 711, 714], "build": [175, 354, 355, 365, 374, 376, 379, 380, 392, 1075, 1076, 1077, 1079, 1133, 1154, 1165, 1166, 1167], "custom": [175, 379], "comput": [175, 176, 179, 180, 355, 365, 369, 375, 378, 392, 470, 514, 520, 534, 559, 562, 571, 574, 579, 582, 600, 603, 604, 607, 624, 627, 628, 631, 644, 647, 648, 651, 672, 675, 676, 679, 680, 683, 684, 687, 690, 693, 695, 698, 699, 702, 758, 770, 771, 773, 776, 777, 832, 834, 837, 839, 841, 843, 844, 846, 852, 854, 856, 858, 860, 862, 865, 867, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 883, 884, 887, 889, 891, 894, 898, 900, 901, 903, 904, 907, 910, 911, 913, 927, 929, 930, 931, 933, 934, 946, 948, 949, 951, 955, 956, 959, 961, 964, 966, 969, 1035, 1041, 1075, 1076, 1077, 1079, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123], "thank": [175, 378], "interoper": 175, "compon": [175, 375], "bio": [175, 355], "hardwar": [175, 355], "initi": [175, 179, 180, 181, 182, 183, 356, 366, 370, 371, 470, 870, 880, 1147, 1148, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165, 1166, 1167, 1170, 1174], "pcie": 175, "interfac": [175, 380, 392], "motherboard": 175, "raid": 175, "storag": [175, 378], "virtual": [175, 356, 358], "bluetooth": 175, "wireless": 175, "exchang": 175, "btx": 175, "factor": [175, 470, 479, 512, 513, 514, 832, 834, 837, 839, 841, 852, 854, 856, 858, 870, 871, 872, 873, 874, 875, 876, 877, 883, 884, 887, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1170, 1171, 1172, 1173], "sata": 175, "connect": [175, 355, 379, 380, 1154, 1164, 1165], "host": [175, 392], "bu": 175, "adapt": [175, 832, 856, 858, 1170, 1173], "html": [175, 358, 361, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 539, 542, 579, 582, 583, 586, 591, 616, 699, 702, 731, 734, 735, 738, 971, 985, 988, 1005, 1008, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099], "enabl": [175, 179, 180, 181, 182, 183, 355, 356, 364, 365, 368, 369, 372, 374, 375, 376, 378, 380, 392], "anyon": [175, 354, 392], "websit": 175, "tcp": 175, "ip": 175, "node": [175, 179, 180, 369, 1035, 1036, 1045, 1046], "commun": [175, 354, 356, 357, 392, 1133, 1139], "network": [175, 365, 369, 375, 379, 391, 870, 879, 1133, 1140, 1154, 1166, 1167], "smtp": 175, "possibl": [175, 354, 355, 356, 357, 361, 362, 364, 369, 370, 372, 375, 378, 391, 392, 758, 808, 826, 1091, 1096, 1099, 1104, 1107], "send": 175, "gmail": 175, "outlook": 175, "pop": 175, "email": 175, "ieee": [175, 413, 433, 453, 520, 534, 612, 615, 690, 693, 711, 714, 731, 734], "754": [175, 413, 433, 453, 520, 534, 612, 615, 690, 693, 711, 714, 731, 734], "allow": [175, 375, 392, 414, 423, 424, 758, 808, 1166, 1167], "calcul": [175, 179, 180, 181, 182, 183, 361, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 551, 554, 587, 590, 591, 594, 595, 608, 611, 612, 615, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 690, 693, 707, 710, 723, 726, 727, 730, 731, 734, 739, 743, 744, 749, 955, 956, 959, 961, 964, 966, 969, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123], "live": [175, 176], "depend": [175, 355, 356, 361, 367, 369, 370, 375, 392, 433, 439, 520, 521, 524, 526, 529, 530, 533, 539, 542, 543, 546, 547, 551, 554, 587, 590, 591, 594, 608, 612, 615, 652, 655, 656, 659, 660, 663, 664, 667, 707, 710, 723, 726, 727, 730, 744, 749, 883, 898, 900, 927, 929, 931, 933, 934, 1070, 1074, 1080, 1081, 1084, 1086, 1089], "did": [175, 357, 380], "aris": [175, 392], "until": [175, 356, 392, 1133], "substanti": [175, 356, 364, 368], "innov": 175, "growth": 175, "usag": [175, 375, 470, 514], "relev": [175, 355, 357, 362, 369, 370, 378, 1170, 1171, 1172, 1173, 1174, 1175], "area": [175, 372, 390, 520, 529, 530, 533, 543, 546, 550, 555, 558, 590, 594, 748, 753, 1133], "necess": 175, "parti": [175, 392], "could": [175, 176, 355, 356, 362, 364, 369, 370, 372, 375, 377, 378, 379, 1075, 1076, 1077, 1079], "easili": [175, 356, 378, 379, 380, 392, 1133], "engag": [175, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373], "regard": [175, 369, 470], "effect": [175, 361, 368, 369, 373, 392, 414, 425, 832, 860, 862, 1091, 1112, 1115, 1120, 1123], "2015": 175, "sinc": [175, 355, 356, 392], "alongsid": 175, "machin": [175, 355, 365, 391, 433, 453, 456, 520, 624, 883, 906, 915, 917, 924, 926], "given": [175, 176, 179, 180, 355, 356, 357, 358, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 379, 380, 391, 414, 415, 417, 423, 424, 470, 503, 509, 511, 512, 513, 514, 516, 519, 758, 776, 777, 787, 790, 814, 815, 830, 832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 870, 871, 872, 873, 874, 875, 876, 877, 883, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 985, 988, 989, 992, 997, 1000, 1005, 1008, 1010, 1023, 1026, 1035, 1042, 1043, 1058, 1060, 1061, 1063, 1064, 1066, 1069, 1080, 1086, 1089, 1143, 1144], "frame": [175, 391], "matur": [175, 392], "state": [175, 361, 373, 374, 375, 376, 378, 391, 520, 690, 693, 870, 880, 1133, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177], "than": [175, 179, 180, 356, 360, 362, 364, 369, 372, 375, 378, 379, 380, 392, 414, 415, 433, 453, 470, 514, 520, 526, 529, 530, 533, 539, 542, 551, 554, 567, 570, 575, 578, 583, 586, 590, 594, 598, 616, 619, 620, 623, 652, 655, 656, 659, 664, 667, 688, 707, 710, 711, 714, 719, 722, 731, 734, 754, 757, 758, 804, 805, 807, 832, 848, 850, 883, 889, 891, 906, 907, 910, 915, 917, 924, 926, 949, 951, 971, 972, 975, 989, 992, 1011, 1014, 1058, 1064, 1066, 1075, 1076, 1077, 1079, 1091, 1108, 1111, 1112, 1115, 1116, 1120, 1123], "preced": [175, 379], "mention": [175, 355, 356, 362, 365, 372, 373], "aros": 175, "70": [175, 883, 921, 923, 1091, 1092, 1095, 1119], "80": [175, 883, 921, 923, 1091, 1092, 1095, 1119], "90": [175, 184, 298, 340, 341, 520, 579, 582, 715, 718, 883, 921, 923, 1060, 1062, 1091, 1092, 1095, 1119], "effort": [175, 354, 392], "stage": [175, 354, 356, 358, 359, 1133], "complet": [175, 179, 180, 356, 357, 368, 369, 377, 378, 883, 927, 929], "natur": [175, 362, 368, 369, 391, 520, 608, 652, 655, 660, 663, 883, 894, 930], "like": [175, 355, 356, 358, 359, 360, 361, 362, 364, 371, 372, 373, 374, 375, 377, 378, 379, 380, 391, 392, 832, 848, 850, 1058, 1064, 1066, 1133], "certainli": 175, "mission": [175, 1133], "creat": [175, 179, 180, 354, 355, 356, 358, 370, 371, 372, 375, 376, 379, 390, 391, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 431, 432, 470, 479, 480, 758, 786, 787, 790, 811, 814, 815, 826, 832, 867, 1058, 1059, 1060, 1061, 1064, 1066, 1133, 1139, 1143, 1144, 1145, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177], "At": [175, 357], "process": [175, 176, 354, 355, 356, 358, 365, 369, 375, 380, 470, 479, 480, 509, 519], "ourselv": 175, "lead": [175, 176, 179, 180, 181, 182, 183, 392, 883, 927, 929, 934], "quansight": 175, "compani": 175, "made": [175, 356, 357, 369, 372, 375, 377], "organ": [175, 360, 365, 368, 369], "panda": 175, "scipi": 175, "conda": [175, 355, 358], "dask": [175, 1075, 1076, 1077, 1079], "apach": 175, "onnx": 175, "scikit": 175, "jupyt": 175, "aw": 175, "cupi": 175, "net": [175, 176, 375, 380], "sympi": 175, "rai": [175, 520, 551, 554], "modin": 175, "spyder": 175, "includ": [175, 179, 180, 356, 357, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 391, 392, 414, 415, 416, 426, 758, 797, 831, 883, 949, 951, 1035, 1036, 1058, 1064, 1066, 1070, 1072, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1136, 1138, 1154, 1164, 1165, 1168, 1169], "member": [175, 356], "googl": [175, 1133], "octoml": 175, "einop": [175, 179, 180, 758, 780, 781, 782], "further": [175, 176, 356, 358, 362, 368, 374, 378, 379, 1133], "sponsor": 175, "lg": 175, "electron": 175, "microsoft": 175, "d": [175, 176, 184, 298, 340, 341, 354, 355, 359, 369, 378, 758, 767, 775, 870, 871, 872, 873, 874, 875, 876, 877, 883, 895, 897, 921, 923, 1060, 1062, 1133, 1139], "shaw": 175, "intel": 175, "togeth": [175, 179, 180, 368, 369, 379, 380, 392, 1176, 1177], "major": [175, 370, 371, 392, 1070, 1073], "involv": [175, 354, 358, 359, 370, 380, 433, 461, 520, 534, 690, 693, 1133, 1139], "anoth": [175, 179, 180, 355, 356, 365, 369, 370, 377, 380, 414, 420, 433, 440, 442, 445], "promis": 175, "pursuit": 175, "unif": [175, 354, 377, 1133, 1139], "clearli": [175, 357, 362], "lot": [175, 176, 367, 377, 392], "thought": [175, 355, 356, 373], "care": [175, 356, 380], "attent": [175, 356, 368, 369, 870, 881, 882, 1154, 1165], "gone": [175, 374], "simplifi": [175, 375, 376, 377, 379], "compat": [175, 373, 392, 433, 441, 520, 534, 537, 551, 554, 559, 562, 567, 570, 571, 574, 575, 578, 579, 582, 595, 598, 600, 603, 611, 619, 620, 623, 627, 628, 631, 644, 647, 648, 651, 668, 671, 672, 675, 680, 683, 684, 687, 690, 693, 699, 702, 707, 710, 711, 714, 739, 743, 883, 906, 915, 917, 924, 926, 931, 933, 940, 942, 946, 948, 949, 951, 971, 1001, 1004, 1070, 1072, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133], "excit": [175, 354, 359, 1133], "complianc": 175, "hope": [175, 392], "due": [175, 355, 369, 372, 520, 690, 693], "suit": [175, 355, 359, 363, 364, 378, 391], "some": [175, 176, 179, 180, 355, 356, 357, 360, 361, 362, 365, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 391, 392, 520, 612, 615, 832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 868, 870, 878, 1133, 1154, 1162], "motiv": [175, 377], "great": [175, 176, 364, 375, 377], "convinc": 175, "celebr": 175, "encourag": [175, 391, 392, 1133, 1139], "foundat": 175, "point": [176, 356, 361, 362, 368, 372, 373, 375, 377, 378, 391, 413, 414, 415, 417, 419, 421, 427, 431, 433, 439, 453, 458, 461, 520, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 579, 582, 583, 586, 587, 590, 591, 594, 595, 608, 611, 612, 615, 616, 652, 655, 656, 659, 664, 667, 668, 671, 690, 693, 707, 710, 711, 714, 715, 718, 723, 726, 727, 730, 731, 734, 744, 748, 749, 753, 754, 757, 883, 884, 887, 892, 898, 900, 901, 903, 904, 906, 915, 917, 924, 926, 927, 929, 931, 933, 934, 949, 951, 1075, 1076, 1077, 1079, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123], "mai": [176, 355, 356, 369, 377, 379, 414, 415, 420, 470, 515, 520, 600, 603, 627, 628, 631, 648, 651, 676, 679, 680, 683, 758, 779, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1096, 1099, 1100, 1103, 1104, 1107], "ask": [176, 375, 377, 392, 1133], "perfectli": 176, "happi": [176, 355, 392], "abund": 176, "better": [176, 359, 374, 377, 378, 379], "ll": [176, 354, 356, 362, 369, 372, 378], "give": [176, 355, 356, 359, 361, 362, 366, 373, 377, 971, 1001, 1004], "two": [176, 181, 182, 184, 361, 362, 364, 368, 369, 374, 378, 380, 414, 415, 419, 425, 429, 430, 433, 460, 465, 520, 575, 578, 715, 718, 758, 766, 883, 884, 887, 892, 894, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 930, 931, 933, 934, 936, 937, 939, 943, 945, 946, 948, 971, 1019, 1022, 1075, 1076, 1077, 1078, 1079, 1133], "streamlin": 176, "workflow": [176, 356, 378, 390, 1133], "save": [176, 179, 180, 392, 758, 819, 1166, 1167], "week": [176, 356, 357, 1133], "let": [176, 361, 362, 369, 370, 371, 375, 377, 378, 379, 380, 1091, 1100, 1103, 1112, 1115, 1116, 1120, 1123, 1133], "sai": [176, 355, 367, 377], "deepmind": 176, "releas": [176, 355, 357, 1133], "awesom": 176, "paper": 176, "love": 176, "choic": [176, 355, 372, 378, 1091, 1112, 1115, 1120, 1123], "perceiverio": 176, "happen": [176, 355, 356, 378], "slew": 176, "rush": 176, "f": [176, 358, 359, 369, 375, 378, 380, 520, 624, 758, 799, 803], "g": [176, 359, 369, 392, 433, 438, 461, 470, 486, 1058, 1063, 1064, 1066, 1075, 1076, 1077, 1079, 1091, 1096, 1099, 1104, 1107, 1108, 1111, 1116], "inevit": 176, "deviat": [176, 1053, 1054, 1057, 1058, 1063, 1091, 1112, 1115, 1168, 1169], "origin": [176, 179, 180, 181, 182, 183, 366, 367, 370, 375, 377, 520, 551, 554, 883, 911, 913, 971, 1001, 1004, 1005, 1008], "often": [176, 365, 392], "erron": 176, "train": [176, 365, 369, 371, 378, 379, 380, 390, 391, 392, 832, 834, 837, 839, 841, 852, 854, 1133], "poor": 176, "converg": 176, "perform": [176, 179, 180, 360, 362, 364, 365, 366, 368, 369, 371, 372, 373, 375, 378, 392, 403, 408, 414, 423, 424, 470, 758, 776, 780, 781, 782, 800, 801, 802, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 870, 878, 880, 883, 934, 1031, 1032, 1033, 1034, 1035, 1042, 1043, 1124, 1125, 1128, 1129, 1132], "issu": [176, 354, 357, 375, 377, 379, 392], "publish": [176, 392], "manag": [176, 354, 372, 392, 470], "get": [176, 179, 180, 354, 355, 357, 359, 365, 370, 371, 372, 375, 376, 377, 378, 379, 433, 451, 452, 453, 456, 470, 479, 480, 489, 490, 503, 504, 509, 513, 516, 519, 758, 765, 792, 793, 794, 813, 1133, 1139, 1154, 1163], "work": [176, 355, 356, 357, 359, 364, 369, 370, 371, 374, 375, 376, 377, 379, 380, 1133, 1139], "repositori": [176, 355, 356, 358, 363], "pull": [176, 354, 355, 358, 360, 392], "request": [176, 354, 360, 470, 506], "confus": [176, 372], "do": [176, 179, 180, 355, 356, 357, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 377, 378, 379, 380, 392, 520, 711, 714, 758, 802, 832, 848, 850, 868, 1035, 1036, 1045, 1046, 1047], "expect": [176, 392, 758, 765, 1133], "codebas": [176, 354, 359, 360, 372, 374, 470, 512, 513, 1133], "total": [176, 179, 180, 181, 182, 183, 354, 356, 362, 364, 371, 378, 379, 392, 470, 516, 1070, 1073, 1091, 1112, 1115, 1120, 1123], "hour": 176, "spent": 176, "spin": 176, "off": [176, 374, 883, 895, 897, 943, 945], "test": [176, 355, 357, 359, 362, 392, 433, 458, 459, 520, 632, 635, 636, 639, 640, 643, 1124, 1125, 1128, 1129, 1132], "error": [176, 179, 180, 355, 364, 368, 371, 373, 377, 392, 403, 404, 470, 520, 604, 607, 1091, 1096, 1099, 1104, 1107, 1166, 1167, 1170, 1174], "address": [176, 356, 357, 368, 375], "sake": 176, "singl": [176, 179, 180, 356, 360, 362, 364, 365, 367, 369, 372, 373, 375, 378, 379, 380, 392, 470, 479, 480, 499, 500, 501, 502, 758, 828, 831, 1058, 1063, 1064, 1066, 1075, 1076], "multipl": [176, 179, 180, 184, 193, 282, 283, 287, 288, 291, 298, 300, 322, 323, 324, 325, 332, 333, 336, 337, 340, 341, 356, 362, 365, 369, 392, 520, 538, 668, 690, 693, 758, 759, 761, 762, 763, 787, 791, 808, 883, 884, 887, 888, 904, 971, 972, 975, 976, 1005, 1008, 1009, 1010, 1053, 1054, 1057, 1060, 1062, 1070, 1071, 1072, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1154, 1164], "line": [176, 355, 362, 368, 376, 377, 378, 379, 390, 1133, 1139], "directli": [176, 356, 360, 361, 365, 368, 369, 370, 371, 372, 373, 375, 377, 379, 380, 391, 392, 1035, 1047], "graph": [176, 365, 369, 376, 392, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 1075, 1076, 1077, 1079, 1166, 1167], "guarante": [176, 368, 392, 1075, 1076], "turn": [176, 362, 369], "take": [176, 354, 355, 356, 361, 362, 364, 369, 370, 371, 375, 377, 379, 380, 392, 520, 579, 582, 1133, 1139], "few": [176, 356, 357, 365, 369, 370, 371, 372, 376, 377, 378, 379, 390, 1133, 1139], "second": [176, 355, 362, 372, 377, 433, 460, 465, 470, 501, 520, 534, 537, 559, 562, 567, 570, 571, 574, 575, 578, 579, 582, 598, 600, 603, 611, 619, 620, 623, 627, 628, 631, 644, 647, 648, 651, 668, 671, 672, 675, 680, 683, 684, 687, 690, 693, 699, 702, 707, 710, 739, 743, 758, 766, 813, 818, 832, 834, 837, 839, 841, 852, 854, 883, 889, 891, 895, 897, 898, 900, 907, 910, 921, 923, 927, 929, 934, 940, 942, 946, 948, 971, 1015, 1018, 1019, 1022, 1031, 1033, 1075, 1076, 1077, 1170, 1171, 1172], "automat": [176, 355, 356, 365, 369, 373, 374, 375, 376, 379, 380, 1133], "everyon": [176, 354, 356, 392], "regardless": [176, 179, 180, 354, 377, 380, 411, 412], "wouldn": 176, "nice": [176, 364], "write": [176, 179, 180, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 372, 375, 377, 380, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 439, 441, 470, 515, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 770, 771, 773, 776, 777, 780, 781, 782, 784, 786, 787, 790, 798, 811, 814, 815, 832, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1069, 1070, 1074, 1075, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "onc": [176, 355, 356, 369, 370, 371, 375, 378, 392, 470, 514, 883, 904, 934, 1058, 1059], "know": [176, 356, 1075, 1076, 1077, 1079], "among": [176, 179, 180, 364], "frantic": 176, "port": 176, "lucid": 176, "honk": 176, "improv": [176, 356, 365, 375], "understand": [176, 355, 356, 357, 358, 359, 361, 362, 363, 373, 374], "pattern": [176, 179, 180, 361, 370, 758, 780, 781, 782], "hasn": 176, "now": [176, 179, 180, 355, 358, 360, 367, 369, 370, 373, 377, 378, 380, 391, 392, 1154, 1165, 1166, 1167], "spend": 176, "torchvis": 176, "probabl": [176, 870, 878, 1058, 1059, 1154, 1162], "sonnet": 176, "about": [176, 355, 356, 363, 374, 375, 379, 380, 392, 433, 453, 456], "next": [176, 355, 356, 357, 358, 361, 362, 366, 367, 377, 378, 433, 453, 1133, 1166, 1167, 1170, 1171, 1172, 1173, 1174, 1175], "everyth": [176, 356, 357, 376, 392], "zero": [176, 179, 180, 181, 182, 362, 368, 369, 370, 371, 373, 375, 378, 379, 403, 405, 406, 414, 417, 419, 425, 429, 430, 432, 433, 439, 520, 534, 539, 542, 567, 570, 591, 612, 615, 616, 676, 679, 680, 683, 688, 689, 690, 693, 695, 698, 699, 702, 707, 710, 711, 714, 715, 718, 731, 734, 735, 738, 744, 749, 758, 776, 811, 814, 815, 832, 834, 837, 839, 841, 852, 854, 856, 858, 870, 878, 883, 884, 887, 892, 906, 907, 910, 915, 917, 924, 926, 946, 948, 949, 951, 971, 985, 988, 989, 992, 997, 1000, 1005, 1008, 1027, 1030, 1053, 1054, 1057, 1058, 1060, 1061, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1079, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1145, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1170, 1171, 1172, 1173], "need": [176, 355, 356, 357, 358, 360, 361, 362, 363, 365, 368, 369, 372, 375, 377, 378, 391, 392, 758, 770, 771, 773, 971, 972, 975, 985, 988], "said": 176, "high": [176, 179, 180, 184, 264, 298, 299, 340, 341, 357, 378, 1058, 1060, 1061, 1062, 1064, 1065, 1066, 1067], "level": [176, 354, 357, 365, 374, 375, 378, 379, 380, 392], "optim": [176, 372, 376, 378, 380, 391, 470, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 1031, 1032, 1033, 1034, 1133, 1171, 1172, 1173, 1175], "trainer": [176, 390, 392, 1133], "statu": 176, "quo": 176, "kera": 176, "dopamin": 176, "ignit": 176, "catalyst": 176, "lightn": 176, "fastai": 176, "haiku": [176, 380], "flax": [176, 380, 392], "trax": [176, 380], "objax": [176, 380], "idea": [176, 391], "fulli": [176, 368, 369, 373, 375, 376, 377, 378, 379, 380, 392, 1154, 1164, 1165], "offer": [176, 379], "containerwithactiv": [177, 181, 182], "dict_in": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "queue": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 378, 470, 479, 480, 758, 813, 818], "queue_load_s": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "container_combine_method": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "list_join": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "queue_timeout": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 758], "print_limit": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "key_length_limit": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "print_ind": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "print_line_spac": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "ivyh": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "default_key_color": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "green": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 355, 356, 1179, 1180], "keyword_color_dict": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "rebuild_child_contain": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "types_to_iteratively_nest": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "alphabetical_kei": [177, 178, 179, 180, 181, 182, 183, 184, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "containerbas": [177, 178, 179, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 369], "__getitem__": [179, 180, 369], "queri": [179, 180, 369, 370, 377, 470, 503, 513, 870, 881, 882, 1154, 1165], "slice": [179, 180, 758, 786, 787, 790, 1035, 1044], "chain": [179, 180, 368, 369, 379, 380, 392, 1031, 1032, 1033, 1035, 1048, 1176, 1177], "element": [179, 180, 361, 375, 380, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 421, 422, 429, 430, 470, 493, 497, 501, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 766, 767, 770, 771, 773, 776, 777, 784, 798, 827, 828, 870, 878, 883, 889, 891, 898, 900, 907, 910, 927, 929, 934, 971, 972, 975, 989, 992, 997, 1000, 1005, 1008, 1010, 1011, 1014, 1058, 1059, 1070, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1154, 1162], "represent": [179, 180, 181, 182, 183, 391, 413, 433, 437, 438, 453, 456, 470, 486, 487, 520, 521, 524, 534, 559, 562, 571, 574, 579, 582, 684, 687, 690, 693, 758, 764, 821, 826], "dictionari": [179, 180, 181, 182, 183, 378, 392, 470, 513], "around": [179, 180, 181, 182, 183, 356, 365, 368, 373, 377, 392], "sequenc": [179, 180, 181, 182, 183, 362, 370, 391, 411, 412, 470, 479, 480, 758, 767, 808, 971, 1010, 1015, 1018, 1058, 1060, 1061, 1091, 1096, 1099, 1154, 1163, 1168, 1169, 1176, 1177], "multiprocess": [179, 180, 181, 182, 183, 378, 392, 470, 479, 758], "asynchron": [179, 180, 181, 182, 183], "wait": [179, 180, 181, 182, 183, 356], "size": [179, 180, 181, 182, 183, 377, 378, 414, 423, 424, 470, 512, 513, 514, 758, 814, 820, 870, 882, 883, 895, 897, 911, 913, 921, 923, 927, 929, 934, 946, 948, 971, 985, 988, 1005, 1008, 1010, 1011, 1014, 1058, 1059, 1063, 1064, 1066, 1070, 1071, 1073, 1124, 1125, 1128, 1129, 1132, 1154, 1155, 1156], "dimens": [179, 180, 181, 182, 183, 362, 375, 378, 403, 408, 414, 429, 430, 470, 501, 758, 780, 781, 782, 785, 795, 811, 830, 870, 871, 872, 873, 874, 875, 876, 877, 880, 883, 884, 887, 889, 891, 892, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 924, 926, 927, 929, 931, 933, 934, 936, 937, 939, 943, 945, 946, 948, 949, 951, 955, 961, 964, 966, 969, 971, 977, 980, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1031, 1032, 1033, 1034, 1058, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1079, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1165], "combin": [179, 180, 181, 182, 183, 356, 362, 364, 365, 368, 369, 380, 883, 889, 891], "arriv": [179, 180, 181, 182, 183], "timeout": [179, 180, 181, 182, 183, 470, 479, 480, 758, 813, 818], "limit": [179, 180, 181, 182, 183, 356, 362, 364, 375, 378, 380, 392, 433, 453, 456, 758, 770, 771, 773, 971, 972, 975], "maximum": [179, 180, 181, 182, 183, 362, 375, 378, 380, 470, 494, 498, 502, 514, 520, 758, 770, 771, 773, 785, 832, 852, 854, 971, 972, 975, 1035, 1047, 1070, 1071, 1091, 1096, 1099, 1104, 1107, 1133], "length": [179, 180, 181, 182, 183, 378, 414, 415, 425, 883, 934, 936, 937, 939, 971, 1001, 1004], "whitespac": [179, 180, 181, 182, 183], "indent": [179, 180, 181, 182, 183, 378], "extra": [179, 180, 181, 182, 183, 362, 367, 368, 375, 832, 843], "newlin": [179, 180, 181, 182, 183, 361], "handl": [179, 180, 181, 182, 183, 359, 364, 365, 367, 369, 370, 371, 372, 373, 379, 392, 411, 412, 470, 486, 487, 488, 489, 490, 504, 508, 509, 516, 519, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 1170, 1171, 1172, 1173, 1174, 1175], "result": [179, 180, 181, 182, 183, 360, 361, 362, 364, 368, 369, 370, 372, 373, 378, 392, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 439, 441, 461, 470, 479, 515, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 770, 771, 773, 776, 777, 780, 781, 782, 784, 786, 787, 790, 798, 811, 814, 815, 832, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1035, 1048, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1079, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133], "color": [179, 180, 181, 182, 183, 1179, 1180], "termin": [179, 180, 181, 182, 183, 355, 356, 358, 369, 375, 378], "map": [179, 180, 181, 182, 183, 364, 365, 369, 373, 378, 391, 392, 470, 479, 1035, 1042, 1043, 1047, 1048, 1154, 1165], "termcolor": [179, 180, 181, 182, 183], "rebuild": [179, 180, 181, 182, 183], "found": [179, 180, 181, 182, 183, 355, 356, 361, 368, 369, 470, 504], "constructor": [179, 180, 181, 182, 183, 370, 371, 377, 758, 765, 1176, 1177], "param": [179, 180, 181, 182, 183, 184, 291, 324, 325, 375, 380, 758, 764, 786, 787, 790, 791], "kept": [179, 180, 181, 182, 183, 356, 372, 1031, 1032, 1033], "structur": [179, 180, 181, 182, 183, 358, 360, 365, 368, 369, 378, 379, 758, 774, 1035, 1048], "alphabet": [179, 180, 181, 182, 183], "preserv": [179, 180, 181, 182, 183, 380, 392, 832, 865, 971, 989, 992], "__setitem__": [179, 180, 368, 369, 377], "val": [179, 180, 372, 377, 758, 800, 801, 802, 816, 817], "after": [179, 180, 362, 369, 370, 374, 433, 465, 520, 731, 734, 832, 839, 841, 843, 844, 846, 852, 854, 856, 858, 860, 862, 1053, 1054, 1057, 1170, 1171, 1172, 1173, 1174, 1175], "updat": [179, 180, 355, 356, 357, 358, 359, 362, 363, 367, 368, 369, 370, 373, 375, 377, 378, 380, 392, 470, 479, 758, 802, 814, 815, 832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 870, 880, 1031, 1032, 1033, 1035, 1042, 1043, 1051, 1052, 1143, 1144, 1170, 1171, 1172, 1173, 1174, 1175], "all_fals": [179, 180], "assert_is_bool": [179, 180], "key_chain": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 347, 348, 349, 350, 351, 442, 444, 446, 521, 523, 525, 528, 529, 530, 532, 536, 537, 538, 539, 541, 543, 545, 549, 550, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 589, 590, 593, 594, 597, 598, 599, 602, 603, 604, 606, 610, 611, 612, 614, 618, 619, 620, 622, 626, 627, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 690, 692, 694, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 740, 742, 745, 747, 748, 750, 752, 753, 754, 756, 759, 761, 763, 771, 772, 787, 789, 791, 839, 840, 842, 844, 845, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 863, 884, 886, 888, 907, 909, 956, 958, 960, 961, 963, 965, 966, 968, 970, 972, 974, 976, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1035, 1048, 1054, 1056, 1060, 1062, 1064, 1065, 1067, 1081, 1083, 1085, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1118, 1119, 1120, 1122, 1125, 1127, 1129, 1131], "to_appli": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 347, 348, 349, 350, 351, 442, 444, 446, 521, 523, 525, 528, 529, 530, 532, 536, 537, 538, 539, 541, 543, 545, 549, 550, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 589, 590, 593, 594, 597, 598, 599, 602, 603, 604, 606, 610, 611, 612, 614, 618, 619, 620, 622, 626, 627, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 690, 692, 694, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 740, 742, 745, 747, 748, 750, 752, 753, 754, 756, 759, 761, 763, 771, 772, 787, 789, 791, 839, 840, 842, 844, 845, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 863, 884, 886, 888, 907, 909, 956, 958, 960, 961, 963, 965, 966, 968, 970, 972, 974, 976, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1035, 1048, 1054, 1056, 1064, 1065, 1067, 1081, 1083, 1085, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1118, 1119, 1120, 1122, 1125, 1127, 1129, 1131], "prune_unappli": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 347, 348, 349, 350, 351, 442, 444, 446, 521, 523, 525, 528, 529, 530, 532, 536, 537, 538, 539, 541, 543, 545, 549, 550, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 589, 590, 593, 594, 597, 598, 599, 602, 603, 604, 606, 610, 611, 612, 614, 618, 619, 620, 622, 626, 627, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 690, 692, 694, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 740, 742, 745, 747, 748, 750, 752, 753, 754, 756, 759, 761, 763, 771, 772, 787, 789, 791, 839, 840, 842, 844, 845, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 863, 884, 886, 888, 907, 909, 956, 958, 960, 961, 963, 965, 966, 968, 970, 972, 974, 976, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1035, 1048, 1054, 1056, 1064, 1065, 1067, 1081, 1083, 1085, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1118, 1119, 1120, 1122, 1125, 1127, 1129, 1131], "map_sequ": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 230, 231, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 249, 253, 254, 255, 256, 257, 259, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 347, 348, 349, 350, 351, 442, 444, 446, 521, 523, 525, 528, 529, 530, 532, 536, 537, 538, 539, 541, 543, 545, 549, 550, 555, 557, 563, 565, 583, 585, 589, 590, 593, 594, 597, 599, 604, 606, 610, 612, 614, 618, 619, 620, 632, 634, 636, 638, 640, 642, 652, 654, 656, 658, 660, 662, 664, 666, 668, 676, 678, 690, 692, 694, 695, 697, 703, 705, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 740, 742, 745, 747, 748, 750, 752, 753, 754, 756, 759, 761, 763, 771, 772, 787, 789, 791, 839, 840, 842, 844, 845, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 863, 884, 886, 888, 956, 958, 960, 961, 963, 965, 966, 968, 970, 972, 974, 976, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1019, 1021, 1023, 1025, 1027, 1029, 1054, 1056, 1064, 1065, 1067, 1081, 1083, 1085, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1118, 1119, 1120, 1122, 1125, 1127, 1129, 1131], "entri": [179, 180, 414, 423, 424, 971, 1010, 1035, 1048], "boolean": [179, 180, 369, 414, 421, 433, 439, 457, 469, 470, 505, 517, 520, 559, 562, 563, 566, 571, 574, 579, 582, 672, 675, 676, 679, 680, 683, 684, 687, 758, 759, 762, 766, 767, 797, 798, 799, 803, 804, 805, 806, 807, 824, 831, 832, 848, 850, 1031, 1032, 1033, 1035, 1045, 1091, 1104, 1107], "evalu": [179, 180, 369, 520, 608, 612, 615, 652, 655, 656, 659, 660, 663, 664, 667, 695, 698, 719, 722, 735, 738, 1035, 1036, 1045, 1046, 1124, 1125, 1128, 1129, 1132], "assert": [179, 180, 377, 378, 758, 768], "skip": [179, 180, 358, 364, 1035, 1048], "prune": [179, 180, 1035, 1048, 1049, 1050], "all_key_chain": [179, 180], "include_empti": [179, 180], "all_tru": [179, 180, 369, 378], "arrays_as_list": [179, 180], "intermedi": [179, 180], "as_arrai": [179, 180, 758, 795, 820], "as_bool": [179, 180], "as_on": [179, 180], "ones": [179, 180, 181, 182, 364, 375, 377, 378, 414, 419, 428, 520, 583, 586, 758, 811, 1133], "sub": [179, 180, 356, 357, 359, 364, 369, 377, 378, 379, 470, 495, 496, 499, 500, 501, 502, 883, 895, 897, 971, 1010, 1031, 1032, 1033, 1034, 1133], "fill": [179, 180, 414, 417, 421, 422, 427, 428, 431, 432, 1058, 1060, 1061], "as_random_uniform": [179, 180], "low": [179, 180, 184, 264, 298, 299, 340, 341, 375, 1058, 1060, 1061, 1062, 1064, 1065, 1066, 1067], "uniform": [179, 180, 379, 1058, 1059, 1060, 1061, 1064, 1066, 1145, 1147, 1148, 1151, 1152], "lower": [179, 180, 356, 362, 375, 392, 414, 419, 429, 520, 688, 883, 884, 887, 1058, 1064, 1066], "boundari": [179, 180, 1058, 1064, 1066], "output": [179, 180, 355, 359, 360, 361, 362, 364, 365, 368, 369, 371, 372, 373, 375, 377, 379, 380, 392, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 439, 441, 470, 479, 480, 514, 515, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 769, 770, 771, 773, 776, 777, 780, 781, 782, 784, 786, 787, 790, 798, 811, 814, 815, 832, 843, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1035, 1048, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1069, 1070, 1074, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1133, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165], "interv": [179, 180, 375, 380, 414, 415, 423, 424, 883, 946, 948, 971, 972, 975, 1015, 1018, 1058, 1060, 1061, 1064, 1066, 1124, 1125, 1128, 1129, 1132], "as_vari": [179, 180], "as_zero": [179, 180], "assert_contains_sub_contain": [179, 180], "sub_cont": [179, 180], "partial": [179, 180, 356, 1166, 1167], "except": [179, 180, 361, 368, 372, 377, 392, 433, 441, 758, 768, 779, 802, 829, 883, 906, 924, 926, 971, 977, 980, 1015, 1018, 1070, 1073, 1124, 1125, 1128, 1129, 1132], "diff": [179, 180, 369, 378], "screen": [179, 180, 378], "assert_contains_sub_structur": [179, 180], "check_shap": [179, 180], "static": [179, 180, 184, 191, 279, 282, 283, 286, 287, 288, 291, 298, 300, 304, 305, 318, 319, 322, 323, 324, 325, 326, 327, 332, 333, 334, 335, 336, 337, 340, 341, 346, 347, 352, 353, 357, 361, 362, 365, 392, 411, 412, 442, 446, 521, 525, 538, 550, 555, 668, 745, 750, 753, 759, 763, 787, 791, 884, 888, 972, 976, 1005, 1009, 1060, 1062], "assert_ident": [179, 180], "check_typ": [179, 180], "same_arrai": [179, 180, 378], "arrays_equ": [179, 180, 181, 182, 758], "datatyp": [179, 180, 414, 416, 426, 433, 447, 458, 459, 460], "exact": [179, 180, 356, 375, 1075, 1076], "assert_identical_structur": [179, 180], "at_key_chain": [179, 180], "ignore_key_error": [179, 180], "ignore_non": [179, 180], "at_kei": [179, 180], "ignor": [179, 180, 362, 392, 414, 425, 1035, 1046, 1170, 1174], "substr": [179, 180], "access": [179, 180, 356, 358, 370], "clip_min": [179, 180], "clip_max": [179, 180], "minimum": [179, 180, 375, 380, 470, 520, 521, 524, 758, 793, 794, 816, 817, 822, 823, 971, 972, 975, 1070, 1072, 1091, 1096, 1099, 1104, 1107, 1133], "config": [179, 180, 378, 1035, 1048], "right": [179, 180, 354, 355, 356, 359, 362, 378, 520, 567, 570, 575, 578, 883, 934], "duplic": [179, 180, 361, 366, 367, 377, 379], "compar": [179, 180, 364, 378, 758, 759, 762, 766, 767, 1075, 1076, 1077, 1079, 1080, 1081, 1084, 1086, 1089], "configur": [179, 180, 355, 356, 358, 370, 470, 513, 1035, 1048], "container_rightmost": [179, 180], "common_key_chain": [179, 180, 369], "across": [179, 180, 357, 362, 364, 365, 369, 370, 373, 470, 479, 480, 491, 492, 494, 495, 496, 497, 498, 502, 512, 513, 758, 766, 767, 1035, 1041, 1070, 1072], "properti": [179, 180, 362, 364, 365, 369, 377, 378, 379, 470, 482, 1166, 1167, 1170, 1171, 1172, 1173, 1175], "contains_sub_contain": [179, 180], "match": [179, 180, 369, 433, 439, 520, 711, 714, 758, 808], "contains_sub_structur": [179, 180], "copi": [179, 180, 358, 361, 366, 370, 375, 377, 378, 391, 392, 414, 416, 420, 433, 439, 470, 515, 758, 775, 827, 828, 971, 1001, 1004, 1035, 1037, 1080, 1086, 1089], "create_if_abs": [179, 180], "inplac": [179, 180, 184, 189, 231, 238, 239, 259, 281, 292, 294, 295, 297, 326, 327, 359, 362, 367, 368, 373, 377, 379, 758, 768, 799, 802, 803, 824, 832, 839, 840, 841, 842, 844, 845, 846, 847, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 1143, 1144, 1170, 1171, 1172, 1173, 1174, 1175], "correspond": [179, 180, 181, 182, 184, 356, 361, 362, 363, 365, 368, 369, 370, 373, 433, 440, 520, 551, 554, 707, 710, 883, 889, 891, 898, 900, 931, 933, 971, 977, 980, 1005, 1008, 1058, 1059, 1070, 1071, 1072, 1075, 1076, 1077, 1079, 1091, 1108, 1111, 1112, 1115, 1116, 1120, 1123], "alreadi": [179, 180, 355, 356, 366, 369, 373, 377, 392, 470, 520, 583, 586, 616, 690, 693, 715, 718, 754, 757, 883, 921, 923, 1133], "noth": [179, 180, 356], "cutoff_at_depth": [179, 180], "depth_cutoff": [179, 180], "summari": [179, 180, 356, 433, 448, 449, 450, 462, 463, 464, 470, 483, 484, 758, 774, 778, 796, 832, 864, 869], "cutoff_at_height": [179, 180], "height_cutoff": [179, 180], "deep_copi": [179, 180, 378], "intern": [179, 180, 361, 368, 369, 371, 372, 470, 832, 868, 1035, 1036, 1045, 1046, 1145, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1176, 1177], "dev": [179, 180, 181, 183, 184, 198, 355, 365, 371, 375, 377, 379, 470, 479, 504], "belong": [179, 180, 379], "dev_clon": [179, 180, 470], "clone": [179, 180, 356, 358, 470, 491, 492, 493, 494], "dev_dist": [179, 180, 470], "distribut": [179, 180, 357, 371, 392, 470, 491, 495, 496, 497, 498, 870, 878, 955, 956, 959, 961, 964, 966, 969, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1154, 1162, 1166, 1167], "along": [179, 180, 360, 372, 414, 423, 424, 470, 495, 496, 497, 498, 499, 500, 501, 502, 514, 758, 776, 777, 786, 830, 883, 911, 913, 943, 945, 946, 948, 949, 951, 955, 961, 964, 966, 969, 971, 977, 980, 989, 992, 997, 1000, 1005, 1008, 1010, 1015, 1018, 1023, 1026, 1031, 1032, 1033, 1034, 1058, 1069, 1070, 1071, 1072, 1080, 1081, 1084, 1086, 1089, 1091, 1092, 1095, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1119, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "split": [179, 180, 354, 356, 374, 375, 392, 470, 479, 495, 496, 497, 498, 512, 513, 514, 758, 808, 971, 1133], "dev_str": [179, 180], "diff_kei": [179, 180], "detect_key_diff": [179, 180], "detect_value_diff": [179, 180], "detect_shape_diff": [179, 180], "thei": [179, 180, 357, 359, 360, 362, 365, 367, 369, 370, 371, 372, 377, 378, 379, 380, 392, 433, 460, 1031, 1032, 1033, 1058, 1059, 1133, 1176, 1177], "treat": [179, 180, 376, 380, 411, 412], "detect": [179, 180, 373, 378, 379, 1035, 1036, 1046], "without": [179, 180, 356, 360, 365, 368, 369, 371, 373, 375, 377, 378, 379, 391, 392, 758, 813, 818, 971, 1001, 1004, 1035, 1037, 1075, 1076, 1077, 1079], "flag": [179, 180, 356, 372, 377, 470, 489, 832, 848, 850], "container0": [179, 180], "einops_rearrang": [179, 180, 758], "axes_length": [179, 180, 758, 780, 781, 782], "rearrang": [179, 180, 758, 780, 782], "addit": [179, 180, 355, 356, 360, 361, 364, 369, 370, 377, 378, 380, 470, 515, 520, 534, 758, 780, 781, 782, 1053, 1054, 1057, 1154, 1164], "einops_reduc": [179, 180, 758], "reduct": [179, 180, 370, 377, 758, 781, 814, 815, 1124, 1125, 1128, 1129, 1132, 1133], "One": [179, 180, 370, 375, 377, 378, 758, 781, 971, 1001, 1004, 1058, 1060, 1061], "callabl": [179, 180, 369, 375, 393, 394, 395, 396, 397, 398, 399, 400, 401, 411, 412, 433, 454, 455, 470, 514, 758, 764, 769, 779, 781, 1031, 1032, 1033, 1034, 1035, 1041, 1045, 1046, 1047], "einops_repeat": [179, 180, 758], "find_sub_contain": [179, 180], "sub_cont_to_find": [179, 180], "exsit": [179, 180], "find_sub_structur": [179, 180], "sub_struc_to_find": [179, 180], "flatten_key_chain": [179, 180, 378, 1166, 1167], "__": [179, 180, 362, 378], "above_height": [179, 180, 378], "below_depth": [179, 180, 378], "format_key_chain": [179, 180], "format_fn": [179, 180], "format": [179, 180, 358, 361, 370, 371, 375, 377, 378, 433, 451, 470, 490, 1091, 1092, 1095, 1119, 1133], "string": [179, 180, 366, 370, 371, 375, 378, 433, 437, 438, 451, 457, 469, 470, 486, 487, 488, 489, 503, 509, 515, 516, 519, 758, 778], "from_disk_as_hdf5": [179, 180, 378], "h5_obj_or_filepath": [179, 180], "slice_obj": [179, 180], "load": [179, 180, 392], "disk": [179, 180, 378], "h5py": [179, 180], "file": [179, 180, 355, 356, 358, 360, 361, 365, 366, 368, 369, 375, 378, 758, 819, 1166, 1167], "hdf5": [179, 180, 378, 1166, 1167], "filepath": [179, 180, 356], "h5": [179, 180], "from_disk_as_json": [179, 180, 378], "json_filepath": [179, 180], "json": [179, 180, 378], "were": [179, 180, 356, 360, 364, 369], "abl": [179, 180, 355, 356, 365, 370, 372, 377, 380], "dure": [179, 180, 365, 369, 370, 371, 372, 392, 411, 412, 470, 515, 758, 829, 832, 834, 837, 839, 841, 852, 854, 883, 907, 910, 1031, 1032, 1033, 1034, 1091, 1112, 1115, 1120, 1123, 1166, 1167, 1170, 1171, 1172, 1174], "from_disk_as_pickl": [179, 180, 378], "pickle_filepath": [179, 180], "pickl": [179, 180, 369, 378], "from_flat_list": [179, 180], "flat_list": [179, 180], "hierarchi": [179, 180, 378], "flat": [179, 180, 758, 814, 971, 997, 1000], "popul": [179, 180, 370, 371, 375, 1058, 1059, 1091, 1112, 1115, 1120, 1123], "from_numpi": [179, 180, 378], "gather": [179, 180, 758, 787, 790], "accord": [179, 180, 355, 358, 365, 370, 433, 442, 445, 453, 520, 534, 575, 578, 690, 693, 758, 786, 814, 815, 883, 946, 948, 971, 981, 984, 1027, 1030, 1091, 1112, 1115, 1120, 1123], "index": [179, 180, 358, 365, 369, 377, 413, 414, 419, 425, 470, 511, 758, 764, 786, 787, 790, 971, 1015, 1018, 1035, 1038, 1039, 1042, 1043, 1044, 1049, 1051, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1080, 1081, 1084, 1136, 1138], "h5_file_s": [179, 180], "content": [179, 180, 357, 358, 372, 375, 378], "batch": [179, 180, 365, 369, 378, 470, 512, 513, 758, 785, 870, 879, 883, 949, 951, 1031, 1032, 1033, 1034, 1053, 1054, 1057, 1168, 1169], "handle_inplac": [179, 180], "prime": [179, 180], "overwritten": [179, 180, 366, 368], "has_kei": [179, 180], "query_kei": [179, 180], "somewher": [179, 180], "has_key_chain": [179, 180], "has_nan": [179, 180, 758], "include_inf": [179, 180, 758, 797, 831], "leafwis": [179, 180], "nan": [179, 180, 360, 361, 413, 433, 439, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 551, 554, 583, 586, 587, 590, 591, 594, 608, 611, 612, 615, 616, 632, 635, 640, 643, 652, 655, 656, 659, 664, 667, 668, 671, 690, 693, 707, 710, 711, 714, 715, 718, 723, 726, 727, 730, 731, 734, 744, 749, 754, 757, 758, 797, 831, 870, 882, 1075, 1076, 1077, 1079, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "well": [179, 180, 364, 372, 379, 380, 391, 758, 797, 883, 931, 933], "inf": [179, 180, 413, 758, 797, 831, 883, 949, 951], "wise": [179, 180, 375, 380, 403, 404, 405, 406, 407, 408, 409, 410, 520, 521, 524, 526, 534, 537, 539, 542, 547, 551, 554, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 595, 598, 600, 603, 604, 607, 611, 619, 620, 623, 624, 627, 628, 631, 644, 647, 648, 651, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 699, 702, 707, 710, 711, 714, 739, 743, 758, 784, 971, 972, 975], "identical_array_shap": [179, 180], "exclus": [179, 180, 184, 234, 293, 326, 327, 365, 369, 380, 414, 415, 758, 776, 804, 805, 807, 832, 848, 849, 850, 851, 1058, 1060, 1061], "identical_config": [179, 180], "identical_structur": [179, 180], "if_exist": [179, 180], "inplace_upd": [179, 180, 372, 758, 1143, 1144], "key_chains_contain": [179, 180], "sub_str": [179, 180], "join": [179, 180, 971, 977, 980, 1015, 1018, 1133], "list_stack": [179, 180, 378], "dim": [179, 180, 370, 758, 811, 1154, 1165], "func": [179, 180, 369, 411, 412, 470, 514, 758, 769, 832, 843, 1035, 1048], "map_cont": [179, 180], "include_self": [179, 180], "possibi": [179, 180], "place": [179, 180, 356, 359, 360, 361, 362, 364, 365, 369, 371, 373, 380, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 442, 445, 470, 515, 520, 521, 524, 534, 539, 542, 559, 562, 579, 582, 583, 586, 591, 616, 699, 702, 715, 718, 731, 734, 735, 738, 744, 749, 758, 786, 800, 801, 802, 870, 873, 882, 883, 892, 971, 985, 988, 989, 992, 1005, 1008, 1053, 1054, 1057, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1124, 1125, 1128, 1170, 1171, 1172, 1173, 1174, 1175], "matrix": [179, 180, 414, 425, 429, 430, 758, 759, 762, 770, 870, 879, 883, 884, 887, 892, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 911, 913, 914, 915, 917, 918, 920, 924, 926, 927, 929, 931, 933, 934, 936, 937, 939, 943, 945, 952, 954, 1154, 1164], "p": [179, 180, 184, 214, 324, 325, 355, 356, 414, 425, 758, 770, 771, 772, 773, 870, 878, 883, 911, 913, 949, 951, 1154, 1162], "integ": [179, 180, 369, 370, 377, 414, 415, 421, 433, 456, 459, 461, 520, 521, 524, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 598, 616, 619, 620, 623, 684, 687, 707, 710, 711, 714, 715, 718, 754, 757, 883, 914, 946, 948, 949, 951, 971, 1010, 1058, 1060, 1061, 1068, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "flatten": [179, 180, 758, 785, 883, 921, 923, 949, 951, 971, 997, 1000, 1005, 1008, 1070, 1071, 1072, 1075, 1076, 1077, 1079], "left": [179, 180, 355, 356, 362, 370, 520, 567, 570, 883, 898, 900, 911, 913, 934, 1070, 1071, 1133], "broadcast": [179, 180, 360, 361, 362, 369, 370, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 439, 440, 441, 470, 515, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 770, 771, 773, 776, 780, 781, 782, 784, 787, 790, 798, 811, 814, 815, 832, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1069, 1070, 1071, 1072, 1074, 1075, 1079, 1080, 1086, 1089, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "correctli": [179, 180, 355, 364, 369, 370, 373, 379, 392, 883, 911, 913, 1070, 1071], "max_depth": [179, 180, 470, 474, 477, 484, 494, 498, 502, 758, 796, 1035, 1047], "multi_map": [179, 180, 369], "map_nest": [179, 180, 184, 201, 204, 206, 207, 208, 209, 215, 222, 229, 232, 233, 241, 242, 247, 248, 250, 251, 252, 258, 262, 265, 278, 322, 323, 332, 333, 336, 337, 537, 551, 553, 559, 561, 567, 569, 571, 573, 575, 577, 579, 581, 598, 602, 603, 611, 619, 620, 622, 626, 627, 628, 630, 644, 646, 648, 650, 668, 670, 672, 674, 680, 682, 684, 686, 699, 701, 707, 709, 711, 713, 907, 909, 977, 979, 1015, 1017], "leftmost": [179, 180, 1035, 1048], "multi_map_in_static_method": [179, 180, 369], "fn_name": [179, 180], "num_arrai": [179, 180], "overwrite_at_key_chain": [179, 180], "overwrit": [179, 180, 372, 375, 470, 514], "target_dict": [179, 180], "return_dict": [179, 180], "prune_empti": [179, 180], "keep_non": [179, 180], "empti": [179, 180, 181, 182, 368, 370, 371, 414, 415, 1091, 1112, 1115, 1116, 1124, 1125, 1128, 1129, 1132], "prune_key_chain": [179, 180], "key1": [179, 180, 379], "key2": [179, 180], "key3": [179, 180], "prune_key_from_key_chain": [179, 180], "absolut": [179, 180, 354, 520, 521, 524, 883, 894, 930], "certain": [179, 180, 355, 392, 414, 415, 423, 424], "decid": [179, 180, 355, 1035, 1046], "remov": [179, 180, 356, 357, 358, 361, 364, 365, 370, 372, 380, 883, 895, 897, 907, 910, 943, 945, 971, 1011, 1014, 1031, 1032, 1033], "prune_kei": [179, 180], "prune_keys_from_key_chain": [179, 180], "remove_key_length_limit": [179, 180], "remove_print_limit": [179, 180], "reshape_lik": [179, 180], "leading_shap": [179, 180], "return_cont": [179, 180], "restructur": [179, 180], "keep_orig": [179, 180], "transpos": [179, 180, 377, 380, 470, 501, 870, 872, 874, 876, 883, 906, 918, 920, 924, 926, 1133, 1154, 1156, 1158, 1160], "old": [179, 180, 355, 372], "keep": [179, 180, 355, 356, 363, 369, 376, 378, 380, 758, 830], "start": [179, 180, 354, 355, 356, 357, 358, 359, 361, 362, 370, 374, 375, 377, 378, 379, 391, 392, 414, 415, 423, 424, 470, 485], "restructure_key_chain": [179, 180], "keychain_map": [179, 180], "set_at_key_chain": [179, 180], "set_at_kei": [179, 180], "set_framework": [179, 180, 375, 377, 378, 380], "set_ivy_backend": [179, 180], "ivy_backend": [179, 180], "attribut": [179, 180, 361, 369, 370, 376, 377, 378, 379, 433, 453, 454, 455, 456, 470, 510], "show": [179, 180, 355, 356, 362, 372, 391, 392, 1133], "show_sub_contain": [179, 180], "sub_cont_or_keychain": [179, 180], "shuffl": [179, 180, 1058, 1133], "seed_valu": [179, 180, 1058, 1068], "align": [179, 180, 355, 375, 377, 1133, 1139], "seed": [179, 180, 181, 182, 1058, 1133], "shuffle_h5_fil": [179, 180], "dataset": [179, 180, 378, 390, 1133], "size_ordered_arrai": [179, 180], "keychain": [179, 180], "smallest": [179, 180, 433, 453, 456, 520, 583, 586], "largest": [179, 180, 391, 433, 453, 456, 883, 934], "slice_kei": [179, 180], "key_slic": [179, 180], "all_depth": [179, 180], "slice_via_kei": [179, 180], "sort_by_kei": [179, 180], "num_or_size_split": [179, 180, 375, 971, 1010], "with_remaind": [179, 180, 971, 1010], "constitu": [179, 180, 380], "dimension": [179, 180, 414, 415, 419, 425, 883, 889, 891, 892, 906, 907, 910, 915, 917, 921, 923, 924, 926, 946, 948, 949, 951, 971, 1010, 1070, 1071, 1072, 1073, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "evenli": [179, 180, 414, 415, 423, 424, 971, 1010], "store": [179, 180, 361, 366, 368, 369, 375, 377, 378, 379, 758, 785, 832, 868, 883, 943, 945, 971, 1010, 1166, 1167], "stop_gradi": [179, 180, 181, 182, 184, 189, 231, 238, 239, 259, 281, 292, 294, 295, 297, 326, 327, 379, 470, 514, 832, 839, 840, 841, 842, 844, 845, 846, 847, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 1031, 1032, 1033, 1034, 1133, 1170, 1171, 1172, 1173, 1174, 1175], "preserve_typ": [179, 180, 832, 865], "stop": [179, 180, 375, 392, 414, 415, 423, 424, 470, 485, 514, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 865, 1031, 1032, 1033, 1034, 1170, 1171, 1172, 1173, 1174, 1175], "alwai": [179, 180, 356, 357, 360, 361, 365, 366, 368, 369, 372, 373, 375, 377, 392, 433, 439, 520, 534, 690, 693, 758, 802, 832, 848, 850, 865], "structural_diff": [179, 180], "to_devic": [179, 180, 470, 489], "move": [179, 180, 356, 360, 470, 515], "cuda": [179, 180, 375, 378, 392, 414, 423, 424, 470, 479, 486, 511, 758, 786, 787, 790, 811, 814, 815, 1058, 1059, 1060, 1061, 1064, 1066, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1176, 1177], "cpu": [179, 180, 356, 371, 392, 414, 423, 424, 470, 489, 490, 492, 506, 509, 511, 515, 516, 518, 519, 758, 786, 787, 790, 811, 814, 815, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1176, 1177], "target": [179, 180, 359, 374, 378, 379, 380, 470, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 1133], "to_dict": [179, 180], "to_disk_as_hdf5": [179, 180, 378], "starting_index": [179, 180], "max_batch_s": [179, 180], "read": [179, 180, 358, 1133], "r": [179, 180, 355, 758, 767, 830, 883, 927, 929, 952, 954], "w": [179, 180, 184, 281, 292, 294, 295, 297, 326, 327, 375, 378, 379, 758, 767, 832, 834, 837, 839, 841, 842, 844, 846, 847, 852, 854, 855, 856, 858, 859, 860, 862, 863, 870, 871, 872, 873, 874, 875, 876, 877], "later": [179, 180, 758, 769], "append": [179, 180, 358, 364, 375, 378, 520, 567, 570, 883, 895, 897, 907, 910], "to_disk_as_json": [179, 180, 378], "to_disk_as_pickl": [179, 180, 378], "to_flat_list": [179, 180], "to_iter": [179, 180, 369], "leaf_keys_onli": [179, 180], "to_iterator_kei": [179, 180], "to_iterator_valu": [179, 180], "to_json": [179, 180], "to_list": [179, 180, 758, 1133], "to_multi_dev": [179, 180], "multidevcontain": [179, 180, 181], "distributedarrai": [179, 180], "to_numpi": [179, 180, 378, 758, 1133], "update_backend": [179, 180], "to_raw": [179, 180], "raw": [179, 180, 361], "trim_kei": [179, 180], "max_length": [179, 180], "try_kc": [179, 180], "tri": [179, 180], "arbitrari": [179, 180, 364, 365, 369, 372, 373, 379, 392, 414, 425, 433, 440, 461, 470, 499, 500, 502], "concatten": [179, 180, 470, 499, 500, 501, 502, 514], "unstack": [179, 180, 375, 378, 758, 1133], "dim_siz": [179, 180, 470], "update_config": [179, 180], "global_norm": [179, 180, 184, 214, 324, 325, 771, 772], "vector": [179, 180, 391, 414, 425, 758, 771, 773, 870, 879, 883, 889, 891, 898, 900, 907, 910, 921, 923, 934, 936, 937, 939, 946, 948, 949, 951, 952, 954, 1154, 1164], "with_default_key_color": [179, 180], "with_entries_as_list": [179, 180], "with_ivy_backend": [179, 180], "with_key_length_limit": [179, 180, 378], "with_print_ind": [179, 180, 378], "with_print_limit": [179, 180, 378], "with_print_line_spac": [179, 180], "containerwithcr": [181, 182, 316], "containerwithdatatyp": [181, 182, 318], "containerwithdevic": [181, 182, 320], "containerwithelementwis": [181, 182, 322, 369], "containerwithgener": [181, 182, 324], "containerwithgradi": [181, 182, 326], "containerwithimag": [181, 182, 328], "containerwithlay": [181, 182, 330], "containerwithlinearalgebra": [181, 182, 332], "containerwithloss": [181, 182, 334], "containerwithmanipul": [181, 182, 336, 357], "containerwithnorm": [181, 182, 338], "containerwithrandom": [181, 182, 340], "containerwithsearch": [181, 182, 342], "containerwithset": [181, 182, 344], "containerwithsort": [181, 182, 346], "containerwithstatist": [181, 182, 348], "containerwithutil": [181, 182, 350], "__add__": [181, 182, 184, 361, 362, 368, 369, 373, 377], "special": [181, 182, 184, 357, 360, 361, 362, 368, 373, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 551, 554, 579, 582, 583, 586, 587, 590, 591, 594, 608, 611, 612, 615, 616, 652, 655, 656, 659, 664, 667, 668, 671, 690, 693, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 744, 749, 754, 757, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1112, 1115, 1116, 1120, 1123], "__radd__": [181, 182, 184, 361, 362], "revers": [181, 182, 184, 357, 361, 362, 380, 392, 758, 779, 971, 989, 992], "arang": [181, 182, 370, 414, 423, 424, 1091, 1092, 1095, 1119, 1133], "arg_info": [181, 182, 758], "arg_nam": [181, 182, 758], "argmax": [181, 182, 1070, 1133], "argmin": [181, 182, 1070, 1133], "array_equ": [181, 182, 758], "as_ivy_dev": [181, 182, 377, 470], "as_ivy_dtyp": [181, 182, 433], "as_native_dev": [181, 182, 470], "as_native_dtyp": [181, 182, 433], "asarrai": [181, 182, 372, 414, 870, 871, 1075, 1077], "assert_supports_inplac": [181, 182, 758], "astyp": [181, 182, 370, 372, 433], "broadcast_arrai": [181, 182, 433], "broadcast_to": [181, 182, 370, 433], "cache_fn": [181, 182, 365, 758], "clear_mem_on_dev": [181, 182, 470], "clip_matrix_norm": [181, 182, 758], "closest_valid_dtyp": [181, 182, 433], "container_typ": [181, 182, 758], "conv1d": [181, 182, 870, 1154], "conv1d_transpos": [181, 182, 870], "conv2d": [181, 182, 870, 1133, 1154], "conv2d_transpos": [181, 182, 870], "conv3d": [181, 182, 870, 1154], "conv3d_transpos": [181, 182, 870], "copy_arrai": [181, 182, 758], "cumprod": [181, 182, 380, 758], "cumsum": [181, 182, 758, 1133], "current_backend_str": [181, 182, 758], "default_devic": [181, 182, 371, 375, 470, 508, 511, 518], "default_dtyp": [181, 182, 365, 370, 433], "default_float_dtyp": [181, 182, 370, 433], "default_int_dtyp": [181, 182, 370, 433], "depthwise_conv2d": [181, 182, 870, 1133], "dev_clone_arrai": [181, 182, 470], "dev_clone_it": [181, 182, 470], "dev_clone_nest": [181, 182, 470], "dev_dist_arrai": [181, 182, 470], "dev_dist_it": [181, 182, 470], "dev_dist_nest": [181, 182, 470], "dev_unifi": [181, 182, 470], "dev_unify_arrai": [181, 182, 470], "dev_unify_it": [181, 182, 470], "dev_unify_nest": [181, 182, 470], "dev_util": [181, 182, 371, 470], "dropout": [181, 182, 378, 870, 1154, 1165], "dtype_bit": [181, 182, 433], "empty_lik": [181, 182, 414], "execute_with_gradi": [181, 182, 369, 378, 379, 380, 392, 832, 1133], "ey": [181, 182, 380, 414, 870, 873, 877], "finfo": [181, 182, 433], "floormod": [181, 182, 758, 1133], "fourier_encod": [181, 182, 758], "from_dlpack": [181, 182, 414], "full_lik": [181, 182, 414], "function_supported_dtyp": [181, 182, 433], "function_unsupported_dtyp": [181, 182, 433], "gelu": [181, 182, 403, 1140], "get_all_arrays_in_memori": [181, 182, 758], "get_all_ivy_arrays_on_dev": [181, 182, 371, 470], "get_min_bas": [181, 182, 758], "get_min_denomin": [181, 182, 758], "get_num_dim": [181, 182, 758, 1133], "get_referrers_recurs": [181, 182, 758], "gpu_is_avail": [181, 182, 470], "handle_nest": [181, 182, 365, 369, 393], "handle_out_argu": [181, 182, 367, 370, 371, 372, 373, 393], "iinfo": [181, 182, 433], "indices_wher": [181, 182, 758, 1133], "infer_devic": [181, 182, 370, 371, 373, 393], "infer_dtyp": [181, 182, 370, 371, 373, 393], "inplace_arrays_support": [181, 182, 758], "inplace_decr": [181, 182, 758], "inplace_incr": [181, 182, 758], "inplace_variables_support": [181, 182, 758], "inputs_to_native_arrai": [181, 182, 368, 393], "invalid_dtyp": [181, 182, 433], "is_float_dtyp": [181, 182, 433], "is_int_dtyp": [181, 182, 433, 758, 828], "is_ivy_contain": [181, 182, 758], "leaky_relu": [181, 182, 403, 1133], "linear": [181, 182, 361, 375, 378, 379, 380, 403, 404, 405, 406, 758, 785, 870, 878, 931, 933, 1133, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "linspac": [181, 182, 375, 414, 415, 1133], "logspac": [181, 182, 375, 414], "lstm_updat": [181, 182, 375, 870], "match_kwarg": [181, 182, 758], "matrix_pow": [181, 182, 883], "meshgrid": [181, 182, 414], "multi_head_attent": [181, 182, 369, 372, 870], "multinomi": [181, 182, 1058], "nonzero": [181, 182, 520, 534, 690, 693, 1070], "num_arrays_in_memori": [181, 182, 758], "num_cpu_cor": [181, 182, 371, 470], "num_gpu": [181, 182, 364, 371, 470], "num_ivy_arrays_on_dev": [181, 182, 470], "one_hot": [181, 182, 380, 758, 1133], "ones_lik": [181, 182, 380, 414, 1133], "outputs_to_ivy_arrai": [181, 182, 368, 370, 371, 373, 393], "percent_used_mem_on_dev": [181, 182, 470], "print_all_arrays_in_memori": [181, 182, 758], "print_all_ivy_arrays_on_dev": [181, 182, 470], "promote_typ": [181, 182, 433], "randint": [181, 182, 184, 298, 340, 341, 1058, 1062, 1133], "random_norm": [181, 182, 870, 873, 876, 877, 883, 934, 1058, 1075, 1076], "result_typ": [181, 182, 370, 433], "scaled_dot_product_attent": [181, 182, 870], "scatter_flat": [181, 182, 758], "scatter_nd": [181, 182, 377, 758, 1133], "set_default_devic": [181, 182, 371, 470, 518], "set_default_dtyp": [181, 182, 365, 370, 433], "set_default_float_dtyp": [181, 182, 370, 433], "set_default_int_dtyp": [181, 182, 370, 433], "set_min_bas": [181, 182, 758], "set_min_denomin": [181, 182, 758], "set_queue_timeout": [181, 182, 758], "set_split_factor": [181, 182, 470], "set_tmp_dir": [181, 182, 758], "set_with_grad": [181, 182, 832], "shape_to_tupl": [181, 182, 370, 758], "sigmoid": [181, 182, 375, 378, 379, 403, 1133], "slogdet": [181, 182, 883, 894], "softplu": [181, 182, 403, 1133], "split_factor": [181, 182, 470, 479], "split_func_cal": [181, 182, 470], "stable_divid": [181, 182, 365, 758], "stable_pow": [181, 182, 758], "static_aco": [181, 182], "static_acosh": [181, 182], "static_al": [181, 182], "static_ani": [181, 182], "static_arang": [181, 182], "static_arg_info": [181, 182], "static_arg_nam": [181, 182], "static_argmax": [181, 182], "static_argmin": [181, 182], "static_arrai": [181, 182], "static_array_equ": [181, 182], "static_arrays_equ": [181, 182], "static_as_ivy_dev": [181, 182], "static_as_ivy_dtyp": [181, 182], "static_as_native_dev": [181, 182], "static_as_native_dtyp": [181, 182], "static_asarrai": [181, 182], "static_asin": [181, 182], "static_asinh": [181, 182], "static_assert_supports_inplac": [181, 182], "static_astyp": [181, 182], "static_atan": [181, 182], "static_atan2": [181, 182], "static_atanh": [181, 182], "static_bitwise_and": [181, 182], "static_bitwise_invert": [181, 182], "static_bitwise_left_shift": [181, 182], "static_bitwise_or": [181, 182], "static_bitwise_right_shift": [181, 182], "static_bitwise_xor": [181, 182], "static_broadcast_arrai": [181, 182], "static_broadcast_to": [181, 182], "static_cache_fn": [181, 182], "static_ceil": [181, 182], "static_clear_mem_on_dev": [181, 182], "static_clip_matrix_norm": [181, 182], "static_clip_vector_norm": [181, 182], "static_closest_valid_dtyp": [181, 182], "static_concat": [181, 182], "static_constant_pad": [181, 182], "static_container_typ": [181, 182], "static_conv1d": [181, 182], "static_conv1d_transpos": [181, 182], "static_conv2d": [181, 182], "static_conv2d_transpos": [181, 182], "static_conv3d": [181, 182], "static_conv3d_transpos": [181, 182], "static_copy_arrai": [181, 182], "static_co": [181, 182], "static_cosh": [181, 182], "static_cross": [181, 182], "static_cumprod": [181, 182], "static_cumsum": [181, 182], "static_current_backend": [181, 182], "static_current_backend_str": [181, 182], "static_default": [181, 182], "static_default_devic": [181, 182], "static_default_dtyp": [181, 182], "static_default_float_dtyp": [181, 182], "static_default_int_dtyp": [181, 182], "static_depthwise_conv2d": [181, 182], "static_det": [181, 182], "static_dev": [181, 182], "static_dev_clon": [181, 182], "static_dev_clone_arrai": [181, 182], "static_dev_clone_it": [181, 182], "static_dev_clone_nest": [181, 182], "static_dev_dist": [181, 182], "static_dev_dist_arrai": [181, 182], "static_dev_dist_it": [181, 182], "static_dev_dist_nest": [181, 182], "static_dev_unifi": [181, 182], "static_dev_unify_arrai": [181, 182], "static_dev_unify_it": [181, 182], "static_dev_unify_nest": [181, 182], "static_dev_util": [181, 182], "static_diagon": [181, 182], "static_dropout": [181, 182], "static_dtyp": [181, 182], "static_dtype_bit": [181, 182], "static_eigh": [181, 182], "static_eigvalsh": [181, 182], "static_einops_rearrang": [181, 182], "static_einops_reduc": [181, 182], "static_einops_repeat": [181, 182], "static_einsum": [181, 182], "static_empti": [181, 182], "static_empty_lik": [181, 182], "static_equ": [181, 182], "static_erf": [181, 182], "static_execute_with_gradi": [181, 182], "static_exist": [181, 182], "static_exp": [181, 182], "static_expand_dim": [181, 182], "static_expm1": [181, 182], "static_ey": [181, 182], "static_finfo": [181, 182], "static_flip": [181, 182], "static_floor": [181, 182], "static_floor_divid": [181, 182], "static_floormod": [181, 182], "static_fourier_encod": [181, 182], "static_from_dlpack": [181, 182], "static_ful": [181, 182], "static_full_lik": [181, 182], "static_function_supported_dtyp": [181, 182], "static_function_unsupported_dtyp": [181, 182], "static_gath": [181, 182], "static_gelu": [181, 182], "static_get_all_arrays_in_memori": [181, 182], "static_get_all_ivy_arrays_on_dev": [181, 182], "static_get_min_bas": [181, 182], "static_get_min_denomin": [181, 182], "static_get_num_dim": [181, 182], "static_get_referrers_recurs": [181, 182], "static_gpu_is_avail": [181, 182], "static_great": [181, 182], "static_greater_equ": [181, 182], "static_handle_nest": [181, 182], "static_handle_out_argu": [181, 182], "static_has_nan": [181, 182], "static_iinfo": [181, 182], "static_indices_wher": [181, 182], "static_infer_devic": [181, 182], "static_infer_dtyp": [181, 182], "static_inplace_arrays_support": [181, 182], "static_inplace_decr": [181, 182], "static_inplace_incr": [181, 182], "static_inplace_upd": [181, 182], "static_inplace_variables_support": [181, 182], "static_inputs_to_native_arrai": [181, 182], "static_inv": [181, 182], "static_invalid_dtyp": [181, 182], "static_is_arrai": [181, 182], "static_is_float_dtyp": [181, 182], "static_is_int_dtyp": [181, 182], "static_is_ivy_arrai": [181, 182], "static_is_ivy_contain": [181, 182], "static_is_native_arrai": [181, 182], "static_isfinit": [181, 182], "static_isinf": [181, 182], "static_isnan": [181, 182], "static_layer_norm": [181, 182], "static_leaky_relu": [181, 182], "static_less": [181, 182], "static_less_equ": [181, 182], "static_linear": [181, 182], "static_linspac": [181, 182], "static_log": [181, 182], "static_log10": [181, 182], "static_log1p": [181, 182], "static_log2": [181, 182], "static_logaddexp": [181, 182], "static_logical_and": [181, 182], "static_logical_not": [181, 182], "static_logical_or": [181, 182], "static_logical_xor": [181, 182], "static_logspac": [181, 182], "static_lstm_upd": [181, 182], "static_match_kwarg": [181, 182], "static_matmul": [181, 182], "static_matrix_norm": [181, 182], "static_matrix_pow": [181, 182], "static_matrix_rank": [181, 182], "static_matrix_transpos": [181, 182], "static_max": [181, 182], "static_maximum": [181, 182], "static_mean": [181, 182], "static_meshgrid": [181, 182], "static_min": [181, 182], "static_minimum": [181, 182], "static_multi_head_attent": [181, 182], "static_multinomi": [181, 182], "static_multiprocess": [181, 182], "static_native_arrai": [181, 182], "static_neg": [181, 182], "static_nonzero": [181, 182], "static_not_equ": [181, 182], "static_num_arrays_in_memori": [181, 182], "static_num_cpu_cor": [181, 182], "static_num_gpu": [181, 182], "static_num_ivy_arrays_on_dev": [181, 182], "static_one_hot": [181, 182], "static_on": [181, 182], "static_ones_lik": [181, 182], "static_out": [181, 182], "static_outputs_to_ivy_arrai": [181, 182], "static_percent_used_mem_on_dev": [181, 182], "static_permute_dim": [181, 182], "static_pinv": [181, 182], "static_posit": [181, 182], "static_pow": [181, 182], "static_print_all_arrays_in_memori": [181, 182], "static_print_all_ivy_arrays_on_dev": [181, 182], "static_prod": [181, 182], "static_promote_typ": [181, 182], "static_qr": [181, 182], "static_queue_timeout": [181, 182], "static_random_norm": [181, 182], "static_relu": [181, 182], "static_remaind": [181, 182], "static_repeat": [181, 182], "static_reshap": [181, 182], "static_result_typ": [181, 182], "static_round": [181, 182], "static_scaled_dot_product_attent": [181, 182], "static_scatter_flat": [181, 182], "static_scatter_nd": [181, 182], "static_se": [181, 182], "static_set_default_devic": [181, 182], "static_set_default_dtyp": [181, 182], "static_set_default_float_dtyp": [181, 182], "static_set_default_int_dtyp": [181, 182], "static_set_min_bas": [181, 182], "static_set_min_denomin": [181, 182], "static_set_queue_timeout": [181, 182], "static_set_split_factor": [181, 182], "static_set_tmp_dir": [181, 182], "static_set_with_grad": [181, 182], "static_shap": [181, 182], "static_shape_to_tupl": [181, 182], "static_shuffl": [181, 182], "static_sigmoid": [181, 182], "static_sign": [181, 182], "static_sin": [181, 182], "static_sinh": [181, 182], "static_slogdet": [181, 182], "static_softmax": [181, 182], "static_softplu": [181, 182], "static_solv": [181, 182], "static_split": [181, 182], "static_split_factor": [181, 182], "static_split_func_cal": [181, 182], "static_sqrt": [181, 182], "static_squar": [181, 182], "static_squeez": [181, 182], "static_stable_divid": [181, 182], "static_stable_pow": [181, 182], "static_stack": [181, 182], "static_std": [181, 182], "static_stop_gradi": [181, 182], "static_sum": [181, 182], "static_supports_inplac": [181, 182], "static_svd": [181, 182], "static_svdv": [181, 182], "static_swapax": [181, 182], "static_tensordot": [181, 182], "static_til": [181, 182], "static_tmp_dir": [181, 182], "static_to_devic": [181, 182], "static_to_list": [181, 182], "static_to_native_arrays_and_back": [181, 182], "static_to_numpi": [181, 182], "static_to_scalar": [181, 182], "static_total_mem_on_dev": [181, 182], "static_tpu_is_avail": [181, 182], "static_trac": [181, 182], "static_tril": [181, 182], "static_triu": [181, 182], "static_trunc": [181, 182], "static_try_else_non": [181, 182], "static_type_promote_arrai": [181, 182], "static_unique_al": [181, 182], "static_unique_count": [181, 182], "static_unique_invers": [181, 182], "static_unique_valu": [181, 182], "static_unset_default_devic": [181, 182], "static_unset_default_dtyp": [181, 182], "static_unset_default_float_dtyp": [181, 182], "static_unset_default_int_dtyp": [181, 182], "static_unset_with_grad": [181, 182], "static_unstack": [181, 182], "static_used_mem_on_dev": [181, 182], "static_valid_dtyp": [181, 182], "static_value_is_nan": [181, 182], "static_var": [181, 182], "static_vari": [181, 182], "static_variable_data": [181, 182], "static_vecdot": [181, 182], "static_vector_norm": [181, 182], "static_vector_to_skew_symmetric_matrix": [181, 182], "static_wher": [181, 182], "static_with_grad": [181, 182], "static_zero_pad": [181, 182], "static_zero": [181, 182], "static_zeros_lik": [181, 182], "supports_inplac": [181, 182, 758], "tmp_dir": [181, 182, 758], "to_native_arrays_and_back": [181, 182, 367, 373, 393], "to_scalar": [181, 182, 758], "total_mem_on_dev": [181, 182, 371, 470], "tpu_is_avail": [181, 182, 470], "tril": [181, 182, 414], "triu": [181, 182, 414], "try_else_non": [181, 182, 758], "type_promote_arrai": [181, 182, 433], "unique_al": [181, 182, 1075], "unique_count": [181, 182, 1075], "unique_invers": [181, 182, 1075], "unique_valu": [181, 182, 1075], "unset_default_devic": [181, 182, 470], "unset_default_dtyp": [181, 182, 433], "unset_default_float_dtyp": [181, 182, 433], "unset_default_int_dtyp": [181, 182, 433], "unset_with_grad": [181, 182, 832], "used_mem_on_dev": [181, 182, 470], "valid_dtyp": [181, 182, 433], "value_is_nan": [181, 182, 758], "variable_data": [181, 182, 832], "with_grad": [181, 182, 832, 864], "zeros_lik": [181, 182, 414, 971, 972, 975, 1133], "at_dev": [181, 183, 184, 470, 483, 484], "container_method": [184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 442, 444, 446, 521, 523, 525, 528, 529, 530, 532, 536, 537, 538, 539, 541, 543, 545, 549, 550, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 583, 585, 589, 590, 593, 594, 597, 598, 599, 602, 603, 604, 606, 610, 611, 612, 614, 618, 619, 620, 622, 626, 627, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 690, 692, 694, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 740, 742, 745, 747, 748, 750, 752, 753, 754, 756, 759, 761, 763, 771, 772, 787, 789, 791, 834, 836, 838, 839, 840, 842, 844, 845, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 863, 884, 886, 888, 907, 909, 956, 958, 960, 961, 963, 965, 966, 968, 970, 972, 974, 976, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1054, 1056, 1060, 1062, 1064, 1065, 1067, 1081, 1083, 1085, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1118, 1119, 1120, 1122, 1125, 1127, 1129, 1131], "adam_upd": [184, 326, 327, 379, 832], "lr": [184, 189, 231, 238, 239, 259, 281, 292, 294, 295, 297, 326, 327, 378, 379, 832, 839, 840, 841, 842, 844, 845, 846, 847, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 1170, 1171, 1172, 1173, 1174, 1175], "mw_tm1": [184, 189, 238, 281, 294, 326, 327, 832, 839, 840, 841, 842, 852, 853, 854, 855], "vw_tm1": [184, 189, 238, 281, 294, 326, 327, 832, 839, 840, 841, 842, 852, 853, 854, 855], "add_ivy_container_instance_method": [184, 352], "containerexampl": [184, 191, 352, 353], "static_all_equ": [184, 193, 324, 325, 759, 761], "int32": [184, 210, 286, 318, 319, 370, 433, 442, 444, 445, 446, 454, 758, 827, 971, 985, 988, 1091, 1108, 1111, 1116], "int64": [184, 210, 286, 318, 319, 370, 433, 442, 444, 445, 446, 454, 520, 575, 578, 1070, 1071, 1072, 1091, 1108, 1111, 1116], "73": [184, 212, 287, 332, 333, 520, 731, 734, 883, 884, 886, 887, 888, 1053, 1054, 1057], "577": [184, 212, 287, 332, 333, 883, 884, 886, 887, 888], "41": [184, 212, 287, 332, 333, 377, 520, 579, 582, 731, 734, 883, 884, 886, 887, 888, 1091, 1116], "707": [184, 212, 287, 332, 333, 883, 884, 886, 887, 888], "clip_vector_norm": [184, 324, 325, 758], "max_norm": [184, 214, 324, 325, 758, 770, 771, 772, 773], "gradient_descent_upd": [184, 326, 327, 832, 1031, 1032, 1033, 1034, 1133], "is_vari": [184, 326, 327, 372, 832], "lamb_upd": [184, 326, 327, 832], "max_trust_ratio": [184, 238, 294, 326, 327, 832, 852, 853, 854, 855, 1170, 1172], "decay_lambda": [184, 238, 239, 294, 295, 326, 327, 832, 852, 853, 854, 855, 856, 857, 858, 859, 1170, 1172, 1173], "lars_upd": [184, 326, 327, 832], "optimizer_upd": [184, 326, 327, 832], "effective_grad": [184, 259, 297, 326, 327, 832, 860, 861, 862, 863], "random_uniform": [184, 340, 341, 371, 379, 1058, 1133], "static_ab": [184, 322, 323, 521], "static_adam_step": [184, 326, 327, 834], "87": [184, 280, 298, 326, 327, 340, 341, 832, 834, 837, 838, 1060, 1062], "976": [184, 280, 326, 327, 520, 749, 832, 834, 837, 838], "static_adam_upd": [184, 326, 327, 839], "static_add": [184, 322, 323, 361, 362, 369, 668], "static_argsort": [184, 346, 347, 1081], "static_binary_cross_entropi": [184, 334, 335, 956], "static_can_cast": [184, 318, 319, 442], "from_": [184, 286, 318, 319, 433, 442, 445, 446], "static_choleski": [184, 332, 333, 884], "static_rol": [184, 287, 288, 332, 333, 336, 337, 362, 369, 884, 888, 972, 976, 1005], "static_clip": [184, 336, 337, 972], "static_cross_entropi": [184, 334, 335, 961], "static_divid": [184, 322, 323, 369, 619, 620], "static_gather_nd": [184, 324, 325, 787], "static_gradient_descent_upd": [184, 326, 327, 844], "static_is_vari": [184, 326, 327, 848], "static_lamb_upd": [184, 326, 327, 852], "static_lars_upd": [184, 326, 327, 856], "static_multipli": [184, 322, 323, 369, 690], "static_optimizer_upd": [184, 326, 327, 860], "static_randint": [184, 340, 341, 1060], "20": [184, 298, 340, 341, 377, 520, 579, 582, 608, 715, 718, 731, 734, 883, 895, 897, 921, 923, 940, 942, 1058, 1060, 1061, 1062, 1070, 1073, 1074, 1091, 1092, 1095, 1119], "15": [184, 298, 340, 341, 355, 362, 520, 559, 562, 715, 718, 870, 873, 883, 895, 897, 921, 923, 940, 942, 971, 1005, 1008, 1053, 1054, 1057, 1058, 1060, 1061, 1062, 1070, 1073, 1075, 1076, 1091, 1092, 1095, 1119], "16": [184, 298, 304, 310, 322, 323, 340, 341, 356, 362, 378, 520, 550, 555, 744, 745, 747, 753, 870, 876, 883, 895, 897, 921, 923, 1060, 1062, 1070, 1074, 1091, 1092, 1095, 1119], "12": [184, 298, 340, 341, 355, 362, 369, 520, 559, 562, 579, 582, 591, 715, 718, 758, 776, 794, 832, 834, 837, 883, 895, 897, 921, 923, 940, 942, 971, 989, 992, 997, 1000, 1005, 1008, 1053, 1054, 1057, 1058, 1060, 1061, 1062, 1070, 1074, 1075, 1076, 1091, 1092, 1095, 1119], "40": [184, 298, 340, 341, 520, 591, 731, 734, 883, 921, 923, 1060, 1062, 1091, 1092, 1095, 1119], "gpu": [184, 298, 340, 341, 356, 371, 377, 392, 470, 489, 492, 505, 507, 511, 513, 518, 1060, 1062], "62": [184, 298, 340, 341, 1060, 1062], "52": [184, 298, 340, 341, 832, 834, 837, 883, 921, 923, 1060, 1062, 1075, 1076, 1091, 1092, 1095, 1119], "95": [184, 298, 340, 341, 832, 834, 837, 1060, 1062], "37": [184, 298, 340, 341, 520, 744, 1053, 1054, 1057, 1060, 1062], "42": [184, 298, 340, 341, 380, 403, 409, 832, 834, 837, 883, 921, 923, 1058, 1060, 1062, 1068, 1091, 1092, 1095, 1119], "14": [184, 298, 340, 341, 358, 362, 369, 520, 579, 582, 832, 834, 837, 870, 882, 883, 895, 897, 921, 923, 1060, 1062, 1075, 1076, 1091, 1092, 1095, 1119], "13": [184, 298, 340, 341, 362, 369, 520, 559, 562, 579, 582, 591, 731, 734, 758, 776, 832, 834, 837, 870, 882, 883, 895, 897, 921, 923, 1053, 1054, 1057, 1060, 1062, 1070, 1074, 1075, 1076, 1091, 1092, 1095, 1119], "static_random_uniform": [184, 340, 341, 1064], "static_sort": [184, 346, 347, 1086], "static_sparse_cross_entropi": [184, 334, 335, 966], "static_subtract": [184, 322, 323, 369, 739], "static_tan": [184, 322, 323, 362, 369, 550, 555, 753], "143": [184, 304, 310, 322, 323, 362, 520, 550, 555, 744, 745, 747, 753], "38": [184, 304, 310, 322, 323, 362, 520, 550, 555, 744, 745, 747, 753], "static_tanh": [184, 322, 323, 555], "76": [184, 305, 322, 323, 520, 555, 591, 750, 832, 834, 837, 883, 940, 942, 1091, 1092, 1095, 1119], "96": [184, 305, 322, 323, 520, 555, 744, 750, 832, 834, 837, 883, 921, 923, 1091, 1092, 1095, 1119], "995": [184, 305, 311, 322, 323, 520, 550, 555, 749, 750, 752], "9999": [184, 305, 322, 323, 555, 750], "strongli": [354, 355, 1133, 1139], "welcom": [354, 355, 356, 1133, 1139], "skill": 354, "vetern": 354, "beginn": 354, "aspect": [354, 378, 1133], "guid": [354, 355, 356, 364, 1133], "through": [354, 356, 357, 359, 362, 365, 366, 369, 374, 375, 377, 378, 379, 380, 391, 520, 551, 554], "journei": [354, 1133, 1139], "inclusvi": 354, "big": [354, 392], "team": [354, 355, 356], "board": 354, "contributor": [354, 355, 356, 374, 1133], "section": [354, 356, 357, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 1075, 1076, 1077, 1079], "below": [354, 355, 357, 358, 359, 360, 362, 365, 369, 370, 371, 372, 375, 376, 377, 378, 379, 380, 391, 414, 429, 430, 520, 559, 562, 579, 582, 591, 715, 718, 749, 883, 892, 895, 897, 943, 945, 971, 985, 988, 989, 992, 1075, 1076, 1077, 1080, 1081, 1084, 1133], "best": [354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 758, 808], "go": [354, 355, 356, 357, 359, 360, 362, 369, 374, 378, 392, 1035, 1046], "finish": [354, 355, 359, 1133], "dive": [354, 356, 357, 374, 377, 378, 392, 1133], "environ": [354, 356, 358, 391], "basic": [354, 357, 358], "fork": [354, 355, 758, 809], "doc": [354, 357, 361, 373, 375, 378, 379, 1133], "document": [354, 356, 376, 378, 380], "local": [354, 355, 358, 365], "task": [354, 356, 391, 1031, 1032, 1033, 1034, 1133], "help": [354, 355, 362, 366, 368, 369, 377, 378, 379, 390, 758, 764, 1091, 1116, 1133], "video": [354, 356, 361, 362, 373], "realli": [355, 369, 392], "contribut": [355, 356, 357, 375, 1139], "toward": [355, 375, 971, 1005, 1008, 1133, 1139], "page": [355, 356, 376, 380, 390, 1133, 1139], "explain": [355, 356, 357, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 1133, 1139], "main": [355, 358, 367, 369, 414, 419, 429, 430, 883, 895, 897, 943, 945], "prefer": [355, 369], "git": [355, 356], "submodul": [355, 356, 357, 358, 363, 364, 365, 371, 374, 375, 379, 1133, 1168, 1169, 1176, 1177], "com": 355, "unifyai": [355, 358], "http": [355, 361, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 539, 542, 579, 582, 583, 586, 591, 616, 699, 702, 731, 734, 735, 738, 832, 834, 837, 839, 841, 971, 985, 988, 1005, 1008, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099], "gh": 355, "your_fold": 355, "id": [355, 368, 369, 470, 489, 1166, 1167], "cours": [355, 356, 362, 378, 392], "whatev": [355, 392], "integr": [355, 364, 433, 439], "familiar": [355, 357], "sure": [355, 357, 363], "elig": 355, "free": [355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 391, 1133], "student": 355, "licenc": 355, "peopl": [355, 356, 359], "seem": [355, 379, 392], "miss": [355, 362, 364, 368, 369, 1170, 1174], "explicit": [355, 358, 369, 370, 372, 375, 392], "remind": 355, "channel": [355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 758, 785, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164], "pace": 355, "suggest": [355, 356, 360], "latest": [355, 357, 358, 361, 392, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 539, 542, 579, 582, 583, 586, 591, 616, 699, 702, 731, 734, 735, 738, 971, 985, 988, 1005, 1008, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1154, 1163], "packag": [355, 358, 392], "ensur": [355, 356, 364, 368, 370, 373, 758, 802], "pypi": [355, 357, 392], "person": [355, 356], "experi": [355, 376, 378, 392], "avoid": [355, 356, 364, 366, 367, 369, 377, 470, 520, 612, 615], "pip": [355, 391, 1133], "instal": [355, 358, 391, 1133], "abil": [355, 376, 392], "perhap": [355, 377, 378, 379, 392], "track": [355, 356, 470, 1035, 1047, 1166, 1167], "run": [355, 358, 363, 364, 366, 373, 375, 376, 377, 378, 379, 380, 391, 392, 470, 479, 832, 834, 837, 839, 841, 852, 854, 1031, 1032, 1033, 1034, 1154, 1165, 1166, 1167], "command": [355, 358, 1133], "ivy_dev": [355, 356, 358], "name": [355, 356, 358, 361, 364, 375, 377, 378, 380, 411, 412, 758, 764, 883, 898, 900, 927, 929, 934, 1075, 1076, 1077], "setup": 355, "click": [355, 356, 361, 1133], "icon": [355, 356], "side": [355, 356], "choos": [355, 356, 380, 470, 515, 520, 676, 679, 680, 683, 1070, 1074, 1075, 1076, 1077, 1079, 1091, 1096, 1099, 1100, 1103, 1104, 1107], "panel": 355, "select": [355, 356, 364, 375, 377, 380, 392], "drop": [355, 392], "down": [355, 377], "path": [355, 358], "manual": [355, 356, 364, 379, 1035, 1036, 1045, 1046], "builtin": [355, 358, 377, 379], "requir": [355, 358, 360, 361, 362, 364, 367, 368, 370, 371, 373, 377, 392, 411, 412, 520, 731, 734, 883, 898, 900, 971, 1015, 1018, 1143, 1144], "cmd": [355, 358], "directori": [355, 356, 358, 758, 819], "folder": [355, 356, 358, 360, 363, 364, 365], "abov": [355, 356, 358, 361, 362, 365, 366, 368, 369, 372, 373, 377, 378, 379, 380, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 534, 539, 542, 559, 562, 579, 582, 583, 586, 591, 616, 690, 693, 699, 702, 715, 718, 731, 734, 735, 738, 744, 749, 758, 786, 870, 873, 882, 883, 892, 895, 897, 898, 900, 943, 945, 971, 985, 988, 989, 992, 1005, 1008, 1053, 1054, 1057, 1058, 1060, 1061, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1108, 1111, 1112, 1115, 1116, 1124, 1125, 1128], "m": [355, 356, 358, 359, 375, 414, 425, 429, 430, 758, 767, 883, 884, 887, 892, 895, 897, 898, 900, 901, 903, 904, 906, 907, 910, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 931, 933, 934, 936, 937, 939, 943, 945, 1058, 1063, 1064, 1066], "python3": [355, 358], "script": [355, 356, 358, 362, 375, 392], "bat": [355, 356, 358], "OR": [355, 356, 358, 520, 571, 574, 680, 683, 1124, 1129, 1132], "bin": [355, 356, 358], "mac": [355, 356, 358], "linux": [355, 356, 358], "virtualenv": 355, "os": 355, "note": [355, 356, 360, 361, 362, 369, 520, 711, 714, 883, 898, 900, 934, 971, 1015, 1018, 1075, 1077, 1091, 1100, 1103], "tick": [355, 356], "To": [355, 362, 365, 369, 378, 379, 380, 1133], "ivy_test": [355, 356], "test_array_api": [355, 356, 363, 364], "cd": [355, 356, 358], "txt": 355, "visual": [355, 392], "jetbrain": 355, "remot": 355, "mitig": 355, "potenti": [355, 374, 520, 612, 615], "conflict": [355, 356, 378], "yet": [355, 357, 369], "particular": [355, 356, 360, 372, 520, 521, 524], "system": [355, 392, 883, 931, 933], "instruct": [355, 357], "desktop": 355, "wsl": 355, "powershel": 355, "admin": 355, "visit": 355, "link": 355, "profession": 355, "execut": [355, 358, 369, 372, 375, 377, 380, 392, 758, 829], "deploy": 355, "top": [355, 356, 364, 378, 379, 1133], "press": [355, 378, 1133], "ok": 355, "caus": [355, 356, 362, 364, 369, 372, 392], "earlier": [355, 356], "might": [355, 356, 360, 364, 367, 375, 377, 378, 758, 779], "necessari": [355, 362, 366, 369, 372], "virtualis": 355, "detail": [355, 356, 357, 360, 363, 364, 365, 366, 367, 369, 373, 378, 379, 414, 420, 1075, 1076, 1077, 1079], "sudo": 355, "apt": 355, "ca": 355, "certif": 355, "curl": 355, "gnupg": 355, "lsb": 355, "mkdir": 355, "keyr": 355, "fssl": 355, "download": [355, 364], "gpg": 355, "dearmor": 355, "o": [355, 375, 758, 767], "echo": 355, "deb": 355, "arch": 355, "dpkg": 355, "architectur": [355, 380, 392], "lsb_releas": 355, "cs": 355, "tee": 355, "null": 355, "ce": 355, "cli": 355, "containerd": 355, "io": 355, "compos": [355, 369, 392], "plugin": 355, "systemctl": 355, "permiss": 355, "relat": [355, 356, 391, 470], "post": [355, 380, 1053, 1054, 1057, 1133, 1139], "It": [355, 356, 358, 359, 360, 361, 362, 366, 368, 369, 372, 375, 377, 378, 379, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 439, 441, 470, 515, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 604, 607, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 632, 635, 636, 639, 640, 643, 644, 647, 648, 651, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 672, 675, 676, 679, 680, 683, 684, 687, 688, 689, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 739, 743, 744, 748, 749, 753, 754, 757, 758, 770, 771, 773, 776, 780, 781, 782, 784, 787, 790, 798, 811, 814, 815, 832, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 887, 889, 891, 892, 894, 895, 897, 901, 903, 904, 906, 907, 910, 911, 913, 915, 917, 918, 920, 921, 923, 924, 926, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 945, 946, 948, 949, 951, 952, 954, 955, 956, 959, 961, 964, 966, 969, 971, 972, 975, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1069, 1070, 1071, 1074, 1075, 1079, 1080, 1081, 1084, 1086, 1089, 1124, 1125, 1128, 1129, 1132], "headach": 355, "arm": [355, 356], "m1": 355, "instead": [355, 356, 357, 361, 362, 364, 365, 369, 372, 373, 375, 377, 378, 392], "featur": [355, 360, 373, 378, 1133], "vm": 355, "azur": 355, "cloud": [355, 391], "defin": [355, 357, 360, 361, 370, 373, 377, 379, 392, 520, 690, 693, 711, 714, 758, 811, 883, 889, 891, 898, 900, 931, 933, 1058, 1060, 1061, 1091, 1096, 1099, 1100, 1103, 1104, 1107], "dockerfil": [355, 358], "longer": [355, 370, 372], "worri": 355, "platform": 355, "agnost": [355, 368, 373, 375, 377, 380, 392, 1133], "usual": 355, "studio": 355, "favourit": 355, "extens": [355, 356, 361, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 534, 539, 542, 559, 562, 579, 582, 583, 586, 591, 616, 699, 702, 715, 718, 731, 734, 735, 738, 744, 749, 883, 892, 971, 985, 988, 989, 992, 1005, 1008, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1124, 1125, 1128], "theme": 355, "too": [355, 356, 392, 520, 534, 690, 693], "done": [355, 356, 362, 364, 378], "unsupport": [355, 370, 433, 454, 455], "slow": 355, "ipad": 355, "long": [355, 356, 362, 870, 880], "browser": 355, "cool": [355, 360], "requisit": 355, "head": [355, 369, 870, 881, 1133, 1154, 1165], "pane": [355, 356], "readi": [355, 357], "begin": [355, 1035, 1036, 1046], "outlin": [355, 356, 357, 359, 361, 364, 365, 369, 372, 377], "dropdown": 355, "tab": [355, 378, 1133], "master": [355, 356, 369], "vs": 355, "view": [355, 356, 414, 420, 870, 873, 877], "built": [355, 376, 414, 415, 470, 1154, 1165, 1166, 1167], "bottom": 355, "box": 355, "patient": 355, "upto": 355, "minut": 355, "launch": 355, "That": [355, 356, 377, 378, 379, 520, 711, 714], "refer": [355, 356, 364, 365, 370, 373, 392, 414, 419, 520, 612, 615, 660, 663, 832, 834, 837, 839, 841, 883, 946, 948, 952, 954, 1091, 1112, 1115, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1154, 1164], "approach": [355, 356, 364, 365, 369, 377, 378, 392], "colour": 355, "applic": [355, 370, 371, 379, 870, 881, 882, 1035, 1041, 1047], "good": [355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 379], "chanc": 355, "vscode": 355, "explor": [355, 376, 380, 391], "troubleshoot": 355, "sometim": [355, 356], "ever": [355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373], "64": [355, 378, 379, 520, 731, 734, 735, 738, 870, 876, 877, 883, 921, 923, 1091, 1092, 1095, 1119, 1133, 1154, 1165], "bit": [355, 362, 365, 369, 377, 433, 452, 453, 456, 520, 563, 566, 567, 570, 575, 578, 1091, 1108, 1111, 1116], "usr": 355, "more": [355, 356, 357, 359, 360, 362, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 391, 392, 414, 415, 433, 440, 520, 612, 615, 883, 907, 910, 971, 989, 992, 1075, 1076, 1077, 1079, 1133], "nutshel": [355, 373], "hook": 355, "lint": 355, "fix": [355, 356], "fail": [355, 357, 363, 364, 375, 377], "attempt": [355, 392], "succe": 355, "problemat": 355, "proce": [355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373], "modifi": [355, 356, 361, 365, 370, 371, 375], "properli": [355, 359], "enter": [355, 356, 368, 370, 371, 373, 470], "unsur": [355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373], "feel": [355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 1133], "server": [356, 1133], "context": [356, 362, 369, 370, 371, 470, 758, 809, 870, 881, 1154, 1165], "suitabl": [356, 360, 369], "quick": [356, 359, 379], "tendenc": 356, "land": 356, "end": [356, 369, 372, 374, 391, 392, 414, 415, 520, 551, 554, 1133, 1139], "world": 356, "come": [356, 357, 379, 390, 1133, 1139], "fly": 356, "hard": [356, 377], "receiv": [356, 364, 370, 371, 470, 479, 480, 758, 765, 808, 1154, 1164], "respons": [356, 358], "internship": 356, "comment": 356, "trigger": 356, "unansw": 356, "label": [356, 375, 376, 380, 955, 956, 959, 961, 964, 966, 969], "respond": 356, "someon": [356, 392], "els": [356, 357, 360, 365, 366, 372, 375, 377, 379, 380, 392, 758, 768, 779, 783, 1035, 1045], "strive": [356, 392], "repli": 356, "newli": [356, 372, 411, 412, 433, 439, 758, 769], "bug": [356, 364], "serv": [356, 364, 365, 368, 369, 373, 374, 1133], "suspect": 356, "behaviour": [356, 361, 364, 368, 369, 372, 373, 377], "observ": 356, "confid": 356, "wrong": 356, "someth": [356, 360, 378, 379, 392], "bet": 356, "act": [356, 362, 392], "placehold": [356, 368, 373, 1035, 1047], "mark": [356, 364], "ii": [356, 1091, 1092, 1095, 1119], "iii": 356, "titl": [356, 1133], "issue_numb": 356, "delet": [356, 358], "No": [356, 375], "progress": [356, 369, 376, 380], "pr": 356, "soon": [356, 369, 390, 392, 1133, 1139], "solut": [356, 364, 369, 883, 931, 933], "review": [356, 360], "merg": 356, "everi": [356, 357, 358, 362, 363, 364, 365, 366, 367, 369, 372, 373, 375, 377, 379, 414, 421, 422, 758, 759, 762], "dai": 356, "close": [356, 361, 520, 612, 615, 715, 718, 883, 934], "likewis": [356, 361, 365, 369, 370, 373, 378], "freed": 356, "purpos": [356, 358, 362, 364, 365, 367, 368, 369, 373, 374, 377, 520, 612, 615, 1133], "remain": [356, 362, 392, 520, 534, 690, 693, 711, 714, 971, 1001, 1004, 1035, 1041], "short": [356, 379, 870, 880], "basi": [356, 363, 378], "situat": [356, 380], "alloc": [356, 392, 414, 429, 430, 433, 439, 470], "upon": [356, 362, 364, 372, 392], "period": 356, "prevent": [356, 372, 377, 832, 834, 837, 839, 841, 852, 854, 1091, 1116, 1170, 1171, 1172], "unabl": 356, "obvious": 356, "never": [356, 369], "reflect": [356, 368], "qualiti": 356, "hypothet": 356, "frustrat": 356, "delai": 356, "busi": 356, "fine": [356, 377, 380], "becaus": [356, 361, 364, 365, 366, 368, 370, 371, 372, 373, 375, 379, 380, 392], "inact": 356, "me": 356, "unfairli": 356, "definit": [356, 365, 370, 377, 883, 884, 887, 889, 891], "investig": 356, "Then": [356, 358, 377, 392], "practic": [356, 364], "separ": [356, 364, 368, 375, 377, 378], "branch": [356, 369, 392, 411, 412, 520, 551, 554], "role": [356, 376], "date": 356, "upstream": [356, 363], "complic": [356, 375], "root": [356, 358, 378, 520, 731, 734, 1058, 1059, 1063], "merge_with_upstream": 356, "sh": 356, "name_of_your_branch": 356, "resolv": [356, 1091, 1108, 1111, 1116], "push": [356, 363], "both": [356, 361, 362, 365, 369, 371, 372, 373, 375, 377, 378, 379, 380, 391, 392, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 460, 520, 521, 524, 534, 539, 542, 583, 586, 616, 699, 702, 707, 710, 731, 734, 735, 738, 744, 758, 786, 832, 834, 837, 870, 873, 882, 883, 889, 891, 907, 910, 946, 948, 971, 1005, 1008, 1053, 1054, 1057, 1091, 1096, 1099, 1124, 1125, 1128], "abort": 356, "tediou": 356, "resolut": 356, "stash": 356, "reinstat": 356, "fetch": 356, "uncommit": 356, "unstag": 356, "untrack": 356, "comprehens": 356, "explan": [356, 361, 369, 373, 377], "atlassian": 356, "tutori": 356, "wrote": 356, "piec": [356, 365, 367, 368, 375], "inform": [356, 433, 453, 456, 758, 764, 832, 865], "tag": 356, "usu": 356, "describ": [356, 376, 380, 1091, 1092, 1095, 1108, 1111, 1112, 1115, 1116, 1119], "navig": [356, 359], "blame": 356, "revis": 356, "author": [356, 1133], "eg": 356, "past": 356, "l": [356, 359, 883, 884, 887, 898, 900, 907, 910, 943, 945], "grep": 356, "v": [356, 375, 378, 379, 380, 870, 882, 1133, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1174, 1176, 1177], "commit_id": 356, "handi": 356, "histori": 356, "toggl": 356, "vertic": 356, "highlight": [356, 362], "previou": [356, 364, 373, 380, 392, 832, 839, 841, 852, 854], "whenev": [356, 377, 378], "think": [356, 362], "interact": [356, 1133], "gain": [356, 374, 379, 1145], "quit": [356, 357, 361, 365, 367, 368], "yourself": [356, 357, 391], "simpler": [356, 377], "cannot": [356, 366, 370, 380], "least": [356, 362, 365, 368, 883, 907, 910], "final": [356, 361, 362, 365, 368, 370, 372, 375, 377, 378, 414, 423, 424, 758, 785, 1154, 1165], "tickbox": 356, "corner": 356, "span": 356, "intent": [356, 372], "larg": [356, 378, 520, 534, 690, 693], "discourag": 356, "philosophi": 356, "increment": [356, 758, 801], "frequent": [356, 357], "valuabl": 356, "infrequ": 356, "earli": [356, 1133], "wast": 356, "spot": [356, 365], "mistak": 356, "propos": 356, "mountain": 356, "advoc": [356, 392], "individu": [356, 357, 365], "per": [356, 378, 470, 870, 871, 872, 873, 874, 875, 876, 877, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "style": [356, 1070, 1073], "ve": [356, 374, 377, 1058, 1059, 1133], "actual": [356, 359, 365, 372, 374, 377, 379, 392], "aim": [356, 374], "part": [356, 360, 363, 364, 365, 375, 376, 380, 391, 392, 414, 429, 430, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 1166, 1167], "subsect": 356, "session": [356, 1133], "block": [356, 365, 374, 376, 380, 392, 470, 1133], "smaller": [356, 375, 380, 971, 972, 975, 1005, 1008, 1091, 1108, 1111, 1116], "edit": 356, "beauti": 356, "particularli": [356, 378, 392], "concern": [356, 359, 362, 369, 372, 374], "effici": [356, 364, 365, 369, 372, 373, 375, 378, 392], "difficult": [356, 364, 392, 1075, 1076, 1077, 1079], "undo": 356, "stress": 356, "frequenc": [356, 758, 785], "pycharm": 356, "pytest": [356, 364], "button": 356, "declar": 356, "insid": [356, 358, 360, 370], "exec": 356, "rm": 356, "rf": 356, "cp": 356, "ivy_contain": 356, "bash": [356, 358], "test_ivi": [356, 364], "test_funct": 356, "test_cor": 356, "test_imag": 356, "test_random_crop": 356, "header": 356, "q": [356, 392, 870, 882, 883, 898, 900, 927, 929], "array_api_test": 356, "test_creation_funct": 356, "test_arang": 356, "window": [356, 358, 870, 871, 872, 873, 874, 875, 876, 877, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "variou": [356, 361, 367, 373, 391], "wherebi": [357, 369, 1035, 1047], "broad": 357, "todo": [357, 364], "commit": [357, 364], "NOT": [357, 520, 676, 679], "resourc": 357, "hypothesi": 357, "cover": [357, 361, 362, 365, 367, 374], "lambda": [357, 375, 378, 1170, 1173, 1175], "direct": [357, 379, 380, 391, 1080, 1086, 1089], "bind": [357, 369], "aforement": 357, "categori": [357, 360, 368, 369, 370, 374, 1133], "parent": [357, 377], "hint": [357, 360, 361, 365, 368, 372, 373, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 534, 539, 542, 559, 562, 579, 582, 583, 586, 591, 616, 699, 702, 715, 718, 731, 734, 735, 738, 744, 749, 758, 786, 870, 873, 882, 883, 892, 971, 985, 988, 989, 992, 1005, 1008, 1053, 1054, 1057, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1124, 1125, 1128], "its": [357, 358, 361, 433, 440, 470, 514, 883, 907, 910, 971, 985, 988, 1001, 1004, 1005, 1008, 1019, 1022], "thorough": [357, 361, 364, 373], "transpil": [357, 374, 376, 1133, 1139], "builder": [358, 390, 392, 1133], "maco": 358, "ubuntu": 358, "uid": 358, "make_docs_without_dock": 358, "rel": [358, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 883, 895, 897, 906, 915, 917, 924, 926, 943, 945, 971, 989, 992, 1005, 1008, 1080, 1081, 1084, 1086, 1089, 1133], "synchron": 358, "rest": [358, 376, 380], "remove_doc": 358, "_": [358, 361, 369, 372, 377, 378, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 539, 542, 579, 582, 583, 586, 591, 616, 699, 702, 731, 734, 735, 738, 832, 834, 837, 839, 841, 883, 952, 954, 971, 985, 988, 1005, 1008, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099], "privat": [358, 1170, 1174], "fulfil": [358, 374, 1133], "autogenerated_sourc": 358, "png": [358, 378], "_imag": 358, "lastli": 358, "rst": 358, "partial_sourc": 358, "conf": 358, "create_rst_fil": 358, "filter": [358, 870, 871, 872, 873, 874, 875, 876, 877, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "repres": [358, 377, 414, 425, 433, 452, 520, 529, 530, 533, 534, 543, 546, 550, 555, 558, 590, 591, 594, 690, 693, 727, 730, 748, 749, 753, 870, 879, 883, 894, 930, 931, 933], "overal": [358, 361, 369, 370, 371, 380], "markup": 358, "extract": [358, 360], "get_functions_and_class": 358, "doctr": 358, "readm": [358, 392], "module_nam": 358, "copy_readme_to_rst": 358, "tabl": 358, "toc": 358, "tree": 358, "append_toctree_to_rst": 358, "create_index_rst": 358, "\u03c0": [358, 520, 526, 539, 542, 547, 551, 554], "namespac": [358, 360, 370, 375, 380], "who": [359, 374, 392], "mainli": [359, 376, 378], "under": [359, 361, 362, 363, 364, 365, 369, 374, 375, 378, 380], "hood": [359, 362, 364, 365, 369, 374, 375, 378, 380], "weed": [359, 374], "behind": [359, 374, 376, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862], "tour": 359, "primari": [359, 364, 366, 372, 392], "composit": [359, 364, 366, 368, 369, 372, 375, 379, 380, 392], "nestabl": [359, 361, 362, 364, 372, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 534, 539, 542, 583, 586, 616, 699, 702, 731, 734, 735, 738, 744, 758, 786, 870, 873, 882, 971, 1005, 1008, 1053, 1054, 1057, 1091, 1096, 1099, 1124, 1125, 1128], "dynam": [359, 370, 371, 372, 375, 411, 412], "runtim": [359, 364, 470], "h": [359, 369, 870, 873, 874, 875, 876, 877], "j": [359, 758, 766, 767, 883, 943, 945, 1091, 1092, 1095, 1119], "k": [359, 375, 414, 419, 429, 430, 758, 766, 870, 882, 883, 907, 910, 927, 929, 931, 933, 934, 936, 937, 939, 943, 945, 1058, 1063, 1064, 1066, 1070, 1073], "borrow": 359, "n": [359, 414, 425, 429, 430, 758, 767, 870, 878, 883, 895, 897, 906, 907, 910, 914, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 934, 936, 937, 939, 943, 945, 946, 948, 949, 951, 952, 954, 971, 981, 984, 985, 988, 993, 996, 1015, 1018, 1027, 1030, 1058, 1063, 1064, 1066, 1070, 1073, 1091, 1100, 1103, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "taken": [360, 380, 883, 895, 897], "constant": [360, 365, 379, 380, 392, 470, 479, 480, 971, 981, 984, 1035, 1041, 1053, 1054, 1057, 1145, 1146, 1150, 1153, 1166, 1167, 1168, 1169], "compil": [360, 369, 374, 376, 392, 1133, 1166, 1167, 1170, 1171, 1172, 1173, 1174, 1175], "meta": [360, 368, 1032, 1033, 1034], "overlap": 360, "sever": [360, 392, 883, 904], "judgement": 360, "locat": [360, 364, 366, 371, 1058, 1059], "some_namespac": 360, "some_backend": 360, "another_backend": 360, "break": [360, 373, 377, 392, 1133], "anyth": [360, 1133], "refactor": 360, "ongo": 360, "subfold": [360, 364], "via": [360, 369, 370, 371, 372, 375, 377, 378, 391, 1035, 1036, 1045, 1046], "file_nam": 360, "my_func": [360, 362], "int": [360, 362, 365, 369, 370, 371, 372, 373, 380, 403, 408, 411, 412, 414, 417, 419, 421, 422, 423, 424, 427, 429, 430, 431, 433, 441, 450, 452, 453, 456, 459, 470, 492, 495, 496, 497, 498, 506, 507, 508, 514, 515, 520, 559, 562, 563, 566, 567, 570, 571, 574, 575, 578, 579, 582, 758, 764, 776, 777, 780, 781, 782, 785, 786, 795, 811, 814, 815, 820, 821, 830, 832, 834, 837, 839, 841, 852, 854, 870, 871, 873, 875, 876, 877, 883, 889, 891, 895, 897, 940, 942, 943, 945, 946, 948, 949, 951, 955, 961, 964, 966, 969, 971, 977, 980, 981, 984, 985, 988, 989, 992, 993, 996, 997, 1000, 1001, 1004, 1005, 1008, 1010, 1011, 1014, 1015, 1018, 1019, 1022, 1023, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1047, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1068, 1070, 1071, 1072, 1080, 1081, 1084, 1086, 1089, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "nativedtyp": [360, 370, 371, 373, 414, 415, 416, 417, 418, 419, 421, 422, 426, 427, 428, 431, 432, 433, 438, 439, 449, 450, 451, 460, 1091, 1116], "nativedevic": [360, 370, 371, 373, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 431, 432, 470, 487, 488, 489, 503, 509, 511, 513, 515, 516, 519, 758, 811, 1058, 1059, 1060, 1061, 1063, 1064, 1066], "my": 360, "numer": [360, 379, 414, 425, 433, 439, 520, 521, 524, 534, 583, 586, 595, 598, 612, 615, 616, 619, 620, 623, 632, 635, 636, 639, 640, 643, 644, 647, 676, 679, 680, 683, 690, 693, 695, 698, 699, 702, 707, 710, 711, 714, 719, 722, 735, 738, 739, 743, 754, 757, 758, 793, 794, 816, 817, 822, 823, 883, 889, 891, 907, 910, 921, 923, 934, 940, 942, 943, 945, 946, 948, 1058, 1069, 1070, 1071, 1072, 1091, 1096, 1099, 1108, 1111, 1116, 1145], "cooler": 360, "produc": [360, 470, 479, 480, 870, 882], "something_cool": 360, "category_nam": [361, 365, 370, 371, 373], "contrast": [361, 373], "backend_nam": [361, 365, 366, 367, 370, 371, 373], "account": 361, "instanti": 361, "firstli": [361, 362, 365, 368, 370, 372, 378], "templat": [361, 1133], "spec": [361, 362], "api_specif": [361, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 539, 542, 579, 582, 583, 586, 591, 616, 699, 702, 731, 734, 735, 738, 971, 985, 988, 1005, 1008, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099], "array_api": 361, "preview": 361, "render": 361, "incorrectli": 361, "onlin": [361, 1133], "approxim": [361, 403, 404, 520, 526, 529, 530, 533, 539, 542, 543, 546, 547, 551, 554, 587, 590, 591, 594, 608, 612, 615, 652, 655, 656, 659, 660, 663, 664, 667, 707, 710, 723, 726, 727, 730, 744, 749, 883, 906, 915, 917, 924, 926], "tangent": [361, 403, 410, 520, 547, 550, 551, 554, 555, 558, 744, 748, 749, 753], "domain": [361, 520, 526, 529, 530, 533, 539, 542, 543, 546, 547, 551, 554, 587, 590, 591, 594, 608, 612, 615, 652, 655, 656, 659, 664, 667, 723, 726, 727, 730, 731, 734, 744, 749], "infin": [361, 413, 433, 439, 520, 521, 524, 529, 530, 533, 534, 537, 543, 546, 547, 551, 554, 583, 586, 587, 590, 591, 594, 598, 608, 611, 612, 615, 616, 619, 620, 623, 632, 635, 636, 639, 652, 655, 656, 659, 664, 667, 668, 671, 690, 693, 707, 710, 711, 714, 715, 718, 723, 726, 727, 730, 731, 734, 744, 749, 754, 757, 883, 949, 951, 1091, 1096, 1099, 1104, 1107, 1124, 1125, 1128, 1129, 1132], "codomain": [361, 520, 526, 529, 530, 533, 539, 542, 543, 546, 547, 551, 554, 587, 590, 591, 594, 608, 612, 615, 652, 655, 656, 659, 664, 667, 723, 726, 727, 730, 731, 734, 744, 749], "x_i": [361, 520, 521, 524, 526, 529, 530, 533, 539, 542, 543, 546, 547, 563, 566, 583, 586, 587, 590, 591, 594, 608, 612, 615, 616, 632, 635, 636, 639, 640, 643, 652, 655, 656, 659, 664, 667, 676, 679, 695, 698, 715, 718, 719, 722, 723, 726, 727, 730, 731, 734, 735, 738, 744, 749, 754, 757, 1075, 1076, 1077, 1079, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1112, 1115, 1116, 1120, 1123], "assum": [361, 366, 370, 377, 378, 392, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 534, 539, 542, 559, 562, 579, 582, 583, 586, 587, 591, 616, 699, 702, 715, 718, 723, 726, 731, 734, 735, 738, 744, 749, 758, 786, 870, 873, 882, 883, 892, 971, 985, 988, 989, 992, 1005, 1008, 1053, 1054, 1057, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1124, 1125, 1128], "express": [361, 375, 380, 520, 526, 539, 542, 547, 551, 554, 587, 723, 726, 744], "radian": [361, 520, 526, 539, 542, 547, 551, 554, 587, 723, 726, 744], "float": [361, 365, 369, 370, 372, 373, 377, 379, 403, 405, 413, 414, 415, 417, 419, 421, 422, 423, 424, 427, 431, 433, 439, 449, 453, 458, 461, 470, 503, 509, 513, 516, 519, 520, 521, 524, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 579, 582, 583, 586, 587, 590, 591, 594, 595, 598, 600, 603, 608, 611, 612, 615, 616, 619, 620, 623, 624, 627, 628, 631, 644, 647, 648, 651, 652, 655, 656, 659, 664, 667, 668, 671, 690, 693, 695, 698, 699, 702, 703, 706, 707, 710, 711, 714, 715, 718, 723, 726, 727, 730, 731, 734, 739, 743, 744, 748, 749, 753, 754, 757, 758, 770, 771, 773, 785, 793, 794, 816, 817, 822, 823, 832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 870, 873, 877, 882, 883, 884, 887, 892, 898, 900, 901, 903, 904, 906, 915, 917, 924, 926, 927, 929, 931, 933, 934, 949, 951, 955, 956, 959, 961, 964, 966, 969, 1031, 1032, 1033, 1034, 1053, 1054, 1057, 1058, 1063, 1064, 1066, 1075, 1076, 1077, 1079, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123], "operand": [361, 520, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 551, 554, 579, 582, 583, 586, 587, 590, 591, 594, 608, 611, 612, 615, 616, 652, 655, 656, 659, 664, 667, 668, 671, 690, 693, 707, 710, 711, 714, 715, 718, 723, 726, 727, 730, 731, 734, 744, 749, 754, 757, 1091, 1092, 1095, 1096, 1099, 1104, 1107, 1116, 1119], "whose": [361, 414, 429, 430, 520, 529, 530, 533, 543, 546, 550, 555, 558, 587, 590, 591, 594, 707, 710, 723, 726, 727, 730, 744, 748, 749, 753, 758, 769, 883, 884, 887, 892, 895, 897, 898, 900, 901, 903, 904, 906, 915, 917, 918, 920, 921, 923, 924, 926, 927, 929, 931, 933, 934, 936, 937, 939, 943, 945, 971, 989, 992, 1005, 1008, 1075, 1076, 1077, 1091, 1092, 1095, 1119], "ref": [361, 520, 575, 578, 644, 647, 690, 693, 699, 702, 711, 714, 739, 743, 971, 1015, 1018], "promot": [361, 365, 370, 433, 439, 442, 445, 460, 461, 465, 520, 526, 529, 530, 533, 534, 537, 539, 542, 543, 546, 547, 550, 555, 558, 559, 562, 567, 570, 571, 574, 575, 578, 579, 582, 587, 590, 591, 594, 595, 608, 611, 612, 615, 652, 655, 656, 659, 664, 667, 668, 671, 684, 687, 690, 693, 707, 710, 711, 714, 723, 726, 727, 730, 731, 734, 744, 748, 749, 753, 883, 884, 887, 889, 891, 904, 906, 907, 910, 915, 917, 921, 923, 924, 926, 931, 933, 946, 948, 949, 951, 971, 1015, 1018, 1091, 1100, 1103], "But": [361, 369, 380], "needless": 361, "info": [361, 1133], "subset": [361, 364, 373, 375], "extend": [361, 364, 366, 373], "renam": 361, "conform": [361, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 534, 539, 542, 559, 562, 579, 582, 583, 586, 591, 612, 615, 616, 699, 702, 715, 718, 731, 734, 735, 738, 744, 749, 883, 892, 971, 985, 988, 989, 992, 1005, 1008, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1124, 1125, 1128], "org": [361, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 539, 542, 579, 582, 583, 586, 591, 616, 699, 702, 731, 734, 735, 738, 832, 834, 837, 839, 841, 971, 985, 988, 1005, 1008, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099], "elementwise_funct": [361, 520, 521, 524, 539, 542, 579, 582, 583, 586, 591, 616, 699, 702, 731, 734, 735, 738, 971, 1005, 1008, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099], "descript": [361, 369, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 534, 539, 542, 559, 562, 579, 582, 583, 586, 591, 616, 699, 702, 715, 718, 731, 734, 735, 738, 744, 749, 758, 786, 870, 873, 882, 883, 892, 949, 951, 971, 985, 988, 989, 992, 1005, 1008, 1053, 1054, 1057, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099, 1124, 1125, 1128], "simplic": [361, 379, 391, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 442, 445, 520, 521, 524, 534, 539, 542, 559, 562, 579, 582, 583, 586, 591, 616, 699, 702, 715, 718, 731, 734, 735, 738, 744, 749, 758, 786, 870, 873, 882, 883, 892, 971, 985, 988, 989, 992, 1005, 1008, 1053, 1054, 1057, 1075, 1076, 1077, 1080, 1081, 1084, 1091, 1096, 1099], "judgment": 361, "beyond": [361, 971, 1005, 1008], "text": 361, "func_nam": [361, 362, 365], "pure": [361, 377, 380, 392], "themselv": [361, 365, 369, 370, 371, 379, 1035, 1036], "operator_nam": 361, "succinct": 361, "contstructor": 361, "though": [361, 365, 370, 378, 392], "forward": [361, 380, 391, 392, 1166, 1167, 1170, 1174], "_forward": [361, 375, 378, 379, 1133], "former": 361, "trainabl": [361, 376, 378, 379, 832, 848, 850, 1143, 1144, 1166, 1167, 1176], "explicitli": [361, 365, 366, 368, 369, 372, 375, 392, 883, 898, 900, 1154, 1163, 1165, 1166, 1167], "latter": [361, 366], "implicit": [361, 369, 375], "docst": 361, "eight": 362, "static_": 362, "op_nam": 362, "__r": 362, "four": [362, 365, 370, 373, 378], "__sub__": [362, 368, 369, 373, 377], "__mul__": [362, 368, 369, 373, 377], "__truediv__": [362, 368, 369], "respect": [362, 368, 369, 370, 373, 414, 425, 520, 521, 524, 534, 537, 551, 554, 559, 562, 567, 570, 571, 574, 575, 578, 579, 582, 595, 598, 600, 603, 611, 619, 620, 623, 624, 627, 628, 631, 644, 647, 648, 651, 668, 671, 672, 675, 680, 683, 684, 687, 690, 693, 699, 702, 711, 714, 739, 743, 832, 834, 837, 839, 841, 843, 844, 846, 852, 854, 856, 858, 860, 862, 883, 927, 929, 1031, 1032, 1033, 1034], "recap": [362, 369, 379], "independ": [362, 363, 367, 369, 375, 380, 883, 889, 891, 931, 933, 1058, 1059], "combinatorili": 362, "variat": [362, 364], "grid": [362, 364, 391, 414, 425], "vari": [362, 364, 369, 377, 1075, 1076, 1077, 1079], "simplest": 362, "small": [362, 365, 375, 379, 392, 520, 690, 693, 883, 906, 915, 917, 924, 926, 1053, 1054, 1057, 1168, 1169], "unus": [362, 372, 411, 412], "18": [362, 369, 520, 579, 582, 883, 895, 897, 921, 923, 1091, 1092, 1095, 1119], "excess": [362, 366, 377], "showcas": [362, 391], "demonstr": [362, 377], "replic": [362, 370], "meant": 362, "imaginari": 362, "some_flag": 362, "another_flag": 362, "54": [362, 520, 587, 591, 731, 734, 870, 882, 883, 921, 923, 1058, 1063, 1091, 1092, 1095, 1119], "jointli": 362, "three": [362, 369, 374, 414, 425, 1133], "x0": [362, 758, 766], "procedur": 362, "sens": [362, 369, 377], "5574077": 362, "1850398": 362, "5463025": 362, "8422884": 362, "91601413": 362, "9647598": 362, "3738229": 362, "1597457": 362, "0963247": 362, "9955841": 362, "3278579": 362, "multi": [362, 369, 374, 392, 870, 881, 883, 889, 891, 1133, 1139, 1154, 1165], "seper": [362, 758, 785], "pars": [362, 392], "satisfi": [362, 883, 952, 954], "far": [362, 371, 376, 377, 1035, 1036, 1046], "asid": [362, 391], "irrelev": [362, 370], "increasingli": 362, "complex": [362, 378, 379, 380, 392, 883, 898, 900, 934], "rule": [362, 364, 365, 368, 369, 370, 433, 439, 442, 445, 461, 520, 550, 555, 558, 575, 578, 595, 690, 693, 711, 714, 748, 753, 883, 884, 887, 889, 891, 921, 923, 931, 933], "count": [362, 378, 470, 508, 883, 946, 948, 971, 989, 992, 1075, 1076, 1077, 1124, 1125, 1128, 1129, 1132], "14254655": 362, "1578213": 362, "380515": 362, "17": [362, 369, 403, 405, 883, 895, 897, 1058, 1063], "trivial": 362, "By": [362, 365, 369, 372, 379, 380, 758, 776, 777, 883, 946, 948, 971, 997, 1000, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "non": [362, 369, 370, 375, 411, 412, 433, 439, 457, 520, 676, 679, 680, 683, 870, 873, 883, 892, 915, 917, 934, 940, 942, 946, 948, 949, 951, 1070, 1071, 1072, 1073, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1120, 1123, 1124, 1125, 1128, 1129, 1132, 1166, 1167, 1170, 1174], "dictat": [362, 368, 372, 373], "exlud": 362, "unit": [363, 364, 392, 403, 404, 405, 406, 470], "thoroughli": [363, 364], "ci": [363, 364, 392], "failur": 363, "On": [364, 376, 380], "fixtur": 364, "consum": [364, 369, 373, 470], "300": [364, 520, 715, 718], "hit": [364, 375], "permit": [364, 368, 373], "action": 364, "eleg": 364, "intellig": 364, "sampl": [364, 870, 878, 1058, 1059, 1063, 1064, 1066, 1091, 1112, 1115, 1120, 1123, 1154, 1162], "rang": [364, 378, 379, 380, 414, 415, 423, 424, 1075, 1076, 1091, 1108, 1111, 1116, 1133], "cach": [364, 365, 470, 488, 758, 769], "unexplor": 364, "known": 364, "repeatedli": [364, 369, 1035, 1044], "upload": 364, "artifact": 364, "parametr": 364, "strategi": 364, "statement": [364, 392], "plai": [364, 380], "helper": [364, 378], "verifi": [364, 370, 371, 377, 1133, 1139], "truth": [364, 520, 600, 603, 624, 627, 628, 631, 644, 647, 648, 651, 699, 702], "opt": [364, 366, 372, 377], "defer": [364, 365, 368, 369, 370, 371, 372], "suffic": [364, 367], "catch": [364, 758, 779], "systemat": 364, "safeguard": 364, "inabl": 364, "fact": [364, 378], "categor": [365, 371], "mutual": [365, 369], "constitut": [365, 375, 1091, 1112, 1115, 1120, 1123], "venn": 365, "diagram": 365, "light": [365, 392], "wherea": [365, 368, 370, 371, 373, 380], "hand": [365, 392], "log_pr": [365, 369, 372], "array_arg": 365, "typic": 365, "whatsoev": [365, 369], "commonli": [365, 1091, 1112, 1115, 1120, 1123], "outsid": [365, 371, 375, 377, 380, 971, 972, 975, 1015, 1018], "denomin": [365, 392, 758, 784, 794, 817, 822, 823, 1053, 1054, 1057, 1168, 1169], "divis": [365, 520, 575, 578, 595, 598, 619, 620, 623, 711, 714, 758, 784, 794, 817, 822, 823, 832, 834, 837, 839, 841, 852, 854, 1170, 1171, 1172], "deal": [365, 392], "concurr": [365, 369], "weight": [365, 369, 379, 380, 832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 870, 879, 880, 882, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1166, 1167, 1170, 1172, 1173], "modif": 365, "decor": [365, 367, 369, 370, 371, 372], "group": [365, 369], "briefli": [365, 378], "cast": [365, 370, 433, 439, 442, 445, 971, 977, 980, 1091, 1108, 1111, 1116, 1133], "get_all_arrays_on_dev": 365, "nested_map": [365, 1035], "index_nest": [365, 1035], "implicit_backend": 366, "unless": [366, 371, 372, 392, 520, 690, 693, 758, 811], "__dict__": [366, 375, 377], "ivy_original_dict": [366, 375], "unmodifi": [366, 370], "moment": [366, 392, 832, 834, 837, 839, 841, 852, 854, 1170, 1171, 1172], "fallback": 366, "freedom": [366, 1091, 1112, 1115, 1120, 1123], "recommend": [366, 520, 676, 679, 680, 683, 711, 714, 1091, 1100, 1103], "achiev": [367, 378, 380], "wrapper": [367, 368, 369, 370, 372, 373, 377], "logic": [367, 368, 370, 371, 377, 470, 506, 520, 672, 675, 676, 679, 680, 683, 1124, 1125, 1128, 1129, 1132, 1133], "topic": [367, 377], "tf": [368, 370, 371, 372, 373, 375, 380, 392, 1133], "_data": [368, 377], "organiz": [368, 369], "inherit": [368, 369, 377], "bear": [368, 369, 370], "mind": [368, 369], "necessarili": [368, 369], "although": [368, 369], "underpin": [368, 369, 375], "programmat": [368, 369], "backup": [368, 369], "accident": [368, 369], "readabl": [368, 369, 373, 377, 378], "absent": [368, 369], "perk": [368, 369], "auto": [368, 369, 378], "throw": [368, 377], "imposs": 368, "coupl": [368, 369, 377, 379], "anywai": 368, "secondli": [368, 370], "easier": 368, "five": [369, 378], "decis": [369, 375, 377], "displai": [369, 378], "arbitrarili": [369, 378], "__repr__": 369, "control": [369, 370, 372, 377, 378, 391], "__getattr__": 369, "underli": [369, 520, 559, 562, 571, 574, 579, 582, 684, 687], "__setattr__": 369, "__contains__": 369, "__getstate__": 369, "__setstate__": 369, "unpickl": 369, "expand": [369, 758, 785, 971, 985, 988], "children": 369, "shallowest": 369, "deepest": 369, "67": [369, 520, 579, 582, 591], "22": [369, 520, 579, 582, 883, 895, 897, 921, 923, 1070, 1074, 1091, 1092, 1095, 1119], "25": [369, 520, 731, 734, 735, 738, 883, 895, 897, 904, 955, 961, 964, 1053, 1054, 1057, 1091, 1092, 1095, 1119], "retain_grad": [369, 832, 843], "dy": [369, 832, 843], "dx": [369, 832, 843], "technic": [369, 372, 373, 392], "autograd": [369, 392], "grad": [369, 378, 379, 380, 1133, 1170, 1174], "redund": 369, "num_head": [369, 870, 881, 1154, 1165], "mask": [369, 870, 881, 882], "to_q_fn": [369, 870, 881], "to_kv_fn": [369, 870, 881], "to_out_fn": [369, 372, 870, 881], "to_q_v": [369, 870, 881], "to_kv_v": [369, 870, 881], "to_out_v": [369, 870, 881], "measur": [369, 870, 881, 1154, 1165], "dot": [369, 870, 881, 882, 883, 940, 942, 946, 948, 1154, 1165], "product": [369, 520, 690, 693, 758, 776, 870, 881, 882, 883, 889, 891, 907, 910, 921, 923, 940, 942, 946, 948, 1091, 1092, 1095, 1108, 1111, 1119, 1154, 1165], "implicitli": 369, "intuit": [369, 378, 379], "debug": [369, 378], "chronolog": 369, "had": [369, 372], "sequenti": [369, 379], "flow": [369, 391], "implic": 369, "slightli": [369, 375, 379], "eager": [369, 392], "int8": [370, 433, 454], "int16": [370, 433, 442, 445, 454, 1091, 1108, 1111, 1116], "uint8": [370, 433, 442, 445, 454], "uint16": [370, 433, 455, 1091, 1108, 1111, 1116], "uint32": [370, 433, 455, 1091, 1108, 1111, 1116], "uint64": [370, 433, 455, 1091, 1108, 1111, 1116], "bfloat16": [370, 433, 454], "float16": [370, 433, 455], "all_dtyp": 370, "all_numeric_dtyp": 370, "all_int_dtyp": 370, "all_float_dtyp": 370, "fall": [370, 374, 1133, 1166, 1167, 1170, 1174], "valid": [370, 375, 433, 447, 870, 871, 872, 873, 874, 875, 876, 877, 971, 1015, 1018, 1124, 1125, 1128, 1129, 1132, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "invalid": [370, 883, 946, 948, 1124, 1125, 1128, 1129, 1132], "thirdli": 370, "native_float32": 370, "importantli": [370, 377, 380, 391], "varieti": [370, 371], "conveni": [370, 371, 373, 376, 378, 379], "arguabl": [370, 371], "compound": 370, "overflow": [370, 520, 534, 1091, 1116], "arr": [370, 371, 1053, 1054, 1057], "scalar": [370, 375, 380, 392, 414, 422, 758, 811, 828, 831, 883, 949, 951], "settabl": [370, 371], "jnp": [370, 371, 372, 373, 380, 1133], "jaxarrai": [370, 371, 372, 373], "mx": [370, 371, 372, 1133], "nd": [370, 371, 372, 375, 380, 1133], "deleg": 370, "fill_valu": [370, 414, 421, 422, 520, 603, 627, 628, 631], "as_n": [370, 433, 448, 449, 450, 451, 470, 489, 490, 511], "idx": [371, 377, 758, 764], "tpu": [371, 470, 492, 517], "aliv": [371, 470, 504, 508, 510, 758, 792, 810, 812], "amount": [371, 470, 516, 955, 956, 959, 961, 964, 966, 969], "memori": [371, 372, 390, 392, 470, 488, 509, 514, 516, 519, 870, 880, 1133], "dual": 371, "thrown": [371, 392, 758, 802], "rare": [371, 392], "program": 372, "strictli": 372, "ration": 372, "speak": 372, "subtli": 372, "ensure_in_backend": [372, 758, 802], "x_nativ": 372, "val_n": 372, "is_ivy_arrai": [372, 377, 758], "assign": [372, 377], "elif": 372, "irrespect": [372, 377, 433, 439], "inclus": [372, 414, 415, 1058, 1060, 1061], "omit": [372, 373, 1075, 1076, 1077, 1079], "unspecifi": [372, 520, 707, 710, 711, 714, 883, 898, 900, 971, 1015, 1018], "predominantli": [372, 391], "math": [372, 380, 1133], "presenc": 372, "altern": [372, 378], "_wrap_fn": 372, "maxim": [372, 375], "inner": [372, 377, 883, 898, 900, 907, 910, 1031, 1032, 1033, 1034], "third": [372, 392, 883, 934, 1075, 1076], "addition": [372, 373], "leverag": 372, "equival": [372, 378, 380, 414, 415, 520, 575, 578, 676, 679, 680, 683, 711, 714, 883, 906, 915, 917, 924, 926, 931, 933, 949, 951], "input_arrai": 372, "adress": 373, "revisit": [373, 380], "dedic": [373, 377, 379, 832, 868, 1143, 1144], "__div__": 373, "dicat": 373, "futher": 373, "absenc": 373, "pep": 373, "484": 373, "annot": 373, "brittl": 373, "intend": [373, 1091, 1116], "freeli": 373, "inde": [373, 392], "flexibl": 373, "original_typ": 373, "cumbersom": 373, "sound": 374, "higher": [374, 375, 380, 392, 832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862], "overview": [374, 391], "handler": [374, 376, 380, 1133], "fledg": [375, 376], "syntact": [375, 380], "clip_by_valu": [375, 380], "clamp": [375, 380], "behavior": [375, 392, 520, 707, 710, 711, 714, 1075, 1076, 1077, 1079], "fit": [375, 971, 997, 1000], "construct": [375, 376, 379, 380, 971, 1023, 1026, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177], "num": [375, 414, 423, 424], "power_seq": 375, "okai": 375, "bound": 375, "resid": [375, 379], "edg": [375, 380, 971, 972, 975, 981, 984, 1027, 1030, 1133], "larger": [375, 380, 433, 453, 971, 972, 975, 1005, 1008, 1091, 1112, 1115, 1120, 1123], "ml_framework": [375, 380, 414, 415], "current_framework": [375, 380], "furthermor": 375, "concaten": [375, 378, 470, 499, 758, 785, 971, 977, 980, 1133], "framework_handl": 375, "face": 375, "verbos": [375, 1133, 1180], "cprint": [375, 1179], "framework_stack": 375, "_determine_framework_from_arg": 375, "valueerror": [375, 971, 1011, 1014], "get_framework": 375, "neither": [375, 520, 534, 690, 693], "illustr": [375, 391], "un": [375, 433, 457], "nn": [375, 380, 414, 425, 1133], "init_h": [375, 870, 880], "init_c": [375, 870, 880], "kernel": [375, 392, 870, 880], "recurrent_kernel": [375, 870, 880], "bia": [375, 379, 870, 879, 880, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164], "recurrent_bia": [375, 870, 880], "x_shape": 375, "batch_shap": [375, 377, 380, 758, 811, 870, 880, 881, 882, 883, 952, 954, 1058, 1059, 1154, 1163], "timestep": [375, 870, 880, 1154, 1163], "input_channel": [375, 379, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1164], "x_flat": 375, "wi": 375, "wi_x": 375, "wii_x": 375, "wif_x": 375, "wig_x": 375, "wio_x": 375, "recurr": [375, 870, 880], "wh": 375, "lstm": [375, 870, 880, 1154], "ht": 375, "ct": 375, "hts_list": 375, "unrol": [375, 378, 870, 880], "wii_xt": 375, "wif_xt": 375, "wig_xt": 375, "wio_xt": 375, "zip": 375, "htm1": 375, "ctm1": 375, "wh_htm1": 375, "whi_htm1": 375, "whf_htm1": 375, "whg_htm1": 375, "who_htm1": 375, "ft": 375, "gt": 375, "ot": 375, "offici": 375, "reliabl": 375, "sacrific": 375, "hear": 375, "virtu": 375, "pure_ivi": 375, "reduce_mean": [375, 378, 379, 380, 1133], "reduce_sum": [375, 1133], "reduce_var": 375, "compile_graph": [375, 380], "pure_torch": 375, "cat": [375, 380], "backbon": [375, 378], "_layer": 375, "super": [375, 378, 379, 380], "clean": [375, 376, 378], "random_unifrom": 375, "unclean": 375, "wx": 375, "temp": 375, "torchscript": 375, "fn": [375, 377, 393, 394, 395, 396, 397, 398, 399, 400, 401, 433, 454, 455, 470, 479, 480, 758, 764, 829, 1035, 1036, 1041, 1042, 1043, 1045, 1046, 1047, 1136, 1138], "example_input": [375, 411, 412], "static_argnum": [375, 411, 412], "static_argnam": [375, 411, 412], "jit": [375, 392], "frontend": 376, "primit": [376, 392], "hierarch": [376, 378, 379], "straight": [377, 1133], "arraywithlinalg": 377, "arraywithlog": 377, "arraywithmath": 377, "arraywithmeta": 377, "arraywithreduct": 377, "is_native_arrai": [377, 758], "_shape": 377, "_size": 377, "functool": 377, "mul": 377, "len": [377, 380, 414, 425], "_dtype": 377, "_devic": 377, "_dev_str": 377, "_pre_repr": 377, "_post_repr": 377, "ndim": [377, 883, 927, 929, 934], "mt": 377, "answer": [377, 392], "consol": 377, "typeerror": 377, "immut": 377, "behav": 377, "claim": 377, "truli": 377, "_native_wrapp": 377, "attributeerror": 377, "genuin": 377, "some_method": 377, "similarli": [377, 414, 425], "rewritten": 377, "__pow__": 377, "strang": 377, "power": [377, 378, 379, 520, 575, 578, 608, 707, 710, 758, 793, 816, 823, 883, 914, 1145], "enforc": 377, "notic": 377, "appear": [377, 971, 985, 988], "invers": [377, 391, 520, 526, 529, 530, 533, 539, 542, 543, 546, 547, 550, 551, 554, 555, 558, 590, 594, 748, 753, 883, 904, 906, 924, 926], "_wrap_method": 377, "func_wrapp": [377, 393, 394, 395, 396, 397, 398, 399, 400, 401], "__name__": 377, "non_wrapped_method": 377, "_method_wrap": 377, "native_arg": 377, "native_kwarg": 377, "inner_fn": 377, "whist": 377, "unwrap": 377, "transit": 377, "needlessli": 377, "randn": 377, "_unwrap_method": 377, "method_wrap": 377, "compartment": 377, "public": [377, 758, 774], "newshap": 377, "new_shap": 377, "tidi": 377, "shorter": 377, "crystal": 377, "enough": [377, 378, 379], "ton": 378, "ado": [378, 379], "incred": [378, 392], "hash": 378, "soup": 378, "walk": [378, 379], "dct": 378, "cnt": 378, "combo": [378, 1133, 1139], "hold": [378, 758, 814, 815], "1000": [378, 520, 731, 734], "uda": 378, "3333": 378, "6667": 378, "178": 378, "new_weight": 378, "0600": 378, "3100": 378, "2400": 378, "6900": 378, "delimit": 378, "autocomplet": 378, "midwai": 378, "agent": 378, "total_spe": 378, "total_height": 378, "total_width": 378, "ag": 378, "tot": 378, "total_": 378, "total_h": 378, "batch_siz": [378, 870, 871, 872, 873, 874, 875, 876, 877, 1058, 1059], "dir": 378, "adam": [378, 379, 380, 832, 834, 837, 839, 841, 852, 854, 1133, 1170, 1172], "cnt0": 378, "cnt1": 378, "diff_0": 378, "diff_1": 378, "config0": 378, "config1": 378, "Not": [378, 379, 392, 413], "decod": 378, "l0": 378, "l1": [378, 883, 949, 951], "depth": [378, 379, 380, 391, 470, 494, 498, 502, 758, 796, 811, 1035, 1047, 1166, 1167], "clearer": 378, "truncat": 378, "decoder__l0": 378, "decoder__l1": 378, "encoder__l0": 378, "encoder__l1": 378, "height": 378, "l0__b": 378, "l0__w": 378, "l1__b": 378, "l1__w": 378, "printabl": 378, "obviou": 378, "foresight": 378, "untidili": 378, "update_ag": 378, "normalize_img": 378, "img": 378, "img_max": 378, "reduce_max": [378, 1133], "img_min": 378, "reduce_min": [378, 1133], "img_rang": 378, "agent_posit": 378, "agent_veloc": 378, "agent_cam_front_rgb": 378, "agent_cam_front_depth": 378, "agent_cam_rear_rgb": 378, "agent_cam_rear_depth": 378, "agent_cam_lidar": 378, "normal": [378, 971, 1015, 1018, 1053, 1054, 1057, 1058, 1063, 1168, 1169], "cleaner": 378, "camera": 378, "front_rgb": 378, "front_depth": 378, "rear_rgb": 378, "rear_depth": 378, "lidar": 378, "rgb": 378, "rear": 378, "veloc": 378, "cam": 378, "cam_max": 378, "cam_min": 378, "cam_rang": 378, "Of": 378, "ideal": 378, "perman": 378, "afterward": 378, "thread": 378, "incorpor": 378, "pretti": 378, "straightforward": 378, "dataload": [378, 390, 1133], "_cnt": 378, "img_": 378, "_dataset_s": 378, "_batch_siz": 378, "_count": [378, 379], "__next__": 378, "filenam": 378, "img_fnam": 378, "fname": 378, "loaded_img": 378, "cv2": 378, "imread": 378, "loader": [378, 392], "batch_slic": 378, "model": [378, 379, 1133], "mymodel": [378, 1133], "linear0": [378, 379, 1133], "linear1": [378, 379, 1133], "x_in": [378, 379, 380, 1133], "001": [378, 379, 832, 834, 837, 1053, 1054, 1057], "loss_fn": [378, 379, 380, 1133], "0145": 378, "grad_fn": 378, "addbackward0": 378, "_create_vari": 379, "output_channel": [379, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1164], "with_bia": [379, 1154, 1164], "_input_channel": 379, "_output_channel": 379, "_w_shape": 379, "_b_shape": 379, "_with_bia": 379, "8979": 379, "3198": 379, "0196": 379, "3126": 379, "3717": 379, "9687": 379, "6958": 379, "5122": 379, "3902": 379, "8800": 379, "5613": 379, "1982": 379, "nightmar": 379, "overcom": 379, "fc": 379, "9563": 379, "impact": 379, "v0": 379, "v1": 379, "6440": 379, "key0": 379, "1823": 379, "8075": 379, "linear3": 379, "v2": 379, "2346": 379, "counter": 379, "hidden": [379, 870, 880, 1154, 1163], "fed": [379, 470, 514], "1300": 379, "decoupl": 379, "scheme": 379, "weight_initi": [379, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164], "glorotuniform": [379, 1145, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164], "bias_initi": [379, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164], "_w_init": 379, "_b_init": 379, "create_vari": [379, 1145], "var_shap": [379, 1145], "fan_out": [379, 1145], "fan_in": [379, 1145], "fan_mod": [379, 1145], "fan_sum": 379, "slight": 379, "misnom": 379, "saw": 379, "vanilla": [379, 1031, 1033], "descent": [379, 832, 844, 846, 1170, 1175], "lar": [379, 832, 852, 854, 856, 858, 1170], "lamb": [379, 832, 852, 854, 1170], "compile_on_next_step": [379, 1166, 1167, 1170, 1171, 1172, 1173, 1174, 1175], "_beta1": 379, "_beta2": 379, "_epsilon": 379, "_mw": 379, "_vw": 379, "_first_pass": 379, "_should_compil": 379, "_step": [379, 1170, 1174], "new_v": 379, "_lr": 379, "isinst": [379, 380, 758, 826], "_inplac": 379, "_stop_gradi": 379, "set_stat": [379, 1170, 1171, 1172, 1173, 1174, 1175], "pre": [380, 392, 470], "captur": 380, "sparse_funct": 380, "num_class": [380, 1058, 1059], "num_dim": 380, "new_axi": 380, "_linear": 380, "to_backend": 380, "jax_graph": 380, "learnabl": [380, 1053, 1054, 1057, 1168, 1169], "to_ivy_modul": [380, 1143], "thinli": 380, "whilst": 380, "to_haiku_modul": 380, "hk": 380, "loss_fn_t": 380, "transform": [380, 391, 870, 878, 879], "without_apply_rng": 380, "rng": 380, "prngkei": 380, "init": 380, "update_rul": 380, "01": [380, 520, 715, 718], "tree_multimap": 380, "mechan": [390, 392, 1133], "vision": [390, 1133], "robot": [390, 1133], "focus": 391, "field": [391, 883, 898, 900, 927, 929, 934, 1075, 1076, 1077], "perfect": 391, "3d": [391, 1154, 1159, 1160], "differenti": 391, "demo": [391, 1133], "orient": 391, "pose": 391, "euler": [391, 413], "quaternion": 391, "rotat": 391, "matric": [391, 414, 425, 429, 430, 870, 879, 883, 884, 887, 892, 895, 897, 898, 900, 901, 903, 904, 906, 914, 915, 917, 918, 920, 924, 926, 927, 929, 931, 933, 934, 936, 937, 939, 943, 945], "angl": [391, 520, 551, 554, 591, 727, 730, 749], "ivy_mech": 391, "target_facing_rotation_matrix": 391, "polar_to_cartesian_coord": 391, "ordin": [391, 883, 931, 933], "warp": 391, "optic": 391, "voxel": 391, "ivy_vis": 391, "coords_to_voxel_grid": 391, "render_pixel_coord": 391, "neural": [391, 870, 1133, 1140, 1154], "radianc": 391, "nerf": 391, "trajectori": 391, "motion": 391, "plan": [391, 1133], "mobil": 391, "ivy_robot": 391, "sample_spline_path": 391, "rigidmobil": 391, "sample_bodi": 391, "drone": 391, "sample_link": 391, "openai": 391, "swimmer": 391, "cumul": [391, 758, 776, 777], "reward": 391, "supervis": 391, "reinforc": 391, "door": [391, 392], "intersect": 391, "cartpol": 391, "mountain_car": 391, "pendulum": 391, "reacher": 391, "polici": 391, "condit": [391, 411, 412, 1035, 1045, 1046, 1070, 1074], "learnt": 391, "ture": 391, "ntm": 391, "egospher": 391, "spatial": 391, "esm": 391, "ivy_memori": 391, "egocentr": 391, "room": 391, "inspir": 391, "doubt": 392, "grate": 392, "put": 392, "probe": 392, "undergo": 392, "remark": 392, "surpris": 392, "backward": [392, 520, 711, 714, 883, 946, 948, 1124, 1125, 1128, 1129, 1132], "lock": 392, "contunu": 392, "minor": 392, "xla": 392, "buffer": 392, "kind": [392, 433, 453, 456, 520, 707, 710, 1091, 1108, 1111, 1116], "gold": 392, "dex": 392, "phase": 392, "lax": 392, "scan": 392, "tricki": 392, "predictor": 392, "tight": 392, "driver": 392, "schedul": 392, "algorithm": [392, 870, 871, 872, 873, 874, 875, 876, 877, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "dispatch": 392, "Will": 392, "ast": 392, "dynamic": 392, "cond": 392, "jacobian": 392, "checkpoint": 392, "autodiff": 392, "shine": 392, "merci": 392, "superset": 392, "cluster": 392, "compet": 392, "paradigm": 392, "parallelis": [392, 470, 479, 480], "spmd": 392, "mixtur": [392, 832, 834, 837], "expert": 392, "sophist": 392, "depart": 392, "routin": 392, "hundr": 392, "thousand": 392, "deepli": [392, 1035, 1037], "broadli": 392, "heavili": 392, "supplementari": 392, "Is": 392, "reusabl": 392, "fanci": 392, "fusion": 392, "lose": 392, "vmap": 392, "pmap": 392, "overhead": 392, "ineffici": 392, "eventu": 392, "supplement": 392, "backdoor": 392, "callback": 392, "record": 392, "metric": 392, "somewhat": 392, "outsourc": 392, "inputs_to_ivy_arrai": 393, "gaussian": [403, 404], "leaki": [403, 404, 405], "alpha": [403, 405], "rectifi": [403, 405, 406], "slope": [403, 405], "39": [403, 405, 520, 608, 832, 834, 837, 883, 921, 923, 1091, 1092, 1095, 1119], "85": [403, 405, 520, 579, 582], "48": [403, 405, 520, 731, 734, 832, 834, 837, 883, 921, 923, 1091, 1092, 1095, 1119], "88": [403, 405, 520, 579, 582, 883, 921, 923, 1091, 1092, 1095, 1119], "269": [403, 407], "731": [403, 407], "881": [403, 407], "214": [403, 407], "978": [403, 407], "891": [403, 407], "422": [403, 408], "155": [403, 408], "0768": [403, 408], "231": [403, 408], "693": [403, 408, 955, 966, 969], "49": [403, 408, 520, 731, 734, 1091, 1092, 1095, 1119], "147": [403, 408], "363": [403, 408], "3461": [403, 409], "6491": [403, 409], "535": [403, 409], "hyperbol": [403, 410, 520, 529, 530, 533, 543, 546, 550, 555, 558, 590, 591, 594, 727, 730, 748, 749, 753], "55": [403, 410, 870, 876, 883, 921, 923, 1091, 1092, 1095, 1119], "501": [403, 410], "faster": [411, 412], "invoc": [411, 412], "718281828459045": 413, "newaxi": 413, "alia": 413, "pi": 413, "141592653589793": 413, "mathemat": [413, 520, 534, 551, 554, 612, 615, 690, 693, 883, 949, 951], "half": [414, 415, 1058, 1060, 1061, 1064, 1066], "chosen": [414, 415, 520, 551, 554, 1070, 1074], "distanc": [414, 415], "adjac": [414, 415], "creation_funct": [414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432], "interpret": [414, 416, 426], "uniniti": [414, 417, 418], "n_row": [414, 419], "n_col": [414, 419], "elsewher": [414, 419, 1070, 1074], "row": [414, 419, 883, 931, 933, 934, 1058, 1059, 1070, 1073], "column": [414, 419, 883, 898, 900, 927, 929, 931, 933, 934], "__dlpack__": [414, 420, 470, 515], "interchang": [414, 420, 971, 1019, 1022], "endpoint": [414, 423], "xy": [414, 425], "coordin": [414, 425, 520, 551, 554], "cartesian": [414, 425], "ij": [414, 425, 1091, 1092, 1095, 1119], "rank": [414, 425, 758, 830, 883, 889, 891, 915, 917, 927, 929, 931, 933, 943, 945, 946, 948, 949, 951, 971, 981, 984, 985, 988, 1015, 1018, 1027, 1030, 1070, 1073, 1124, 1125, 1128, 1129, 1132], "ni": [414, 425], "xi": [414, 425], "n1": [414, 425], "n2": [414, 425], "n3": [414, 425], "accordingli": [414, 425, 520, 612, 615, 883, 949, 951, 1070, 1072, 1075, 1076, 1077, 1079, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "xv": [414, 425], "yv": [414, 425], "triangular": [414, 429, 430, 883, 884, 887, 927, 929], "innermost": [414, 429, 430, 883, 884, 887, 892, 895, 897, 898, 900, 901, 903, 904, 906, 915, 917, 918, 920, 924, 926, 927, 929, 931, 933, 934, 936, 937, 939, 943, 945], "mxn": [414, 429, 430, 883, 895, 897, 906, 915, 917, 918, 920, 924, 926, 927, 929, 936, 937, 939, 943, 945], "defaultdtyp": [433, 434], "defaultfloatdtyp": [433, 435], "float_dtyp": [433, 449, 463], "defaultintdtyp": [433, 436], "dtype_in": [433, 437, 438, 452, 457, 458, 459, 469], "incompat": [433, 441], "occur": [433, 442, 445, 1070, 1071, 1072, 1075, 1076, 1077, 1079], "data_type_funct": [433, 442, 445], "closest": [433, 447, 520, 583, 586, 598, 616, 619, 620, 623, 715, 718, 754, 757], "floatdtyp": [433, 449], "int_dtyp": [433, 450, 464], "intdtyp": [433, 450], "followng": [433, 453], "occupi": [433, 453, 456, 758, 814, 815], "ep": [433, 453, 883, 906, 915, 917, 924, 926], "smallest_norm": [433, 453], "precis": [433, 453, 520, 690, 693, 731, 734], "encapsul": [433, 456], "type1": [433, 460], "type2": [433, 460], "arrays_and_dtyp": [433, 461], "ret1": [433, 465], "ret2": [433, 465], "noinspect": [434, 435, 436, 471, 833], "pyshadowingnam": [434, 435, 436, 471, 833], "defaultdevic": [470, 471], "__enter__": 470, "_dev": 470, "initialis": 470, "devcloneditem": [470, 492], "multidevitem": [470, 472, 475], "devclonedit": 470, "multidevit": [470, 473, 476, 479, 480, 484], "devclonednest": 470, "multidevnest": [470, 474, 477], "devdistitem": 470, "devdistit": 470, "devdistnest": 470, "devmanag": [470, 478], "dev_mapp": 470, "da_dim_s": 470, "safety_factor": 470, "min_dev_dim_s": 470, "max_dev_dim_step_ratio": 470, "min_unit_dev_tune_step": 470, "min_sf_tune_step": 470, "starting_split_factor": 470, "max_split_factor_step_s": 470, "tune_dev_alloc": 470, "tune_dev_split": 470, "mapper": [470, 479, 480], "receivess": 470, "ratio": [470, 832, 852, 854, 1170, 1172], "safe": [470, 479], "oom": 470, "tune": 470, "da_tune_step": 470, "ds_tune_step": 470, "to_clon": 470, "to_distribut": 470, "multidevic": [470, 479], "parallel": [470, 479, 480], "mutlidevic": [470, 479], "repeated_config_check": 470, "tune_step": 470, "devmapp": [470, 480], "ret_fn": [470, 479, 480], "queue_class": [470, 479, 480], "worker_class": [470, 479, 480], "worker": [470, 479, 480], "used_dev": [470, 479], "sf": [470, 479], "devmappermultiproc": 470, "multidev": [470, 481, 482, 483, 502], "profil": 470, "save_dir": [470, 485], "deviceic": [470, 491], "spread": [470, 502], "139740789224448": [470, 504], "physic": [470, 506], "x3": [470, 508], "x4": [470, 508], "process_specif": [470, 509, 519], "percentag": [470, 509], "ram": [470, 509, 516, 519], "alon": [470, 509, 519], "attr_onli": [470, 510], "chunk": [470, 512, 513, 514], "max_chunk_s": [470, 514], "chunk_siz": [470, 514], "input_ax": [470, 514], "output_ax": [470, 514], "feed": [470, 514], "fist": [470, 514], "stream": [470, 515], "caveat": [470, 515], "portabl": [470, 515, 1133], "gb": [470, 516, 519], "reset": [470, 518], "magnitud": [520, 521, 524, 534, 690, 693, 883, 934, 936, 937, 939], "princip": [520, 526, 539, 542, 547], "cosin": [520, 526, 529, 530, 533, 587, 590, 591, 594], "x1_i": [520, 534, 537, 551, 554, 559, 562, 567, 570, 571, 574, 575, 578, 579, 582, 595, 598, 600, 603, 611, 619, 620, 623, 624, 627, 628, 631, 644, 647, 648, 651, 668, 671, 672, 675, 680, 683, 684, 687, 690, 693, 699, 702, 707, 710, 711, 714, 739, 743], "x2_i": [520, 534, 537, 551, 554, 559, 562, 567, 570, 571, 574, 575, 578, 579, 582, 595, 598, 600, 603, 611, 619, 620, 623, 624, 627, 628, 631, 644, 647, 648, 651, 668, 671, 672, 675, 680, 683, 684, 687, 690, 693, 699, 702, 707, 710, 711, 714, 739, 743], "finit": [520, 534, 551, 554, 632, 635, 690, 693, 707, 710, 711, 714], "nor": [520, 534, 690, 693], "nearest": [520, 534, 690, 693, 715, 718], "2019": [520, 534, 612, 615, 690, 693], "commut": [520, 534], "sine": [520, 539, 542, 543, 546, 723, 726, 727, 730], "57": [520, 539, 542, 579, 582, 591], "524": [520, 539, 542], "644": [520, 539, 542], "201": [520, 539, 542, 715, 718], "305": [520, 539, 542], "412": [520, 539, 542], "quotient": [520, 551, 554], "notat": [520, 551, 554, 1091, 1092, 1095, 1119], "denot": [520, 551, 554], "pair": [520, 551, 554, 870, 882, 883, 889, 891], "quadrant": [520, 551, 554], "3\u03c0": [520, 551, 554], "549": [520, 550, 555, 558, 748, 753], "bitwis": [520, 559, 562, 571, 574, 579, 582, 684, 687], "AND": [520, 559, 562, 672, 675, 1124, 1125, 1128], "binari": [520, 559, 562, 571, 574, 579, 582, 684, 687, 955, 956, 959], "invert": [520, 563, 566], "arithmet": [520, 575, 578, 1091, 1100, 1103], "propag": [520, 575, 578, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1112, 1115, 1116, 1120, 1123], "thu": [520, 575, 578, 707, 710, 711, 714, 883, 898, 900], "lh": [520, 575, 578], "rh": [520, 575, 578], "xor": [520, 579, 582, 684, 687], "78": [520, 579, 582, 883, 921, 923, 1091, 1092, 1095, 1119], "91": [520, 579, 582, 883, 921, 923, 1091, 1092, 1095, 1119], "23": [520, 579, 582, 870, 876, 883, 884, 887, 895, 897, 1070, 1074], "66": [520, 579, 582, 883, 921, 923, 1091, 1092, 1095, 1119], "77": [520, 579, 582, 883, 921, 923, 1091, 1092, 1095, 1119], "79": [520, 579, 582], "89": [520, 579, 582, 883, 940, 942, 1091, 1116], "98": [520, 579, 582, 883, 921, 923, 1070, 1074, 1091, 1092, 1095, 1119], "26": [520, 579, 582, 832, 834, 837, 870, 877, 883, 895, 897, 921, 923, 940, 942, 1091, 1092, 1095, 1119], "21": [520, 579, 582, 758, 776, 883, 895, 897, 921, 923, 955, 966, 969, 1091, 1092, 1095, 1119], "34": [520, 579, 582, 731, 734], "24": [520, 579, 582, 731, 734, 758, 776, 832, 834, 837, 883, 895, 897, 921, 923, 1091, 1092, 1095, 1119], "51": [520, 579, 582], "27": [520, 579, 582, 591, 731, 734, 870, 882, 883, 921, 923, 1091, 1092, 1095, 1119], "74": [520, 579, 582], "59": [520, 579, 582], "416": [520, 587], "122": [520, 591], "368": [520, 591], "670": [520, 591], "202": [520, 591, 715, 718], "548": [520, 591], "1490": [520, 591], "dividend": [520, 595, 711, 714], "divisor": [520, 595, 711, 714, 832, 834, 837, 839, 841, 852, 854, 1091, 1112, 1115, 1120, 1123, 1170, 1171, 1172], "gauss": [520, 604, 607], "exponenti": [520, 537, 604, 607, 608, 611, 668, 671, 707, 710], "logarithm": [520, 537, 608, 611, 652, 655, 656, 659, 660, 663, 664, 667, 668, 671, 883, 894, 930], "72": [520, 608, 832, 834, 837, 883, 921, 923, 1091, 1092, 1095, 1119], "accur": [520, 612, 615], "fdlibm": [520, 612, 615], "compliant": [520, 612, 615, 676, 679, 680, 683, 1091, 1096, 1099, 1100, 1103, 1104, 1107], "greatest": [520, 598, 616, 619, 620, 623], "out_i": [520, 632, 635, 636, 639, 640, 643], "threshold": [520, 688, 689], "exce": [520, 689], "y_i": [520, 695, 698], "expon": [520, 707, 710, 758, 823], "versu": [520, 707, 710], "odd": [520, 707, 710], "modulu": [520, 711, 714], "primarili": [520, 711, 714], "5654": [520, 715, 718], "034": [520, 715, 718], "433": [520, 715, 718], "343": [520, 715, 718], "44": [520, 715, 718, 731, 734, 735, 738, 883, 921, 923, 1070, 1074, 1091, 1092, 1095, 1119], "30": [520, 715, 718, 883, 921, 923, 1091, 1092, 1095, 1119, 1145, 1151], "81": [520, 715, 718, 735, 738, 1091, 1092, 1095, 1119], "527": [520, 715, 718], "301": [520, 715, 718], "indistinguish": [520, 731, 734], "infinit": [520, 731, 734], "83": [520, 731, 734], "32455532": [520, 731, 734], "89897949": [520, 731, 734], "50": [520, 731, 734, 883, 921, 923, 1070, 1073, 1091, 1092, 1095, 1119], "31": [520, 731, 734], "169": [520, 731, 734], "47": [520, 731, 734], "93": [520, 731, 734], "35": [520, 731, 734, 870, 882, 883, 889, 891, 1070, 1074, 1091, 1092, 1095, 1119], "09": [520, 735, 738, 870, 882], "61": [520, 735, 738, 955, 956, 959], "546": [520, 744], "842": [520, 744], "916": [520, 744, 955, 956, 959], "996": [520, 744], "328": [520, 744], "real": [520, 749], "462": [520, 749], "604": [520, 749], "984": [520, 749], "997": [520, 749, 1053, 1054, 1057], "decim": [520, 754, 757], "inspect": [758, 764, 1137, 1138], "downscal": [758, 770, 771, 773], "60": [758, 776, 883, 921, 923, 1091, 1092, 1095, 1119], "default_v": [758, 779], "catch_except": [758, 779], "rev": [758, 779], "with_cal": [758, 779], "arrang": [758, 780], "123": [758, 783], "mod": [758, 784], "max_freq": [758, 785], "num_band": [758, 785], "pad": [758, 785, 870, 871, 872, 873, 874, 875, 876, 877, 971, 981, 984, 1027, 1030, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "fourier": [758, 785], "band": [758, 785], "linearli": [758, 785, 883, 931, 933], "oppos": [758, 785], "geometr": [758, 785], "seen_set": [758, 796], "local_set": [758, 796], "decrement": [758, 800], "is_arrai": 758, "allow_dupl": [758, 808], "forkserv": [758, 809], "spawn": [758, 809], "hot": [758, 811], "scatter": [758, 811, 814, 815], "overrid": [758, 811], "tmp_dr": [758, 819], "temporari": [758, 819], "min_denomin": [758, 822], "stabil": [758, 822, 823, 1080, 1081, 1084, 1086, 1089], "_min_denomin": [758, 822], "min_bas": [758, 823], "_min_bas": [758, 823, 1053, 1054, 1057, 1168, 1169], "100000023841858": [758, 826], "200000047683716": [758, 826], "299999952316284": [758, 826], "400000095367432": [758, 826], "599999904632568": [758, 826], "101": [758, 827], "unpack": [758, 830], "gradienttrack": [832, 833], "delta": [832, 834, 837], "cost": [832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 1031, 1032, 1033, 1034], "ws": [832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862], "en": [832, 834, 837, 839, 841], "wikipedia": [832, 834, 837, 839, 841], "wiki": [832, 834, 837, 839, 841], "stochastic_gradient_desc": [832, 834, 837, 839, 841], "dc": [832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862], "dw": [832, 834, 837, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862], "averag": [832, 834, 837, 839, 841, 852, 854, 1031, 1032, 1033], "forget": [832, 834, 837, 839, 841, 852, 854, 1170, 1171, 1172], "004": [832, 834, 837], "009": [832, 834, 837], "86": [832, 834, 837], "28": [832, 834, 837, 870, 873, 876, 877, 883, 921, 923, 1091, 1092, 1095, 1119], "45": [832, 834, 837, 883, 921, 923, 971, 1010, 1053, 1054, 1057, 1091, 1092, 1095, 1119], "0125": [832, 834, 837], "601": [832, 834, 837], "581": [832, 834, 837], "025": [832, 834, 837], "992": [832, 834, 837], "209": [832, 834, 837, 1075, 1076], "271": [832, 834, 837], "0717": [832, 834, 837], "142": [832, 834, 837], "182": [832, 834, 837], "624": [832, 834, 837, 1058, 1064, 1066], "06": [832, 834, 837], "02": [832, 834, 837], "744": [832, 834, 837], "626": [832, 834, 837], "65": [832, 834, 837, 883, 921, 923, 1091, 1092, 1095, 1119], "024": [832, 834, 837], "096": [832, 834, 837], "216": [832, 834, 837], "384": [832, 834, 837], "rate": [832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862, 1031, 1032, 1033, 1034, 1154, 1165, 1170, 1171, 1172, 1173, 1174, 1175], "ws_new": [832, 839, 841, 844, 846, 852, 854, 856, 858, 860, 862], "retain": [832, 843], "trust": [832, 852, 854, 1170, 1172], "decai": [832, 852, 854, 856, 858, 1170, 1172, 1173], "layerwis": [832, 856, 858, 1170, 1173], "stride": [870, 871, 872, 873, 874, 875, 876, 877, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "data_format": [870, 871, 872, 873, 874, 875, 876, 877, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "nwc": [870, 871, 872, 1154, 1155, 1156], "dilat": [870, 871, 872, 873, 874, 875, 876, 877, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "convolut": [870, 871, 872, 873, 874, 875, 876, 877, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "d_in": [870, 871, 872, 873, 874, 875, 876], "fw": [870, 871, 872, 873, 874, 875, 876, 877], "d_out": [870, 871, 872, 873, 874, 875, 876], "slide": [870, 871, 872, 873, 874, 875, 876, 877, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161], "ncw": [870, 871, 872, 1154, 1155, 1156], "wio": [870, 871], "output_shap": [870, 872, 874, 876, 1154, 1156, 1158, 1160], "nhwc": [870, 873, 874, 877, 1154, 1157, 1158, 1161], "fh": [870, 873, 874, 875, 876, 877], "nchw": [870, 873, 874, 877, 1154, 1157, 1158, 1161], "hwio": [870, 873], "unequ": [870, 873], "unsqueez": [870, 873, 877], "ndhwc": [870, 875, 876, 1154, 1159, 1160], "volum": [870, 875], "fd": [870, 875, 876], "ncdhw": [870, 875, 876, 1154, 1159, 1160], "dhwio": [870, 875], "256": [870, 876], "258": [870, 876], "128": [870, 876, 883, 921, 923], "depthwis": [870, 877, 1154, 1161], "333": [870, 877], "inp": [870, 877], "prob": [870, 878, 1058, 1059, 1154, 1162], "randomli": [870, 878, 1154, 1162], "bernoulli": [870, 878], "out_featur": [870, 878, 879], "incom": [870, 879], "outer_batch_shap": [870, 879], "inner_batch_shap": [870, 879], "in_featur": [870, 879], "cell": [870, 880, 1154, 1163], "num_queri": [870, 881, 882], "x_feat_dim": [870, 881], "num_kei": [870, 881, 882], "cont_feat_dim": [870, 881], "numhead": [870, 881], "feat_dim": [870, 881, 882], "out_feat_dim": [870, 881], "score": [870, 882], "04": [870, 882], "03": [870, 882, 1053, 1054, 1057], "08": [870, 882], "decomposit": [883, 884, 887, 927, 929, 934], "symmetr": [883, 884, 887, 898, 900, 901, 903, 952, 954], "u": [883, 884, 887, 934], "01e": [883, 884, 887], "93e": [883, 884, 887], "00": [883, 884, 887], "00e": [883, 884, 887], "1450000000": [883, 884, 887], "1070000000": [883, 884, 887], "425000000": [883, 884, 887], "vif": [883, 889, 891], "92": [883, 892], "293": [883, 892], "46997": [883, 892], "eigendecomposit": [883, 898, 900], "qlq\u1d40": [883, 898, 900], "orthogon": [883, 898, 900], "eig": [883, 898, 900], "eigenvalu": [883, 898, 900, 901, 903], "eigenvector": [883, 898, 900], "75": [883, 904, 921, 923], "prepend": [883, 907, 910], "singular": [883, 906, 915, 917, 924, 926, 934, 936, 937, 939], "toler": [883, 906, 915, 917, 924, 926], "largest_singular_valu": [883, 906, 915, 917, 924, 926], "array_lik": [883, 921, 923], "33": [883, 921, 923, 1053, 1054, 1057, 1091, 1092, 1095, 1119], "36": [883, 921, 923, 1091, 1092, 1095, 1119], "84": [883, 921, 923, 1091, 1092, 1095, 1119], "105": [883, 921, 923, 955, 956, 959], "112": [883, 921, 923, 1091, 1092, 1095, 1119], "104": [883, 921, 923, 1091, 1092, 1095, 1119], "120": [883, 921, 923], "moor": [883, 906, 924, 926], "penros": [883, 906, 924, 926], "pseudo": [883, 906, 924, 926], "orthonorm": [883, 927, 929, 934], "2d": [883, 894, 930, 1154, 1157, 1158, 1161], "logdet": [883, 894, 930], "coeffici": [883, 931, 933], "usvh": [883, 934], "vh": [883, 934], "hermitian": [883, 934], "et": [883, 934], "cetera": [883, 934], "adjoint": [883, 934], "reconstruct": [883, 934, 1075, 1076, 1078], "reconstructed_x": [883, 934], "contract": [883, 940, 942, 1091, 1092, 1095, 1119], "doubl": [883, 940, 942], "singleton": [883, 949, 951, 971, 1011, 1014, 1070, 1072, 1091, 1096, 1099, 1100, 1103, 1104, 1107, 1108, 1111, 1112, 1115, 1116, 1120, 1123, 1124, 1125, 1128, 1129, 1132], "liter": [883, 949, 951], "manhattan": [883, 949, 951], "l2": [883, 949, 951], "euclidean": [883, 949, 951], "mathbf": [883, 952, 954], "mathbb": [883, 952, 954], "skew": [883, 952, 954], "entropi": [955, 956, 959, 961, 964, 966, 969], "predict": [955, 956, 959, 961, 964, 966, 969], "smooth": [955, 956, 959, 961, 964, 966, 969], "223": [955, 956, 959], "357": [955, 956, 959, 966, 969], "511": [955, 956, 959], "discret": [955, 961, 964], "3862944": [955, 961, 964], "35667497": [955, 961, 964], "spars": [955, 966, 969], "logit": [955, 966, 969], "793291": [955, 966, 969], "512926": [955, 966, 969], "before_1": [971, 981, 984, 1027, 1030], "after_1": [971, 981, 984, 1027, 1030], "before_n": [971, 981, 984, 1027, 1030], "after_n": [971, 981, 984, 1027, 1030], "insert": [971, 985, 988, 1035, 1040, 1070, 1071], "manipulation_funct": [971, 985, 988], "reorder": [971, 989, 992], "permut": [971, 993, 996, 1019, 1022], "repetit": [971, 997, 1000, 1023, 1026], "restor": [971, 1005, 1008], "classivi": [971, 1010], "famili": [971, 1015, 1018], "intxx": [971, 1015, 1018], "floatxx": [971, 1015, 1018], "fomaml_step": 1031, "inner_cost_fn": [1031, 1032, 1033], "outer_cost_fn": [1031, 1032, 1033], "inner_grad_step": [1031, 1032, 1033, 1034], "inner_learning_r": [1031, 1032, 1033, 1034], "inner_optimization_step": [1031, 1032, 1033, 1034], "inner_batch_fn": [1031, 1032, 1033], "outer_batch_fn": [1031, 1032, 1033], "average_across_step": [1031, 1032, 1033], "inner_v": [1031, 1032, 1033], "keep_inner_v": [1031, 1032, 1033], "outer_v": [1031, 1032, 1033], "keep_outer_v": [1031, 1032, 1033], "return_inner_v": [1031, 1032, 1033, 1034], "num_task": [1031, 1032, 1033, 1034], "maml": [1031, 1032, 1033], "recev": [1031, 1032, 1033], "0x7f1476fc9af0": [1031, 1032, 1033, 1034], "maml_step": 1031, "rece": [1031, 1033], "reptile_step": 1031, "cost_fn": [1031, 1034], "reptil": [1031, 1034], "receivng": [1031, 1034], "all_nested_indic": 1035, "include_nest": [1035, 1036], "_index": [1035, 1036, 1046], "_base": [1035, 1036, 1045, 1046], "copy_nest": 1035, "to_mut": [1035, 1037, 1047], "mutabl": [1035, 1037, 1047], "insert_into_nest_at_index": 1035, "insert_into_nest_at_indic": 1035, "map_nest_at_index": 1035, "map_nest_at_indic": 1035, "multi_index_nest": 1035, "nested_ani": 1035, "check_nest": [1035, 1045, 1046], "conditon": [1035, 1045, 1046], "nested_indices_wher": 1035, "stop_after_n_found": [1035, 1046], "_depth": [1035, 1047], "_tuple_check_fn": [1035, 1047], "_list_check_fn": [1035, 1047], "_dict_check_fn": [1035, 1047], "nested_multi_map": 1035, "nest0": [1035, 1048], "ivy_arrai": [1035, 1048], "funciton": [1035, 1048], "prune_nest_at_index": 1035, "prune_nest_at_indic": 1035, "set_nest_at_index": 1035, "set_nest_at_indic": 1035, "mini": [1053, 1054, 1057, 1168, 1169], "gamma": [1053, 1054, 1057], "beta": [1053, 1054, 1057], "0976": [1053, 1054, 1057], "3452": [1053, 1054, 1057], "2740": [1053, 1054, 1057], "1047": [1053, 1054, 1057], "5886": [1053, 1054, 1057], "2732": [1053, 1054, 1057], "7696": [1053, 1054, 1057], "7024": [1053, 1054, 1057], "2518": [1053, 1054, 1057], "58": [1053, 1054, 1057, 1075, 1076], "283": [1053, 1054, 1057], "585": [1053, 1054, 1057], "909": [1053, 1054, 1057], "628": [1053, 1054, 1057], "225": [1053, 1054, 1057], "425": [1053, 1054, 1057], "norm_idx": [1053, 1054, 1057], "228": [1053, 1054, 1057], "0285": [1053, 1054, 1057], "199": [1053, 1054, 1057], "204": [1053, 1054, 1057], "population_s": [1058, 1059], "num_sampl": [1058, 1059], "draw": [1058, 1059, 1063, 1064, 1066], "unnorm": [1058, 1059], "drawn": [1058, 1059, 1060, 1061, 1063, 1064, 1066], "home": [1058, 1059, 1063], "uniformli": [1058, 1060, 1061, 1064, 1066], "highest": [1058, 1060, 1061], "parameter": [1058, 1063, 1064, 1066], "6444774682897879": [1058, 1063], "811": [1058, 1063], "508": [1058, 1063], "564": [1058, 1063], "7268672": [1058, 1063], "968": [1058, 1063], "175": [1058, 1063, 1075, 1076], "064": [1058, 1063], "40935726": [1058, 1063], "556": [1058, 1063], "26431865": [1058, 1064, 1066], "475": [1058, 1064, 1066], "878": [1058, 1064, 1066], "861": [1058, 1064, 1066], "89150229": [1058, 1064, 1066], "89629126": [1058, 1064, 1066], "94198485": [1058, 1064, 1066], "91405606": [1058, 1064, 1066], "72848724": [1058, 1064, 1066], "7550739": [1058, 1064, 1066], "00109": [1058, 1064, 1066], "occurr": [1070, 1071, 1072, 1075, 1076], "yield": [1070, 1074], "43": [1070, 1074], "x_j": [1075, 1076, 1077, 1079], "impli": [1075, 1076, 1077, 1079], "inverse_indic": [1075, 1076, 1078], "aggreg": [1075, 1076], "fourth": [1075, 1076], "607": [1075, 1076], "735": [1075, 1076], "667": [1075, 1076], "381": [1075, 1076], "857": [1075, 1076], "0396": [1075, 1076], "166": [1075, 1076], "828": [1075, 1076], "144": [1075, 1076], "40501155": [1075, 1076], "77361575": [1075, 1076], "97776199": [1075, 1076], "36831157": [1075, 1076], "89148434": [1075, 1076], "9512272": [1075, 1076], "67542176": [1075, 1076], "41985657": [1075, 1076], "23478023": [1075, 1076], "1141": [1075, 1076], "8101": [1075, 1076], "9298": [1075, 1076], "8460": [1075, 1076], "2119": [1075, 1076], "3519": [1075, 1076], "6252": [1075, 1076], "4033": [1075, 1076], "7443": [1075, 1076], "2577": [1075, 1076], "3707": [1075, 1076], "0545": [1075, 1076], "3238": [1075, 1076], "5944": [1075, 1076], "0775": [1075, 1076], "4327": [1075, 1076], "176": [1075, 1076], "889": [1075, 1076], "763": [1075, 1076], "071": [1075, 1076], "262": [1075, 1076], "456": [1075, 1076], "114": [1075, 1076], "349": [1075, 1076], "615": [1075, 1076], "594": [1075, 1076], "335": [1075, 1076], "212": [1075, 1076], "457": [1075, 1076], "827": [1075, 1076], "ascend": [1080, 1081, 1084], "einstein": [1091, 1092, 1095, 1119], "summat": [1091, 1092, 1095, 1119], "seq": [1091, 1092, 1095, 1119], "jk": [1091, 1092, 1095, 1119], "ik": [1091, 1092, 1095, 1119], "126": [1091, 1092, 1095, 1119], "510": [1091, 1092, 1095, 1119], "99": [1091, 1092, 1095, 1119], "108": [1091, 1092, 1095, 1119], "117": [1091, 1092, 1095, 1119], "sentinel": [1091, 1096, 1099, 1104, 1107], "unsign": [1091, 1108, 1111, 1116], "degre": [1091, 1112, 1115, 1120, 1123], "bessel": [1091, 1112, 1115, 1120, 1123], "8164966": [1091, 1112, 1115], "varianc": [1091, 1120, 1123], "unbias": [1091, 1120, 1123], "simplicit": [1124, 1125, 1128], "autom": 1133, "grow": 1133, "ai": 1133, "got": 1133, "colab": 1133, "sharp": 1133, "weekli": 1133, "event": 1133, "immedi": 1133, "favorit": 1133, "jax_concat": 1133, "tf_concat": 1133, "np_concat": 1133, "mx_concat": 1133, "torch_concat": 1133, "prompt": 1133, "get_devic": 1133, "reduce_prod": 1133, "gradient_imag": 1133, "linalg": 1133, "bilinear_resampl": 1133, "stack_imag": 1133, "neural_net": 1133, "ecosystem": [1133, 1139], "popular": [1133, 1139], "acceler": 1133, "articl": 1133, "lenton2021ivi": 1133, "inter": 1133, "lenton": 1133, "daniel": 1133, "pardo": 1133, "fabio": 1133, "falck": 1133, "fabian": 1133, "jame": 1133, "stephen": 1133, "clark": 1133, "ronald": 1133, "journal": 1133, "arxiv": 1133, "preprint": 1133, "2102": 1133, "02886": 1133, "2021": 1133, "add_array_spec": 1136, "fn_array_spec": 1136, "geglu": 1140, "native_modul": [1143, 1144], "native_module_class": [1143, 1144], "firstlayersiren": 1145, "kaimingnorm": [1145, 1149], "negative_slop": 1145, "Ones": 1145, "siren": 1145, "w0": [1145, 1151], "filter_s": [1154, 1155, 1156], "1d": [1154, 1155, 1156], "conv1dtranspos": 1154, "filter_shap": [1154, 1157, 1158, 1159, 1160, 1161], "conv2dtranspos": 1154, "conv3dtranspos": 1154, "depthwiseconv2d": 1154, "num_channel": [1154, 1161], "bernoul": [1154, 1162], "num_lay": [1154, 1163], "return_sequ": [1154, 1163], "return_st": [1154, 1163], "get_initial_st": [1154, 1163], "dens": [1154, 1164], "multiheadattent": 1154, "query_dim": [1154, 1165], "head_dim": [1154, 1165], "dropout_r": [1154, 1165], "context_dim": [1154, 1165], "with_to_q_fn": [1154, 1165], "with_to_kv_fn": [1154, 1165], "with_to_out_fn": [1154, 1165], "build_mod": [1154, 1165, 1166, 1167], "on_init": [1154, 1165, 1166, 1167], "__call__": [1154, 1165, 1166, 1167], "store_var": [1166, 1167], "arg_stateful_idx": [1166, 1167], "kwarg_stateful_idx": [1166, 1167], "fallback_to_non_compil": [1166, 1167, 1170, 1174], "with_partial_v": [1166, 1167], "initialz": [1166, 1167], "from_cal": [1166, 1167], "check_submod_ret": [1166, 1167], "get_mod_kei": [1166, 1167], "top_mod": [1166, 1167], "mod_depth": [1166, 1167], "mod_height": [1166, 1167], "mod_with_top_mod_key_chain": [1166, 1167], "save_weight": [1166, 1167], "weights_path": [1166, 1167], "show_mod_in_top_mod": [1166, 1167], "upper_depth": [1166, 1167], "lower_depth": [1166, 1167], "show_structur": [1166, 1167], "show_v_in_top_v": [1166, 1167], "sub_mod": [1166, 1167], "show_v": [1166, 1167], "track_submod_call_ord": [1166, 1167], "track_submod_ret": [1166, 1167], "v_with_top_v_key_chain": [1166, 1167], "layernorm": 1168, "normalized_shap": [1168, 1169], "elementwise_affin": [1168, 1169], "trail": [1168, 1169], "affin": [1168, 1169], "0001": [1170, 1171, 1172], "init_on_first_step": [1170, 1174], "ignore_miss": [1170, 1174], "overriden": [1170, 1174], "sgd": 1170, "stochast": [1170, 1175], "sub_modul": [1176, 1177]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "array_methods"], [117, 0, 0, "-", "conversions"], [122, 0, 0, "-", "creation"], [124, 0, 0, "-", "data_type"], [126, 0, 0, "-", "device"], [128, 0, 0, "-", "elementwise"], [130, 0, 0, "-", "general"], [132, 0, 0, "-", "gradients"], [134, 0, 0, "-", "image"], [136, 0, 0, "-", "layers"], [138, 0, 0, "-", "linear_algebra"], [140, 0, 0, "-", "losses"], [142, 0, 0, "-", "manipulation"], [144, 0, 0, "-", "norms"], [146, 0, 0, "-", "random"], [148, 0, 0, "-", "searching"], [150, 0, 0, "-", "set"], [152, 0, 0, "-", "sorting"], [154, 0, 0, "-", "statistical"], [156, 0, 0, "-", "utility"], [158, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[522, 2, 1, "", "abs"], [530, 2, 1, "", "acos"], [531, 2, 1, "", "acosh"], [835, 2, 1, "", "adam_step"], [668, 2, 1, "", "add"], [8, 2, 1, "", "add_ivy_array_instance_methods"], [1126, 2, 1, "", "all"], [760, 2, 1, "", "all_equal"], [1130, 2, 1, "", "any"], [1082, 2, 1, "", "argsort"], [540, 2, 1, "", "asin"], [544, 2, 1, "", "asinh"], [555, 2, 1, "", "atan"], [552, 2, 1, "", "atan2"], [556, 2, 1, "", "atanh"], [957, 2, 1, "", "binary_cross_entropy"], [560, 2, 1, "", "bitwise_and"], [564, 2, 1, "", "bitwise_invert"], [568, 2, 1, "", "bitwise_left_shift"], [572, 2, 1, "", "bitwise_or"], [576, 2, 1, "", "bitwise_right_shift"], [580, 2, 1, "", "bitwise_xor"], [443, 2, 1, "", "can_cast"], [584, 2, 1, "", "ceil"], [885, 2, 1, "", "cholesky"], [973, 2, 1, "", "clip"], [978, 2, 1, "", "concat"], [982, 2, 1, "", "constant_pad"], [588, 2, 1, "", "cos"], [592, 2, 1, "", "cosh"], [890, 2, 1, "", "cross"], [962, 2, 1, "", "cross_entropy"], [930, 2, 1, "", "det"], [896, 2, 1, "", "diagonal"], [620, 2, 1, "", "divide"], [899, 2, 1, "", "eigh"], [902, 2, 1, "", "eigvalsh"], [1093, 2, 1, "", "einsum"], [628, 2, 1, "", "equal"], [605, 2, 1, "", "erf"], [668, 2, 1, "", "exp"], [986, 2, 1, "", "expand_dims"], [613, 2, 1, "", "expm1"], [990, 2, 1, "", "flip"], [620, 2, 1, "", "floor"], [621, 2, 1, "", "floor_divide"], [788, 2, 1, "", "gather_nd"], [628, 2, 1, "", "greater"], [629, 2, 1, "", "greater_equal"], [924, 2, 1, "", "inv"], [633, 2, 1, "", "isfinite"], [637, 2, 1, "", "isinf"], [641, 2, 1, "", "isnan"], [1055, 2, 1, "", "layer_norm"], [645, 2, 1, "", "less"], [649, 2, 1, "", "less_equal"], [653, 2, 1, "", "log"], [657, 2, 1, "", "log10"], [661, 2, 1, "", "log1p"], [665, 2, 1, "", "log2"], [669, 2, 1, "", "logaddexp"], [673, 2, 1, "", "logical_and"], [677, 2, 1, "", "logical_not"], [681, 2, 1, "", "logical_or"], [685, 2, 1, "", "logical_xor"], [908, 2, 1, "", "matmul"], [912, 2, 1, "", "matrix_norm"], [916, 2, 1, "", "matrix_rank"], [919, 2, 1, "", "matrix_transpose"], [1097, 2, 1, "", "max"], [1101, 2, 1, "", "mean"], [1105, 2, 1, "", "min"], [691, 2, 1, "", "multiply"], [696, 2, 1, "", "negative"], [700, 2, 1, "", "not_equal"], [922, 2, 1, "", "outer"], [994, 2, 1, "", "permute_dims"], [925, 2, 1, "", "pinv"], [704, 2, 1, "", "positive"], [708, 2, 1, "", "pow"], [1109, 2, 1, "", "prod"], [928, 2, 1, "", "qr"], [712, 2, 1, "", "remainder"], [998, 2, 1, "", "repeat"], [1002, 2, 1, "", "reshape"], [1006, 2, 1, "", "roll"], [716, 2, 1, "", "round"], [720, 2, 1, "", "sign"], [724, 2, 1, "", "sin"], [728, 2, 1, "", "sinh"], [932, 2, 1, "", "solve"], [1087, 2, 1, "", "sort"], [967, 2, 1, "", "sparse_cross_entropy"], [732, 2, 1, "", "sqrt"], [736, 2, 1, "", "square"], [1012, 2, 1, "", "squeeze"], [1016, 2, 1, "", "stack"], [1113, 2, 1, "", "std"], [741, 2, 1, "", "subtract"], [1117, 2, 1, "", "sum"], [937, 2, 1, "", "svd"], [938, 2, 1, "", "svdvals"], [1020, 2, 1, "", "swapaxes"], [746, 2, 1, "", "tan"], [751, 2, 1, "", "tanh"], [941, 2, 1, "", "tensordot"], [1024, 2, 1, "", "tile"], [944, 2, 1, "", "trace"], [755, 2, 1, "", "trunc"], [1121, 2, 1, "", "var"], [947, 2, 1, "", "vecdot"], [950, 2, 1, "", "vector_norm"], [953, 2, 1, "", "vector_to_skew_symmetric_matrix"], [1028, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[118, 2, 1, "", "args_to_ivy"], [119, 2, 1, "", "args_to_native"], [120, 2, 1, "", "to_ivy"], [121, 2, 1, "", "to_native"]], "ivy.array.creation": [[123, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[125, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[125, 3, 1, "", "can_cast"]], "ivy.array.device": [[127, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[129, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[129, 3, 1, "", "abs"], [129, 3, 1, "", "acos"], [129, 3, 1, "", "acosh"], [129, 3, 1, "", "add"], [129, 3, 1, "", "asin"], [129, 3, 1, "", "asinh"], [129, 3, 1, "", "atan"], [129, 3, 1, "", "atan2"], [129, 3, 1, "", "atanh"], [129, 3, 1, "", "bitwise_and"], [129, 3, 1, "", "bitwise_invert"], [129, 3, 1, "", "bitwise_left_shift"], [129, 3, 1, "", "bitwise_or"], [129, 3, 1, "", "bitwise_right_shift"], [129, 3, 1, "", "bitwise_xor"], [129, 3, 1, "", "ceil"], [129, 3, 1, "", "cos"], [129, 3, 1, "", "cosh"], [129, 3, 1, "", "divide"], [129, 3, 1, "", "equal"], [129, 3, 1, "", "erf"], [129, 3, 1, "", "exp"], [129, 3, 1, "", "expm1"], [129, 3, 1, "", "floor"], [129, 3, 1, "", "floor_divide"], [129, 3, 1, "", "greater"], [129, 3, 1, "", "greater_equal"], [129, 3, 1, "", "isfinite"], [129, 3, 1, "", "isinf"], [129, 3, 1, "", "isnan"], [129, 3, 1, "", "less"], [129, 3, 1, "", "less_equal"], [129, 3, 1, "", "log"], [129, 3, 1, "", "log10"], [129, 3, 1, "", "log1p"], [129, 3, 1, "", "log2"], [129, 3, 1, "", "logaddexp"], [129, 3, 1, "", "logical_and"], [129, 3, 1, "", "logical_not"], [129, 3, 1, "", "logical_or"], [129, 3, 1, "", "logical_xor"], [129, 3, 1, "", "multiply"], [129, 3, 1, "", "negative"], [129, 3, 1, "", "not_equal"], [129, 3, 1, "", "positive"], [129, 3, 1, "", "pow"], [129, 3, 1, "", "remainder"], [129, 3, 1, "", "round"], [129, 3, 1, "", "sign"], [129, 3, 1, "", "sin"], [129, 3, 1, "", "sinh"], [129, 3, 1, "", "sqrt"], [129, 3, 1, "", "square"], [129, 3, 1, "", "subtract"], [129, 3, 1, "", "tan"], [129, 3, 1, "", "tanh"], [129, 3, 1, "", "trunc"]], "ivy.array.general": [[131, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[131, 3, 1, "", "all_equal"], [131, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[133, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[133, 3, 1, "", "adam_step"]], "ivy.array.image": [[135, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[137, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[139, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[139, 3, 1, "", "cholesky"], [139, 3, 1, "", "cross"], [139, 3, 1, "", "det"], [139, 3, 1, "", "diagonal"], [139, 3, 1, "", "eigh"], [139, 3, 1, "", "eigvalsh"], [139, 3, 1, "", "inv"], [139, 3, 1, "", "matmul"], [139, 3, 1, "", "matrix_norm"], [139, 3, 1, "", "matrix_rank"], [139, 3, 1, "", "matrix_transpose"], [139, 3, 1, "", "outer"], [139, 3, 1, "", "pinv"], [139, 3, 1, "", "qr"], [139, 3, 1, "", "solve"], [139, 3, 1, "", "svd"], [139, 3, 1, "", "svdvals"], [139, 3, 1, "", "tensordot"], [139, 3, 1, "", "trace"], [139, 3, 1, "", "vecdot"], [139, 3, 1, "", "vector_norm"], [139, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[141, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[141, 3, 1, "", "binary_cross_entropy"], [141, 3, 1, "", "cross_entropy"], [141, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[143, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[143, 3, 1, "", "clip"], [143, 3, 1, "", "concat"], [143, 3, 1, "", "constant_pad"], [143, 3, 1, "", "expand_dims"], [143, 3, 1, "", "flip"], [143, 3, 1, "", "permute_dims"], [143, 3, 1, "", "repeat"], [143, 3, 1, "", "reshape"], [143, 3, 1, "", "roll"], [143, 3, 1, "", "squeeze"], [143, 3, 1, "", "stack"], [143, 3, 1, "", "swapaxes"], [143, 3, 1, "", "tile"], [143, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[145, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[145, 3, 1, "", "layer_norm"]], "ivy.array.random": [[147, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[149, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[151, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[153, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[153, 3, 1, "", "argsort"], [153, 3, 1, "", "sort"]], "ivy.array.statistical": [[155, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[155, 3, 1, "", "einsum"], [155, 3, 1, "", "max"], [155, 3, 1, "", "mean"], [155, 3, 1, "", "min"], [155, 3, 1, "", "prod"], [155, 3, 1, "", "std"], [155, 3, 1, "", "sum"], [155, 3, 1, "", "var"]], "ivy.array.utility": [[157, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[157, 3, 1, "", "all"], [157, 3, 1, "", "any"]], "ivy.array.wrapping": [[159, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[160, 0, 0, "-", "backend_handler"], [393, 0, 0, "-", "func_wrapper"], [1136, 0, 0, "-", "inspection"], [1179, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[160, 1, 1, "", "ContextManager"], [162, 2, 1, "", "choose_random_backend"], [163, 2, 1, "", "clear_backend_stack"], [164, 2, 1, "", "current_backend"], [165, 2, 1, "", "get_backend"], [166, 2, 1, "", "set_backend"], [167, 2, 1, "", "try_import_ivy_jax"], [168, 2, 1, "", "try_import_ivy_mxnet"], [169, 2, 1, "", "try_import_ivy_numpy"], [170, 2, 1, "", "try_import_ivy_tf"], [171, 2, 1, "", "try_import_ivy_torch"], [172, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[160, 3, 1, "", "__init__"]], "ivy.container": [[177, 0, 0, "-", "activations"], [179, 0, 0, "-", "base"], [181, 0, 0, "-", "container"], [184, 0, 0, "-", "container_methods"], [316, 0, 0, "-", "creation"], [318, 0, 0, "-", "data_type"], [320, 0, 0, "-", "device"], [322, 0, 0, "-", "elementwise"], [324, 0, 0, "-", "general"], [326, 0, 0, "-", "gradients"], [328, 0, 0, "-", "image"], [330, 0, 0, "-", "layers"], [332, 0, 0, "-", "linear_algebra"], [334, 0, 0, "-", "losses"], [336, 0, 0, "-", "manipulation"], [338, 0, 0, "-", "norms"], [340, 0, 0, "-", "random"], [342, 0, 0, "-", "searching"], [344, 0, 0, "-", "set"], [346, 0, 0, "-", "sorting"], [348, 0, 0, "-", "statistical"], [350, 0, 0, "-", "utility"], [352, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[178, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[180, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[180, 3, 1, "", "__getitem__"], [180, 3, 1, "", "__init__"], [180, 3, 1, "", "__setitem__"], [180, 3, 1, "", "all_false"], [180, 3, 1, "", "all_key_chains"], [180, 3, 1, "", "all_true"], [180, 3, 1, "", "arrays_as_lists"], [180, 3, 1, "", "as_arrays"], [180, 3, 1, "", "as_bools"], [180, 3, 1, "", "as_ones"], [180, 3, 1, "", "as_random_uniform"], [180, 3, 1, "", "as_variables"], [180, 3, 1, "", "as_zeros"], [180, 3, 1, "", "assert_contains_sub_container"], [180, 3, 1, "", "assert_contains_sub_structure"], [180, 3, 1, "", "assert_identical"], [180, 3, 1, "", "assert_identical_structure"], [180, 3, 1, "", "at_key_chain"], [180, 3, 1, "", "at_key_chains"], [180, 3, 1, "", "at_keys"], [180, 3, 1, "", "clip"], [180, 3, 1, "", "combine"], [180, 3, 1, "", "common_key_chains"], [180, 4, 1, "", "config"], [180, 3, 1, "", "contains_sub_container"], [180, 3, 1, "", "contains_sub_structure"], [180, 3, 1, "", "copy"], [180, 3, 1, "", "create_if_absent"], [180, 3, 1, "", "cutoff_at_depth"], [180, 3, 1, "", "cutoff_at_height"], [180, 3, 1, "", "deep_copy"], [180, 4, 1, "", "dev"], [180, 3, 1, "", "dev_clone"], [180, 3, 1, "", "dev_dist"], [180, 4, 1, "", "dev_str"], [180, 3, 1, "", "diff"], [180, 3, 1, "", "dtype"], [180, 3, 1, "", "einops_rearrange"], [180, 3, 1, "", "einops_reduce"], [180, 3, 1, "", "einops_repeat"], [180, 3, 1, "", "find_sub_container"], [180, 3, 1, "", "find_sub_structure"], [180, 3, 1, "", "flatten_key_chain"], [180, 3, 1, "", "flatten_key_chains"], [180, 3, 1, "", "format_key_chains"], [180, 3, 1, "", "from_disk_as_hdf5"], [180, 3, 1, "", "from_disk_as_json"], [180, 3, 1, "", "from_disk_as_pickled"], [180, 3, 1, "", "from_flat_list"], [180, 3, 1, "", "from_numpy"], [180, 3, 1, "", "gather"], [180, 3, 1, "", "gather_nd"], [180, 3, 1, "", "h5_file_size"], [180, 3, 1, "", "handle_inplace"], [180, 3, 1, "", "has_key"], [180, 3, 1, "", "has_key_chain"], [180, 3, 1, "", "has_nans"], [180, 3, 1, "", "identical"], [180, 3, 1, "", "identical_array_shapes"], [180, 3, 1, "", "identical_configs"], [180, 3, 1, "", "identical_structure"], [180, 3, 1, "", "if_exists"], [180, 3, 1, "", "inplace_update"], [180, 4, 1, "", "ivy"], [180, 3, 1, "", "key_chains_containing"], [180, 3, 1, "", "list_join"], [180, 3, 1, "", "list_stack"], [180, 3, 1, "", "map"], [180, 3, 1, "", "map_conts"], [180, 3, 1, "", "matrix_norm"], [180, 4, 1, "", "max_depth"], [180, 3, 1, "", "maximum"], [180, 3, 1, "", "minimum"], [180, 3, 1, "", "multi_map"], [180, 3, 1, "", "multi_map_in_static_method"], [180, 3, 1, "", "num_arrays"], [180, 3, 1, "", "overwrite_at_key_chain"], [180, 3, 1, "", "overwrite_at_key_chains"], [180, 3, 1, "", "prune_empty"], [180, 3, 1, "", "prune_key_chain"], [180, 3, 1, "", "prune_key_chains"], [180, 3, 1, "", "prune_key_from_key_chains"], [180, 3, 1, "", "prune_keys"], [180, 3, 1, "", "prune_keys_from_key_chains"], [180, 3, 1, "", "reduce"], [180, 3, 1, "", "remove_key_length_limit"], [180, 3, 1, "", "remove_print_limit"], [180, 3, 1, "", "reshape_like"], [180, 3, 1, "", "restructure"], [180, 3, 1, "", "restructure_key_chains"], [180, 3, 1, "", "set_at_key_chain"], [180, 3, 1, "", "set_at_key_chains"], [180, 3, 1, "", "set_at_keys"], [180, 3, 1, "", "set_framework"], [180, 3, 1, "", "set_ivy_backend"], [180, 4, 1, "", "shape"], [180, 4, 1, "", "shapes"], [180, 3, 1, "", "show"], [180, 3, 1, "", "show_sub_container"], [180, 3, 1, "", "shuffle"], [180, 3, 1, "", "shuffle_h5_file"], [180, 3, 1, "", "size_ordered_arrays"], [180, 3, 1, "", "slice_keys"], [180, 3, 1, "", "slice_via_key"], [180, 3, 1, "", "sort_by_key"], [180, 3, 1, "", "split"], [180, 3, 1, "", "stop_gradients"], [180, 3, 1, "", "structural_diff"], [180, 3, 1, "", "to_device"], [180, 3, 1, "", "to_dict"], [180, 3, 1, "", "to_disk_as_hdf5"], [180, 3, 1, "", "to_disk_as_json"], [180, 3, 1, "", "to_disk_as_pickled"], [180, 3, 1, "", "to_flat_list"], [180, 3, 1, "", "to_iterator"], [180, 3, 1, "", "to_iterator_keys"], [180, 3, 1, "", "to_iterator_values"], [180, 3, 1, "", "to_ivy"], [180, 3, 1, "", "to_jsonable"], [180, 3, 1, "", "to_list"], [180, 3, 1, "", "to_multi_dev"], [180, 3, 1, "", "to_native"], [180, 3, 1, "", "to_numpy"], [180, 3, 1, "", "to_raw"], [180, 3, 1, "", "trim_key"], [180, 3, 1, "", "try_kc"], [180, 3, 1, "", "unify"], [180, 3, 1, "", "unstack"], [180, 3, 1, "", "update_config"], [180, 3, 1, "", "vector_norm"], [180, 3, 1, "", "with_default_key_color"], [180, 3, 1, "", "with_entries_as_lists"], [180, 3, 1, "", "with_ivy_backend"], [180, 3, 1, "", "with_key_length_limit"], [180, 3, 1, "", "with_print_indent"], [180, 3, 1, "", "with_print_limit"], [180, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[182, 1, 1, "", "Container"], [183, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[182, 3, 1, "", "__add__"], [182, 3, 1, "", "__init__"], [182, 3, 1, "", "__radd__"], [182, 3, 1, "", "arange"], [182, 3, 1, "", "arg_info"], [182, 3, 1, "", "arg_names"], [182, 3, 1, "", "argmax"], [182, 3, 1, "", "argmin"], [182, 3, 1, "", "array"], [182, 3, 1, "", "array_equal"], [182, 3, 1, "", "arrays_equal"], [182, 3, 1, "", "as_ivy_dev"], [182, 3, 1, "", "as_ivy_dtype"], [182, 3, 1, "", "as_native_dev"], [182, 3, 1, "", "as_native_dtype"], [182, 3, 1, "", "asarray"], [182, 3, 1, "", "assert_supports_inplace"], [182, 3, 1, "", "astype"], [182, 3, 1, "", "broadcast_arrays"], [182, 3, 1, "", "broadcast_to"], [182, 3, 1, "", "cache_fn"], [182, 3, 1, "", "clear_mem_on_dev"], [182, 3, 1, "", "clip_matrix_norm"], [182, 3, 1, "", "closest_valid_dtype"], [182, 3, 1, "", "container_types"], [182, 3, 1, "", "conv1d"], [182, 3, 1, "", "conv1d_transpose"], [182, 3, 1, "", "conv2d"], [182, 3, 1, "", "conv2d_transpose"], [182, 3, 1, "", "conv3d"], [182, 3, 1, "", "conv3d_transpose"], [182, 3, 1, "", "copy_array"], [182, 3, 1, "", "cross"], [182, 3, 1, "", "cumprod"], [182, 3, 1, "", "cumsum"], [182, 3, 1, "", "current_backend"], [182, 3, 1, "", "current_backend_str"], [182, 3, 1, "", "default"], [182, 3, 1, "", "default_device"], [182, 3, 1, "", "default_dtype"], [182, 3, 1, "", "default_float_dtype"], [182, 3, 1, "", "default_int_dtype"], [182, 3, 1, "", "depthwise_conv2d"], [182, 3, 1, "", "det"], [182, 3, 1, "", "dev_clone_array"], [182, 3, 1, "", "dev_clone_iter"], [182, 3, 1, "", "dev_clone_nest"], [182, 3, 1, "", "dev_dist_array"], [182, 3, 1, "", "dev_dist_iter"], [182, 3, 1, "", "dev_dist_nest"], [182, 3, 1, "", "dev_unify"], [182, 3, 1, "", "dev_unify_array"], [182, 3, 1, "", "dev_unify_iter"], [182, 3, 1, "", "dev_unify_nest"], [182, 3, 1, "", "dev_util"], [182, 3, 1, "", "diagonal"], [182, 3, 1, "", "dropout"], [182, 3, 1, "", "dtype_bits"], [182, 3, 1, "", "eigh"], [182, 3, 1, "", "eigvalsh"], [182, 3, 1, "", "empty"], [182, 3, 1, "", "empty_like"], [182, 3, 1, "", "execute_with_gradients"], [182, 3, 1, "", "exists"], [182, 3, 1, "", "eye"], [182, 3, 1, "", "finfo"], [182, 3, 1, "", "floormod"], [182, 3, 1, "", "fourier_encode"], [182, 3, 1, "", "from_dlpack"], [182, 3, 1, "", "full"], [182, 3, 1, "", "full_like"], [182, 3, 1, "", "function_supported_dtypes"], [182, 3, 1, "", "function_unsupported_dtypes"], [182, 3, 1, "", "gelu"], [182, 3, 1, "", "get_all_arrays_in_memory"], [182, 3, 1, "", "get_all_ivy_arrays_on_dev"], [182, 3, 1, "", "get_min_base"], [182, 3, 1, "", "get_min_denominator"], [182, 3, 1, "", "get_num_dims"], [182, 3, 1, "", "get_referrers_recursive"], [182, 3, 1, "", "gpu_is_available"], [182, 3, 1, "", "handle_nestable"], [182, 3, 1, "", "handle_out_argument"], [182, 3, 1, "", "iinfo"], [182, 3, 1, "", "indices_where"], [182, 3, 1, "", "infer_device"], [182, 3, 1, "", "infer_dtype"], [182, 3, 1, "", "inplace_arrays_supported"], [182, 3, 1, "", "inplace_decrement"], [182, 3, 1, "", "inplace_increment"], [182, 3, 1, "", "inplace_variables_supported"], [182, 3, 1, "", "inputs_to_native_arrays"], [182, 3, 1, "", "inv"], [182, 3, 1, "", "invalid_dtype"], [182, 3, 1, "", "is_float_dtype"], [182, 3, 1, "", "is_int_dtype"], [182, 3, 1, "", "is_ivy_container"], [182, 3, 1, "", "leaky_relu"], [182, 3, 1, "", "linear"], [182, 3, 1, "", "linspace"], [182, 3, 1, "", "logspace"], [182, 3, 1, "", "lstm_update"], [182, 3, 1, "", "match_kwargs"], [182, 3, 1, "", "matrix_power"], [182, 3, 1, "", "matrix_rank"], [182, 3, 1, "", "matrix_transpose"], [182, 3, 1, "", "meshgrid"], [182, 3, 1, "", "multi_head_attention"], [182, 3, 1, "", "multinomial"], [182, 3, 1, "", "multiprocessing"], [182, 3, 1, "", "native_array"], [182, 3, 1, "", "nonzero"], [182, 3, 1, "", "num_arrays_in_memory"], [182, 3, 1, "", "num_cpu_cores"], [182, 3, 1, "", "num_gpus"], [182, 3, 1, "", "num_ivy_arrays_on_dev"], [182, 3, 1, "", "one_hot"], [182, 3, 1, "", "ones"], [182, 3, 1, "", "ones_like"], [182, 3, 1, "", "outer"], [182, 3, 1, "", "outputs_to_ivy_arrays"], [182, 3, 1, "", "percent_used_mem_on_dev"], [182, 3, 1, "", "pinv"], [182, 3, 1, "", "print_all_arrays_in_memory"], [182, 3, 1, "", "print_all_ivy_arrays_on_dev"], [182, 3, 1, "", "promote_types"], [182, 3, 1, "", "qr"], [182, 3, 1, "", "queue_timeout"], [182, 3, 1, "", "randint"], [182, 3, 1, "", "random_normal"], [182, 3, 1, "", "relu"], [182, 3, 1, "", "result_type"], [182, 3, 1, "", "scaled_dot_product_attention"], [182, 3, 1, "", "scatter_flat"], [182, 3, 1, "", "scatter_nd"], [182, 3, 1, "", "seed"], [182, 3, 1, "", "set_default_device"], [182, 3, 1, "", "set_default_dtype"], [182, 3, 1, "", "set_default_float_dtype"], [182, 3, 1, "", "set_default_int_dtype"], [182, 3, 1, "", "set_min_base"], [182, 3, 1, "", "set_min_denominator"], [182, 3, 1, "", "set_queue_timeout"], [182, 3, 1, "", "set_split_factor"], [182, 3, 1, "", "set_tmp_dir"], [182, 3, 1, "", "set_with_grads"], [182, 3, 1, "", "shape_to_tuple"], [182, 3, 1, "", "sigmoid"], [182, 3, 1, "", "slogdet"], [182, 3, 1, "", "softmax"], [182, 3, 1, "", "softplus"], [182, 3, 1, "", "solve"], [182, 3, 1, "", "split_factor"], [182, 3, 1, "", "split_func_call"], [182, 3, 1, "", "stable_divide"], [182, 3, 1, "", "stable_pow"], [182, 3, 1, "", "static_acos"], [182, 3, 1, "", "static_acosh"], [182, 3, 1, "", "static_all"], [182, 3, 1, "", "static_any"], [182, 3, 1, "", "static_arange"], [182, 3, 1, "", "static_arg_info"], [182, 3, 1, "", "static_arg_names"], [182, 3, 1, "", "static_argmax"], [182, 3, 1, "", "static_argmin"], [182, 3, 1, "", "static_array"], [182, 3, 1, "", "static_array_equal"], [182, 3, 1, "", "static_arrays_equal"], [182, 3, 1, "", "static_as_ivy_dev"], [182, 3, 1, "", "static_as_ivy_dtype"], [182, 3, 1, "", "static_as_native_dev"], [182, 3, 1, "", "static_as_native_dtype"], [182, 3, 1, "", "static_asarray"], [182, 3, 1, "", "static_asin"], [182, 3, 1, "", "static_asinh"], [182, 3, 1, "", "static_assert_supports_inplace"], [182, 3, 1, "", "static_astype"], [182, 3, 1, "", "static_atan"], [182, 3, 1, "", "static_atan2"], [182, 3, 1, "", "static_atanh"], [182, 3, 1, "", "static_bitwise_and"], [182, 3, 1, "", "static_bitwise_invert"], [182, 3, 1, "", "static_bitwise_left_shift"], [182, 3, 1, "", "static_bitwise_or"], [182, 3, 1, "", "static_bitwise_right_shift"], [182, 3, 1, "", "static_bitwise_xor"], [182, 3, 1, "", "static_broadcast_arrays"], [182, 3, 1, "", "static_broadcast_to"], [182, 3, 1, "", "static_cache_fn"], [182, 3, 1, "", "static_ceil"], [182, 3, 1, "", "static_clear_mem_on_dev"], [182, 3, 1, "", "static_clip_matrix_norm"], [182, 3, 1, "", "static_clip_vector_norm"], [182, 3, 1, "", "static_closest_valid_dtype"], [182, 3, 1, "", "static_concat"], [182, 3, 1, "", "static_constant_pad"], [182, 3, 1, "", "static_container_types"], [182, 3, 1, "", "static_conv1d"], [182, 3, 1, "", "static_conv1d_transpose"], [182, 3, 1, "", "static_conv2d"], [182, 3, 1, "", "static_conv2d_transpose"], [182, 3, 1, "", "static_conv3d"], [182, 3, 1, "", "static_conv3d_transpose"], [182, 3, 1, "", "static_copy_array"], [182, 3, 1, "", "static_cos"], [182, 3, 1, "", "static_cosh"], [182, 3, 1, "", "static_cross"], [182, 3, 1, "", "static_cumprod"], [182, 3, 1, "", "static_cumsum"], [182, 3, 1, "", "static_current_backend"], [182, 3, 1, "", "static_current_backend_str"], [182, 3, 1, "", "static_default"], [182, 3, 1, "", "static_default_device"], [182, 3, 1, "", "static_default_dtype"], [182, 3, 1, "", "static_default_float_dtype"], [182, 3, 1, "", "static_default_int_dtype"], [182, 3, 1, "", "static_depthwise_conv2d"], [182, 3, 1, "", "static_det"], [182, 3, 1, "", "static_dev"], [182, 3, 1, "", "static_dev_clone"], [182, 3, 1, "", "static_dev_clone_array"], [182, 3, 1, "", "static_dev_clone_iter"], [182, 3, 1, "", "static_dev_clone_nest"], [182, 3, 1, "", "static_dev_dist"], [182, 3, 1, "", "static_dev_dist_array"], [182, 3, 1, "", "static_dev_dist_iter"], [182, 3, 1, "", "static_dev_dist_nest"], [182, 3, 1, "", "static_dev_unify"], [182, 3, 1, "", "static_dev_unify_array"], [182, 3, 1, "", "static_dev_unify_iter"], [182, 3, 1, "", "static_dev_unify_nest"], [182, 3, 1, "", "static_dev_util"], [182, 3, 1, "", "static_diagonal"], [182, 3, 1, "", "static_dropout"], [182, 3, 1, "", "static_dtype"], [182, 3, 1, "", "static_dtype_bits"], [182, 3, 1, "", "static_eigh"], [182, 3, 1, "", "static_eigvalsh"], [182, 3, 1, "", "static_einops_rearrange"], [182, 3, 1, "", "static_einops_reduce"], [182, 3, 1, "", "static_einops_repeat"], [182, 3, 1, "", "static_einsum"], [182, 3, 1, "", "static_empty"], [182, 3, 1, "", "static_empty_like"], [182, 3, 1, "", "static_equal"], [182, 3, 1, "", "static_erf"], [182, 3, 1, "", "static_execute_with_gradients"], [182, 3, 1, "", "static_exists"], [182, 3, 1, "", "static_exp"], [182, 3, 1, "", "static_expand_dims"], [182, 3, 1, "", "static_expm1"], [182, 3, 1, "", "static_eye"], [182, 3, 1, "", "static_finfo"], [182, 3, 1, "", "static_flip"], [182, 3, 1, "", "static_floor"], [182, 3, 1, "", "static_floor_divide"], [182, 3, 1, "", "static_floormod"], [182, 3, 1, "", "static_fourier_encode"], [182, 3, 1, "", "static_from_dlpack"], [182, 3, 1, "", "static_full"], [182, 3, 1, "", "static_full_like"], [182, 3, 1, "", "static_function_supported_dtypes"], [182, 3, 1, "", "static_function_unsupported_dtypes"], [182, 3, 1, "", "static_gather"], [182, 3, 1, "", "static_gelu"], [182, 3, 1, "", "static_get_all_arrays_in_memory"], [182, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [182, 3, 1, "", "static_get_min_base"], [182, 3, 1, "", "static_get_min_denominator"], [182, 3, 1, "", "static_get_num_dims"], [182, 3, 1, "", "static_get_referrers_recursive"], [182, 3, 1, "", "static_gpu_is_available"], [182, 3, 1, "", "static_greater"], [182, 3, 1, "", "static_greater_equal"], [182, 3, 1, "", "static_handle_nestable"], [182, 3, 1, "", "static_handle_out_argument"], [182, 3, 1, "", "static_has_nans"], [182, 3, 1, "", "static_iinfo"], [182, 3, 1, "", "static_indices_where"], [182, 3, 1, "", "static_infer_device"], [182, 3, 1, "", "static_infer_dtype"], [182, 3, 1, "", "static_inplace_arrays_supported"], [182, 3, 1, "", "static_inplace_decrement"], [182, 3, 1, "", "static_inplace_increment"], [182, 3, 1, "", "static_inplace_update"], [182, 3, 1, "", "static_inplace_variables_supported"], [182, 3, 1, "", "static_inputs_to_native_arrays"], [182, 3, 1, "", "static_inv"], [182, 3, 1, "", "static_invalid_dtype"], [182, 3, 1, "", "static_is_array"], [182, 3, 1, "", "static_is_float_dtype"], [182, 3, 1, "", "static_is_int_dtype"], [182, 3, 1, "", "static_is_ivy_array"], [182, 3, 1, "", "static_is_ivy_container"], [182, 3, 1, "", "static_is_native_array"], [182, 3, 1, "", "static_isfinite"], [182, 3, 1, "", "static_isinf"], [182, 3, 1, "", "static_isnan"], [182, 3, 1, "", "static_layer_norm"], [182, 3, 1, "", "static_leaky_relu"], [182, 3, 1, "", "static_less"], [182, 3, 1, "", "static_less_equal"], [182, 3, 1, "", "static_linear"], [182, 3, 1, "", "static_linspace"], [182, 3, 1, "", "static_log"], [182, 3, 1, "", "static_log10"], [182, 3, 1, "", "static_log1p"], [182, 3, 1, "", "static_log2"], [182, 3, 1, "", "static_logaddexp"], [182, 3, 1, "", "static_logical_and"], [182, 3, 1, "", "static_logical_not"], [182, 3, 1, "", "static_logical_or"], [182, 3, 1, "", "static_logical_xor"], [182, 3, 1, "", "static_logspace"], [182, 3, 1, "", "static_lstm_update"], [182, 3, 1, "", "static_match_kwargs"], [182, 3, 1, "", "static_matmul"], [182, 3, 1, "", "static_matrix_norm"], [182, 3, 1, "", "static_matrix_power"], [182, 3, 1, "", "static_matrix_rank"], [182, 3, 1, "", "static_matrix_transpose"], [182, 3, 1, "", "static_max"], [182, 3, 1, "", "static_maximum"], [182, 3, 1, "", "static_mean"], [182, 3, 1, "", "static_meshgrid"], [182, 3, 1, "", "static_min"], [182, 3, 1, "", "static_minimum"], [182, 3, 1, "", "static_multi_head_attention"], [182, 3, 1, "", "static_multinomial"], [182, 3, 1, "", "static_multiprocessing"], [182, 3, 1, "", "static_native_array"], [182, 3, 1, "", "static_negative"], [182, 3, 1, "", "static_nonzero"], [182, 3, 1, "", "static_not_equal"], [182, 3, 1, "", "static_num_arrays_in_memory"], [182, 3, 1, "", "static_num_cpu_cores"], [182, 3, 1, "", "static_num_gpus"], [182, 3, 1, "", "static_num_ivy_arrays_on_dev"], [182, 3, 1, "", "static_one_hot"], [182, 3, 1, "", "static_ones"], [182, 3, 1, "", "static_ones_like"], [182, 3, 1, "", "static_outer"], [182, 3, 1, "", "static_outputs_to_ivy_arrays"], [182, 3, 1, "", "static_percent_used_mem_on_dev"], [182, 3, 1, "", "static_permute_dims"], [182, 3, 1, "", "static_pinv"], [182, 3, 1, "", "static_positive"], [182, 3, 1, "", "static_pow"], [182, 3, 1, "", "static_print_all_arrays_in_memory"], [182, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [182, 3, 1, "", "static_prod"], [182, 3, 1, "", "static_promote_types"], [182, 3, 1, "", "static_qr"], [182, 3, 1, "", "static_queue_timeout"], [182, 3, 1, "", "static_random_normal"], [182, 3, 1, "", "static_relu"], [182, 3, 1, "", "static_remainder"], [182, 3, 1, "", "static_repeat"], [182, 3, 1, "", "static_reshape"], [182, 3, 1, "", "static_result_type"], [182, 3, 1, "", "static_round"], [182, 3, 1, "", "static_scaled_dot_product_attention"], [182, 3, 1, "", "static_scatter_flat"], [182, 3, 1, "", "static_scatter_nd"], [182, 3, 1, "", "static_seed"], [182, 3, 1, "", "static_set_default_device"], [182, 3, 1, "", "static_set_default_dtype"], [182, 3, 1, "", "static_set_default_float_dtype"], [182, 3, 1, "", "static_set_default_int_dtype"], [182, 3, 1, "", "static_set_min_base"], [182, 3, 1, "", "static_set_min_denominator"], [182, 3, 1, "", "static_set_queue_timeout"], [182, 3, 1, "", "static_set_split_factor"], [182, 3, 1, "", "static_set_tmp_dir"], [182, 3, 1, "", "static_set_with_grads"], [182, 3, 1, "", "static_shape"], [182, 3, 1, "", "static_shape_to_tuple"], [182, 3, 1, "", "static_shuffle"], [182, 3, 1, "", "static_sigmoid"], [182, 3, 1, "", "static_sign"], [182, 3, 1, "", "static_sin"], [182, 3, 1, "", "static_sinh"], [182, 3, 1, "", "static_slogdet"], [182, 3, 1, "", "static_softmax"], [182, 3, 1, "", "static_softplus"], [182, 3, 1, "", "static_solve"], [182, 3, 1, "", "static_split"], [182, 3, 1, "", "static_split_factor"], [182, 3, 1, "", "static_split_func_call"], [182, 3, 1, "", "static_sqrt"], [182, 3, 1, "", "static_square"], [182, 3, 1, "", "static_squeeze"], [182, 3, 1, "", "static_stable_divide"], [182, 3, 1, "", "static_stable_pow"], [182, 3, 1, "", "static_stack"], [182, 3, 1, "", "static_std"], [182, 3, 1, "", "static_stop_gradient"], [182, 3, 1, "", "static_sum"], [182, 3, 1, "", "static_supports_inplace"], [182, 3, 1, "", "static_svd"], [182, 3, 1, "", "static_svdvals"], [182, 3, 1, "", "static_swapaxes"], [182, 3, 1, "", "static_tensordot"], [182, 3, 1, "", "static_tile"], [182, 3, 1, "", "static_tmp_dir"], [182, 3, 1, "", "static_to_device"], [182, 3, 1, "", "static_to_list"], [182, 3, 1, "", "static_to_native_arrays_and_back"], [182, 3, 1, "", "static_to_numpy"], [182, 3, 1, "", "static_to_scalar"], [182, 3, 1, "", "static_total_mem_on_dev"], [182, 3, 1, "", "static_tpu_is_available"], [182, 3, 1, "", "static_trace"], [182, 3, 1, "", "static_tril"], [182, 3, 1, "", "static_triu"], [182, 3, 1, "", "static_trunc"], [182, 3, 1, "", "static_try_else_none"], [182, 3, 1, "", "static_type_promote_arrays"], [182, 3, 1, "", "static_unique_all"], [182, 3, 1, "", "static_unique_counts"], [182, 3, 1, "", "static_unique_inverse"], [182, 3, 1, "", "static_unique_values"], [182, 3, 1, "", "static_unset_default_device"], [182, 3, 1, "", "static_unset_default_dtype"], [182, 3, 1, "", "static_unset_default_float_dtype"], [182, 3, 1, "", "static_unset_default_int_dtype"], [182, 3, 1, "", "static_unset_with_grads"], [182, 3, 1, "", "static_unstack"], [182, 3, 1, "", "static_used_mem_on_dev"], [182, 3, 1, "", "static_valid_dtype"], [182, 3, 1, "", "static_value_is_nan"], [182, 3, 1, "", "static_var"], [182, 3, 1, "", "static_variable"], [182, 3, 1, "", "static_variable_data"], [182, 3, 1, "", "static_vecdot"], [182, 3, 1, "", "static_vector_norm"], [182, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [182, 3, 1, "", "static_where"], [182, 3, 1, "", "static_with_grads"], [182, 3, 1, "", "static_zero_pad"], [182, 3, 1, "", "static_zeros"], [182, 3, 1, "", "static_zeros_like"], [182, 3, 1, "", "stop_gradient"], [182, 3, 1, "", "supports_inplace"], [182, 3, 1, "", "svd"], [182, 3, 1, "", "svdvals"], [182, 3, 1, "", "tensordot"], [182, 3, 1, "", "tmp_dir"], [182, 3, 1, "", "to_native_arrays_and_back"], [182, 3, 1, "", "to_scalar"], [182, 3, 1, "", "total_mem_on_dev"], [182, 3, 1, "", "tpu_is_available"], [182, 3, 1, "", "trace"], [182, 3, 1, "", "tril"], [182, 3, 1, "", "triu"], [182, 3, 1, "", "try_else_none"], [182, 3, 1, "", "type_promote_arrays"], [182, 3, 1, "", "unique_all"], [182, 3, 1, "", "unique_counts"], [182, 3, 1, "", "unique_inverse"], [182, 3, 1, "", "unique_values"], [182, 3, 1, "", "unset_default_device"], [182, 3, 1, "", "unset_default_dtype"], [182, 3, 1, "", "unset_default_float_dtype"], [182, 3, 1, "", "unset_default_int_dtype"], [182, 3, 1, "", "unset_with_grads"], [182, 3, 1, "", "used_mem_on_dev"], [182, 3, 1, "", "valid_dtype"], [182, 3, 1, "", "value_is_nan"], [182, 3, 1, "", "variable"], [182, 3, 1, "", "variable_data"], [182, 3, 1, "", "vecdot"], [182, 3, 1, "", "vector_to_skew_symmetric_matrix"], [182, 3, 1, "", "where"], [182, 3, 1, "", "with_grads"], [182, 3, 1, "", "zeros"], [182, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[183, 3, 1, "", "__init__"], [183, 3, 1, "", "at_dev"], [183, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[184, 2, 1, "", "__add__"], [184, 2, 1, "", "__init__"], [184, 2, 1, "", "__radd__"], [523, 2, 1, "", "abs"], [530, 2, 1, "", "acos"], [594, 2, 1, "", "acosh"], [836, 2, 1, "", "adam_step"], [840, 2, 1, "", "adam_update"], [668, 2, 1, "", "add"], [191, 2, 1, "", "add_ivy_container_instance_methods"], [1127, 2, 1, "", "all"], [761, 2, 1, "", "all_equal"], [1131, 2, 1, "", "any"], [1083, 2, 1, "", "argsort"], [541, 2, 1, "", "asin"], [545, 2, 1, "", "asinh"], [198, 2, 1, "", "at_dev"], [199, 2, 1, "", "at_devs"], [555, 2, 1, "", "atan"], [553, 2, 1, "", "atan2"], [753, 2, 1, "", "atanh"], [958, 2, 1, "", "binary_cross_entropy"], [561, 2, 1, "", "bitwise_and"], [565, 2, 1, "", "bitwise_invert"], [569, 2, 1, "", "bitwise_left_shift"], [573, 2, 1, "", "bitwise_or"], [577, 2, 1, "", "bitwise_right_shift"], [581, 2, 1, "", "bitwise_xor"], [444, 2, 1, "", "can_cast"], [585, 2, 1, "", "ceil"], [886, 2, 1, "", "cholesky"], [974, 2, 1, "", "clip"], [772, 2, 1, "", "clip_vector_norm"], [979, 2, 1, "", "concat"], [983, 2, 1, "", "constant_pad"], [594, 2, 1, "", "cos"], [593, 2, 1, "", "cosh"], [963, 2, 1, "", "cross_entropy"], [620, 2, 1, "", "divide"], [1119, 2, 1, "", "einsum"], [628, 2, 1, "", "equal"], [606, 2, 1, "", "erf"], [668, 2, 1, "", "exp"], [987, 2, 1, "", "expand_dims"], [614, 2, 1, "", "expm1"], [991, 2, 1, "", "flip"], [620, 2, 1, "", "floor"], [622, 2, 1, "", "floor_divide"], [789, 2, 1, "", "gather_nd"], [845, 2, 1, "", "gradient_descent_update"], [628, 2, 1, "", "greater"], [630, 2, 1, "", "greater_equal"], [849, 2, 1, "", "is_variable"], [634, 2, 1, "", "isfinite"], [638, 2, 1, "", "isinf"], [642, 2, 1, "", "isnan"], [853, 2, 1, "", "lamb_update"], [857, 2, 1, "", "lars_update"], [1056, 2, 1, "", "layer_norm"], [646, 2, 1, "", "less"], [650, 2, 1, "", "less_equal"], [654, 2, 1, "", "log"], [658, 2, 1, "", "log10"], [662, 2, 1, "", "log1p"], [666, 2, 1, "", "log2"], [670, 2, 1, "", "logaddexp"], [674, 2, 1, "", "logical_and"], [678, 2, 1, "", "logical_not"], [682, 2, 1, "", "logical_or"], [686, 2, 1, "", "logical_xor"], [909, 2, 1, "", "matmul"], [1098, 2, 1, "", "max"], [1102, 2, 1, "", "mean"], [1106, 2, 1, "", "min"], [692, 2, 1, "", "multiply"], [697, 2, 1, "", "negative"], [701, 2, 1, "", "not_equal"], [861, 2, 1, "", "optimizer_update"], [995, 2, 1, "", "permute_dims"], [705, 2, 1, "", "positive"], [709, 2, 1, "", "pow"], [1110, 2, 1, "", "prod"], [1065, 2, 1, "", "random_uniform"], [713, 2, 1, "", "remainder"], [999, 2, 1, "", "repeat"], [1003, 2, 1, "", "reshape"], [1007, 2, 1, "", "roll"], [717, 2, 1, "", "round"], [721, 2, 1, "", "sign"], [725, 2, 1, "", "sin"], [729, 2, 1, "", "sinh"], [1088, 2, 1, "", "sort"], [968, 2, 1, "", "sparse_cross_entropy"], [733, 2, 1, "", "sqrt"], [737, 2, 1, "", "square"], [1013, 2, 1, "", "squeeze"], [1017, 2, 1, "", "stack"], [525, 2, 1, "", "static_abs"], [838, 2, 1, "", "static_adam_step"], [842, 2, 1, "", "static_adam_update"], [668, 2, 1, "", "static_add"], [763, 2, 1, "", "static_all_equal"], [1085, 2, 1, "", "static_argsort"], [960, 2, 1, "", "static_binary_cross_entropy"], [446, 2, 1, "", "static_can_cast"], [888, 2, 1, "", "static_cholesky"], [976, 2, 1, "", "static_clip"], [965, 2, 1, "", "static_cross_entropy"], [620, 2, 1, "", "static_divide"], [791, 2, 1, "", "static_gather_nd"], [847, 2, 1, "", "static_gradient_descent_update"], [851, 2, 1, "", "static_is_variable"], [855, 2, 1, "", "static_lamb_update"], [859, 2, 1, "", "static_lars_update"], [694, 2, 1, "", "static_multiply"], [863, 2, 1, "", "static_optimizer_update"], [1062, 2, 1, "", "static_randint"], [1067, 2, 1, "", "static_random_uniform"], [1009, 2, 1, "", "static_roll"], [1090, 2, 1, "", "static_sort"], [970, 2, 1, "", "static_sparse_cross_entropy"], [740, 2, 1, "", "static_subtract"], [753, 2, 1, "", "static_tan"], [750, 2, 1, "", "static_tanh"], [1114, 2, 1, "", "std"], [742, 2, 1, "", "subtract"], [1118, 2, 1, "", "sum"], [1021, 2, 1, "", "swapaxes"], [753, 2, 1, "", "tan"], [752, 2, 1, "", "tanh"], [1025, 2, 1, "", "tile"], [756, 2, 1, "", "trunc"], [1122, 2, 1, "", "var"], [1029, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[317, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[319, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[319, 3, 1, "", "can_cast"], [319, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[321, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[323, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[323, 3, 1, "", "abs"], [323, 3, 1, "", "acos"], [323, 3, 1, "", "acosh"], [323, 3, 1, "", "add"], [323, 3, 1, "", "asin"], [323, 3, 1, "", "asinh"], [323, 3, 1, "", "atan"], [323, 3, 1, "", "atan2"], [323, 3, 1, "", "atanh"], [323, 3, 1, "", "bitwise_and"], [323, 3, 1, "", "bitwise_invert"], [323, 3, 1, "", "bitwise_left_shift"], [323, 3, 1, "", "bitwise_or"], [323, 3, 1, "", "bitwise_right_shift"], [323, 3, 1, "", "bitwise_xor"], [323, 3, 1, "", "ceil"], [323, 3, 1, "", "cos"], [323, 3, 1, "", "cosh"], [323, 3, 1, "", "divide"], [323, 3, 1, "", "equal"], [323, 3, 1, "", "erf"], [323, 3, 1, "", "exp"], [323, 3, 1, "", "expm1"], [323, 3, 1, "", "floor"], [323, 3, 1, "", "floor_divide"], [323, 3, 1, "", "greater"], [323, 3, 1, "", "greater_equal"], [323, 3, 1, "", "isfinite"], [323, 3, 1, "", "isinf"], [323, 3, 1, "", "isnan"], [323, 3, 1, "", "less"], [323, 3, 1, "", "less_equal"], [323, 3, 1, "", "log"], [323, 3, 1, "", "log10"], [323, 3, 1, "", "log1p"], [323, 3, 1, "", "log2"], [323, 3, 1, "", "logaddexp"], [323, 3, 1, "", "logical_and"], [323, 3, 1, "", "logical_not"], [323, 3, 1, "", "logical_or"], [323, 3, 1, "", "logical_xor"], [323, 3, 1, "", "multiply"], [323, 3, 1, "", "negative"], [323, 3, 1, "", "not_equal"], [323, 3, 1, "", "positive"], [323, 3, 1, "", "pow"], [323, 3, 1, "", "remainder"], [323, 3, 1, "", "round"], [323, 3, 1, "", "sign"], [323, 3, 1, "", "sin"], [323, 3, 1, "", "sinh"], [323, 3, 1, "", "sqrt"], [323, 3, 1, "", "square"], [323, 3, 1, "", "static_abs"], [323, 3, 1, "", "static_add"], [323, 3, 1, "", "static_divide"], [323, 3, 1, "", "static_multiply"], [323, 3, 1, "", "static_subtract"], [323, 3, 1, "", "static_tan"], [323, 3, 1, "", "static_tanh"], [323, 3, 1, "", "subtract"], [323, 3, 1, "", "tan"], [323, 3, 1, "", "tanh"], [323, 3, 1, "", "trunc"]], "ivy.container.general": [[325, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[325, 3, 1, "", "all_equal"], [325, 3, 1, "", "clip_vector_norm"], [325, 3, 1, "", "gather_nd"], [325, 3, 1, "", "static_all_equal"], [325, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[327, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[327, 3, 1, "", "adam_step"], [327, 3, 1, "", "adam_update"], [327, 3, 1, "", "gradient_descent_update"], [327, 3, 1, "", "is_variable"], [327, 3, 1, "", "lamb_update"], [327, 3, 1, "", "lars_update"], [327, 3, 1, "", "optimizer_update"], [327, 3, 1, "", "static_adam_step"], [327, 3, 1, "", "static_adam_update"], [327, 3, 1, "", "static_gradient_descent_update"], [327, 3, 1, "", "static_is_variable"], [327, 3, 1, "", "static_lamb_update"], [327, 3, 1, "", "static_lars_update"], [327, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[329, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[331, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[333, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[333, 3, 1, "", "cholesky"], [333, 3, 1, "", "matmul"], [333, 3, 1, "", "static_cholesky"]], "ivy.container.losses": [[335, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[335, 3, 1, "", "binary_cross_entropy"], [335, 3, 1, "", "cross_entropy"], [335, 3, 1, "", "sparse_cross_entropy"], [335, 3, 1, "", "static_binary_cross_entropy"], [335, 3, 1, "", "static_cross_entropy"], [335, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[337, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[337, 3, 1, "", "clip"], [337, 3, 1, "", "concat"], [337, 3, 1, "", "constant_pad"], [337, 3, 1, "", "expand_dims"], [337, 3, 1, "", "flip"], [337, 3, 1, "", "permute_dims"], [337, 3, 1, "", "repeat"], [337, 3, 1, "", "reshape"], [337, 3, 1, "", "roll"], [337, 3, 1, "", "squeeze"], [337, 3, 1, "", "stack"], [337, 3, 1, "", "static_clip"], [337, 3, 1, "", "static_roll"], [337, 3, 1, "", "swapaxes"], [337, 3, 1, "", "tile"], [337, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[339, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[339, 3, 1, "", "layer_norm"]], "ivy.container.random": [[341, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[341, 3, 1, "", "random_uniform"], [341, 3, 1, "", "static_randint"], [341, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[343, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[345, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[347, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[347, 3, 1, "", "argsort"], [347, 3, 1, "", "sort"], [347, 3, 1, "", "static_argsort"], [347, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[349, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[349, 3, 1, "", "einsum"], [349, 3, 1, "", "max"], [349, 3, 1, "", "mean"], [349, 3, 1, "", "min"], [349, 3, 1, "", "prod"], [349, 3, 1, "", "std"], [349, 3, 1, "", "sum"], [349, 3, 1, "", "var"]], "ivy.container.utility": [[351, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[351, 3, 1, "", "all"], [351, 3, 1, "", "any"]], "ivy.container.wrapping": [[353, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[394, 2, 1, "", "handle_nestable"], [395, 2, 1, "", "handle_out_argument"], [396, 2, 1, "", "infer_device"], [397, 2, 1, "", "infer_dtype"], [398, 2, 1, "", "inputs_to_ivy_arrays"], [399, 2, 1, "", "inputs_to_native_arrays"], [400, 2, 1, "", "outputs_to_ivy_arrays"], [401, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[403, 0, 0, "-", "activations"], [411, 0, 0, "-", "compilation"], [413, 0, 0, "-", "constants"], [414, 0, 0, "-", "creation"], [433, 0, 0, "-", "data_type"], [470, 0, 0, "-", "device"], [520, 0, 0, "-", "elementwise"], [758, 0, 0, "-", "general"], [832, 0, 0, "-", "gradients"], [870, 0, 0, "-", "layers"], [883, 0, 0, "-", "linear_algebra"], [955, 0, 0, "-", "losses"], [971, 0, 0, "-", "manipulation"], [1031, 0, 0, "-", "meta"], [1035, 0, 0, "-", "nest"], [1053, 0, 0, "-", "norms"], [1058, 0, 0, "-", "random"], [1070, 0, 0, "-", "searching"], [1075, 0, 0, "-", "set"], [1080, 0, 0, "-", "sorting"], [1091, 0, 0, "-", "statistical"], [1124, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[404, 2, 1, "", "gelu"], [405, 2, 1, "", "leaky_relu"], [406, 2, 1, "", "relu"], [407, 2, 1, "", "sigmoid"], [408, 2, 1, "", "softmax"], [409, 2, 1, "", "softplus"], [410, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[412, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[413, 5, 1, "", "e"], [413, 5, 1, "", "inf"], [413, 5, 1, "", "nan"], [413, 5, 1, "", "newaxis"], [413, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[415, 2, 1, "", "arange"], [414, 2, 1, "", "array"], [416, 2, 1, "", "asarray"], [417, 2, 1, "", "empty"], [418, 2, 1, "", "empty_like"], [419, 2, 1, "", "eye"], [420, 2, 1, "", "from_dlpack"], [421, 2, 1, "", "full"], [422, 2, 1, "", "full_like"], [423, 2, 1, "", "linspace"], [424, 2, 1, "", "logspace"], [425, 2, 1, "", "meshgrid"], [426, 2, 1, "", "native_array"], [427, 2, 1, "", "ones"], [428, 2, 1, "", "ones_like"], [429, 2, 1, "", "tril"], [430, 2, 1, "", "triu"], [431, 2, 1, "", "zeros"], [432, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[433, 1, 1, "", "DefaultDtype"], [433, 1, 1, "", "DefaultFloatDtype"], [433, 1, 1, "", "DefaultIntDtype"], [437, 2, 1, "", "as_ivy_dtype"], [438, 2, 1, "", "as_native_dtype"], [439, 2, 1, "", "astype"], [440, 2, 1, "", "broadcast_arrays"], [441, 2, 1, "", "broadcast_to"], [445, 2, 1, "", "can_cast"], [447, 2, 1, "", "closest_valid_dtype"], [448, 2, 1, "", "default_dtype"], [449, 2, 1, "", "default_float_dtype"], [450, 2, 1, "", "default_int_dtype"], [451, 2, 1, "", "dtype"], [452, 2, 1, "", "dtype_bits"], [453, 2, 1, "", "finfo"], [454, 2, 1, "", "function_supported_dtypes"], [455, 2, 1, "", "function_unsupported_dtypes"], [456, 2, 1, "", "iinfo"], [457, 2, 1, "", "invalid_dtype"], [458, 2, 1, "", "is_float_dtype"], [459, 2, 1, "", "is_int_dtype"], [460, 2, 1, "", "promote_types"], [461, 2, 1, "", "result_type"], [462, 2, 1, "", "set_default_dtype"], [463, 2, 1, "", "set_default_float_dtype"], [464, 2, 1, "", "set_default_int_dtype"], [465, 2, 1, "", "type_promote_arrays"], [466, 2, 1, "", "unset_default_dtype"], [467, 2, 1, "", "unset_default_float_dtype"], [468, 2, 1, "", "unset_default_int_dtype"], [469, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[433, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[433, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[433, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[470, 1, 1, "", "DefaultDevice"], [472, 1, 1, "", "DevClonedItem"], [473, 1, 1, "", "DevClonedIter"], [474, 1, 1, "", "DevClonedNest"], [475, 1, 1, "", "DevDistItem"], [476, 1, 1, "", "DevDistIter"], [477, 1, 1, "", "DevDistNest"], [470, 1, 1, "", "DevManager"], [479, 1, 1, "", "DevMapper"], [480, 1, 1, "", "DevMapperMultiProc"], [470, 1, 1, "", "MultiDev"], [482, 1, 1, "", "MultiDevItem"], [483, 1, 1, "", "MultiDevIter"], [484, 1, 1, "", "MultiDevNest"], [485, 1, 1, "", "Profiler"], [486, 2, 1, "", "as_ivy_dev"], [487, 2, 1, "", "as_native_dev"], [488, 2, 1, "", "clear_mem_on_dev"], [489, 2, 1, "", "default_device"], [490, 2, 1, "", "dev"], [491, 2, 1, "", "dev_clone"], [492, 2, 1, "", "dev_clone_array"], [493, 2, 1, "", "dev_clone_iter"], [494, 2, 1, "", "dev_clone_nest"], [495, 2, 1, "", "dev_dist"], [496, 2, 1, "", "dev_dist_array"], [497, 2, 1, "", "dev_dist_iter"], [498, 2, 1, "", "dev_dist_nest"], [499, 2, 1, "", "dev_unify"], [500, 2, 1, "", "dev_unify_array"], [501, 2, 1, "", "dev_unify_iter"], [502, 2, 1, "", "dev_unify_nest"], [503, 2, 1, "", "dev_util"], [504, 2, 1, "", "get_all_ivy_arrays_on_dev"], [505, 2, 1, "", "gpu_is_available"], [506, 2, 1, "", "num_cpu_cores"], [507, 2, 1, "", "num_gpus"], [508, 2, 1, "", "num_ivy_arrays_on_dev"], [509, 2, 1, "", "percent_used_mem_on_dev"], [510, 2, 1, "", "print_all_ivy_arrays_on_dev"], [511, 2, 1, "", "set_default_device"], [512, 2, 1, "", "set_split_factor"], [513, 2, 1, "", "split_factor"], [514, 2, 1, "", "split_func_call"], [515, 2, 1, "", "to_device"], [516, 2, 1, "", "total_mem_on_dev"], [517, 2, 1, "", "tpu_is_available"], [518, 2, 1, "", "unset_default_device"], [519, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[470, 3, 1, "", "__enter__"], [470, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[470, 3, 1, "", "__init__"], [470, 3, 1, "", "da_tune_step"], [470, 4, 1, "", "dim_size"], [470, 3, 1, "", "ds_tune_step"], [470, 3, 1, "", "map"], [470, 3, 1, "", "repeated_config_check"], [470, 4, 1, "", "tune_step"], [470, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[479, 3, 1, "", "__init__"], [479, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[480, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[470, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[482, 3, 1, "", "__init__"], [482, 3, 1, "", "items"], [482, 3, 1, "", "keys"], [482, 4, 1, "", "shape"], [482, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[483, 3, 1, "", "__init__"], [483, 3, 1, "", "at_dev"], [483, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[484, 3, 1, "", "__init__"], [484, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[485, 3, 1, "", "__init__"], [485, 3, 1, "", "start"], [485, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[524, 2, 1, "", "abs"], [526, 2, 1, "", "acos"], [594, 2, 1, "", "acosh"], [534, 2, 1, "", "add"], [542, 2, 1, "", "asin"], [546, 2, 1, "", "asinh"], [547, 2, 1, "", "atan"], [554, 2, 1, "", "atan2"], [753, 2, 1, "", "atanh"], [562, 2, 1, "", "bitwise_and"], [566, 2, 1, "", "bitwise_invert"], [570, 2, 1, "", "bitwise_left_shift"], [574, 2, 1, "", "bitwise_or"], [578, 2, 1, "", "bitwise_right_shift"], [582, 2, 1, "", "bitwise_xor"], [586, 2, 1, "", "ceil"], [587, 2, 1, "", "cos"], [591, 2, 1, "", "cosh"], [595, 2, 1, "", "divide"], [600, 2, 1, "", "equal"], [607, 2, 1, "", "erf"], [608, 2, 1, "", "exp"], [615, 2, 1, "", "expm1"], [616, 2, 1, "", "floor"], [623, 2, 1, "", "floor_divide"], [624, 2, 1, "", "greater"], [631, 2, 1, "", "greater_equal"], [635, 2, 1, "", "isfinite"], [639, 2, 1, "", "isinf"], [643, 2, 1, "", "isnan"], [647, 2, 1, "", "less"], [651, 2, 1, "", "less_equal"], [655, 2, 1, "", "log"], [659, 2, 1, "", "log10"], [663, 2, 1, "", "log1p"], [667, 2, 1, "", "log2"], [671, 2, 1, "", "logaddexp"], [675, 2, 1, "", "logical_and"], [679, 2, 1, "", "logical_not"], [683, 2, 1, "", "logical_or"], [687, 2, 1, "", "logical_xor"], [688, 2, 1, "", "maximum"], [689, 2, 1, "", "minimum"], [693, 2, 1, "", "multiply"], [698, 2, 1, "", "negative"], [702, 2, 1, "", "not_equal"], [706, 2, 1, "", "positive"], [710, 2, 1, "", "pow"], [714, 2, 1, "", "remainder"], [718, 2, 1, "", "round"], [722, 2, 1, "", "sign"], [726, 2, 1, "", "sin"], [730, 2, 1, "", "sinh"], [734, 2, 1, "", "sqrt"], [738, 2, 1, "", "square"], [743, 2, 1, "", "subtract"], [744, 2, 1, "", "tan"], [749, 2, 1, "", "tanh"], [757, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[762, 2, 1, "", "all_equal"], [764, 2, 1, "", "arg_info"], [765, 2, 1, "", "arg_names"], [766, 2, 1, "", "array_equal"], [767, 2, 1, "", "arrays_equal"], [768, 2, 1, "", "assert_supports_inplace"], [769, 2, 1, "", "cache_fn"], [770, 2, 1, "", "clip_matrix_norm"], [773, 2, 1, "", "clip_vector_norm"], [774, 2, 1, "", "container_types"], [775, 2, 1, "", "copy_array"], [776, 2, 1, "", "cumprod"], [777, 2, 1, "", "cumsum"], [778, 2, 1, "", "current_backend_str"], [779, 2, 1, "", "default"], [780, 2, 1, "", "einops_rearrange"], [781, 2, 1, "", "einops_reduce"], [782, 2, 1, "", "einops_repeat"], [783, 2, 1, "", "exists"], [784, 2, 1, "", "floormod"], [785, 2, 1, "", "fourier_encode"], [786, 2, 1, "", "gather"], [790, 2, 1, "", "gather_nd"], [792, 2, 1, "", "get_all_arrays_in_memory"], [793, 2, 1, "", "get_min_base"], [794, 2, 1, "", "get_min_denominator"], [795, 2, 1, "", "get_num_dims"], [796, 2, 1, "", "get_referrers_recursive"], [797, 2, 1, "", "has_nans"], [798, 2, 1, "", "indices_where"], [799, 2, 1, "", "inplace_arrays_supported"], [800, 2, 1, "", "inplace_decrement"], [801, 2, 1, "", "inplace_increment"], [802, 2, 1, "", "inplace_update"], [803, 2, 1, "", "inplace_variables_supported"], [804, 2, 1, "", "is_array"], [805, 2, 1, "", "is_ivy_array"], [806, 2, 1, "", "is_ivy_container"], [807, 2, 1, "", "is_native_array"], [808, 2, 1, "", "match_kwargs"], [809, 2, 1, "", "multiprocessing"], [810, 2, 1, "", "num_arrays_in_memory"], [811, 2, 1, "", "one_hot"], [812, 2, 1, "", "print_all_arrays_in_memory"], [813, 2, 1, "", "queue_timeout"], [814, 2, 1, "", "scatter_flat"], [815, 2, 1, "", "scatter_nd"], [816, 2, 1, "", "set_min_base"], [817, 2, 1, "", "set_min_denominator"], [818, 2, 1, "", "set_queue_timeout"], [819, 2, 1, "", "set_tmp_dir"], [820, 2, 1, "", "shape"], [821, 2, 1, "", "shape_to_tuple"], [822, 2, 1, "", "stable_divide"], [823, 2, 1, "", "stable_pow"], [824, 2, 1, "", "supports_inplace"], [825, 2, 1, "", "tmp_dir"], [826, 2, 1, "", "to_list"], [827, 2, 1, "", "to_numpy"], [828, 2, 1, "", "to_scalar"], [829, 2, 1, "", "try_else_none"], [830, 2, 1, "", "unstack"], [831, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[832, 1, 1, "", "GradientTracking"], [837, 2, 1, "", "adam_step"], [841, 2, 1, "", "adam_update"], [843, 2, 1, "", "execute_with_gradients"], [846, 2, 1, "", "gradient_descent_update"], [850, 2, 1, "", "is_variable"], [854, 2, 1, "", "lamb_update"], [858, 2, 1, "", "lars_update"], [862, 2, 1, "", "optimizer_update"], [864, 2, 1, "", "set_with_grads"], [865, 2, 1, "", "stop_gradient"], [866, 2, 1, "", "unset_with_grads"], [867, 2, 1, "", "variable"], [868, 2, 1, "", "variable_data"], [869, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[832, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[871, 2, 1, "", "conv1d"], [872, 2, 1, "", "conv1d_transpose"], [873, 2, 1, "", "conv2d"], [874, 2, 1, "", "conv2d_transpose"], [875, 2, 1, "", "conv3d"], [876, 2, 1, "", "conv3d_transpose"], [877, 2, 1, "", "depthwise_conv2d"], [878, 2, 1, "", "dropout"], [879, 2, 1, "", "linear"], [880, 2, 1, "", "lstm_update"], [881, 2, 1, "", "multi_head_attention"], [882, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[887, 2, 1, "", "cholesky"], [891, 2, 1, "", "cross"], [892, 2, 1, "", "det"], [897, 2, 1, "", "diagonal"], [900, 2, 1, "", "eigh"], [903, 2, 1, "", "eigvalsh"], [904, 2, 1, "", "inv"], [910, 2, 1, "", "matmul"], [913, 2, 1, "", "matrix_norm"], [914, 2, 1, "", "matrix_power"], [917, 2, 1, "", "matrix_rank"], [920, 2, 1, "", "matrix_transpose"], [923, 2, 1, "", "outer"], [926, 2, 1, "", "pinv"], [929, 2, 1, "", "qr"], [930, 2, 1, "", "slogdet"], [933, 2, 1, "", "solve"], [934, 2, 1, "", "svd"], [939, 2, 1, "", "svdvals"], [942, 2, 1, "", "tensordot"], [945, 2, 1, "", "trace"], [948, 2, 1, "", "vecdot"], [951, 2, 1, "", "vector_norm"], [954, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[959, 2, 1, "", "binary_cross_entropy"], [964, 2, 1, "", "cross_entropy"], [969, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[975, 2, 1, "", "clip"], [980, 2, 1, "", "concat"], [984, 2, 1, "", "constant_pad"], [988, 2, 1, "", "expand_dims"], [992, 2, 1, "", "flip"], [996, 2, 1, "", "permute_dims"], [1000, 2, 1, "", "repeat"], [1004, 2, 1, "", "reshape"], [1008, 2, 1, "", "roll"], [1010, 2, 1, "", "split"], [1014, 2, 1, "", "squeeze"], [1018, 2, 1, "", "stack"], [1022, 2, 1, "", "swapaxes"], [1026, 2, 1, "", "tile"], [1030, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[1032, 2, 1, "", "fomaml_step"], [1033, 2, 1, "", "maml_step"], [1034, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[1036, 2, 1, "", "all_nested_indices"], [1037, 2, 1, "", "copy_nest"], [1038, 2, 1, "", "index_nest"], [1039, 2, 1, "", "insert_into_nest_at_index"], [1040, 2, 1, "", "insert_into_nest_at_indices"], [1041, 2, 1, "", "map"], [1042, 2, 1, "", "map_nest_at_index"], [1043, 2, 1, "", "map_nest_at_indices"], [1044, 2, 1, "", "multi_index_nest"], [1045, 2, 1, "", "nested_any"], [1046, 2, 1, "", "nested_indices_where"], [1047, 2, 1, "", "nested_map"], [1048, 2, 1, "", "nested_multi_map"], [1049, 2, 1, "", "prune_nest_at_index"], [1050, 2, 1, "", "prune_nest_at_indices"], [1051, 2, 1, "", "set_nest_at_index"], [1052, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[1057, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[1059, 2, 1, "", "multinomial"], [1061, 2, 1, "", "randint"], [1063, 2, 1, "", "random_normal"], [1066, 2, 1, "", "random_uniform"], [1068, 2, 1, "", "seed"], [1069, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[1071, 2, 1, "", "argmax"], [1072, 2, 1, "", "argmin"], [1073, 2, 1, "", "nonzero"], [1074, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[1076, 2, 1, "", "unique_all"], [1077, 2, 1, "", "unique_counts"], [1078, 2, 1, "", "unique_inverse"], [1079, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[1084, 2, 1, "", "argsort"], [1089, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[1119, 2, 1, "", "einsum"], [1099, 2, 1, "", "max"], [1103, 2, 1, "", "mean"], [1107, 2, 1, "", "min"], [1111, 2, 1, "", "prod"], [1115, 2, 1, "", "std"], [1116, 2, 1, "", "sum"], [1123, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[1128, 2, 1, "", "all"], [1132, 2, 1, "", "any"]], "ivy.inspection": [[1137, 2, 1, "", "add_array_specs"], [1138, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[1140, 0, 0, "-", "activations"], [1143, 0, 0, "-", "converters"], [1145, 0, 0, "-", "initializers"], [1154, 0, 0, "-", "layers"], [1166, 0, 0, "-", "module"], [1168, 0, 0, "-", "norms"], [1170, 0, 0, "-", "optimizers"], [1176, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1141, 1, 1, "", "GEGLU"], [1142, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1141, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1142, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[1144, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1145, 1, 1, "", "Constant"], [1147, 1, 1, "", "FirstLayerSiren"], [1148, 1, 1, "", "GlorotUniform"], [1145, 1, 1, "", "KaimingNormal"], [1150, 1, 1, "", "Ones"], [1151, 1, 1, "", "Siren"], [1145, 1, 1, "", "Uniform"], [1153, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1145, 3, 1, "", "__init__"], [1145, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1147, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1148, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1145, 3, 1, "", "__init__"], [1145, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1150, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1151, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1145, 3, 1, "", "__init__"], [1145, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1153, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[1155, 1, 1, "", "Conv1D"], [1156, 1, 1, "", "Conv1DTranspose"], [1157, 1, 1, "", "Conv2D"], [1158, 1, 1, "", "Conv2DTranspose"], [1159, 1, 1, "", "Conv3D"], [1160, 1, 1, "", "Conv3DTranspose"], [1161, 1, 1, "", "DepthwiseConv2D"], [1162, 1, 1, "", "Dropout"], [1163, 1, 1, "", "LSTM"], [1164, 1, 1, "", "Linear"], [1165, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1155, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1156, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1157, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1158, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1159, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1160, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1161, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1162, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1163, 3, 1, "", "__init__"], [1163, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1164, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1165, 3, 1, "", "__init__"]], "ivy.stateful.module": [[1167, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[1167, 3, 1, "", "__init__"], [1167, 3, 1, "", "build"], [1167, 4, 1, "", "build_mode"], [1167, 4, 1, "", "built"], [1167, 3, 1, "", "check_submod_rets"], [1167, 3, 1, "", "get_mod_key"], [1167, 3, 1, "", "mod_depth"], [1167, 3, 1, "", "mod_height"], [1167, 3, 1, "", "mod_with_top_mod_key_chain"], [1167, 3, 1, "", "save_weights"], [1167, 3, 1, "", "show_mod_in_top_mod"], [1167, 3, 1, "", "show_structure"], [1167, 3, 1, "", "show_v_in_top_v"], [1167, 3, 1, "", "sub_mods"], [1167, 3, 1, "", "track_submod_call_order"], [1167, 3, 1, "", "track_submod_rets"], [1167, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1169, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1169, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1171, 1, 1, "", "Adam"], [1172, 1, 1, "", "LAMB"], [1173, 1, 1, "", "LARS"], [1174, 1, 1, "", "Optimizer"], [1175, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1171, 3, 1, "", "__init__"], [1171, 3, 1, "", "set_state"], [1171, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1172, 3, 1, "", "__init__"], [1172, 3, 1, "", "set_state"], [1172, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1173, 3, 1, "", "__init__"], [1173, 3, 1, "", "set_state"], [1173, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1174, 3, 1, "", "__init__"], [1174, 3, 1, "", "set_state"], [1174, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1175, 3, 1, "", "__init__"], [1175, 3, 1, "", "set_state"], [1175, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1177, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1177, 3, 1, "", "__init__"]], "ivy.verbosity": [[1180, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 177, 403, 1140], "arraywithactiv": 1, "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 175, 363, 368, 373, 377, 443, 522, 527, 531, 535, 540, 544, 548, 552, 556, 560, 564, 568, 572, 576, 580, 584, 588, 592, 596, 601, 605, 609, 613, 617, 621, 625, 629, 633, 637, 641, 645, 649, 653, 657, 661, 665, 669, 673, 677, 681, 685, 691, 696, 700, 704, 708, 712, 716, 720, 724, 728, 732, 736, 741, 746, 751, 755, 760, 788, 835, 885, 890, 893, 896, 899, 902, 905, 908, 912, 916, 919, 922, 925, 928, 932, 935, 938, 941, 944, 947, 950, 953, 957, 962, 967, 973, 978, 982, 986, 990, 994, 998, 1002, 1006, 1012, 1016, 1020, 1024, 1028, 1055, 1082, 1087, 1093, 1097, 1101, 1105, 1109, 1113, 1117, 1121, 1126, 1130], "method": [2, 184, 369, 377, 378], "ab": [3, 185, 521, 522, 523, 524], "aco": [4, 186, 526, 527, 528, 529], "acosh": [5, 187, 530, 531, 532, 533], "adam_step": [6, 188, 834, 835, 836, 837], "add": [7, 190, 362, 534, 535, 536, 537], "add_ivy_array_instance_method": [8, 159], "all": [9, 192, 1125, 1126, 1127, 1128], "all_equ": [10, 193, 759, 760, 761, 762], "ani": [11, 194, 1129, 1130, 1131, 1132], "argsort": [12, 195, 1081, 1082, 1083, 1084], "asin": [13, 196, 539, 540, 541, 542], "asinh": [14, 197, 543, 544, 545, 546], "atan": [15, 200, 547, 548, 549, 550], "atan2": [16, 201, 551, 552, 553, 554], "atanh": [17, 202, 555, 556, 557, 558], "binary_cross_entropi": [18, 203, 956, 957, 958, 959], "bitwise_and": [19, 204, 559, 560, 561, 562], "bitwise_invert": [20, 205, 563, 564, 565, 566], "bitwise_left_shift": [21, 206, 567, 568, 569, 570], "bitwise_or": [22, 207, 571, 572, 573, 574], "bitwise_right_shift": [23, 208, 575, 576, 577, 578], "bitwise_xor": [24, 209, 579, 580, 581, 582], "can_cast": [25, 210, 442, 443, 444, 445], "ceil": [26, 211, 583, 584, 585, 586], "choleski": [27, 212, 884, 885, 886, 887], "clip": [28, 213, 972, 973, 974, 975], "concat": [29, 215, 977, 978, 979, 980], "constant_pad": [30, 216, 981, 982, 983, 984], "co": [31, 217, 587, 588, 589, 590], "cosh": [32, 218, 591, 592, 593, 594], "cross": [33, 889, 890, 891], "cross_entropi": [34, 219, 961, 962, 963, 964], "det": [35, 892, 893, 894], "diagon": [36, 895, 896, 897], "divid": [37, 220, 595, 596, 597, 598], "eigh": [38, 898, 899, 900], "eigvalsh": [39, 901, 902, 903], "einsum": [40, 221, 1092, 1093, 1094, 1095], "equal": [41, 222, 600, 601, 602, 603], "erf": [42, 223, 604, 605, 606, 607], "exp": [43, 224, 608, 609, 610, 611], "expand_dim": [44, 225, 985, 986, 987, 988], "expm1": [45, 226, 612, 613, 614, 615], "flip": [46, 227, 989, 990, 991, 992], "floor": [47, 228, 616, 617, 618, 619], "floor_divid": [48, 229, 620, 621, 622, 623], "gather_nd": [49, 230, 787, 788, 789, 790], "greater": [50, 232, 624, 625, 626, 627], "greater_equ": [51, 233, 628, 629, 630, 631], "inv": [52, 904, 905, 906], "isfinit": [53, 235, 632, 633, 634, 635], "isinf": [54, 236, 636, 637, 638, 639], "isnan": [55, 237, 640, 641, 642, 643], "layer_norm": [56, 240, 1054, 1055, 1056, 1057], "less": [57, 241, 644, 645, 646, 647], "less_equ": [58, 242, 648, 649, 650, 651], "log": [59, 243, 652, 653, 654, 655], "log10": [60, 244, 656, 657, 658, 659], "log1p": [61, 245, 660, 661, 662, 663], "log2": [62, 246, 664, 665, 666, 667], "logaddexp": [63, 247, 668, 669, 670, 671], "logical_and": [64, 248, 672, 673, 674, 675], "logical_not": [65, 249, 676, 677, 678, 679], "logical_or": [66, 250, 680, 681, 682, 683], "logical_xor": [67, 251, 684, 685, 686, 687], "matmul": [68, 252, 907, 908, 909, 910], "matrix_norm": [69, 911, 912, 913], "matrix_rank": [70, 915, 916, 917], "matrix_transpos": [71, 918, 919, 920], "max": [72, 253, 1096, 1097, 1098, 1099], "mean": [73, 254, 1100, 1101, 1102, 1103], "min": [74, 255, 1104, 1105, 1106, 1107], "multipli": [75, 256, 690, 691, 692, 693], "neg": [76, 257, 695, 696, 697, 698], "not_equ": [77, 258, 699, 700, 701, 702], "outer": [78, 921, 922, 923], "permute_dim": [79, 260, 993, 994, 995, 996], "pinv": [80, 924, 925, 926], "posit": [81, 261, 703, 704, 705, 706], "pow": [82, 262, 707, 708, 709, 710], "prod": [83, 263, 1108, 1109, 1110, 1111], "qr": [84, 927, 928, 929], "remaind": [85, 265, 711, 712, 713, 714], "repeat": [86, 266, 997, 998, 999, 1000], "reshap": [87, 267, 1001, 1002, 1003, 1004], "roll": [88, 268, 362, 1005, 1006, 1007, 1008], "round": [89, 269, 715, 716, 717, 718], "sign": [90, 270, 719, 720, 721, 722], "sin": [91, 271, 723, 724, 725, 726], "sinh": [92, 272, 727, 728, 729, 730], "solv": [93, 931, 932, 933], "sort": [94, 152, 273, 346, 1080, 1086, 1087, 1088, 1089], "sparse_cross_entropi": [95, 274, 966, 967, 968, 969], "sqrt": [96, 275, 731, 732, 733, 734], "squar": [97, 276, 735, 736, 737, 738], "squeez": [98, 277, 1011, 1012, 1013, 1014], "stack": [99, 278, 1015, 1016, 1017, 1018], "std": [100, 306, 1112, 1113, 1114, 1115], "subtract": [101, 307, 739, 741, 742, 743], "sum": [102, 308, 1116, 1117, 1118, 1119], "svd": [103, 934, 935, 936], "svdval": [104, 937, 938, 939], "swapax": [105, 309, 1019, 1020, 1021, 1022], "tan": [106, 310, 362, 744, 746, 747, 748], "tanh": [107, 311, 410, 749, 751, 752, 753], "tensordot": [108, 940, 941, 942], "tile": [109, 312, 1023, 1024, 1025, 1026], "trace": [110, 943, 944, 945], "trunc": [111, 313, 754, 755, 756, 757], "var": [112, 314, 1120, 1121, 1122, 1123], "vecdot": [113, 946, 947, 948], "vector_norm": [114, 949, 950, 951], "vector_to_skew_symmetric_matrix": [115, 952, 953, 954], "zero_pad": [116, 315, 1027, 1028, 1029, 1030], "convers": 117, "args_to_ivi": 118, "args_to_n": 119, "to_ivi": 120, "to_n": 121, "creation": [122, 316, 414], "arraywithcr": 123, "data": [124, 318, 364, 370, 378, 392, 433, 1075, 1076, 1077, 1079], "type": [124, 318, 365, 370, 392, 433], "arraywithdatatyp": 125, "devic": [126, 320, 371, 373, 470], "arraywithdevic": 127, "elementwis": [128, 322, 520], "arraywithelementwis": 129, "gener": [130, 324, 364, 758], "arraywithgener": 131, "gradient": [132, 326, 832], "arraywithgradi": 133, "imag": [134, 328], "arraywithimag": 135, "layer": [136, 330, 870, 1154], "arraywithlay": 137, "linear": [138, 332, 879, 883, 1164], "algebra": [138, 332, 883], "arraywithlinearalgebra": 139, "loss": [140, 334, 955], "arraywithloss": 141, "manipul": [142, 336, 971], "arraywithmanipul": 143, "norm": [144, 338, 1053, 1168], "arraywithnorm": 145, "random": [146, 340, 1058], "arraywithrandom": 147, "search": [148, 342, 1070], "arraywithsearch": 149, "set": [150, 344, 355, 366, 1075], "arraywithset": 151, "arraywithsort": 153, "statist": [154, 348, 1091], "arraywithstatist": 155, "util": [156, 350, 1124], "arraywithutil": 157, "wrap": [158, 352, 367], "backend": [160, 360, 366, 375, 392], "handler": [160, 375], "choose_random_backend": 162, "clear_backend_stack": 163, "current_backend": 164, "get_backend": 165, "set_backend": 166, "try_import_ivy_jax": 167, "try_import_ivy_mxnet": 168, "try_import_ivy_numpi": 169, "try_import_ivy_tf": 170, "try_import_ivy_torch": 171, "unset_backend": 172, "background": [173, 1133], "ml": 174, "explos": 174, "standard": 175, "skeptic": 175, "complimentari": 175, "vs": [175, 392], "competit": 175, "do": 175, "work": [175, 358], "The": [175, 356, 377, 392], "api": [175, 357, 360, 363, 369, 375, 377, 379, 380], "why": 176, "unifi": [176, 377], "No": [176, 355], "more": 176, "re": 176, "implement": 176, "infinit": 176, "shelf": 176, "life": 176, "containerwithactiv": 178, "base": 179, "containerbas": 180, "contain": [181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 369, 378, 444, 446, 523, 525, 528, 532, 536, 538, 541, 545, 549, 553, 557, 561, 565, 569, 573, 577, 581, 585, 589, 593, 597, 599, 602, 606, 610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662, 666, 670, 674, 678, 682, 686, 692, 694, 697, 701, 705, 709, 713, 717, 721, 725, 729, 733, 737, 740, 742, 745, 747, 750, 752, 756, 761, 763, 772, 789, 791, 836, 838, 840, 842, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 886, 888, 909, 958, 960, 963, 965, 968, 970, 974, 976, 979, 983, 987, 991, 995, 999, 1003, 1007, 1009, 1013, 1017, 1021, 1025, 1029, 1056, 1062, 1065, 1067, 1083, 1085, 1088, 1090, 1094, 1098, 1102, 1106, 1110, 1114, 1118, 1122, 1127, 1131], "multidevcontain": 183, "adam_upd": [189, 839, 840, 841], "add_ivy_container_instance_method": [191, 353], "at_dev": [198, 199], "clip_vector_norm": [214, 771, 772, 773], "gradient_descent_upd": [231, 844, 845, 846], "is_vari": [234, 848, 849, 850], "lamb_upd": [238, 852, 853, 854], "lars_upd": [239, 856, 857, 858], "optimizer_upd": [259, 860, 861, 862], "random_uniform": [264, 1064, 1065, 1066], "static_ab": [279, 525], "static_adam_step": [280, 838], "static_adam_upd": [281, 842], "static_add": [282, 538], "static_all_equ": [283, 763], "static_argsort": [284, 1085], "static_binary_cross_entropi": [285, 960], "static_can_cast": [286, 446], "static_choleski": [287, 888], "static_clip": [288, 976], "static_cross_entropi": [289, 965], "static_divid": [290, 599], "static_gather_nd": [291, 791], "static_gradient_descent_upd": [292, 847], "static_is_vari": [293, 851], "static_lamb_upd": [294, 855], "static_lars_upd": [295, 859], "static_multipli": [296, 694], "static_optimizer_upd": [297, 863], "static_randint": [298, 1062], "static_random_uniform": [299, 1067], "static_rol": [300, 1009], "static_sort": [301, 1090], "static_sparse_cross_entropi": [302, 970], "static_subtract": [303, 740], "static_tan": [304, 745], "static_tanh": [305, 750], "containerwithcr": 317, "containerwithdatatyp": 319, "containerwithdevic": 321, "containerwithelementwis": 323, "containerwithgener": 325, "containerwithgradi": 327, "containerwithimag": 329, "containerwithlay": 331, "containerwithlinearalgebra": 333, "containerwithloss": 335, "containerwithmanipul": 337, "containerwithnorm": 339, "containerwithrandom": 341, "containerwithsearch": 343, "containerwithset": 345, "containerwithsort": 347, "containerwithstatist": 349, "containerwithutil": 351, "contribut": [354, 1133], "up": 355, "clone": 355, "ivi": [355, 360, 362, 364, 368, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 443, 444, 445, 446, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 535, 536, 537, 538, 540, 541, 542, 544, 545, 546, 548, 549, 550, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 570, 572, 573, 574, 576, 577, 578, 580, 581, 582, 584, 585, 586, 588, 589, 590, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 605, 606, 607, 609, 610, 611, 613, 614, 615, 617, 618, 619, 621, 622, 623, 625, 626, 627, 629, 630, 631, 633, 634, 635, 637, 638, 639, 641, 642, 643, 645, 646, 647, 649, 650, 651, 653, 654, 655, 657, 658, 659, 661, 662, 663, 665, 666, 667, 669, 670, 671, 673, 674, 675, 677, 678, 679, 681, 682, 683, 685, 686, 687, 691, 692, 693, 694, 696, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 712, 713, 714, 716, 717, 718, 720, 721, 722, 724, 725, 726, 728, 729, 730, 732, 733, 734, 736, 737, 738, 740, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 757, 760, 761, 762, 763, 772, 773, 788, 789, 790, 791, 835, 836, 837, 838, 840, 841, 842, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 861, 862, 863, 885, 886, 887, 888, 890, 891, 893, 894, 896, 897, 899, 900, 902, 903, 905, 906, 908, 909, 910, 912, 913, 916, 917, 919, 920, 922, 923, 925, 926, 928, 929, 932, 933, 935, 936, 938, 939, 941, 942, 944, 945, 947, 948, 950, 951, 953, 954, 957, 958, 959, 960, 962, 963, 964, 965, 967, 968, 969, 970, 973, 974, 975, 976, 978, 979, 980, 982, 983, 984, 986, 987, 988, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1028, 1029, 1030, 1055, 1056, 1057, 1061, 1062, 1065, 1066, 1067, 1082, 1083, 1084, 1085, 1087, 1088, 1089, 1090, 1093, 1094, 1095, 1097, 1098, 1099, 1101, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1121, 1122, 1123, 1126, 1127, 1128, 1130, 1131, 1132], "pycharm": 355, "virtual": 355, "environ": 355, "docker": [355, 356, 358], "us": [355, 358, 378], "miniconda": [355, 358], "venv": [355, 358], "interpret": 355, "window": 355, "maco": 355, "ubuntu": 355, "github": 355, "codespac": 355, "pre": 355, "commit": [355, 356], "basic": 356, "get": 356, "help": 356, "todo": 356, "list": 356, "issu": 356, "manag": 356, "your": 356, "fork": 356, "who": 356, "To": 356, "ask": 356, "With": 356, "command": 356, "line": 356, "browser": 356, "pull": 356, "request": 356, "small": 356, "often": 356, "run": 356, "test": [356, 363, 364], "local": 356, "open": 357, "task": 357, "function": [357, 365, 367, 369, 370, 371, 373, 375, 380, 392], "format": 357, "frontend": [357, 380], "build": [358, 375], "doc": 358, "dockerless": 358, "document": 358, "pipelin": [358, 392], "make_doc": 358, "sh": 358, "entrypoint": 358, "_make_doc": 358, "generate_src_rst_fil": 358, "py": 358, "sphinx": 358, "correct_built_html_fil": 358, "remove_fil": 358, "deep": 359, "dive": 359, "navig": 360, "code": 360, "categor": 360, "submodul": 360, "design": [360, 374, 1133], "docstr": [361, 362], "exampl": [362, 373], "hypothesi": 364, "self": 364, "consist": 364, "explicit": 364, "test_array_funct": 364, "primari": 365, "composit": 365, "mix": 365, "standalon": 365, "nestabl": [365, 369, 373], "conveni": 365, "nativ": 368, "handl": 368, "instanc": [369, 377], "static": 369, "special": 369, "modul": [370, 371, 379, 1166, 1167], "argument": [370, 371, 372, 373], "other": [370, 371], "inplac": 372, "updat": 372, "out": [372, 373], "copi": 372, "dtype": [373, 451], "number": 373, "oper": [373, 377, 392], "integ": 373, "sequenc": 373, "block": 375, "framework": [375, 376], "graph": [375, 380], "compil": [375, 380, 411, 412], "class": 377, "monkei": 377, "patch": 377, "construct": 378, "represent": 378, "recurs": 378, "built": 378, "ins": 378, "access": 378, "save": 378, "load": 378, "comparison": 378, "custom": [378, 392], "case": 378, "compartment": 378, "configur": 378, "network": [378, 380], "weight": 378, "state": [379, 392], "initi": [379, 1145], "optim": [379, 1170, 1174], "transpil": 380, "role": 380, "convert": [380, 1143], "model": [380, 387, 392], "builder": 382, "ecosystem": 383, "gym": [384, 391], "mech": 385, "memori": [386, 391], "robot": [388, 391], "vision": [389, 391], "extens": [390, 1133], "appli": 391, "librari": 391, "mechan": 391, "faq": 392, "maintain": 392, "version": 392, "dynam": 392, "size": 392, "shape": [392, 820, 1075, 1076, 1077, 1079], "check": 392, "control": 392, "flow": 392, "auto": 392, "differenti": 392, "replica": 392, "parallel": 392, "support": 392, "altern": 392, "structur": 392, "func": 393, "wrapper": 393, "handle_nest": 394, "handle_out_argu": 395, "infer_devic": 396, "infer_dtyp": 397, "inputs_to_ivy_arrai": 398, "inputs_to_native_arrai": 399, "outputs_to_ivy_arrai": 400, "to_native_arrays_and_back": 401, "gelu": [404, 1142], "leaky_relu": 405, "relu": 406, "sigmoid": 407, "softmax": 408, "softplu": 409, "constant": 413, "note": [414, 420], "arang": 415, "asarrai": 416, "empti": 417, "empty_lik": 418, "ey": 419, "from_dlpack": 420, "full": 421, "full_lik": 422, "linspac": 423, "logspac": 424, "meshgrid": 425, "native_arrai": 426, "ones": 427, "ones_lik": 428, "tril": 429, "triu": 430, "zero": [431, 1153], "zeros_lik": 432, "as_ivy_dtyp": 437, "as_native_dtyp": 438, "astyp": 439, "broadcast_arrai": 440, "broadcast_to": 441, "closest_valid_dtyp": 447, "default_dtyp": 448, "default_float_dtyp": 449, "default_int_dtyp": 450, "dtype_bit": 452, "finfo": 453, "function_supported_dtyp": 454, "function_unsupported_dtyp": 455, "iinfo": 456, "invalid_dtyp": 457, "is_float_dtyp": 458, "is_int_dtyp": 459, "promote_typ": 460, "result_typ": 461, "set_default_dtyp": 462, "set_default_float_dtyp": 463, "set_default_int_dtyp": 464, "type_promote_arrai": 465, "unset_default_dtyp": 466, "unset_default_float_dtyp": 467, "unset_default_int_dtyp": 468, "valid_dtyp": 469, "devcloneditem": 472, "devclonedit": 473, "devclonednest": 474, "devdistitem": 475, "devdistit": 476, "devdistnest": 477, "devmapp": 479, "devmappermultiproc": 480, "multidevitem": 482, "multidevit": 483, "multidevnest": 484, "profil": 485, "as_ivy_dev": 486, "as_native_dev": 487, "clear_mem_on_dev": 488, "default_devic": 489, "dev": 490, "dev_clon": 491, "dev_clone_arrai": 492, "dev_clone_it": 493, "dev_clone_nest": 494, "dev_dist": 495, "dev_dist_arrai": 496, "dev_dist_it": 497, "dev_dist_nest": 498, "dev_unifi": 499, "dev_unify_arrai": 500, "dev_unify_it": 501, "dev_unify_nest": 502, "dev_util": 503, "get_all_ivy_arrays_on_dev": 504, "gpu_is_avail": 505, "num_cpu_cor": 506, "num_gpu": 507, "num_ivy_arrays_on_dev": 508, "percent_used_mem_on_dev": 509, "print_all_ivy_arrays_on_dev": 510, "set_default_devic": 511, "set_split_factor": 512, "split_factor": 513, "split_func_cal": 514, "to_devic": 515, "total_mem_on_dev": 516, "tpu_is_avail": 517, "unset_default_devic": 518, "used_mem_on_dev": 519, "maximum": 688, "minimum": 689, "arg_info": 764, "arg_nam": 765, "array_equ": 766, "arrays_equ": 767, "assert_supports_inplac": 768, "cache_fn": 769, "clip_matrix_norm": 770, "container_typ": 774, "copy_arrai": 775, "cumprod": 776, "cumsum": 777, "current_backend_str": 778, "default": 779, "einops_rearrang": 780, "einops_reduc": 781, "einops_repeat": 782, "exist": 783, "floormod": 784, "fourier_encod": 785, "gather": 786, "get_all_arrays_in_memori": 792, "get_min_bas": 793, "get_min_denomin": 794, "get_num_dim": 795, "get_referrers_recurs": 796, "has_nan": 797, "indices_wher": 798, "inplace_arrays_support": 799, "inplace_decr": 800, "inplace_incr": 801, "inplace_upd": 802, "inplace_variables_support": 803, "is_arrai": 804, "is_ivy_arrai": 805, "is_ivy_contain": 806, "is_native_arrai": 807, "match_kwarg": 808, "multiprocess": 809, "num_arrays_in_memori": 810, "one_hot": 811, "print_all_arrays_in_memori": 812, "queue_timeout": 813, "scatter_flat": 814, "scatter_nd": 815, "set_min_bas": 816, "set_min_denomin": 817, "set_queue_timeout": 818, "set_tmp_dir": 819, "shape_to_tupl": 821, "stable_divid": 822, "stable_pow": 823, "supports_inplac": 824, "tmp_dir": 825, "to_list": 826, "to_numpi": 827, "to_scalar": 828, "try_else_non": 829, "unstack": 830, "value_is_nan": 831, "execute_with_gradi": 843, "set_with_grad": 864, "stop_gradi": 865, "unset_with_grad": 866, "variabl": 867, "variable_data": 868, "with_grad": 869, "conv1d": [871, 1155], "conv1d_transpos": 872, "conv2d": [873, 1157], "conv2d_transpos": 874, "conv3d": [875, 1159], "conv3d_transpos": 876, "depthwise_conv2d": 877, "dropout": [878, 1162], "lstm_updat": 880, "multi_head_attent": 881, "scaled_dot_product_attent": 882, "matrix_pow": 914, "slogdet": 930, "split": 1010, "meta": 1031, "fomaml_step": 1032, "maml_step": 1033, "reptile_step": 1034, "nest": 1035, "all_nested_indic": 1036, "copy_nest": 1037, "index_nest": 1038, "insert_into_nest_at_index": 1039, "insert_into_nest_at_indic": 1040, "map": 1041, "map_nest_at_index": 1042, "map_nest_at_indic": 1043, "multi_index_nest": 1044, "nested_ani": 1045, "nested_indices_wher": 1046, "nested_map": 1047, "nested_multi_map": 1048, "prune_nest_at_index": 1049, "prune_nest_at_indic": 1050, "set_nest_at_index": 1051, "set_nest_at_indic": 1052, "multinomi": 1059, "randint": [1060, 1061], "random_norm": 1063, "seed": 1068, "shuffl": 1069, "argmax": 1071, "argmin": 1072, "nonzero": 1073, "where": 1074, "depend": [1075, 1076, 1077, 1079], "output": [1075, 1076, 1077, 1079], "unique_al": 1076, "unique_count": 1077, "unique_invers": 1078, "unique_valu": 1079, "content": 1133, "overview": 1133, "quick": 1133, "start": 1133, "roadmap": [1133, 1139], "citat": 1133, "inspect": 1136, "add_array_spec": 1137, "fn_array_spec": 1138, "geglu": 1141, "to_ivy_modul": 1144, "firstlayersiren": 1147, "glorotuniform": 1148, "Ones": 1150, "siren": 1151, "conv1dtranspos": 1156, "conv2dtranspos": 1158, "conv3dtranspos": 1160, "depthwiseconv2d": 1161, "lstm": 1163, "multiheadattent": 1165, "layernorm": 1169, "adam": 1171, "lamb": 1172, "lar": 1173, "sgd": 1175, "sequenti": [1176, 1177], "verbos": 1179, "cprint": 1180}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})