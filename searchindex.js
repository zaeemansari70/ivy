Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/adam_step", "array/array_methods/add", "array/array_methods/add_ivy_array_instance_methods", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argsort", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/cholesky", "array/array_methods/clip", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross", "array/array_methods/cross_entropy", "array/array_methods/det", "array/array_methods/diagonal", "array/array_methods/divide", "array/array_methods/eigh", "array/array_methods/eigvalsh", "array/array_methods/einsum", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/gather_nd", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/inv", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/layer_norm", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/matrix_norm", "array/array_methods/matrix_rank", "array/array_methods/matrix_transpose", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/min", "array/array_methods/multiply", "array/array_methods/negative", "array/array_methods/not_equal", "array/array_methods/outer", "array/array_methods/permute_dims", "array/array_methods/pinv", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/qr", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/solve", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/svd", "array/array_methods/svdvals", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tensordot", "array/array_methods/tile", "array/array_methods/trace", "array/array_methods/trunc", "array/array_methods/var", "array/array_methods/vecdot", "array/array_methods/vector_norm", "array/array_methods/vector_to_skew_symmetric_matrix", "array/array_methods/zero_pad", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_step", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/add_ivy_container_instance_methods", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/at_dev", "container/container_methods/at_devs", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/clip", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross_entropy", "container/container_methods/divide", "container/container_methods/einsum", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/gather_nd", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/max", "container/container_methods/mean", "container/container_methods/min", "container/container_methods/multiply", "container/container_methods/negative", "container/container_methods/not_equal", "container/container_methods/optimizer_update", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/random_uniform", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stack", "container/container_methods/static_adam_step", "container/container_methods/static_adam_update", "container/container_methods/static_add", "container/container_methods/static_all_equal", "container/container_methods/static_argsort", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_can_cast", "container/container_methods/static_clip", "container/container_methods/static_cross_entropy", "container/container_methods/static_divide", "container/container_methods/static_gather_nd", "container/container_methods/static_gradient_descent_update", "container/container_methods/static_lamb_update", "container/container_methods/static_lars_update", "container/container_methods/static_multiply", "container/container_methods/static_optimizer_update", "container/container_methods/static_randint", "container/container_methods/static_random_uniform", "container/container_methods/static_roll", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_subtract", "container/container_methods/static_tan", "container/container_methods/static_tanh", "container/container_methods/std", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tile", "container/container_methods/trunc", "container/container_methods/var", "container/container_methods/zero_pad", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/adam_step.rst", "array/array_methods/add.rst", "array/array_methods/add_ivy_array_instance_methods.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argsort.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/cholesky.rst", "array/array_methods/clip.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/det.rst", "array/array_methods/diagonal.rst", "array/array_methods/divide.rst", "array/array_methods/eigh.rst", "array/array_methods/eigvalsh.rst", "array/array_methods/einsum.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/gather_nd.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/inv.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/layer_norm.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/matrix_norm.rst", "array/array_methods/matrix_rank.rst", "array/array_methods/matrix_transpose.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/min.rst", "array/array_methods/multiply.rst", "array/array_methods/negative.rst", "array/array_methods/not_equal.rst", "array/array_methods/outer.rst", "array/array_methods/permute_dims.rst", "array/array_methods/pinv.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/qr.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/solve.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/svd.rst", "array/array_methods/svdvals.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tensordot.rst", "array/array_methods/tile.rst", "array/array_methods/trace.rst", "array/array_methods/trunc.rst", "array/array_methods/var.rst", "array/array_methods/vecdot.rst", "array/array_methods/vector_norm.rst", "array/array_methods/vector_to_skew_symmetric_matrix.rst", "array/array_methods/zero_pad.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_step.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/add_ivy_container_instance_methods.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/at_dev.rst", "container/container_methods/at_devs.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/clip.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/divide.rst", "container/container_methods/einsum.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/gather_nd.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/max.rst", "container/container_methods/mean.rst", "container/container_methods/min.rst", "container/container_methods/multiply.rst", "container/container_methods/negative.rst", "container/container_methods/not_equal.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/random_uniform.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stack.rst", "container/container_methods/static_adam_step.rst", "container/container_methods/static_adam_update.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_gather_nd.rst", "container/container_methods/static_gradient_descent_update.rst", "container/container_methods/static_lamb_update.rst", "container/container_methods/static_lars_update.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_optimizer_update.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_tan.rst", "container/container_methods/static_tanh.rst", "container/container_methods/std.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tile.rst", "container/container_methods/trunc.rst", "container/container_methods/var.rst", "container/container_methods/zero_pad.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array methods", "abs array", "acos array", "acosh array", "adam_step array", "add array", "add_ivy_array_instance_methods array", "all array", "all_equal array", "any array", "argsort array", "asin array", "asinh array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "can_cast array", "ceil array", "cholesky array", "clip array", "concat array", "constant_pad array", "cos array", "cosh array", "cross array", "cross_entropy array", "det array", "diagonal array", "divide array", "eigh array", "eigvalsh array", "einsum array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "flip array", "floor array", "floor_divide array", "gather_nd array", "greater array", "greater_equal array", "inv array", "isfinite array", "isinf array", "isnan array", "layer_norm array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "matrix_norm array", "matrix_rank array", "matrix_transpose array", "max array", "mean array", "min array", "multiply array", "negative array", "not_equal array", "outer array", "permute_dims array", "pinv array", "positive array", "pow array", "prod array", "qr array", "remainder array", "repeat array", "reshape array", "roll array", "round array", "sign array", "sin array", "sinh array", "solve array", "sort array", "sparse_cross_entropy array", "sqrt array", "square array", "squeeze array", "stack array", "std array", "subtract array", "sum array", "svd array", "svdvals array", "swapaxes array", "tan array", "tanh array", "tensordot array", "tile array", "trace array", "trunc array", "var array", "vecdot array", "vector_norm array", "vector_to_skew_symmetric_matrix array", "zero_pad array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Container methods", "abs container", "acos container", "acosh container", "adam_step container", "adam_update container", "add container", "add_ivy_container_instance_methods container", "all container", "all_equal container", "any container", "argsort container", "asin container", "asinh container", "at_dev container", "at_devs container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "can_cast container", "ceil container", "clip container", "clip_vector_norm container", "concat container", "constant_pad container", "cos container", "cosh container", "cross_entropy container", "divide container", "einsum container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "flip container", "floor container", "floor_divide container", "gather_nd container", "gradient_descent_update container", "greater container", "greater_equal container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "max container", "mean container", "min container", "multiply container", "negative container", "not_equal container", "optimizer_update container", "permute_dims container", "positive container", "pow container", "prod container", "random_uniform container", "remainder container", "repeat container", "reshape container", "roll container", "round container", "sign container", "sin container", "sinh container", "sort container", "sparse_cross_entropy container", "sqrt container", "square container", "squeeze container", "stack container", "static_adam_step container", "static_adam_update container", "static_add container", "static_all_equal container", "static_argsort container", "static_binary_cross_entropy container", "static_can_cast container", "static_clip container", "static_cross_entropy container", "static_divide container", "static_gather_nd container", "static_gradient_descent_update container", "static_lamb_update container", "static_lars_update container", "static_multiply container", "static_optimizer_update container", "static_randint container", "static_random_uniform container", "static_roll container", "static_sort container", "static_sparse_cross_entropy container", "static_subtract container", "static_tan container", "static_tanh container", "std container", "subtract container", "sum container", "swapaxes container", "tan container", "tanh container", "tile container", "trunc container", "var container", "zero_pad container", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 2, 8, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 172, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 277, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 356, 357, 359, 363, 364, 365, 366, 368, 370, 371, 373, 374, 375, 385, 386, 387, 428, 451, 465, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 752, 759, 796, 802, 821, 826, 828, 830, 832, 859, 1024, 1026, 1036, 1059, 1062, 1122, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 356, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 520, 524, 528, 533, 537, 541, 545, 549, 553, 557, 561, 565, 569, 573, 577, 581, 585, 589, 594, 598, 602, 606, 610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662, 666, 670, 674, 678, 682, 683, 684, 689, 693, 697, 701, 705, 709, 713, 717, 721, 725, 729, 733, 738, 743, 748, 752, 753, 758, 759, 760, 761, 762, 763, 764, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 833, 837, 838, 842, 843, 847, 851, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 881, 884, 887, 890, 893, 896, 900, 903, 904, 907, 910, 913, 916, 919, 920, 923, 926, 929, 932, 935, 938, 941, 944, 945, 950, 955, 960, 961, 966, 970, 974, 978, 982, 986, 990, 994, 999, 1000, 1004, 1008, 1012, 1016, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1048, 1049, 1052, 1053, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1075, 1080, 1081, 1085, 1089, 1093, 1097, 1101, 1105, 1109, 1113, 1114, 1118, 1122, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169], "arrai": [0, 1, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 179, 180, 181, 182, 183, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 371, 373, 374, 375, 387, 388, 396, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 437, 439, 440, 441, 446, 448, 451, 453, 454, 456, 460, 465, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 497, 499, 503, 505, 509, 510, 515, 516, 519, 520, 523, 524, 527, 528, 530, 531, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 579, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 612, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 739, 741, 742, 743, 744, 746, 747, 748, 751, 752, 753, 755, 756, 757, 760, 761, 762, 764, 765, 767, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 789, 791, 792, 793, 794, 795, 796, 798, 799, 801, 804, 805, 806, 808, 809, 814, 815, 818, 820, 821, 822, 824, 825, 826, 828, 830, 831, 832, 833, 835, 838, 840, 842, 843, 845, 847, 849, 851, 853, 856, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 903, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 963, 964, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 996, 997, 998, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1036, 1037, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1125, 1127, 1143, 1151, 1154], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 363, 364, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169], "base": [0, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 177, 178, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 351, 359, 362, 364, 370, 386, 409, 419, 428, 465, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 515, 602, 646, 649, 650, 653, 654, 657, 658, 661, 701, 704, 752, 787, 810, 817, 826, 1064, 1065, 1066, 1068, 1080, 1081, 1084, 1108, 1129, 1130, 1131, 1134, 1136, 1137, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "abc": [0, 1, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 179, 180, 372, 465, 474, 480, 752, 777, 1155, 1156, 1159, 1163], "activ": [1, 2, 8, 158, 159, 178, 184, 191, 347, 348, 350, 351, 353, 355, 374, 399, 400, 401, 402, 403, 404, 405, 1122, 1130, 1131], "support": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 356, 357, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 375, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1126, 1127, 1128, 1130, 1131, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1169], "framework": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 354, 358, 360, 361, 362, 363, 366, 368, 369, 372, 375, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1169], "array_method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 437, 438, 516, 517, 521, 524, 525, 529, 533, 534, 537, 538, 542, 545, 546, 549, 550, 553, 554, 557, 558, 561, 562, 565, 566, 569, 570, 573, 574, 577, 578, 582, 586, 590, 595, 598, 599, 603, 606, 607, 611, 614, 615, 619, 622, 623, 626, 627, 630, 631, 634, 635, 638, 639, 642, 643, 646, 647, 650, 651, 654, 655, 658, 659, 662, 663, 666, 667, 670, 671, 674, 675, 678, 679, 684, 685, 689, 690, 693, 694, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 717, 718, 721, 722, 725, 726, 729, 730, 733, 735, 740, 745, 748, 749, 753, 754, 781, 782, 828, 829, 875, 876, 878, 879, 882, 884, 885, 887, 888, 890, 891, 894, 895, 896, 897, 900, 901, 904, 905, 907, 908, 910, 911, 913, 914, 916, 917, 919, 920, 921, 924, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 945, 946, 950, 951, 955, 956, 961, 962, 966, 967, 970, 971, 974, 975, 978, 979, 982, 983, 986, 987, 990, 991, 994, 995, 1000, 1001, 1004, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1043, 1044, 1070, 1071, 1075, 1076, 1081, 1082, 1085, 1086, 1089, 1090, 1093, 1094, 1097, 1098, 1101, 1102, 1106, 1109, 1110, 1114, 1115, 1118, 1119], "ab": [2, 128, 129, 184, 317, 318, 359, 362, 515, 701, 704, 874, 938, 940, 1122], "self": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 179, 180, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 363, 364, 370, 372, 373, 374, 375, 437, 438, 439, 465, 516, 517, 518, 521, 522, 523, 524, 525, 526, 529, 530, 531, 533, 534, 535, 537, 538, 539, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 573, 574, 575, 577, 578, 579, 582, 583, 584, 586, 587, 588, 590, 591, 592, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 626, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 667, 668, 670, 671, 672, 674, 675, 676, 678, 679, 680, 684, 685, 686, 689, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 729, 730, 731, 733, 735, 736, 740, 741, 742, 745, 746, 747, 748, 749, 750, 753, 754, 755, 765, 766, 781, 782, 783, 828, 829, 830, 833, 834, 838, 839, 843, 844, 847, 848, 851, 852, 875, 876, 878, 879, 882, 884, 885, 887, 888, 890, 891, 894, 895, 896, 897, 898, 900, 901, 904, 905, 907, 908, 910, 911, 913, 914, 916, 917, 919, 920, 921, 924, 925, 926, 927, 929, 930, 932, 933, 935, 936, 938, 939, 941, 942, 945, 946, 947, 950, 951, 952, 955, 956, 957, 961, 962, 963, 966, 967, 968, 970, 971, 972, 974, 975, 976, 978, 979, 980, 982, 983, 984, 986, 987, 988, 990, 991, 992, 994, 995, 996, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1043, 1044, 1045, 1053, 1054, 1070, 1071, 1072, 1075, 1076, 1077, 1081, 1082, 1083, 1085, 1086, 1087, 1089, 1090, 1091, 1093, 1094, 1095, 1097, 1098, 1099, 1101, 1102, 1103, 1106, 1107, 1108, 1109, 1110, 1111, 1114, 1115, 1116, 1118, 1119, 1120, 1122, 1159, 1163], "out": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 174, 175, 176, 179, 180, 181, 182, 184, 185, 186, 187, 190, 192, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 282, 284, 285, 286, 287, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 317, 318, 319, 320, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 372, 373, 374, 375, 386, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 434, 436, 465, 510, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 764, 765, 766, 767, 769, 770, 771, 774, 775, 776, 778, 780, 781, 782, 783, 784, 785, 792, 805, 808, 809, 826, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1063, 1064, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1143, 1151], "none": [2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 160, 162, 165, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 355, 357, 360, 364, 365, 366, 367, 368, 370, 372, 374, 375, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 434, 436, 437, 439, 441, 443, 444, 445, 448, 451, 465, 474, 475, 483, 484, 507, 508, 509, 510, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 757, 758, 764, 765, 766, 767, 769, 770, 771, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 790, 792, 793, 797, 803, 805, 808, 809, 810, 811, 816, 817, 823, 826, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1030, 1035, 1036, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1132, 1133, 1134, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "instanc": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 179, 180, 181, 182, 184, 188, 190, 191, 193, 210, 211, 212, 227, 229, 266, 277, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 347, 348, 352, 356, 357, 359, 360, 363, 365, 367, 368, 373, 374, 375, 388, 396, 398, 400, 401, 402, 403, 404, 405, 409, 420, 428, 437, 438, 439, 440, 465, 474, 506, 515, 516, 517, 528, 529, 530, 533, 536, 544, 549, 553, 556, 573, 576, 577, 578, 579, 580, 585, 597, 610, 611, 612, 614, 621, 622, 625, 662, 682, 683, 689, 692, 693, 696, 709, 712, 725, 728, 729, 732, 738, 740, 741, 743, 745, 746, 747, 752, 753, 754, 755, 769, 780, 781, 782, 783, 796, 820, 822, 828, 829, 830, 832, 861, 864, 867, 873, 874, 875, 877, 878, 880, 881, 944, 945, 948, 960, 961, 962, 963, 974, 977, 978, 981, 986, 989, 994, 995, 996, 997, 999, 1008, 1011, 1042, 1043, 1046, 1047, 1052, 1053, 1055, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1081, 1084, 1085, 1088, 1108, 1113, 1114, 1117, 1132, 1133], "variant": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 356, 357, 437, 438, 439, 441, 516, 517, 529, 530, 532, 544, 549, 577, 578, 579, 611, 612, 614, 662, 739, 740, 741, 744, 745, 746, 747, 753, 754, 755, 757, 781, 782, 783, 785, 828, 829, 830, 832, 961, 962, 963, 965, 994, 995, 996, 998, 1049, 1051], "thi": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 174, 175, 176, 179, 180, 181, 182, 183, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 387, 409, 410, 411, 420, 421, 428, 437, 438, 439, 440, 441, 465, 489, 493, 497, 504, 509, 514, 515, 516, 517, 519, 528, 529, 530, 532, 533, 536, 544, 549, 553, 556, 569, 572, 573, 576, 577, 578, 579, 580, 585, 606, 609, 610, 611, 612, 614, 662, 670, 673, 674, 677, 693, 696, 705, 708, 709, 712, 725, 728, 729, 732, 738, 739, 740, 741, 743, 744, 745, 746, 747, 752, 753, 754, 755, 757, 779, 780, 781, 782, 783, 785, 796, 807, 812, 826, 828, 829, 830, 832, 833, 835, 838, 840, 842, 843, 845, 847, 849, 851, 853, 859, 861, 864, 870, 873, 874, 881, 883, 900, 902, 919, 960, 961, 962, 963, 965, 974, 977, 978, 981, 990, 993, 994, 995, 996, 997, 998, 1004, 1007, 1024, 1030, 1036, 1037, 1042, 1043, 1046, 1049, 1051, 1059, 1060, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1080, 1085, 1088, 1089, 1092, 1101, 1104, 1109, 1112, 1113, 1114, 1117, 1122, 1128, 1155, 1156, 1159, 1160, 1161, 1162, 1163, 1164], "simpli": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 179, 180, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 351, 356, 357, 359, 360, 363, 364, 366, 367, 368, 370, 374, 375, 437, 438, 439, 441, 515, 516, 517, 529, 530, 532, 544, 549, 577, 578, 579, 606, 609, 611, 612, 614, 662, 739, 740, 741, 744, 745, 746, 747, 753, 754, 755, 757, 781, 782, 783, 785, 828, 829, 830, 832, 961, 962, 963, 965, 994, 995, 996, 998, 1049, 1051], "wrap": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 159, 179, 180, 181, 182, 183, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 348, 354, 356, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 375, 387, 388, 396, 437, 438, 439, 441, 516, 517, 529, 530, 532, 544, 549, 577, 578, 579, 611, 612, 614, 662, 739, 740, 741, 744, 745, 746, 747, 752, 753, 754, 755, 757, 763, 781, 782, 783, 785, 826, 828, 829, 830, 832, 859, 961, 962, 963, 965, 994, 995, 996, 998, 1049, 1051], "function": [2, 3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 160, 164, 165, 166, 174, 179, 180, 184, 188, 190, 191, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 347, 348, 351, 353, 354, 355, 356, 357, 358, 359, 361, 363, 367, 369, 371, 372, 373, 374, 385, 386, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 523, 524, 527, 528, 529, 530, 531, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 578, 579, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 611, 612, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 835, 837, 838, 840, 842, 843, 845, 847, 849, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 903, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 962, 963, 964, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1125, 1127, 1129, 1130, 1131, 1159, 1162, 1164], "so": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 174, 175, 179, 180, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 350, 351, 355, 356, 357, 359, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 387, 388, 396, 437, 438, 439, 441, 516, 517, 529, 530, 532, 544, 549, 577, 578, 579, 611, 612, 614, 662, 739, 740, 741, 744, 745, 746, 747, 753, 754, 755, 757, 781, 782, 783, 785, 828, 829, 830, 832, 961, 962, 963, 965, 994, 995, 996, 998, 1024, 1025, 1035, 1049, 1051, 1122], "docstr": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 352, 353, 354, 355, 360, 364, 368, 409, 420, 428, 437, 438, 439, 440, 441, 515, 516, 517, 528, 529, 530, 532, 533, 536, 544, 549, 553, 556, 573, 576, 577, 578, 579, 580, 585, 610, 611, 612, 614, 662, 693, 696, 709, 712, 725, 728, 729, 732, 738, 739, 740, 741, 743, 744, 745, 746, 747, 753, 754, 755, 757, 781, 782, 783, 785, 828, 829, 830, 832, 874, 881, 960, 961, 962, 963, 965, 974, 977, 978, 981, 994, 995, 996, 997, 998, 1049, 1051, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1113, 1114, 1117], "also": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 174, 175, 179, 180, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 349, 350, 351, 354, 355, 356, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 409, 420, 428, 437, 438, 439, 440, 441, 515, 516, 517, 528, 529, 530, 532, 533, 536, 544, 549, 553, 556, 573, 576, 577, 578, 579, 580, 585, 610, 611, 612, 614, 662, 693, 696, 709, 712, 725, 728, 729, 732, 738, 739, 740, 741, 743, 744, 745, 746, 747, 752, 753, 754, 755, 757, 780, 781, 782, 783, 785, 796, 826, 828, 829, 830, 832, 833, 835, 861, 864, 870, 873, 874, 881, 960, 961, 962, 963, 965, 974, 977, 978, 981, 994, 995, 996, 997, 998, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1034, 1035, 1036, 1042, 1043, 1046, 1049, 1051, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1113, 1114, 1117, 1143, 1153], "appli": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 117, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 179, 180, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 350, 351, 352, 356, 357, 359, 360, 362, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 385, 387, 398, 399, 400, 401, 402, 403, 404, 405, 428, 437, 438, 439, 441, 456, 516, 517, 529, 530, 532, 544, 549, 577, 578, 579, 611, 612, 614, 662, 739, 740, 741, 744, 745, 746, 747, 752, 753, 754, 755, 757, 774, 775, 776, 781, 782, 783, 785, 826, 828, 829, 830, 832, 843, 845, 847, 849, 861, 870, 872, 873, 874, 895, 904, 906, 913, 915, 944, 945, 948, 950, 953, 955, 958, 960, 961, 962, 963, 965, 994, 995, 996, 998, 1004, 1007, 1020, 1021, 1022, 1024, 1030, 1033, 1036, 1037, 1042, 1043, 1046, 1049, 1051, 1122, 1129, 1130, 1131, 1157, 1158], "minim": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 356, 367, 370, 437, 438, 439, 441, 516, 517, 529, 530, 532, 544, 549, 577, 578, 579, 611, 612, 614, 662, 739, 740, 741, 744, 745, 746, 747, 753, 754, 755, 757, 781, 782, 783, 785, 828, 829, 830, 832, 961, 962, 963, 965, 994, 995, 996, 998, 1049, 1051], "chang": [2, 3, 6, 7, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 176, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 350, 351, 352, 353, 356, 358, 359, 364, 370, 374, 387, 437, 438, 439, 441, 465, 516, 517, 529, 530, 532, 544, 549, 577, 578, 579, 611, 612, 614, 662, 739, 740, 741, 744, 745, 746, 747, 753, 754, 755, 757, 781, 782, 783, 785, 828, 829, 830, 832, 874, 878, 880, 960, 961, 962, 963, 965, 990, 993, 994, 995, 996, 998, 1024, 1026, 1036, 1049, 1051, 1122, 1128], "return": [2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 160, 164, 165, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 355, 356, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 464, 465, 474, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1034, 1035, 1036, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1127, 1132, 1133, 1143, 1152, 1153, 1159, 1163], "type": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 154, 155, 156, 157, 158, 159, 160, 166, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 354, 355, 356, 357, 362, 363, 364, 366, 367, 368, 370, 372, 373, 375, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 464, 465, 481, 482, 483, 484, 485, 487, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 763, 764, 765, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 792, 794, 795, 796, 798, 799, 800, 801, 805, 808, 809, 810, 811, 814, 816, 817, 818, 820, 821, 822, 824, 825, 826, 828, 829, 830, 831, 832, 833, 835, 836, 838, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1034, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154], "aco": [2, 128, 129, 184, 317, 318, 515, 524, 1122], "acosh": [2, 128, 129, 184, 317, 318, 428, 449, 450, 515, 523, 584, 588, 1122], "adam_step": [2, 132, 133, 184, 277, 321, 322, 826, 832], "mw": [2, 6, 132, 133, 184, 188, 277, 321, 322, 374, 826, 828, 829, 830, 831, 832, 833, 835], "vw": [2, 6, 132, 133, 184, 188, 277, 321, 322, 374, 826, 828, 829, 830, 831, 832, 833, 835], "step": [2, 6, 132, 133, 176, 179, 180, 184, 188, 189, 236, 277, 278, 289, 321, 322, 350, 351, 353, 357, 361, 363, 364, 365, 366, 370, 373, 374, 375, 386, 409, 410, 418, 419, 465, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 843, 844, 845, 846, 847, 849, 851, 853, 1020, 1021, 1022, 1023, 1122, 1159, 1160, 1161, 1162, 1163, 1164], "beta1": [2, 6, 132, 133, 184, 188, 189, 236, 277, 278, 289, 321, 322, 374, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 843, 844, 845, 846, 1159, 1160, 1161], "0": [2, 6, 10, 26, 28, 29, 30, 36, 44, 47, 56, 88, 99, 100, 106, 107, 110, 112, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 144, 145, 154, 155, 160, 164, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 193, 210, 211, 212, 214, 215, 224, 227, 236, 237, 238, 262, 266, 276, 277, 278, 279, 280, 283, 284, 287, 289, 290, 293, 294, 295, 299, 300, 301, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 351, 355, 356, 357, 370, 372, 373, 374, 375, 398, 400, 401, 402, 403, 404, 405, 409, 410, 414, 418, 419, 423, 424, 425, 426, 427, 428, 434, 437, 439, 440, 441, 448, 465, 467, 470, 474, 477, 481, 484, 485, 487, 490, 491, 492, 493, 494, 495, 496, 497, 499, 503, 506, 508, 509, 513, 515, 516, 519, 520, 523, 524, 527, 528, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 561, 564, 569, 572, 573, 576, 577, 578, 579, 580, 581, 584, 585, 588, 597, 602, 606, 609, 610, 611, 612, 614, 621, 622, 625, 646, 649, 650, 653, 658, 661, 662, 682, 683, 684, 687, 689, 692, 693, 696, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 760, 761, 764, 765, 767, 769, 770, 771, 777, 780, 781, 784, 785, 790, 799, 805, 808, 809, 814, 820, 821, 822, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 843, 844, 845, 846, 847, 848, 849, 850, 861, 862, 864, 866, 867, 868, 873, 874, 875, 877, 878, 880, 881, 884, 885, 886, 893, 923, 929, 931, 932, 933, 934, 938, 940, 944, 945, 948, 950, 953, 955, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 981, 982, 985, 986, 989, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1016, 1018, 1024, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1101, 1102, 1103, 1104, 1105, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1117, 1122, 1134, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1165, 1166], "9": [2, 6, 7, 28, 128, 129, 132, 133, 142, 143, 181, 182, 184, 188, 189, 190, 236, 277, 278, 279, 289, 293, 317, 318, 321, 322, 335, 336, 353, 357, 373, 374, 515, 528, 529, 530, 532, 553, 556, 557, 560, 662, 682, 683, 709, 712, 725, 728, 729, 732, 752, 780, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 843, 844, 845, 846, 861, 864, 867, 868, 874, 878, 880, 881, 884, 886, 910, 912, 923, 929, 931, 960, 961, 962, 964, 978, 981, 986, 989, 994, 997, 999, 1047, 1048, 1049, 1050, 1051, 1059, 1063, 1064, 1065, 1080, 1081, 1084, 1108, 1159, 1160, 1161], "beta2": [2, 6, 132, 133, 184, 188, 189, 236, 277, 278, 289, 321, 322, 374, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 843, 844, 845, 846, 1159, 1160, 1161], "999": [2, 6, 132, 133, 184, 188, 189, 236, 277, 278, 289, 300, 306, 317, 318, 321, 322, 374, 515, 544, 549, 743, 744, 746, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 843, 844, 845, 846, 1159, 1160, 1161], "epsilon": [2, 6, 18, 34, 56, 95, 132, 133, 140, 141, 144, 145, 184, 188, 189, 203, 218, 236, 238, 272, 277, 278, 282, 285, 289, 297, 321, 322, 329, 330, 333, 334, 360, 364, 367, 374, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 843, 844, 845, 846, 874, 895, 904, 906, 913, 915, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 1042, 1043, 1044, 1045, 1046, 1157, 1158, 1159, 1160, 1161], "1e": [2, 6, 18, 34, 56, 95, 132, 133, 140, 141, 144, 145, 184, 188, 189, 203, 218, 236, 238, 272, 277, 278, 282, 285, 289, 297, 321, 322, 329, 330, 333, 334, 360, 364, 367, 374, 375, 752, 788, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 843, 844, 845, 846, 874, 923, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 1042, 1043, 1044, 1045, 1046, 1122, 1159, 1160, 1161, 1162, 1164], "07": [2, 6, 18, 34, 95, 132, 133, 140, 141, 184, 188, 189, 203, 218, 236, 272, 277, 278, 282, 285, 289, 297, 321, 322, 329, 330, 374, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 843, 844, 845, 846, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 1159, 1160, 1161], "exampl": [2, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 160, 164, 165, 166, 172, 176, 181, 182, 184, 188, 190, 191, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 347, 348, 350, 351, 352, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 373, 374, 375, 386, 387, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 416, 417, 420, 422, 423, 426, 427, 428, 434, 437, 438, 439, 440, 441, 449, 450, 465, 484, 485, 487, 499, 500, 501, 502, 503, 506, 508, 510, 512, 513, 515, 528, 529, 530, 532, 533, 536, 544, 549, 552, 553, 556, 557, 560, 569, 572, 573, 576, 577, 578, 579, 580, 581, 585, 597, 602, 610, 611, 612, 614, 618, 621, 622, 625, 638, 641, 662, 682, 683, 689, 692, 693, 696, 709, 712, 725, 728, 729, 732, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 752, 753, 754, 755, 756, 757, 760, 761, 769, 770, 777, 780, 781, 782, 783, 784, 785, 788, 799, 814, 815, 820, 821, 822, 826, 828, 829, 830, 831, 832, 861, 862, 864, 866, 867, 868, 873, 874, 875, 877, 878, 880, 881, 884, 886, 893, 904, 906, 910, 912, 923, 929, 931, 932, 934, 944, 945, 948, 950, 953, 955, 958, 960, 961, 962, 963, 964, 965, 966, 969, 974, 977, 978, 981, 986, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1081, 1084, 1101, 1104, 1105, 1108, 1113, 1114, 1117, 1122], "With": [2, 6, 10, 130, 131, 132, 133, 175, 176, 179, 180, 181, 182, 184, 193, 279, 280, 284, 287, 293, 295, 299, 300, 317, 318, 319, 320, 331, 332, 335, 336, 350, 357, 359, 370, 398, 400, 401, 402, 403, 404, 405, 409, 420, 428, 437, 440, 465, 487, 503, 515, 528, 532, 533, 536, 544, 549, 553, 556, 573, 576, 577, 580, 585, 597, 610, 621, 622, 625, 662, 682, 683, 689, 692, 693, 696, 709, 712, 725, 728, 729, 732, 738, 739, 743, 744, 747, 752, 753, 754, 755, 756, 757, 761, 769, 770, 777, 780, 781, 784, 785, 815, 820, 821, 822, 826, 828, 829, 831, 861, 864, 867, 868, 873, 874, 875, 877, 878, 880, 881, 884, 886, 900, 902, 929, 931, 944, 945, 948, 955, 958, 960, 961, 964, 965, 974, 977, 978, 981, 986, 989, 994, 997, 998, 999, 1008, 1011, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1081, 1084, 1108, 1113, 1114, 1117], "input": [2, 6, 117, 120, 121, 132, 133, 179, 180, 181, 182, 183, 184, 188, 277, 279, 280, 284, 287, 293, 295, 299, 300, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 387, 388, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 437, 440, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 460, 465, 474, 475, 484, 485, 486, 487, 489, 490, 493, 497, 503, 509, 510, 515, 516, 519, 520, 523, 524, 527, 528, 531, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 739, 742, 743, 744, 747, 748, 751, 752, 753, 756, 757, 758, 760, 761, 762, 764, 765, 767, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 785, 789, 791, 792, 794, 795, 796, 798, 799, 800, 801, 805, 808, 809, 814, 815, 818, 820, 821, 822, 824, 825, 826, 828, 829, 830, 831, 832, 837, 842, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 998, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1157, 1158], "dcdw": [2, 6, 132, 133, 184, 188, 189, 230, 236, 237, 277, 278, 288, 289, 290, 321, 322, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850], "1": [2, 6, 7, 10, 12, 25, 26, 28, 33, 34, 36, 47, 49, 56, 88, 94, 95, 106, 107, 113, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 152, 153, 160, 166, 172, 175, 176, 179, 180, 181, 182, 184, 188, 190, 193, 195, 210, 211, 212, 218, 227, 229, 238, 262, 266, 271, 272, 277, 279, 280, 281, 283, 284, 285, 287, 293, 294, 295, 296, 297, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 353, 357, 360, 364, 367, 368, 369, 370, 372, 373, 374, 375, 387, 398, 400, 401, 402, 403, 405, 409, 410, 417, 418, 419, 420, 422, 423, 427, 428, 434, 437, 438, 439, 440, 441, 448, 465, 469, 472, 474, 479, 484, 485, 487, 489, 493, 497, 499, 502, 503, 510, 515, 520, 523, 524, 527, 528, 529, 530, 532, 533, 536, 544, 545, 548, 549, 553, 556, 557, 560, 569, 572, 573, 576, 577, 578, 579, 580, 581, 584, 585, 588, 597, 602, 606, 609, 610, 611, 612, 614, 618, 621, 622, 625, 638, 641, 646, 649, 650, 653, 654, 657, 658, 661, 662, 682, 683, 689, 692, 693, 696, 701, 704, 709, 712, 713, 716, 717, 720, 725, 728, 729, 732, 738, 739, 740, 741, 743, 744, 745, 746, 747, 752, 753, 754, 755, 756, 757, 760, 761, 769, 770, 777, 780, 781, 782, 783, 784, 785, 799, 805, 808, 809, 814, 815, 817, 820, 821, 822, 824, 826, 828, 829, 830, 831, 832, 861, 862, 863, 864, 865, 866, 867, 868, 869, 873, 874, 875, 877, 878, 879, 880, 881, 884, 885, 886, 893, 904, 906, 910, 912, 920, 922, 923, 929, 931, 932, 934, 935, 936, 937, 938, 940, 944, 945, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 969, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1024, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1084, 1085, 1088, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1165, 1166], "3": [2, 6, 7, 10, 25, 28, 47, 49, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 181, 182, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 350, 353, 357, 361, 364, 370, 372, 373, 374, 375, 398, 400, 401, 402, 403, 408, 409, 417, 420, 423, 426, 427, 428, 437, 438, 439, 440, 441, 465, 484, 487, 503, 510, 515, 528, 529, 530, 532, 533, 536, 544, 549, 553, 556, 569, 572, 573, 576, 577, 579, 580, 585, 597, 602, 610, 611, 612, 614, 618, 621, 622, 625, 638, 641, 662, 682, 683, 689, 692, 693, 696, 709, 712, 725, 728, 729, 732, 738, 739, 741, 743, 744, 746, 747, 752, 753, 754, 755, 760, 761, 770, 777, 780, 781, 782, 783, 784, 785, 814, 815, 820, 822, 826, 828, 829, 830, 831, 832, 861, 862, 863, 864, 866, 867, 868, 873, 874, 875, 877, 878, 880, 881, 884, 886, 893, 904, 906, 910, 912, 923, 929, 931, 932, 934, 941, 943, 944, 945, 948, 955, 958, 960, 961, 962, 963, 964, 965, 966, 969, 974, 977, 978, 981, 986, 989, 990, 993, 994, 996, 997, 998, 999, 1000, 1003, 1008, 1011, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1081, 1084, 1085, 1088, 1105, 1108, 1113, 1114, 1117, 1122], "2": [2, 6, 7, 10, 25, 26, 28, 36, 47, 49, 88, 106, 107, 108, 114, 124, 125, 128, 129, 130, 131, 132, 133, 138, 139, 142, 143, 160, 164, 179, 180, 181, 182, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 350, 351, 353, 357, 361, 364, 368, 369, 370, 372, 373, 374, 375, 387, 398, 400, 401, 402, 403, 405, 408, 409, 416, 417, 420, 422, 423, 427, 428, 434, 437, 438, 439, 440, 441, 465, 484, 485, 487, 499, 501, 503, 510, 515, 528, 529, 530, 532, 533, 536, 541, 544, 545, 548, 549, 553, 556, 557, 560, 569, 572, 573, 576, 577, 578, 579, 580, 581, 585, 597, 602, 610, 611, 612, 614, 618, 621, 622, 625, 638, 641, 658, 661, 662, 682, 683, 689, 692, 693, 696, 709, 712, 725, 728, 729, 732, 738, 739, 740, 741, 743, 744, 745, 746, 747, 752, 753, 754, 755, 756, 760, 761, 764, 765, 767, 770, 777, 780, 781, 782, 783, 784, 785, 799, 814, 815, 820, 826, 828, 829, 830, 831, 832, 861, 864, 865, 866, 867, 868, 873, 874, 875, 877, 878, 880, 881, 884, 885, 886, 893, 895, 896, 899, 900, 902, 904, 906, 910, 912, 913, 915, 916, 918, 923, 929, 930, 931, 932, 934, 938, 939, 940, 944, 945, 948, 955, 958, 960, 961, 962, 963, 964, 965, 966, 969, 974, 977, 978, 981, 986, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1008, 1011, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1081, 1084, 1085, 1088, 1108, 1113, 1114, 1117, 1122], "6": [2, 6, 7, 26, 28, 128, 129, 132, 133, 142, 143, 181, 182, 184, 190, 211, 279, 287, 293, 317, 318, 319, 320, 335, 336, 353, 357, 361, 364, 372, 373, 374, 398, 400, 401, 403, 409, 417, 465, 487, 503, 515, 528, 529, 530, 532, 533, 536, 553, 556, 557, 560, 573, 576, 577, 578, 579, 580, 585, 597, 610, 621, 622, 625, 662, 682, 683, 689, 692, 709, 712, 725, 728, 729, 732, 738, 743, 752, 761, 770, 780, 781, 784, 785, 815, 820, 826, 828, 829, 831, 861, 864, 867, 868, 873, 874, 878, 880, 881, 884, 886, 910, 912, 923, 929, 931, 944, 945, 948, 955, 958, 960, 961, 962, 964, 966, 969, 974, 977, 978, 981, 986, 989, 990, 993, 994, 997, 999, 1008, 1011, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1059, 1060, 1063, 1064, 1065, 1066, 1080, 1081, 1084, 1085, 1088, 1108], "adam_step_delta": [2, 6, 132, 133, 184, 188, 277, 321, 322, 826, 828, 829, 830, 831, 832], "print": [2, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 160, 164, 165, 166, 172, 179, 180, 181, 182, 183, 184, 190, 191, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 347, 348, 350, 357, 364, 370, 372, 373, 374, 398, 400, 401, 402, 403, 404, 405, 409, 416, 417, 420, 422, 423, 426, 427, 428, 434, 437, 438, 439, 440, 441, 449, 450, 465, 485, 499, 500, 501, 502, 503, 505, 508, 512, 515, 528, 529, 530, 532, 533, 536, 544, 549, 552, 553, 556, 557, 560, 569, 572, 573, 576, 577, 578, 579, 580, 581, 585, 597, 602, 610, 611, 612, 614, 618, 621, 622, 625, 638, 641, 662, 682, 683, 689, 692, 693, 696, 709, 712, 725, 728, 729, 732, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 752, 753, 754, 755, 756, 757, 760, 761, 769, 770, 777, 780, 781, 782, 783, 784, 785, 788, 806, 814, 815, 820, 821, 822, 826, 828, 829, 831, 832, 861, 862, 864, 866, 867, 868, 873, 874, 875, 877, 878, 880, 881, 884, 886, 893, 910, 912, 923, 929, 931, 932, 934, 944, 945, 948, 950, 953, 955, 958, 960, 961, 962, 963, 964, 965, 974, 977, 978, 981, 986, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1008, 1011, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1081, 1084, 1085, 1088, 1101, 1104, 1105, 1108, 1113, 1114, 1117, 1122], "639": [2, 6, 132, 133, 826, 828, 829, 831], "11": [2, 6, 132, 133, 181, 182, 184, 190, 279, 293, 317, 318, 335, 336, 357, 364, 515, 528, 530, 532, 553, 556, 662, 709, 712, 752, 770, 780, 828, 829, 874, 884, 886, 910, 912, 944, 955, 958, 960, 978, 981, 986, 989, 1047, 1049, 1050, 1051, 1059, 1063, 1064, 1065, 1080, 1081, 1084, 1108], "32": [2, 6, 132, 133, 373, 398, 400, 515, 573, 576, 828, 829, 861, 864, 867, 874, 910, 912, 1059, 1063, 1080, 1081, 1084, 1108], "63": [2, 6, 132, 133, 515, 725, 728, 828, 829, 874, 875, 877, 910, 912, 1080, 1081, 1084, 1108], "00121": [2, 6, 132, 133, 828, 829], "0102": [2, 6, 132, 133, 828, 829], "0397": [2, 6, 132, 133, 828, 829], "add": [2, 8, 128, 129, 158, 159, 179, 180, 181, 182, 184, 191, 279, 280, 317, 318, 319, 320, 347, 348, 350, 351, 352, 354, 355, 356, 360, 361, 363, 364, 368, 370, 372, 387, 515, 532, 662, 753, 757, 1042, 1043, 1046, 1122, 1128, 1157, 1158], "x2": [2, 7, 10, 16, 19, 21, 22, 23, 24, 33, 37, 41, 48, 50, 51, 57, 58, 63, 64, 66, 67, 68, 75, 77, 78, 82, 85, 93, 101, 108, 113, 128, 129, 130, 131, 138, 139, 179, 180, 184, 190, 193, 201, 204, 206, 207, 208, 209, 219, 221, 228, 231, 232, 239, 240, 245, 246, 248, 249, 250, 254, 256, 260, 263, 279, 280, 286, 291, 298, 302, 317, 318, 319, 320, 327, 328, 357, 368, 428, 460, 465, 503, 515, 528, 529, 530, 531, 532, 545, 546, 547, 548, 553, 554, 555, 556, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 589, 590, 591, 592, 593, 594, 595, 596, 597, 605, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 638, 639, 640, 641, 642, 643, 644, 645, 662, 663, 664, 665, 666, 667, 668, 669, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 694, 695, 696, 701, 702, 703, 704, 705, 706, 707, 708, 733, 734, 735, 736, 737, 752, 753, 754, 755, 756, 757, 861, 866, 874, 878, 879, 880, 896, 897, 898, 899, 910, 911, 912, 920, 921, 922, 929, 930, 931, 935, 936, 937, 1059, 1063], "x": [2, 7, 25, 26, 28, 47, 49, 88, 99, 106, 107, 117, 120, 121, 124, 125, 128, 129, 130, 131, 142, 143, 160, 164, 172, 179, 180, 181, 182, 184, 190, 210, 211, 212, 227, 229, 266, 276, 279, 281, 283, 284, 287, 293, 295, 296, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 331, 332, 335, 336, 341, 342, 353, 355, 356, 357, 360, 361, 364, 367, 368, 370, 372, 373, 374, 375, 398, 399, 400, 401, 402, 403, 404, 405, 409, 411, 413, 415, 417, 420, 421, 423, 424, 425, 426, 427, 428, 434, 436, 437, 438, 439, 440, 441, 446, 465, 484, 485, 486, 487, 490, 491, 499, 503, 508, 510, 515, 516, 519, 520, 523, 524, 527, 528, 529, 530, 532, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 573, 576, 577, 578, 579, 580, 581, 584, 585, 588, 597, 598, 601, 602, 606, 609, 610, 611, 612, 614, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 646, 649, 650, 653, 654, 657, 658, 661, 662, 670, 673, 682, 683, 689, 692, 697, 700, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 760, 761, 762, 764, 765, 767, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 791, 792, 794, 795, 796, 798, 799, 800, 801, 805, 814, 815, 818, 820, 821, 822, 824, 825, 826, 837, 842, 856, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 900, 902, 903, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 923, 925, 926, 928, 929, 931, 932, 934, 938, 940, 944, 945, 948, 950, 953, 955, 958, 960, 961, 962, 963, 964, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1024, 1025, 1030, 1034, 1035, 1036, 1042, 1043, 1046, 1047, 1049, 1050, 1051, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1074, 1075, 1078, 1079, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1143, 1154], "y": [2, 7, 10, 26, 28, 47, 49, 88, 106, 107, 128, 129, 130, 131, 142, 143, 181, 182, 184, 190, 193, 211, 212, 227, 229, 266, 279, 280, 284, 287, 293, 295, 299, 300, 305, 306, 317, 318, 319, 320, 331, 332, 335, 336, 355, 357, 361, 364, 370, 372, 398, 400, 401, 402, 403, 404, 405, 409, 416, 417, 420, 422, 423, 427, 428, 434, 465, 485, 499, 503, 508, 515, 528, 529, 530, 532, 533, 536, 544, 545, 548, 549, 553, 556, 557, 560, 569, 572, 573, 576, 577, 578, 579, 580, 581, 585, 597, 602, 610, 611, 612, 614, 621, 622, 625, 662, 682, 683, 689, 692, 693, 696, 709, 712, 725, 728, 729, 732, 738, 739, 740, 741, 743, 744, 745, 746, 747, 752, 753, 754, 755, 756, 757, 760, 761, 769, 770, 777, 778, 780, 781, 782, 783, 784, 785, 814, 820, 821, 822, 826, 837, 861, 867, 868, 870, 874, 875, 877, 878, 880, 881, 893, 910, 912, 929, 931, 932, 934, 944, 945, 948, 950, 953, 955, 958, 960, 961, 962, 963, 964, 965, 966, 969, 974, 977, 978, 981, 986, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1008, 1011, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1069, 1070, 1073, 1080, 1081, 1084, 1085, 1088, 1101, 1104, 1105, 1108, 1113, 1114, 1117], "4": [2, 7, 28, 128, 129, 142, 143, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 190, 210, 211, 212, 227, 229, 266, 277, 279, 283, 284, 287, 293, 295, 299, 300, 305, 306, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 353, 357, 361, 364, 370, 372, 373, 374, 375, 398, 400, 401, 403, 409, 417, 420, 423, 427, 428, 437, 439, 440, 441, 465, 487, 503, 515, 528, 529, 530, 532, 533, 536, 544, 545, 548, 549, 553, 556, 573, 576, 577, 579, 580, 585, 597, 610, 612, 614, 621, 622, 625, 662, 682, 683, 689, 692, 693, 696, 709, 712, 725, 728, 729, 732, 738, 739, 741, 743, 744, 746, 747, 752, 761, 770, 779, 780, 781, 783, 784, 785, 815, 820, 826, 828, 830, 831, 832, 861, 864, 865, 866, 868, 871, 873, 874, 878, 880, 881, 884, 886, 893, 904, 906, 910, 912, 929, 931, 932, 934, 944, 955, 958, 960, 961, 962, 963, 964, 965, 966, 969, 974, 977, 978, 981, 986, 989, 990, 993, 994, 996, 997, 998, 999, 1008, 1011, 1042, 1043, 1046, 1047, 1048, 1049, 1051, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1081, 1084, 1085, 1088, 1108, 1113, 1114, 1117, 1122, 1159, 1160, 1161, 1162, 1164], "5": [2, 7, 10, 26, 28, 47, 128, 129, 130, 131, 142, 143, 181, 182, 184, 188, 190, 210, 211, 212, 227, 266, 277, 279, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 351, 353, 357, 361, 368, 372, 373, 374, 398, 400, 401, 403, 409, 417, 420, 423, 426, 427, 428, 437, 439, 440, 441, 465, 487, 503, 515, 528, 529, 530, 532, 533, 536, 544, 549, 552, 553, 556, 569, 572, 573, 576, 577, 578, 579, 580, 585, 597, 610, 611, 612, 614, 621, 622, 625, 662, 682, 683, 689, 692, 693, 696, 709, 712, 725, 728, 729, 732, 738, 739, 741, 742, 743, 744, 746, 747, 752, 753, 754, 761, 770, 780, 781, 784, 785, 815, 820, 826, 828, 830, 831, 832, 861, 864, 866, 867, 873, 874, 875, 877, 878, 880, 881, 884, 886, 893, 910, 912, 929, 931, 932, 934, 944, 955, 958, 960, 961, 962, 963, 964, 965, 966, 969, 974, 977, 978, 981, 986, 989, 990, 993, 994, 996, 997, 998, 999, 1008, 1011, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1081, 1084, 1085, 1088, 1108, 1113, 1114, 1117, 1143, 1154], "z": [2, 7, 49, 128, 129, 130, 131, 181, 182, 184, 190, 229, 279, 287, 317, 318, 319, 320, 357, 361, 364, 370, 372, 465, 499, 515, 528, 529, 530, 532, 553, 556, 573, 576, 597, 621, 622, 625, 662, 682, 683, 752, 760, 761, 780, 781, 782, 783, 785, 814, 874, 878, 880, 944, 945, 948, 950, 953, 960, 961, 964, 1059, 1060, 1080, 1081, 1084, 1085, 1088, 1108], "7": [2, 7, 28, 128, 129, 142, 143, 181, 182, 184, 190, 279, 293, 317, 318, 335, 336, 351, 353, 357, 360, 364, 367, 398, 400, 401, 465, 487, 515, 528, 529, 530, 532, 553, 556, 557, 560, 573, 576, 577, 580, 585, 597, 602, 610, 621, 622, 625, 662, 682, 683, 709, 712, 725, 728, 738, 743, 752, 761, 770, 780, 826, 828, 831, 833, 835, 843, 845, 861, 867, 868, 873, 874, 878, 880, 881, 884, 886, 910, 912, 929, 931, 944, 945, 948, 950, 953, 955, 958, 960, 961, 962, 964, 974, 977, 978, 981, 986, 989, 999, 1008, 1011, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1059, 1063, 1064, 1065, 1080, 1081, 1084, 1108], "add_ivy_array_instance_method": [2, 158], "cl": [2, 8, 158, 159, 184, 191, 347, 348], "modul": [2, 8, 158, 159, 160, 164, 165, 176, 179, 180, 181, 182, 183, 184, 191, 347, 348, 350, 353, 359, 360, 361, 363, 367, 370, 371, 373, 375, 386, 387, 752, 803, 1047, 1048, 1052, 1122, 1129, 1130, 1131, 1132, 1133, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1157, 1158, 1165, 1166], "to_ignor": [2, 8, 158, 159, 184, 191, 347, 348, 1024, 1035], "loop": [2, 8, 158, 159, 184, 191, 347, 348, 361, 387, 1020, 1021, 1022, 1023], "over": [2, 8, 158, 159, 160, 164, 174, 176, 179, 180, 184, 191, 347, 348, 350, 356, 357, 361, 367, 372, 387, 874, 900, 902, 929, 931, 935, 937, 938, 940, 1042, 1043, 1046, 1047, 1053, 1055, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1157, 1158], "all": [2, 8, 117, 118, 119, 120, 121, 156, 157, 158, 159, 174, 175, 176, 179, 180, 184, 191, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 386, 387, 388, 396, 406, 407, 409, 410, 424, 425, 465, 474, 499, 505, 752, 753, 756, 760, 761, 786, 806, 821, 861, 871, 874, 920, 922, 929, 931, 938, 940, 960, 978, 981, 994, 997, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1035, 1036, 1037, 1047, 1048, 1053, 1055, 1113, 1122, 1125, 1127], "gener": [2, 8, 131, 158, 159, 179, 180, 184, 191, 320, 347, 348, 351, 352, 353, 354, 355, 356, 357, 360, 363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 386, 387, 406, 409, 410, 418, 419, 428, 437, 440, 515, 533, 536, 573, 576, 577, 580, 585, 610, 693, 696, 705, 708, 725, 728, 729, 732, 753, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 842, 960, 974, 977, 994, 997, 1047, 1048, 1049, 1050, 1053, 1055, 1057, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1122, 1159, 1163], "etc": [2, 8, 158, 159, 176, 179, 180, 184, 191, 347, 348, 350, 351, 352, 355, 357, 359, 363, 364, 365, 368, 370, 372, 373, 387, 409, 418, 419, 752, 780, 781, 784, 805, 808, 809, 1047, 1048, 1049, 1050, 1053, 1055, 1064, 1065, 1066, 1068, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1165, 1166], "us": [2, 8, 158, 159, 160, 165, 172, 175, 176, 179, 180, 181, 182, 183, 184, 191, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 374, 375, 386, 387, 398, 400, 401, 402, 403, 404, 405, 408, 428, 447, 465, 474, 475, 500, 504, 507, 508, 509, 510, 512, 514, 515, 533, 536, 553, 556, 573, 576, 585, 597, 621, 622, 625, 682, 683, 689, 692, 693, 696, 709, 712, 725, 728, 752, 780, 787, 788, 802, 808, 809, 810, 811, 816, 817, 826, 828, 831, 833, 835, 843, 845, 847, 849, 861, 867, 869, 870, 872, 873, 874, 881, 884, 886, 900, 902, 944, 945, 948, 960, 974, 977, 978, 981, 986, 989, 994, 997, 1008, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1033, 1034, 1035, 1037, 1042, 1043, 1046, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1080, 1081, 1084, 1108, 1113, 1114, 1117, 1122, 1143, 1151, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162], "_wrap_funct": [2, 8, 158, 159, 184, 191, 347, 348, 360, 362], "paramet": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 164, 165, 179, 180, 181, 182, 183, 184, 191, 347, 348, 355, 356, 359, 372, 373, 386, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 474, 475, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 753, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 828, 831, 833, 835, 837, 838, 840, 842, 843, 845, 847, 849, 851, 853, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1125, 1127, 1132, 1133, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "we": [2, 8, 158, 159, 160, 165, 166, 172, 173, 174, 175, 176, 184, 191, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 386, 387, 826, 837, 1122, 1128], "want": [2, 8, 158, 159, 160, 165, 175, 184, 191, 347, 348, 349, 350, 351, 359, 373, 374, 375, 387], "list": [2, 8, 117, 118, 119, 120, 121, 158, 159, 179, 180, 184, 188, 191, 277, 321, 322, 347, 348, 350, 352, 353, 355, 357, 365, 366, 368, 370, 373, 374, 375, 387, 409, 410, 411, 412, 420, 421, 422, 426, 428, 435, 465, 474, 475, 484, 486, 487, 490, 491, 494, 495, 509, 752, 761, 815, 820, 824, 828, 830, 832, 861, 862, 863, 864, 865, 866, 867, 868, 874, 929, 931, 960, 966, 969, 978, 981, 999, 1004, 1007, 1024, 1025, 1026, 1030, 1035, 1036, 1042, 1043, 1046, 1059, 1062, 1113, 1114, 1117, 1118, 1121, 1122, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "option": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 165, 179, 180, 181, 182, 184, 191, 347, 348, 350, 351, 355, 356, 357, 360, 364, 365, 366, 367, 368, 370, 375, 387, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 436, 442, 443, 444, 445, 452, 464, 465, 484, 508, 509, 510, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 758, 764, 765, 767, 770, 771, 772, 774, 775, 776, 778, 780, 781, 784, 792, 803, 805, 808, 809, 816, 817, 826, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1030, 1035, 1036, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1063, 1064, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "iter": [2, 8, 117, 118, 119, 120, 121, 158, 159, 176, 179, 180, 181, 182, 183, 184, 191, 347, 348, 364, 370, 373, 406, 407, 465, 487, 488, 490, 491, 492, 493, 496, 509, 752, 753, 756, 809, 814, 960, 970, 973, 986, 989, 999, 1012, 1015, 1016, 1019, 1024, 1025, 1026, 1030, 1034, 1035, 1036], "ani": [2, 8, 117, 118, 119, 156, 157, 158, 159, 160, 164, 172, 174, 175, 176, 179, 180, 184, 191, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 406, 407, 409, 411, 421, 428, 437, 440, 465, 510, 515, 528, 533, 536, 577, 580, 594, 597, 610, 621, 622, 625, 642, 645, 693, 696, 725, 728, 729, 732, 738, 752, 753, 756, 773, 774, 775, 776, 777, 780, 791, 798, 799, 800, 801, 816, 817, 826, 837, 861, 864, 871, 873, 960, 994, 997, 1020, 1021, 1022, 1023, 1024, 1030, 1034, 1042, 1043, 1046, 1047, 1053, 1055, 1080, 1085, 1088, 1113, 1114, 1117, 1122], "item": [2, 8, 117, 121, 158, 159, 179, 180, 365, 370, 372, 373, 375, 428, 443, 465, 474, 475, 477, 484, 486, 488, 490, 492, 496, 752, 768, 790, 816, 817, 1024, 1029, 1030, 1031, 1032, 1036, 1040, 1041, 1122, 1155, 1156], "don": [2, 8, 158, 159, 176, 184, 191, 347, 348, 350, 351, 352, 365, 374, 387], "t": [2, 8, 158, 159, 160, 165, 175, 176, 184, 191, 347, 348, 350, 351, 352, 353, 357, 365, 370, 372, 373, 374, 375, 387, 752, 761, 861, 870, 871], "an": [2, 8, 117, 120, 121, 158, 159, 175, 176, 179, 180, 184, 191, 347, 348, 350, 351, 352, 353, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 398, 401, 402, 404, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 437, 440, 448, 453, 454, 456, 465, 487, 491, 510, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 763, 764, 765, 767, 769, 778, 779, 780, 792, 796, 798, 799, 800, 801, 821, 822, 823, 826, 842, 856, 858, 859, 861, 864, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 903, 904, 906, 907, 909, 913, 915, 916, 918, 919, 920, 922, 923, 932, 934, 935, 937, 938, 940, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 990, 993, 994, 997, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1024, 1030, 1042, 1043, 1046, 1047, 1049, 1050, 1058, 1059, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1132, 1133, 1155, 1156, 1159, 1160, 1161, 1163], "default": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 165, 179, 180, 181, 182, 183, 184, 191, 347, 348, 351, 356, 357, 360, 361, 364, 365, 366, 368, 374, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 436, 443, 444, 445, 446, 465, 474, 475, 484, 485, 489, 490, 491, 492, 493, 494, 495, 496, 497, 504, 506, 507, 508, 509, 510, 513, 514, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 753, 756, 758, 764, 765, 767, 770, 771, 774, 775, 776, 778, 779, 780, 781, 784, 789, 790, 791, 792, 793, 796, 797, 798, 799, 801, 802, 803, 805, 807, 808, 809, 812, 814, 816, 817, 824, 825, 826, 828, 831, 833, 835, 837, 838, 840, 842, 843, 845, 847, 849, 851, 853, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1034, 1035, 1036, 1037, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1132, 1133, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "As": [2, 8, 158, 159, 174, 184, 191, 347, 348, 351, 359, 360, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 387, 1064, 1065, 1066, 1068], "shown": [2, 8, 158, 159, 179, 180, 184, 191, 347, 348, 351, 357, 368, 370, 372, 387, 409, 420, 515, 553, 556, 573, 576, 585, 709, 712, 743, 874, 881, 960, 974, 977, 978, 981, 1064, 1065, 1066, 1069, 1070, 1073], "appropri": [2, 8, 158, 159, 184, 191, 347, 348, 351, 362, 515, 528, 684, 687, 1059, 1060], "from": [2, 8, 117, 118, 119, 120, 121, 158, 159, 160, 164, 165, 166, 174, 175, 176, 179, 180, 181, 182, 183, 184, 191, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 409, 410, 411, 413, 415, 416, 417, 420, 421, 423, 427, 428, 437, 440, 456, 465, 474, 475, 484, 499, 503, 508, 509, 515, 618, 725, 728, 752, 773, 780, 781, 784, 820, 826, 833, 835, 843, 845, 861, 869, 872, 874, 884, 886, 923, 935, 937, 960, 978, 981, 990, 993, 1000, 1003, 1020, 1021, 1022, 1023, 1024, 1026, 1036, 1037, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1059, 1063, 1064, 1065, 1067, 1080, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1128, 1132, 1133, 1143, 1151, 1154, 1159, 1163], "our": [2, 8, 158, 159, 174, 175, 184, 191, 347, 348, 349, 350, 351, 357, 364, 369, 372, 373, 374, 375, 387, 1122], "toi": [2, 8, 158, 159, 184, 191, 347, 348], "arrayexampl": [2, 8, 158, 159], "import": [2, 8, 158, 159, 160, 164, 175, 184, 191, 347, 348, 352, 355, 356, 357, 361, 363, 364, 365, 366, 367, 370, 372, 373, 375, 387, 465, 506, 1122, 1128], "pass": [2, 8, 158, 159, 160, 164, 179, 180, 181, 182, 183, 184, 191, 347, 348, 352, 356, 357, 358, 359, 360, 361, 363, 364, 367, 368, 372, 387, 428, 442, 465, 474, 509, 515, 545, 548, 752, 763, 796, 826, 859, 1020, 1021, 1022, 1132, 1133, 1155, 1156, 1159, 1163, 1165, 1166], "hasattr": [2, 8, 158, 159, 184, 191, 347, 348, 372], "relu": [2, 8, 158, 159, 181, 182, 373, 374, 398, 399, 400, 1122], "softmax": [2, 8, 158, 159, 181, 182, 398, 861, 872, 873, 1122], "true": [2, 8, 10, 12, 25, 94, 103, 124, 125, 130, 131, 138, 139, 152, 153, 158, 159, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 357, 359, 360, 364, 365, 367, 370, 372, 373, 374, 375, 398, 399, 406, 407, 409, 418, 428, 434, 437, 438, 439, 440, 441, 465, 484, 501, 505, 506, 515, 516, 518, 522, 523, 524, 526, 530, 531, 532, 533, 535, 537, 539, 543, 544, 545, 547, 549, 551, 553, 555, 556, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 576, 577, 579, 583, 584, 587, 588, 591, 592, 593, 596, 597, 598, 600, 604, 605, 606, 608, 612, 613, 614, 616, 618, 620, 621, 622, 624, 625, 626, 628, 629, 630, 632, 633, 634, 636, 637, 638, 640, 641, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 673, 674, 676, 677, 678, 680, 684, 686, 688, 689, 691, 693, 695, 696, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 734, 736, 739, 741, 742, 744, 746, 747, 748, 750, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 765, 766, 770, 777, 779, 781, 783, 785, 791, 792, 799, 814, 820, 822, 825, 826, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 861, 869, 874, 875, 877, 896, 898, 900, 902, 923, 924, 926, 938, 940, 944, 945, 947, 948, 949, 950, 952, 953, 954, 955, 957, 958, 959, 960, 961, 963, 965, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 999, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1034, 1035, 1037, 1043, 1045, 1047, 1048, 1053, 1054, 1056, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1085, 1087, 1088, 1089, 1091, 1092, 1093, 1095, 1096, 1097, 1099, 1100, 1101, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1120, 1121, 1143, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164], "axi": [2, 9, 11, 12, 29, 33, 34, 44, 46, 72, 73, 74, 83, 86, 88, 94, 95, 98, 99, 100, 102, 112, 113, 114, 138, 139, 140, 141, 142, 143, 152, 153, 154, 155, 156, 157, 179, 180, 184, 192, 194, 195, 214, 218, 224, 226, 251, 252, 253, 261, 264, 266, 271, 272, 275, 276, 281, 285, 295, 296, 297, 301, 303, 309, 329, 330, 331, 332, 341, 342, 343, 344, 345, 346, 357, 360, 364, 365, 367, 368, 370, 372, 375, 386, 398, 403, 409, 418, 419, 465, 467, 470, 477, 490, 491, 492, 493, 494, 495, 496, 497, 509, 752, 770, 771, 780, 824, 874, 878, 879, 880, 884, 886, 935, 936, 937, 938, 939, 940, 944, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 966, 967, 968, 969, 970, 973, 974, 975, 976, 977, 978, 979, 980, 981, 986, 987, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1047, 1058, 1059, 1060, 1061, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121], "keepdim": [2, 9, 11, 69, 72, 73, 74, 83, 100, 102, 112, 114, 138, 139, 154, 155, 156, 157, 179, 180, 184, 192, 194, 251, 252, 253, 261, 301, 303, 309, 343, 344, 345, 346, 752, 824, 874, 900, 901, 902, 938, 939, 940, 1059, 1060, 1061, 1080, 1081, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121], "fals": [2, 9, 10, 11, 12, 27, 69, 72, 73, 74, 83, 94, 100, 102, 112, 114, 117, 118, 119, 120, 121, 130, 131, 138, 139, 152, 153, 154, 155, 156, 157, 160, 167, 168, 169, 170, 171, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 357, 364, 367, 373, 374, 375, 428, 434, 437, 439, 440, 441, 446, 465, 484, 485, 496, 500, 501, 504, 509, 512, 514, 515, 516, 518, 522, 523, 524, 526, 530, 531, 532, 533, 535, 537, 539, 543, 544, 545, 547, 549, 551, 553, 555, 556, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 583, 584, 587, 588, 591, 592, 593, 596, 597, 598, 600, 604, 605, 606, 608, 612, 613, 614, 616, 618, 620, 621, 622, 624, 625, 626, 628, 629, 630, 632, 633, 634, 636, 637, 638, 640, 641, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 673, 674, 676, 677, 678, 680, 684, 686, 688, 689, 691, 693, 695, 696, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 734, 736, 739, 741, 742, 744, 746, 747, 748, 750, 752, 753, 754, 755, 756, 757, 760, 761, 765, 766, 770, 773, 777, 779, 781, 783, 785, 789, 796, 798, 799, 801, 802, 814, 824, 826, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 874, 875, 876, 877, 896, 898, 900, 901, 902, 923, 938, 939, 940, 945, 947, 949, 950, 952, 954, 955, 957, 959, 960, 961, 963, 965, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 999, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1034, 1035, 1036, 1037, 1043, 1045, 1047, 1048, 1053, 1054, 1056, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1132, 1133, 1155, 1156, 1159, 1160, 1161, 1162, 1163, 1164], "all_equ": [2, 130, 131, 184, 280, 319, 320, 752, 757], "equality_matrix": [2, 10, 130, 131, 184, 193, 280, 319, 320, 752, 753, 754, 755, 756, 757], "contain": [2, 10, 117, 120, 121, 130, 131, 174, 177, 178, 179, 180, 183, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 356, 357, 359, 360, 365, 367, 368, 369, 370, 371, 374, 375, 387, 398, 401, 402, 404, 409, 410, 413, 415, 422, 424, 425, 426, 428, 437, 440, 465, 486, 487, 490, 499, 503, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 753, 754, 756, 758, 761, 764, 765, 767, 769, 770, 777, 780, 781, 784, 791, 800, 820, 821, 822, 826, 828, 831, 833, 838, 843, 847, 851, 861, 864, 867, 868, 873, 874, 875, 877, 878, 880, 881, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 970, 974, 977, 978, 981, 982, 985, 986, 989, 990, 994, 997, 999, 1000, 1004, 1008, 1011, 1012, 1016, 1020, 1021, 1022, 1023, 1024, 1037, 1042, 1043, 1046, 1047, 1048, 1049, 1052, 1053, 1055, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1159, 1163, 1165, 1166], "x1": [2, 10, 130, 131, 184, 193, 279, 280, 286, 291, 298, 317, 318, 319, 320, 357, 368, 428, 460, 465, 503, 515, 528, 531, 532, 545, 548, 553, 556, 561, 564, 565, 568, 569, 572, 573, 576, 589, 592, 593, 594, 597, 605, 613, 614, 617, 618, 621, 622, 625, 638, 641, 642, 645, 662, 665, 666, 669, 674, 677, 678, 681, 682, 683, 684, 687, 688, 693, 696, 701, 704, 705, 708, 733, 734, 737, 752, 753, 754, 755, 756, 757, 760, 861, 866, 874, 878, 880, 896, 899, 910, 912, 920, 922, 929, 931, 935, 937, 1059, 1063], "mix": [2, 10, 130, 131, 181, 182, 184, 354, 357, 359, 370, 428, 456, 465, 503, 515, 528, 553, 556, 573, 576, 597, 621, 622, 625, 682, 683, 693, 696, 752, 753, 754, 769, 777, 780, 781, 784, 820, 821, 822, 861, 864, 867, 868, 873, 874, 929, 931, 944, 945, 948, 955, 958, 960, 961, 964, 1042, 1043, 1046, 1059, 1063, 1080, 1081, 1084, 1089, 1092, 1108], "nativearrai": [2, 10, 49, 117, 120, 121, 130, 131, 355, 357, 360, 363, 364, 367, 368, 370, 372, 375, 388, 396, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 411, 413, 417, 418, 419, 420, 421, 423, 424, 425, 427, 428, 434, 435, 436, 437, 440, 446, 448, 451, 453, 454, 456, 460, 465, 484, 485, 487, 503, 509, 510, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 753, 754, 756, 760, 761, 764, 765, 767, 769, 770, 771, 774, 775, 776, 778, 779, 780, 781, 782, 784, 789, 791, 792, 794, 795, 796, 805, 808, 809, 814, 815, 820, 821, 822, 824, 825, 826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1024, 1026, 1036, 1042, 1043, 1046, 1047, 1048, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "native_arrai": [2, 10, 130, 131, 160, 166, 172, 181, 182, 184, 193, 280, 319, 320, 398, 400, 401, 402, 403, 404, 405, 409, 420, 428, 437, 440, 465, 487, 503, 515, 533, 536, 553, 556, 573, 576, 577, 580, 597, 610, 621, 622, 625, 682, 683, 689, 692, 693, 696, 725, 728, 729, 732, 743, 752, 753, 754, 755, 756, 757, 761, 769, 770, 777, 780, 781, 784, 815, 820, 821, 822, 826, 828, 831, 861, 864, 867, 868, 873, 874, 878, 880, 881, 884, 886, 929, 931, 944, 945, 948, 955, 958, 960, 961, 964, 974, 977, 978, 981, 986, 989, 999, 1008, 1011, 1042, 1043, 1046, 1047, 1048, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1080, 1081, 1084, 1085, 1088, 1108, 1113, 1114, 1117], "argsort": [2, 152, 153, 184, 341, 342, 1069], "descend": [2, 12, 94, 152, 153, 184, 195, 271, 281, 296, 341, 342, 874, 923, 925, 926, 928, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079], "stabl": [2, 12, 94, 152, 153, 184, 195, 271, 281, 296, 341, 342, 350, 370, 387, 752, 787, 788, 810, 811, 816, 817, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079], "asin": [2, 128, 129, 184, 317, 318, 515, 1122], "asinh": [2, 128, 129, 184, 317, 318, 515, 1122], "atan": [2, 128, 129, 184, 317, 318, 515, 549, 1122], "atan2": [2, 128, 129, 184, 317, 318, 515, 1122], "atanh": [2, 128, 129, 184, 317, 318, 515, 544, 742, 747, 1122], "binary_cross_entropi": [2, 140, 141, 184, 329, 330, 944], "pred": [2, 18, 34, 95, 140, 141, 184, 203, 218, 272, 282, 285, 297, 329, 330, 360, 364, 367, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959], "bitwise_and": [2, 128, 129, 184, 317, 318, 515], "bitwise_invert": [2, 128, 129, 184, 317, 318, 515], "bitwise_left_shift": [2, 128, 129, 184, 317, 318, 515], "bitwise_or": [2, 128, 129, 184, 317, 318, 515], "bitwise_right_shift": [2, 128, 129, 184, 317, 318, 515], "bitwise_xor": [2, 128, 129, 184, 317, 318, 515], "can_cast": [2, 124, 125, 184, 283, 313, 314, 360, 365, 428, 441], "dtype": [2, 25, 83, 102, 124, 125, 154, 155, 179, 180, 184, 210, 261, 283, 303, 313, 314, 343, 344, 355, 357, 360, 365, 366, 372, 409, 410, 411, 412, 413, 414, 416, 417, 418, 421, 422, 423, 426, 427, 428, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 465, 505, 515, 569, 572, 752, 760, 761, 805, 821, 861, 869, 960, 974, 977, 1042, 1043, 1046, 1047, 1053, 1055, 1059, 1060, 1061, 1069, 1075, 1078, 1080, 1081, 1097, 1098, 1099, 1100, 1101, 1104, 1105, 1106, 1107, 1113, 1114, 1117, 1122, 1134, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1165, 1166], "float32": [2, 25, 124, 125, 184, 210, 283, 313, 314, 357, 365, 428, 432, 433, 437, 438, 439, 440, 441, 449, 1042, 1043, 1046], "float64": [2, 25, 124, 125, 365, 428, 434, 437, 438, 440, 449], "bool": [2, 25, 117, 118, 119, 120, 121, 124, 125, 179, 180, 184, 191, 347, 348, 357, 364, 365, 367, 375, 406, 407, 409, 416, 428, 434, 437, 438, 440, 443, 444, 445, 446, 449, 452, 453, 454, 464, 465, 484, 485, 500, 509, 512, 515, 553, 556, 557, 560, 565, 568, 573, 576, 594, 597, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 666, 669, 670, 673, 674, 677, 693, 696, 752, 753, 756, 760, 761, 770, 773, 777, 779, 789, 791, 796, 798, 799, 800, 801, 814, 824, 825, 826, 856, 874, 875, 877, 900, 902, 923, 938, 940, 960, 999, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1034, 1035, 1036, 1047, 1048, 1059, 1060, 1061, 1069, 1070, 1073, 1075, 1078, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "ceil": [2, 128, 129, 184, 317, 318, 409, 410, 515, 1122], "choleski": [2, 138, 139, 181, 182, 874], "upper": [2, 27, 138, 139, 179, 180, 409, 414, 425, 874, 875, 876, 877, 916, 918, 1047, 1053, 1055], "clip": [2, 142, 143, 179, 180, 184, 284, 331, 332, 360, 364, 367, 370, 373, 375, 515, 682, 683, 752, 764, 765, 767, 960, 965, 1122], "x_min": [2, 28, 142, 143, 179, 180, 184, 212, 284, 331, 332, 370, 375, 960, 961, 962, 963, 964, 965], "x_max": [2, 28, 142, 143, 179, 180, 184, 212, 284, 331, 332, 370, 375, 960, 961, 962, 963, 964, 965], "roll": [2, 28, 142, 143, 184, 295, 331, 332, 364, 368, 960, 961, 962, 998], "8": [2, 28, 142, 143, 181, 182, 184, 279, 293, 317, 318, 335, 336, 350, 353, 357, 364, 369, 373, 398, 402, 465, 487, 515, 528, 532, 553, 556, 577, 580, 585, 597, 621, 622, 625, 662, 682, 683, 709, 712, 725, 728, 729, 732, 743, 752, 761, 780, 826, 828, 831, 861, 868, 874, 878, 880, 881, 884, 886, 910, 912, 929, 931, 944, 945, 948, 960, 961, 962, 964, 978, 981, 986, 989, 999, 1047, 1048, 1049, 1050, 1051, 1059, 1063, 1064, 1065, 1080, 1081, 1084, 1108, 1122, 1143, 1154], "concat": [2, 142, 143, 179, 180, 184, 331, 332, 465, 494, 495, 496, 497, 509, 752, 779, 960, 1122], "xs": [2, 29, 142, 143, 184, 214, 331, 332, 364, 465, 488, 492, 494, 495, 496, 752, 753, 756, 761, 826, 837, 960, 966, 967, 968, 969], "constant_pad": [2, 142, 143, 184, 331, 332, 960], "pad_width": [2, 30, 116, 142, 143, 184, 215, 310, 331, 332, 960, 970, 971, 972, 973, 1016, 1017, 1018, 1019], "valu": [2, 30, 142, 143, 179, 180, 181, 182, 183, 184, 215, 310, 331, 332, 351, 357, 359, 360, 364, 365, 366, 367, 368, 370, 372, 375, 387, 409, 410, 414, 416, 417, 418, 419, 428, 434, 443, 444, 445, 465, 477, 508, 509, 515, 516, 519, 520, 528, 533, 536, 541, 577, 580, 592, 594, 597, 598, 601, 610, 613, 614, 617, 618, 621, 622, 625, 638, 641, 642, 645, 682, 683, 684, 687, 693, 696, 697, 700, 701, 704, 709, 712, 743, 748, 751, 752, 764, 765, 767, 768, 773, 779, 780, 781, 784, 790, 793, 797, 807, 808, 809, 810, 811, 812, 825, 826, 828, 831, 833, 835, 837, 843, 845, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 883, 895, 904, 906, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 938, 940, 960, 961, 964, 970, 971, 972, 973, 986, 989, 990, 993, 1016, 1018, 1019, 1020, 1021, 1022, 1024, 1028, 1029, 1030, 1031, 1032, 1037, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1057, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163], "co": [2, 128, 129, 175, 184, 317, 318, 370, 386, 515, 523, 524, 588, 752, 779, 1122], "cosh": [2, 128, 129, 184, 317, 318, 515, 523, 524, 1122], "cross": [2, 138, 139, 181, 182, 874, 944, 945, 948, 950, 953, 955, 958, 1122], "cross_entropi": [2, 140, 141, 184, 329, 330, 360, 364, 367, 944, 955, 958], "det": [2, 138, 139, 181, 182, 874, 919], "diagon": [2, 138, 139, 181, 182, 409, 414, 424, 425, 874, 932, 934], "offset": [2, 36, 56, 110, 138, 139, 144, 145, 184, 238, 333, 334, 874, 884, 885, 886, 932, 933, 934, 1042, 1043, 1044, 1045, 1046], "axis1": [2, 36, 105, 138, 139, 142, 143, 184, 304, 331, 332, 874, 884, 885, 886, 960, 1008, 1009, 1010, 1011], "axis2": [2, 36, 138, 139, 874, 884, 885, 886], "divid": [2, 128, 129, 179, 180, 184, 317, 318, 357, 363, 515, 613, 614, 617, 752, 816, 960, 999], "eigh": [2, 138, 139, 181, 182, 874], "namedtupl": [2, 38, 84, 138, 139, 874, 887, 888, 889, 916, 917, 918, 923, 1064, 1065, 1066], "eigvalsh": [2, 138, 139, 181, 182, 874], "einsum": [2, 154, 155, 184, 343, 344, 1080, 1108], "equat": [2, 40, 154, 155, 184, 220, 343, 344, 874, 920, 922, 1080, 1081, 1082, 1083, 1084, 1108], "equal": [2, 128, 129, 179, 180, 184, 317, 318, 357, 364, 365, 409, 414, 416, 417, 428, 434, 515, 561, 564, 569, 572, 622, 626, 629, 630, 633, 701, 704, 709, 712, 752, 753, 756, 760, 761, 874, 884, 886, 895, 904, 906, 913, 915, 960, 961, 964, 970, 973, 999, 1016, 1019, 1047, 1053, 1055, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1089, 1092, 1101, 1104, 1105, 1109, 1112], "erf": [2, 128, 129, 184, 317, 318, 515], "exp": [2, 128, 129, 184, 317, 318, 515, 531, 606, 609, 662, 665, 1122], "expand_dim": [2, 142, 143, 184, 331, 332, 370, 373, 960, 1122], "expm1": [2, 128, 129, 184, 317, 318, 515], "flip": [2, 142, 143, 184, 331, 332, 372, 373, 375, 515, 557, 560, 960, 986, 989, 1122], "floor": [2, 128, 129, 184, 317, 318, 515, 569, 572, 614, 752, 778, 1122], "floor_divid": [2, 128, 129, 184, 317, 318, 515, 592, 613], "gather_nd": [2, 130, 131, 179, 180, 184, 287, 319, 320, 752, 785, 1122], "indic": [2, 49, 130, 131, 179, 180, 184, 229, 287, 319, 320, 353, 371, 375, 398, 403, 515, 713, 716, 752, 780, 781, 782, 783, 784, 785, 792, 805, 808, 809, 861, 862, 863, 864, 865, 866, 867, 868, 874, 938, 940, 960, 994, 997, 1024, 1025, 1027, 1029, 1031, 1032, 1033, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1059, 1060, 1061, 1062, 1064, 1065, 1067, 1069, 1070, 1073, 1075, 1078, 1122, 1125, 1127, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1155, 1156], "union": [2, 49, 103, 117, 120, 121, 130, 131, 138, 139, 179, 180, 355, 357, 360, 363, 364, 365, 366, 367, 368, 370, 375, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 481, 482, 483, 484, 485, 487, 490, 491, 492, 493, 498, 504, 506, 508, 509, 510, 511, 514, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 753, 756, 760, 761, 764, 765, 767, 770, 771, 774, 775, 776, 778, 779, 780, 781, 782, 784, 789, 791, 792, 794, 795, 796, 805, 808, 809, 814, 815, 820, 821, 822, 824, 825, 826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 924, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1035, 1036, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "greater": [2, 128, 129, 179, 180, 184, 317, 318, 515, 520, 533, 536, 545, 548, 561, 564, 569, 572, 592, 597, 610, 613, 614, 617, 622, 701, 704, 705, 708, 713, 716, 748, 751, 874, 878, 880, 960, 1000, 1003, 1047, 1053, 1055], "greater_equ": [2, 128, 129, 184, 317, 318, 515, 597, 621], "inv": [2, 138, 139, 181, 182, 372, 874, 913, 1122], "isfinit": [2, 128, 129, 184, 317, 318, 515], "isinf": [2, 128, 129, 184, 317, 318, 515], "isnan": [2, 128, 129, 184, 317, 318, 515], "layer_norm": [2, 144, 145, 184, 333, 334, 1042], "normalized_idx": [2, 56, 144, 145, 184, 238, 333, 334, 1042, 1043, 1044, 1045, 1046], "05": [2, 56, 144, 145, 184, 238, 333, 334, 465, 826, 828, 831, 1042, 1043, 1044, 1045, 1046], "scale": [2, 56, 144, 145, 184, 238, 333, 334, 364, 465, 507, 508, 826, 847, 849, 861, 869, 872, 873, 1042, 1043, 1044, 1045, 1046, 1143, 1151, 1154, 1159, 1162], "new_std": [2, 56, 144, 145, 184, 238, 333, 334, 1042, 1043, 1044, 1045, 1046, 1157, 1158], "less": [2, 128, 129, 175, 179, 180, 184, 317, 318, 351, 357, 364, 368, 369, 370, 515, 520, 523, 524, 527, 533, 536, 545, 548, 577, 580, 584, 588, 646, 649, 650, 653, 658, 661, 701, 704, 705, 708, 713, 716, 725, 728, 874, 895, 904, 906, 913, 915, 938, 940, 1047, 1053, 1055, 1080, 1109, 1112], "less_equ": [2, 128, 129, 184, 317, 318, 515], "log": [2, 128, 129, 184, 317, 318, 350, 351, 360, 364, 367, 370, 373, 409, 419, 515, 531, 605, 654, 657, 662, 665, 874, 883, 919, 1122], "log10": [2, 128, 129, 184, 317, 318, 515], "log1p": [2, 128, 129, 184, 317, 318, 515], "log2": [2, 128, 129, 184, 317, 318, 515], "logaddexp": [2, 128, 129, 184, 317, 318, 515, 531, 605], "logical_and": [2, 128, 129, 184, 317, 318, 515, 1122], "logical_not": [2, 128, 129, 184, 317, 318, 515, 1122], "logical_or": [2, 128, 129, 184, 317, 318, 515, 1122], "logical_xor": [2, 128, 129, 184, 317, 318, 515], "matmul": [2, 138, 139, 184, 327, 328, 355, 361, 370, 874, 923, 1122], "matrix_norm": [2, 138, 139, 179, 180, 874], "ord": [2, 69, 114, 138, 139, 179, 180, 874, 900, 901, 902, 938, 939, 940], "fro": [2, 69, 138, 139, 874, 900, 901, 902], "matrix_rank": [2, 138, 139, 181, 182, 874], "rtol": [2, 70, 80, 138, 139, 874, 895, 904, 905, 906, 913, 914, 915], "matrix_transpos": [2, 138, 139, 181, 182, 372, 874], "max": [2, 154, 155, 179, 180, 184, 343, 344, 428, 448, 451, 515, 682, 752, 764, 765, 767, 775, 808, 809, 874, 895, 904, 906, 913, 915, 1080, 1159, 1161], "mean": [2, 154, 155, 179, 180, 184, 191, 343, 344, 347, 348, 350, 351, 354, 357, 360, 364, 365, 366, 367, 370, 372, 373, 374, 375, 386, 387, 465, 494, 495, 496, 497, 509, 752, 775, 1020, 1021, 1022, 1023, 1024, 1030, 1047, 1052, 1064, 1065, 1080, 1122, 1134], "min": [2, 154, 155, 179, 180, 184, 343, 344, 428, 448, 451, 515, 683, 752, 775, 808, 809, 816, 874, 916, 918, 923, 925, 926, 928, 938, 940, 1080], "multipli": [2, 128, 129, 184, 317, 318, 357, 361, 363, 515, 752, 770], "neg": [2, 128, 129, 184, 317, 318, 360, 364, 367, 398, 400, 409, 410, 414, 515, 626, 629, 630, 633, 684, 687, 701, 704, 705, 708, 874, 923, 935, 937, 938, 940, 960, 978, 981, 994, 997, 1113, 1114, 1117, 1118, 1121], "not_equ": [2, 128, 129, 184, 317, 318, 515], "outer": [2, 138, 139, 181, 182, 874, 1020, 1021, 1022, 1023], "permute_dim": [2, 142, 143, 184, 331, 332, 960], "ax": [2, 79, 108, 138, 139, 142, 143, 179, 180, 184, 258, 331, 332, 355, 357, 365, 372, 465, 509, 752, 770, 874, 900, 902, 920, 922, 929, 930, 931, 938, 940, 960, 970, 973, 978, 981, 982, 983, 984, 985, 994, 997, 1000, 1003, 1008, 1011, 1016, 1019, 1059, 1060, 1061, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "pinv": [2, 138, 139, 181, 182, 874, 895, 1122], "posit": [2, 117, 118, 119, 128, 129, 184, 317, 318, 368, 373, 386, 408, 409, 414, 428, 448, 465, 489, 493, 497, 515, 516, 519, 626, 629, 630, 633, 684, 687, 705, 708, 752, 779, 874, 875, 877, 960, 974, 977, 994, 997, 1047, 1057, 1059, 1062, 1113, 1114, 1117, 1118, 1121, 1132, 1133], "pow": [2, 128, 129, 184, 317, 318, 515], "prod": [2, 154, 155, 179, 180, 184, 343, 344, 357, 365, 752, 775, 1080], "qr": [2, 138, 139, 181, 182, 874], "mode": [2, 84, 138, 139, 179, 180, 350, 357, 364, 387, 406, 407, 465, 494, 495, 496, 497, 509, 515, 528, 684, 687, 874, 916, 917, 918], "reduc": [2, 84, 138, 139, 179, 180, 372, 465, 509, 752, 775, 874, 916, 917, 918, 1059, 1060, 1061, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "remaind": [2, 128, 129, 179, 180, 184, 317, 318, 515, 752, 778, 960, 999], "repeat": [2, 142, 143, 179, 180, 184, 331, 332, 351, 356, 357, 361, 363, 364, 752, 776, 960, 1012, 1015], "reshap": [2, 142, 143, 179, 180, 184, 331, 332, 367, 370, 372, 375, 960, 1122], "shape": [2, 87, 142, 143, 179, 180, 184, 188, 265, 277, 293, 294, 321, 322, 331, 332, 335, 336, 351, 355, 356, 357, 365, 366, 367, 368, 370, 372, 373, 374, 375, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 465, 477, 505, 510, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 764, 765, 767, 770, 774, 775, 776, 778, 781, 784, 789, 792, 805, 808, 809, 815, 826, 828, 830, 832, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 991, 992, 993, 994, 997, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1058, 1059, 1060, 1062, 1063, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1108, 1113, 1114, 1117, 1118, 1121, 1122, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1157, 1158], "shift": [2, 88, 142, 143, 184, 266, 295, 331, 332, 357, 368, 515, 561, 564, 569, 572, 960, 994, 995, 996, 997, 998], "round": [2, 128, 129, 174, 175, 176, 184, 317, 318, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 515, 528, 577, 580, 592, 610, 613, 614, 617, 684, 687, 725, 728, 748, 751, 1122], "sign": [2, 128, 129, 175, 184, 317, 318, 350, 371, 375, 409, 410, 515, 516, 519, 528, 545, 548, 569, 572, 684, 687, 705, 708, 874, 883, 919, 1064, 1065, 1066, 1068, 1080, 1097, 1100, 1105], "sin": [2, 128, 129, 184, 317, 318, 363, 370, 515, 752, 779, 1122], "sinh": [2, 128, 129, 184, 317, 318, 515, 1122], "solv": [2, 138, 139, 181, 182, 371, 386, 874], "sort": [2, 153, 179, 180, 181, 182, 183, 184, 342, 355, 874, 887, 889, 923, 925, 926, 928, 1070, 1073], "sparse_cross_entropi": [2, 140, 141, 184, 329, 330, 944], "sqrt": [2, 128, 129, 184, 317, 318, 515, 874, 938, 940], "squar": [2, 128, 129, 184, 317, 318, 515, 725, 728, 861, 864, 874, 875, 877, 881, 883, 887, 889, 890, 892, 893, 903, 919, 920, 922, 923], "squeez": [2, 142, 143, 184, 331, 332, 960, 1122], "stack": [2, 142, 143, 179, 180, 184, 331, 332, 370, 409, 424, 425, 874, 881, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 903, 904, 906, 907, 909, 913, 915, 916, 918, 923, 925, 926, 928, 932, 934, 960, 1024, 1025, 1034, 1035, 1122, 1143, 1152], "std": [2, 154, 155, 184, 343, 344, 357, 1047, 1052, 1064, 1065, 1080], "correct": [2, 100, 112, 154, 155, 184, 301, 309, 343, 344, 351, 352, 354, 360, 364, 365, 366, 368, 428, 460, 960, 961, 964, 1080, 1101, 1102, 1103, 1104, 1109, 1110, 1111, 1112, 1122], "subtract": [2, 128, 129, 184, 317, 318, 357, 363, 515], "sum": [2, 154, 155, 179, 180, 184, 343, 344, 360, 364, 365, 367, 370, 465, 494, 495, 496, 497, 509, 515, 528, 531, 605, 662, 665, 752, 771, 775, 808, 809, 861, 873, 874, 923, 932, 934, 938, 940, 1080, 1081, 1084, 1101, 1104], "svd": [2, 138, 139, 181, 182, 874, 926, 1122], "full_matric": [2, 103, 138, 139, 874, 923, 924, 926], "tupl": [2, 103, 117, 118, 119, 120, 121, 138, 139, 179, 180, 355, 364, 365, 366, 368, 372, 373, 374, 387, 406, 407, 409, 411, 412, 416, 421, 422, 426, 428, 436, 450, 465, 484, 752, 779, 815, 861, 864, 867, 868, 871, 874, 895, 904, 906, 913, 915, 923, 924, 926, 929, 931, 938, 940, 960, 966, 969, 970, 973, 978, 981, 982, 985, 990, 993, 994, 997, 1000, 1003, 1004, 1007, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1029, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1047, 1052, 1053, 1055, 1059, 1062, 1064, 1065, 1066, 1067, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "svdval": [2, 138, 139, 181, 182, 874, 925], "swapax": [2, 142, 143, 184, 331, 332, 960], "axis0": [2, 105, 142, 143, 184, 304, 331, 332, 960, 1008, 1009, 1010, 1011], "tan": [2, 128, 129, 184, 299, 317, 318, 356, 360, 364, 367, 368, 370, 515, 533, 536, 544, 549, 739, 747, 1064, 1065, 1066, 1069, 1070, 1073, 1122], "56": [2, 106, 128, 129, 184, 299, 305, 317, 318, 357, 515, 544, 549, 725, 728, 738, 739, 740, 741, 747, 826, 828, 831, 874, 910, 912, 1080, 1081, 1084, 1108], "19": [2, 106, 128, 129, 184, 299, 305, 317, 318, 357, 515, 544, 549, 573, 576, 738, 739, 740, 741, 747, 874, 884, 886], "tanh": [2, 128, 129, 184, 300, 317, 318, 370, 398, 515, 544, 549, 744, 1122], "762": [2, 107, 128, 129, 184, 306, 317, 318, 398, 405, 515, 544, 549, 743, 745, 746], "964": [2, 107, 128, 129, 184, 306, 317, 318, 398, 405, 515, 544, 549, 743, 745, 746], "tensordot": [2, 138, 139, 181, 182, 874], "tile": [2, 142, 143, 184, 331, 332, 960, 1122], "rep": [2, 109, 142, 143, 184, 307, 331, 332, 960, 1012, 1013, 1014, 1015], "trace": [2, 138, 139, 179, 180, 181, 182, 370, 387, 752, 798, 799, 801, 874], "trunc": [2, 128, 129, 184, 317, 318, 515], "var": [2, 154, 155, 184, 191, 343, 344, 347, 348, 357, 370, 1020, 1021, 1022, 1080], "vecdot": [2, 138, 139, 181, 182, 874], "vector_norm": [2, 138, 139, 179, 180, 874], "vector_to_skew_symmetric_matrix": [2, 138, 139, 181, 182, 874, 1122], "zero_pad": [2, 142, 143, 184, 331, 332, 960, 1122], "method": [3, 6, 7, 8, 10, 25, 26, 28, 47, 49, 88, 106, 107, 124, 125, 128, 129, 130, 131, 132, 133, 142, 143, 158, 159, 179, 180, 181, 182, 183, 188, 190, 191, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 347, 348, 352, 355, 356, 357, 359, 360, 363, 368, 370, 371, 374, 375, 387, 398, 400, 401, 402, 403, 404, 405, 409, 415, 420, 437, 438, 439, 441, 515, 516, 517, 529, 530, 532, 533, 536, 544, 549, 553, 556, 573, 576, 577, 578, 579, 580, 585, 597, 610, 611, 612, 614, 621, 622, 625, 662, 682, 683, 689, 692, 693, 696, 709, 712, 725, 728, 729, 732, 739, 740, 741, 743, 744, 745, 746, 747, 752, 753, 754, 755, 757, 768, 769, 780, 781, 782, 783, 785, 808, 809, 820, 822, 826, 828, 829, 830, 832, 843, 845, 847, 849, 861, 867, 873, 874, 875, 877, 878, 880, 881, 944, 945, 948, 960, 961, 962, 963, 965, 974, 977, 978, 981, 986, 989, 994, 995, 996, 998, 999, 1008, 1011, 1024, 1025, 1035, 1036, 1037, 1042, 1043, 1046, 1047, 1049, 1051, 1052, 1053, 1055, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1081, 1084, 1085, 1088, 1108, 1113, 1114, 1117, 1122, 1143, 1154, 1155, 1156], "collect": [117, 179, 180, 359, 386, 398, 406, 465, 752, 826, 861, 944, 1024, 1037, 1042, 1047, 1129, 1143, 1157, 1159], "accept": [117, 350, 351, 356, 357, 359, 360, 363, 364, 366, 367, 368, 372, 409, 420, 428, 437, 440, 515, 528, 533, 536, 553, 556, 573, 576, 577, 580, 585, 610, 670, 673, 674, 677, 693, 696, 705, 708, 709, 712, 725, 728, 729, 732, 738, 743, 752, 780, 861, 864, 873, 874, 881, 960, 974, 977, 978, 981, 994, 997, 1042, 1043, 1046, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1089, 1092, 1113, 1114, 1117, 1122], "args_to_ivi": 117, "arg": [117, 118, 119, 160, 164, 179, 180, 353, 370, 372, 374, 465, 474, 489, 493, 497, 509, 752, 809, 1132, 1133, 1155, 1156], "include_deriv": [117, 118, 119, 120, 121, 1024, 1026, 1036], "kwarg": [117, 118, 119, 160, 164, 177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 370, 372, 374, 465, 474, 489, 493, 497, 752, 802, 1132, 1133, 1155, 1156], "keyword": [117, 118, 119, 179, 180, 181, 182, 183, 355, 365, 366, 367, 368, 373, 409, 420, 465, 474, 475, 489, 493, 497, 752, 759, 802, 1024, 1030, 1080, 1105, 1155, 1156], "variabl": [117, 118, 119, 120, 121, 179, 180, 181, 182, 356, 361, 364, 365, 367, 368, 373, 374, 375, 387, 752, 762, 794, 795, 796, 797, 798, 799, 801, 818, 826, 833, 835, 837, 838, 840, 842, 843, 845, 847, 849, 851, 853, 856, 859, 861, 872, 874, 920, 922, 1020, 1021, 1022, 1023, 1042, 1043, 1046, 1122, 1132, 1133, 1134, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "form": [117, 118, 119, 120, 121, 175, 179, 180, 349, 360, 374, 375, 409, 411, 421, 424, 425, 752, 758, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 861, 874, 875, 877, 881, 884, 886, 887, 889, 890, 892, 893, 895, 904, 906, 907, 909, 913, 915, 916, 918, 920, 922, 923, 925, 926, 928, 932, 934, 1024, 1026, 1036], "nest": [117, 118, 119, 120, 121, 179, 180, 181, 182, 183, 355, 360, 363, 364, 372, 373, 374, 387, 465, 489, 493, 497, 752, 820, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1155, 1156, 1159, 1160, 1161, 1162, 1163, 1164], "otherwis": [117, 118, 119, 120, 121, 160, 172, 179, 180, 363, 365, 366, 368, 370, 372, 409, 410, 428, 434, 437, 440, 443, 444, 445, 465, 484, 515, 626, 629, 630, 633, 634, 637, 752, 762, 823, 826, 842, 856, 874, 875, 877, 881, 935, 937, 938, 940, 1020, 1021, 1022, 1024, 1037, 1059, 1060, 1061, 1063, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "argument": [117, 118, 119, 120, 121, 160, 164, 165, 174, 179, 180, 181, 182, 183, 352, 354, 355, 356, 357, 359, 360, 361, 363, 364, 370, 372, 373, 406, 407, 409, 410, 428, 437, 440, 456, 465, 474, 475, 489, 493, 497, 515, 528, 533, 536, 577, 580, 610, 693, 696, 725, 728, 729, 732, 738, 752, 758, 759, 763, 773, 780, 802, 809, 861, 864, 873, 960, 994, 997, 1024, 1030, 1042, 1043, 1046, 1080, 1085, 1088, 1105, 1113, 1114, 1117, 1125, 1127, 1132, 1133, 1155, 1156], "ar": [117, 118, 119, 174, 175, 176, 179, 180, 181, 182, 183, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 387, 388, 396, 409, 410, 465, 474, 475, 499, 503, 505, 509, 515, 581, 670, 673, 674, 677, 709, 712, 717, 720, 738, 752, 753, 756, 760, 761, 762, 786, 792, 793, 797, 804, 806, 818, 861, 870, 874, 878, 880, 895, 896, 899, 900, 902, 904, 906, 913, 915, 923, 925, 926, 928, 935, 937, 960, 961, 964, 978, 981, 994, 997, 1024, 1026, 1030, 1036, 1047, 1052, 1053, 1055, 1059, 1060, 1061, 1062, 1064, 1065, 1122, 1165, 1166], "unchang": [117, 118, 119, 120, 121], "The": [117, 118, 119, 120, 121, 160, 164, 165, 173, 174, 176, 179, 180, 181, 182, 183, 349, 350, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 386, 398, 399, 400, 403, 405, 406, 407, 409, 410, 415, 419, 420, 424, 425, 428, 432, 433, 434, 442, 447, 449, 450, 452, 455, 460, 464, 465, 474, 475, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 504, 505, 506, 507, 508, 509, 511, 514, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 684, 687, 693, 696, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 738, 742, 743, 747, 748, 751, 752, 758, 760, 763, 764, 772, 773, 779, 781, 784, 794, 795, 796, 798, 799, 800, 801, 803, 808, 809, 810, 811, 812, 815, 816, 817, 825, 826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 856, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 944, 945, 948, 950, 953, 955, 958, 960, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 999, 1012, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1052, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1132, 1133, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163], "check": [117, 118, 119, 120, 121, 174, 175, 176, 179, 180, 350, 351, 364, 369, 370, 372, 373, 374, 375, 386, 428, 442, 449, 450, 452, 464, 465, 504, 514, 752, 762, 777, 791, 798, 799, 800, 801, 818, 825, 826, 842, 874, 887, 889, 1024, 1025, 1034, 1035, 1036, 1122], "dict": [117, 118, 119, 120, 121, 160, 172, 179, 180, 181, 182, 183, 364, 373, 374, 465, 474, 475, 484, 487, 490, 491, 492, 493, 752, 758, 774, 775, 776, 1024, 1026, 1027, 1030, 1033, 1036, 1037], "whether": [117, 118, 119, 120, 121, 179, 180, 181, 182, 183, 184, 191, 347, 348, 349, 350, 365, 367, 368, 398, 399, 406, 407, 428, 434, 446, 452, 453, 454, 464, 465, 484, 485, 496, 500, 501, 504, 505, 509, 512, 514, 515, 634, 637, 752, 753, 756, 760, 761, 770, 773, 777, 779, 789, 791, 793, 796, 797, 798, 799, 800, 801, 802, 814, 818, 824, 825, 826, 833, 835, 837, 838, 840, 842, 843, 845, 847, 849, 851, 853, 856, 861, 869, 874, 887, 889, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1034, 1035, 1036, 1037, 1047, 1048, 1113, 1114, 1117, 1118, 1121, 1132, 1133, 1143, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164], "recurs": [117, 118, 119, 120, 121, 179, 180, 350, 353, 360, 364, 374, 387, 1024, 1025, 1026, 1034, 1035, 1036], "deriv": [117, 118, 119, 120, 121, 365, 366, 372, 374, 409, 413, 417, 423, 427, 826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 1024, 1026, 1036, 1155, 1159, 1163, 1165], "str": [117, 118, 119, 160, 165, 179, 180, 365, 366, 409, 420, 428, 432, 442, 443, 444, 447, 448, 451, 452, 453, 454, 457, 458, 459, 464, 465, 481, 484, 485, 487, 490, 491, 492, 493, 509, 752, 758, 772, 774, 775, 776, 803, 808, 809, 861, 862, 864, 866, 867, 868, 874, 916, 918, 1020, 1021, 1022, 1023, 1024, 1030, 1080, 1081, 1084, 1108], "kei": [117, 118, 119, 179, 180, 181, 182, 183, 364, 373, 465, 477, 752, 758, 768, 861, 872, 873, 1020, 1021, 1022, 1024, 1027, 1033, 1037, 1132, 1133, 1143, 1154, 1159, 1163], "word": [117, 118, 119, 409, 410, 1047, 1053, 1055, 1132, 1133], "ret": [117, 118, 119, 120, 121, 160, 164, 165, 172, 179, 180, 355, 356, 370, 375, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 440, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 464, 465, 474, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 508, 509, 510, 511, 512, 514, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 753, 756, 758, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 784, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 808, 809, 814, 816, 817, 818, 820, 821, 822, 824, 825, 826, 828, 831, 833, 835, 837, 838, 840, 842, 843, 845, 847, 849, 851, 853, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1034, 1035, 1036, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1125, 1127, 1132, 1133, 1159, 1163], "same": [117, 118, 119, 174, 176, 179, 180, 350, 351, 353, 355, 357, 359, 360, 363, 364, 366, 367, 368, 370, 372, 374, 375, 409, 410, 413, 417, 420, 423, 424, 425, 427, 428, 434, 435, 436, 465, 474, 475, 509, 515, 516, 519, 528, 557, 560, 577, 580, 610, 684, 687, 705, 708, 709, 712, 713, 716, 748, 751, 752, 778, 780, 781, 784, 805, 808, 809, 826, 842, 856, 861, 862, 863, 864, 865, 866, 867, 868, 873, 874, 875, 877, 878, 880, 881, 884, 886, 887, 889, 890, 892, 893, 895, 907, 909, 913, 915, 916, 918, 920, 922, 923, 932, 934, 935, 937, 960, 966, 969, 978, 981, 982, 985, 994, 997, 1000, 1003, 1004, 1007, 1020, 1021, 1022, 1024, 1037, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1105, 1108, 1109, 1112, 1122, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "convert": [117, 118, 119, 120, 121, 176, 179, 180, 363, 370, 387, 388, 396, 409, 411, 421, 428, 432, 433, 465, 481, 482, 483, 484, 504, 511, 514, 752, 815, 821, 822, 874, 941, 943, 1024, 1026, 1036, 1037, 1133], "args_to_n": [117, 367, 372], "nativ": [117, 119, 120, 121, 160, 166, 179, 180, 365, 367, 372, 373, 409, 421, 428, 432, 433, 442, 465, 481, 482, 483, 484, 485, 504, 511, 514, 752, 796, 798, 801, 1132, 1133], "backend": [117, 119, 121, 164, 165, 166, 172, 174, 179, 180, 351, 352, 354, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 371, 372, 375, 428, 449, 450, 452, 464, 465, 500, 502, 512, 752, 793, 796, 797, 803, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 859, 1122, 1128, 1132, 1133, 1159, 1160, 1161, 1162, 1163, 1164], "to_ivi": [117, 179, 180, 372, 1024, 1037], "If": [117, 120, 121, 160, 164, 165, 166, 174, 179, 180, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 375, 387, 409, 410, 412, 413, 414, 416, 417, 420, 422, 423, 424, 425, 426, 427, 428, 434, 436, 456, 465, 484, 508, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 545, 548, 577, 580, 581, 584, 585, 588, 602, 605, 606, 609, 610, 646, 649, 650, 653, 658, 661, 662, 665, 670, 673, 674, 677, 684, 687, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 738, 743, 748, 751, 752, 796, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 874, 875, 877, 878, 880, 895, 900, 902, 904, 906, 913, 915, 916, 918, 920, 922, 923, 935, 937, 938, 940, 944, 945, 948, 950, 953, 955, 958, 960, 974, 977, 978, 981, 994, 997, 999, 1000, 1003, 1004, 1007, 1020, 1021, 1022, 1024, 1036, 1037, 1047, 1052, 1053, 1055, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122], "set": [117, 120, 121, 151, 160, 164, 165, 166, 172, 174, 179, 180, 340, 349, 351, 354, 355, 360, 362, 363, 364, 365, 366, 367, 370, 372, 373, 465, 484, 494, 495, 506, 507, 508, 509, 515, 545, 548, 752, 753, 756, 810, 811, 812, 813, 826, 833, 835, 838, 840, 842, 843, 845, 847, 849, 851, 853, 874, 878, 880, 895, 900, 902, 904, 906, 913, 915, 920, 922, 1024, 1025, 1034, 1035, 1036, 1040, 1041, 1047, 1057, 1059, 1060, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1101, 1104, 1109, 1112, 1143, 1152, 1159, 1160, 1161, 1162, 1163, 1164], "leaf": [117, 120, 121, 179, 180, 360, 364, 373, 1024, 1025, 1034, 1035], "within": [117, 120, 121, 351, 359, 374, 387, 409, 410, 1047, 1053, 1055], "mayb": [117, 120, 121, 350, 370, 372], "manner": [117, 120, 121, 174, 179, 180, 355, 356, 366, 373, 386, 387, 1024, 1036], "travers": [117, 120, 121, 179, 180, 364, 370, 372, 1024, 1036], "lowest": [117, 120, 121, 179, 180, 360, 387, 1024, 1036, 1047, 1049, 1050], "leav": [117, 120, 121, 179, 180, 181, 182, 184, 356, 357, 359, 360, 364, 365, 367, 368, 373, 374, 960, 1004, 1007, 1024, 1025, 1026, 1034, 1035, 1036], "search": [117, 120, 121, 149, 174, 179, 180, 338, 350, 355, 357, 359, 1060, 1061, 1062, 1063], "s": [117, 120, 121, 160, 164, 165, 166, 172, 175, 176, 179, 180, 349, 350, 351, 353, 354, 356, 357, 359, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 408, 409, 420, 424, 425, 428, 449, 450, 465, 484, 508, 515, 705, 708, 752, 761, 826, 833, 835, 838, 840, 843, 845, 851, 853, 874, 923, 925, 926, 928, 1024, 1030, 1036, 1080, 1101, 1104, 1109, 1112, 1122, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1165, 1166], "case": [117, 120, 121, 175, 179, 180, 181, 182, 183, 350, 351, 352, 355, 356, 357, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 387, 409, 420, 465, 504, 511, 514, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 545, 548, 573, 576, 577, 580, 581, 584, 585, 588, 602, 605, 606, 609, 610, 646, 649, 650, 653, 658, 661, 662, 665, 684, 687, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 738, 743, 748, 751, 752, 796, 808, 809, 874, 900, 902, 960, 990, 993, 1024, 1027, 1033, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1101, 1104, 1105, 1109, 1112, 1143, 1154, 1155, 1156, 1159, 1163], "to_n": [117, 179, 180], "convers": [118, 119, 120, 121, 176, 179, 180, 369, 371, 375, 386, 387, 1122, 1128], "arraywithcr": 122, "creation": [123, 179, 180, 181, 182, 183, 312, 355, 365, 366, 370, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "data_typ": [124, 125, 313, 314, 355, 365, 428, 432, 433, 434, 435, 436, 437, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "arraywithdatatyp": 124, "arraywithdevic": [126, 372], "devic": [127, 175, 179, 180, 184, 262, 293, 294, 316, 335, 336, 351, 354, 355, 360, 362, 365, 372, 373, 387, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 752, 780, 781, 784, 805, 808, 809, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1132, 1133, 1134, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1165, 1166], "arraywithelementwis": [128, 352, 363], "elementwis": [129, 179, 180, 318, 355, 360, 370, 375, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751], "arraywithgener": [130, 372], "arraywithgradi": [132, 372], "gradient": [133, 179, 180, 322, 355, 364, 373, 374, 386, 387, 465, 509, 828, 831, 833, 835, 837, 838, 840, 842, 843, 845, 847, 849, 851, 853, 855, 856, 857, 858, 859, 860, 1020, 1021, 1022, 1023, 1122, 1159, 1160, 1161, 1162, 1163, 1164], "arraywithimag": [134, 372], "imag": [135, 324, 350, 353, 355, 370, 371, 373, 375, 386, 861, 862, 863, 864, 865, 867, 868, 1122], "arraywithlay": 136, "layer": [137, 174, 326, 355, 356, 370, 371, 374, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 1042, 1043, 1046, 1122, 1134, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1165, 1166], "linear_algebra": [138, 139, 327, 328, 355, 372, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 903, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943], "arraywithlinearalgebra": 138, "arraywithloss": 140, "loss": [141, 330, 355, 360, 373, 374, 375, 945, 948, 950, 953, 955, 958, 1122], "arraywithmanipul": 142, "manipul": [143, 174, 332, 355, 375, 386, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019], "arraywithnorm": 144, "norm": [145, 179, 180, 334, 355, 752, 764, 765, 767, 874, 900, 902, 938, 940, 1043, 1046, 1122, 1158, 1159, 1161], "arraywithrandom": [146, 372], "random": [147, 179, 180, 336, 355, 366, 375, 386, 1048, 1049, 1050, 1052, 1053, 1055, 1057, 1058, 1122], "arraywithsearch": 148, "arraywithset": 150, "arraywithsort": 152, "arraywithstatist": 154, "statist": [155, 184, 191, 344, 347, 348, 355, 365, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112], "arraywithutil": 156, "util": [157, 346, 355, 366, 465, 498, 1114, 1117, 1118, 1121], "backend_handl": [160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 1122], "contextmanag": [160, 161], "object": [160, 179, 180, 181, 182, 183, 184, 372, 375, 409, 415, 428, 448, 465, 510, 826, 1024, 1027, 1029, 1031, 1032, 1033, 1038, 1039, 1040, 1041, 1047, 1058, 1134, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1155, 1156], "__init__": [160, 161, 164, 165, 179, 180, 181, 182, 183, 184, 355, 361, 365, 370, 372, 373, 374, 375, 428, 429, 430, 431, 465, 466, 473, 474, 475, 476, 477, 478, 479, 480, 826, 827, 1047, 1048, 1052, 1122, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "choose_random_backend": 160, "exclud": [160, 162, 357, 370, 409, 410, 1047, 1053, 1055], "clear_backend_stack": 160, "current_backend": [160, 181, 182, 355, 360], "current": [160, 164, 165, 172, 176, 179, 180, 181, 182, 183, 350, 351, 352, 353, 360, 366, 370, 375, 386, 387, 428, 449, 450, 452, 464, 465, 474, 498, 499, 503, 505, 752, 786, 793, 797, 804, 806, 1024, 1025, 1034, 1035, 1122], "prioriti": [160, 164, 179, 180, 351, 367], "global_backend": [160, 164], "which": [160, 164, 165, 174, 175, 176, 179, 180, 181, 182, 183, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 386, 387, 398, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 437, 440, 442, 446, 448, 451, 452, 464, 465, 474, 475, 485, 490, 491, 492, 493, 494, 495, 496, 497, 499, 503, 505, 507, 508, 509, 515, 705, 708, 752, 758, 770, 771, 773, 780, 781, 784, 786, 792, 796, 804, 805, 806, 808, 809, 824, 826, 833, 835, 837, 838, 840, 843, 845, 847, 849, 851, 853, 856, 858, 859, 861, 872, 874, 878, 880, 884, 886, 900, 902, 920, 922, 923, 935, 937, 938, 940, 944, 950, 953, 955, 958, 960, 966, 969, 978, 981, 986, 989, 994, 997, 999, 1004, 1007, 1024, 1029, 1030, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1047, 1048, 1049, 1050, 1053, 1055, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1125, 1127, 1132, 1133, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1165, 1166], "try": [160, 164, 173, 175, 176, 179, 180, 350, 351, 352, 353, 363, 364, 372, 387, 752, 823, 1122], "infer": [160, 164, 354, 361, 365, 366, 370, 375, 406, 407, 409, 410, 411, 413, 416, 417, 421, 423, 427, 515, 618, 752, 789, 814, 960, 990, 993], "when": [160, 164, 174, 175, 179, 180, 181, 182, 183, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 375, 387, 428, 434, 465, 515, 528, 606, 609, 701, 704, 752, 763, 796, 817, 944, 945, 948, 950, 953, 955, 958, 1024, 1035, 1059, 1060, 1061, 1063, 1080, 1085, 1088, 1093, 1096, 1101, 1104, 1109, 1112, 1122, 1155, 1156], "global": [160, 164, 165, 166, 172, 179, 180, 181, 182, 183, 360, 361, 365, 366, 370, 428, 443, 444, 445, 465, 474, 475, 507, 508, 509, 752, 787, 788, 807, 810, 811, 812, 816, 817, 1042, 1043, 1046, 1157, 1158], "numpi": [160, 164, 165, 166, 174, 175, 179, 180, 351, 352, 359, 361, 365, 366, 367, 368, 370, 372, 375, 752, 821, 1080, 1081, 1084, 1108, 1122], "np": [160, 164, 363, 365, 366, 367, 368, 372, 373, 375, 1122], "py": [160, 164, 165, 351, 355, 356, 360, 361, 365, 366, 368, 370, 372, 374, 375, 1047, 1048, 1052], "noqa": [160, 164, 165, 409, 420, 428, 437, 440, 515, 528, 553, 556, 573, 576, 577, 580, 585, 693, 696, 709, 712, 725, 728, 729, 732, 738, 743, 874, 881, 960, 974, 977, 978, 981, 994, 997, 1080, 1085, 1088], "set_backend": [160, 164, 165, 172, 360, 361, 362, 365, 428, 449, 450, 465, 506, 752, 814, 1122], "ha": [160, 164, 165, 174, 175, 176, 179, 180, 351, 356, 357, 360, 361, 362, 365, 366, 370, 372, 374, 375, 386, 387, 409, 420, 465, 484, 515, 516, 519, 684, 687, 701, 704, 874, 883, 896, 899, 919, 920, 922, 923, 932, 934, 960, 974, 977, 1000, 1003, 1064, 1065, 1066, 1068, 1080, 1089, 1092, 1097, 1100, 1101, 1104, 1105, 1109, 1112], "jax": [160, 164, 165, 166, 175, 176, 351, 352, 361, 365, 366, 367, 368, 370, 372, 375, 387, 826, 842, 1064, 1065, 1066, 1068, 1122], "get_backend": [160, 360, 361], "specifi": [160, 165, 179, 180, 354, 359, 360, 365, 366, 367, 368, 370, 373, 374, 375, 409, 410, 412, 416, 418, 419, 422, 424, 425, 426, 428, 434, 436, 465, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 499, 503, 505, 508, 509, 510, 515, 705, 708, 752, 758, 770, 780, 781, 784, 791, 824, 874, 884, 886, 900, 902, 929, 931, 932, 934, 935, 937, 938, 940, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 978, 981, 994, 997, 1000, 1003, 1004, 1007, 1016, 1019, 1024, 1029, 1031, 1032, 1038, 1039, 1040, 1041, 1059, 1060, 1061, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1080, 1081, 1084, 1097, 1100, 1105, 1108, 1113, 1114, 1117, 1118, 1121], "isn": [160, 165, 351, 373, 387], "associ": [160, 165, 351, 360, 362, 387, 515, 528, 684, 687, 874, 895, 904, 906, 913, 915, 941, 943], "retriev": [160, 165, 351, 752, 758], "i": [160, 165, 351, 353, 354, 370, 373, 375, 409, 410, 420, 515, 516, 519, 545, 548, 561, 564, 569, 572, 577, 580, 592, 610, 613, 614, 617, 626, 629, 682, 683, 689, 692, 701, 704, 705, 708, 752, 760, 761, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 874, 878, 880, 895, 896, 899, 904, 906, 913, 915, 920, 922, 923, 932, 934, 938, 940, 960, 1004, 1007, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1101, 1104, 1105, 1108, 1109, 1112], "e": [160, 165, 175, 176, 349, 351, 353, 354, 364, 373, 387, 408, 409, 420, 428, 433, 456, 465, 481, 515, 516, 519, 545, 548, 561, 564, 569, 572, 577, 580, 592, 602, 610, 613, 614, 617, 626, 629, 646, 649, 654, 657, 682, 683, 689, 692, 701, 704, 705, 708, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 874, 878, 880, 895, 896, 899, 904, 906, 913, 915, 920, 922, 923, 938, 940, 960, 1004, 1007, 1047, 1052, 1053, 1055, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112], "one": [160, 165, 175, 176, 179, 180, 184, 193, 279, 280, 284, 287, 293, 295, 317, 318, 319, 320, 331, 332, 335, 336, 350, 351, 357, 360, 363, 364, 365, 367, 368, 369, 372, 373, 375, 387, 409, 410, 420, 428, 435, 437, 440, 465, 494, 495, 496, 497, 509, 532, 662, 752, 753, 755, 756, 757, 781, 785, 802, 805, 808, 809, 874, 896, 899, 900, 902, 910, 912, 916, 918, 935, 937, 938, 940, 960, 961, 965, 974, 977, 978, 981, 994, 997, 998, 1000, 1003, 1049, 1051, 1059, 1060, 1062, 1064, 1065, 1066, 1067, 1068, 1080, 1081, 1084, 1108, 1122], "torch": [160, 165, 172, 351, 355, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 387, 406, 407, 428, 449, 450, 465, 506, 752, 814, 960, 974, 977, 1122], "tensorflow": [160, 165, 172, 175, 176, 351, 352, 365, 366, 367, 368, 370, 375, 387, 1122], "mxnet": [160, 165, 175, 352, 365, 366, 367, 370, 375, 1122], "either": [160, 165, 172, 179, 180, 350, 351, 353, 356, 357, 360, 361, 364, 365, 366, 370, 372, 373, 387, 409, 415, 515, 528, 531, 545, 548, 605, 630, 633, 646, 649, 650, 653, 658, 661, 662, 665, 684, 687, 705, 708, 713, 716, 717, 720, 738, 752, 773, 798, 802, 803, 874, 896, 899, 1020, 1021, 1022, 1023, 1080, 1097, 1100, 1105, 1143, 1154, 1155, 1156], "doesn": [160, 165, 350, 353, 357, 365, 370, 387], "matter": [160, 165, 174, 357], "been": [160, 165, 351, 356, 360, 361, 364, 365, 366, 368, 370, 386, 387, 465, 484, 752, 774, 775, 776, 1047, 1048], "ivy_np": [160, 165], "ivy_jax": [160, 165], "subsequ": [160, 166, 350, 357, 359, 360, 363, 367, 368, 374], "call": [160, 166, 172, 175, 181, 182, 184, 353, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 387, 465, 509, 752, 807, 812, 823, 826, 837, 1024, 1025, 1030, 1034, 1035, 1143, 1154, 1155, 1156, 1159, 1163], "ndarrai": [160, 166, 363, 365, 366, 367, 368, 372, 409, 411, 421, 752, 821], "Or": [160, 166, 373], "jaxlib": [160, 166, 350, 365, 366, 368, 372], "xla_extens": [160, 166, 365, 366, 368, 372], "devicearrai": [160, 166, 372], "try_import_ivy_jax": 160, "warn": [160, 167, 168, 169, 170, 171], "try_import_ivy_mxnet": 160, "try_import_ivy_numpi": 160, "try_import_ivy_tf": 160, "try_import_ivy_torch": 160, "unset_backend": [160, 361], "unset": [160, 172, 361, 370, 372], "adjust": [160, 172, 1080, 1101, 1104, 1109, 1112], "previous": [160, 172, 350, 353, 359, 360, 370, 752, 763], "implement": [160, 172, 351, 352, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 428, 434, 456, 465, 510, 515, 516, 519, 520, 523, 524, 527, 533, 536, 537, 540, 541, 545, 548, 581, 584, 585, 588, 602, 606, 609, 646, 649, 650, 653, 654, 657, 658, 661, 684, 687, 701, 704, 705, 708, 717, 720, 721, 724, 738, 743, 874, 887, 889, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1122], "wa": [160, 172, 175, 179, 180, 357, 370, 372, 752, 823, 1024, 1037, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "last": [160, 172, 176, 179, 180, 351, 357, 361, 387, 398, 403, 465, 484, 861, 871, 874, 878, 880, 884, 886, 900, 902, 932, 934, 935, 937, 944, 950, 953, 955, 958, 960, 978, 981, 994, 997, 999, 1004, 1007, 1069, 1070, 1073, 1075, 1078, 1113, 1114, 1117, 1118, 1121, 1143, 1153], "henc": [160, 172, 1064, 1065, 1066, 1068], "here": [160, 172, 350, 351, 352, 355, 357, 364, 368, 370, 371, 372, 373, 374, 375, 386, 387], "tensor": [160, 172, 174, 179, 180, 355, 360, 361, 363, 365, 366, 367, 368, 370, 372, 373, 374, 375, 387, 409, 418, 419, 428, 446, 515, 553, 556, 682, 683, 752, 805, 808, 809, 861, 869, 871, 874, 929, 931, 960, 974, 977, 990, 993, 999, 1047, 1048, 1059, 1062, 1122, 1143, 1151, 1153], "howev": [160, 172, 175, 350, 352, 356, 359, 360, 361, 363, 364, 365, 366, 367, 368, 372, 373, 374, 375, 387], "befor": [160, 172, 179, 180, 350, 351, 352, 356, 359, 363, 365, 366, 367, 370, 373, 387, 465, 509, 515, 748, 751, 861, 872, 873, 1020, 1021, 1022, 1024, 1036, 1064, 1065, 1066, 1068, 1080, 1097, 1100, 1105], "becom": [160, 172, 174, 176, 351, 357, 364, 370, 375, 387, 960, 961, 964], "swap": [160, 172, 960, 1008, 1011], "python": [160, 172, 173, 174, 175, 350, 351, 353, 370, 372, 373, 387, 409, 410, 465, 504, 514, 515, 705, 708, 1122, 1128], "op": [160, 172, 355, 370, 387], "eagertensor": [160, 172], "def": [161, 352, 355, 357, 360, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 429, 430, 431, 466, 473, 476, 827, 1122, 1135, 1138, 1141], "ml": [173, 175, 176, 349, 369, 370, 371, 373, 374, 375, 386, 1122, 1128], "explos": [173, 175, 1122], "A": [173, 174, 175, 176, 179, 180, 181, 182, 183, 353, 354, 359, 360, 364, 365, 366, 370, 373, 387, 409, 414, 421, 465, 474, 475, 509, 515, 697, 700, 752, 788, 820, 874, 883, 910, 912, 919, 920, 922, 923, 960, 999, 1004, 1007, 1024, 1025, 1027, 1029, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1080, 1081, 1084, 1108, 1113, 1114, 1117, 1118, 1121, 1122, 1165, 1166], "huge": [173, 175, 373, 1122], "number": [173, 174, 179, 180, 181, 182, 183, 184, 350, 357, 364, 366, 367, 370, 373, 375, 406, 407, 408, 409, 410, 411, 414, 418, 419, 420, 421, 428, 435, 447, 448, 451, 453, 454, 456, 465, 501, 502, 503, 515, 528, 545, 548, 577, 580, 592, 610, 613, 614, 617, 682, 683, 684, 687, 701, 704, 705, 708, 709, 712, 713, 716, 748, 751, 752, 753, 756, 779, 788, 789, 804, 822, 825, 861, 872, 874, 883, 887, 889, 904, 906, 919, 923, 935, 937, 960, 961, 964, 970, 973, 982, 985, 986, 989, 994, 997, 999, 1004, 1007, 1012, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1047, 1048, 1057, 1059, 1062, 1064, 1065, 1066, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154], "tool": [173, 176, 351, 371, 375, 386, 387, 1122], "have": [173, 174, 175, 176, 179, 180, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 386, 387, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 448, 465, 510, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 764, 765, 767, 770, 774, 775, 776, 778, 781, 784, 792, 805, 808, 809, 826, 842, 856, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122], "explod": [173, 174, 1122], "onto": [173, 174, 465, 494, 495, 1024, 1030, 1036, 1122], "scene": [173, 174, 354, 369, 371, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 1122], "b": [173, 176, 181, 182, 184, 188, 190, 193, 210, 211, 212, 227, 229, 266, 277, 279, 280, 283, 284, 287, 293, 295, 299, 300, 305, 306, 313, 314, 317, 318, 319, 320, 321, 322, 331, 332, 335, 336, 349, 354, 357, 360, 361, 364, 369, 370, 371, 373, 374, 375, 385, 428, 437, 439, 440, 441, 465, 487, 515, 528, 530, 532, 533, 536, 544, 549, 553, 556, 573, 576, 577, 579, 580, 585, 597, 610, 612, 614, 621, 622, 625, 662, 689, 692, 693, 696, 709, 712, 725, 728, 729, 732, 738, 739, 741, 743, 744, 746, 747, 752, 753, 755, 756, 757, 760, 761, 769, 770, 777, 780, 781, 783, 784, 785, 822, 826, 828, 830, 831, 832, 861, 864, 867, 868, 873, 874, 875, 877, 878, 880, 881, 910, 912, 920, 922, 929, 931, 941, 943, 944, 945, 948, 960, 961, 963, 964, 965, 974, 977, 978, 981, 986, 989, 994, 996, 997, 998, 1004, 1007, 1008, 1011, 1042, 1043, 1046, 1047, 1049, 1051, 1052, 1053, 1055, 1059, 1061, 1062, 1063, 1069, 1070, 1073, 1080, 1081, 1084, 1085, 1088, 1108, 1113, 1114, 1117, 1122, 1128], "why": [173, 175, 351, 364, 367, 368, 372, 1122], "unifi": [173, 175, 179, 180, 363, 370, 387, 465, 494, 495, 496, 497, 509, 1122], "should": [173, 175, 179, 180, 181, 182, 183, 184, 191, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 373, 374, 406, 407, 409, 420, 424, 425, 428, 436, 465, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 602, 605, 606, 609, 610, 626, 629, 630, 633, 634, 637, 638, 641, 646, 649, 650, 653, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 684, 687, 693, 696, 701, 704, 705, 708, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 763, 796, 805, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 861, 873, 874, 875, 877, 878, 880, 881, 884, 886, 893, 895, 896, 899, 904, 906, 910, 912, 913, 915, 916, 918, 920, 922, 923, 929, 931, 932, 934, 935, 937, 938, 940, 960, 990, 993, 1047, 1058, 1059, 1060, 1061, 1064, 1065, 1066, 1068, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1122], "them": [173, 174, 175, 176, 359, 361, 363, 364, 370, 372, 373, 374, 387, 1122], "c": [173, 175, 176, 184, 293, 335, 336, 349, 354, 357, 360, 364, 369, 370, 371, 373, 387, 515, 693, 696, 752, 760, 761, 769, 822, 826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 861, 867, 960, 1004, 1007, 1049, 1051, 1059, 1062, 1080, 1081, 1084, 1101, 1104, 1108, 1109, 1112, 1122, 1128], "standard": [173, 354, 355, 356, 358, 359, 363, 367, 368, 387, 409, 420, 428, 437, 440, 448, 515, 528, 533, 536, 553, 556, 573, 576, 577, 580, 585, 610, 693, 696, 709, 712, 725, 728, 729, 732, 738, 743, 874, 881, 960, 974, 977, 978, 981, 994, 997, 1042, 1043, 1046, 1047, 1052, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1101, 1104, 1109, 1112, 1113, 1114, 1117, 1122, 1128, 1157, 1158], "re": [173, 174, 175, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 372, 375, 387, 465, 509, 752, 774, 874, 929, 931, 960, 994, 997, 1059, 1063, 1122], "collabor": [173, 174, 175, 1122], "consortium": [173, 175, 1122, 1128], "data": [173, 175, 179, 180, 181, 182, 183, 354, 355, 356, 360, 362, 364, 366, 367, 368, 372, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 432, 433, 434, 436, 437, 440, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 460, 464, 465, 467, 468, 469, 470, 471, 472, 477, 478, 479, 481, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 684, 687, 693, 696, 701, 704, 705, 708, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 760, 761, 798, 799, 801, 818, 826, 842, 859, 861, 870, 874, 875, 877, 878, 880, 881, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 920, 922, 923, 929, 931, 932, 934, 935, 937, 938, 940, 960, 974, 977, 978, 981, 982, 985, 990, 993, 994, 997, 1000, 1003, 1004, 1007, 1047, 1058, 1059, 1060, 1061, 1062, 1069, 1070, 1073, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1128, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154], "api": [173, 174, 350, 351, 354, 356, 357, 359, 360, 362, 363, 365, 366, 367, 368, 369, 371, 373, 387, 409, 420, 428, 437, 440, 515, 528, 533, 536, 553, 556, 573, 576, 577, 580, 585, 610, 693, 696, 709, 712, 725, 728, 729, 732, 738, 743, 874, 881, 960, 974, 977, 978, 981, 994, 997, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1113, 1114, 1117, 1122, 1128], "open": [174, 175, 176, 349, 350, 353, 356, 386, 409, 410, 1047, 1049, 1050, 1053, 1055, 1122], "project": [174, 175, 176, 350, 351, 353, 355, 361, 372, 374, 386, 387, 1047, 1048, 1052], "grown": 174, "consider": [174, 357, 368], "recent": [174, 175, 350, 351], "year": [174, 176, 387, 1122], "especi": [174, 350], "deep": [174, 179, 180, 349, 351, 352, 369, 373, 1122], "learn": [174, 175, 350, 352, 354, 360, 369, 375, 386, 515, 618, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 1020, 1021, 1022, 1023, 1122, 1159, 1160, 1161, 1162, 1163, 1164], "can": [174, 175, 176, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 386, 387, 409, 411, 421, 428, 437, 440, 465, 507, 508, 509, 874, 893, 960, 990, 993, 1047, 1049, 1050, 1122, 1128], "seen": [174, 175, 357, 372, 373], "rapidli": 174, "increas": [174, 465, 489, 493, 497, 960, 970, 973, 1016, 1019, 1024, 1036], "github": [174, 351, 352, 356, 359], "repo": [174, 175, 176, 350, 351, 358, 370, 372, 373, 374, 375, 386, 1122, 1128], "term": [174, 351, 364, 861, 871, 1143, 1153], "time": [174, 175, 176, 350, 351, 352, 359, 360, 364, 365, 368, 370, 373, 375, 387, 826, 833, 835, 843, 845, 861, 871, 960, 1012, 1015, 1020, 1021, 1022, 1023, 1059, 1060, 1061, 1064, 1065, 1066, 1143, 1154, 1155, 1156], "These": [174, 175, 176, 351, 356, 357, 359, 360, 364, 365, 367, 368, 370, 371, 373, 374, 375, 387, 874, 887, 889, 1122, 1128], "written": [174, 350, 355, 356, 363, 367, 368, 370, 372, 375, 387], "mani": [174, 175, 176, 179, 180, 350, 351, 352, 356, 357, 360, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 387, 960, 999], "differ": [174, 175, 176, 179, 180, 181, 182, 183, 350, 351, 354, 355, 356, 357, 359, 360, 363, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 387, 428, 448, 465, 486, 487, 490, 491, 515, 528, 684, 687, 733, 737, 861, 870, 960, 1004, 1007, 1080, 1097, 1100, 1105, 1122], "while": [174, 175, 179, 180, 181, 182, 183, 350, 351, 357, 361, 367, 374, 375, 387, 515, 670, 673, 674, 677, 1064, 1065, 1080, 1089, 1092], "wonder": [174, 176, 372], "thing": [174, 175, 176, 350, 351, 352, 361, 372, 373], "research": [174, 386], "develop": [174, 175, 176, 349, 350, 351, 352, 386, 387, 1122], "consid": [174, 175, 179, 180, 355, 360, 371, 372, 373, 515, 670, 673, 674, 677, 1064, 1065, 1066, 1068], "speed": 174, "evolv": 174, "sharabl": 174, "code": [174, 175, 176, 179, 180, 181, 182, 183, 184, 188, 277, 321, 322, 350, 351, 352, 353, 354, 356, 357, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 385, 387, 398, 400, 401, 402, 403, 404, 405, 465, 487, 510, 515, 573, 576, 729, 732, 826, 828, 830, 831, 832, 861, 867, 868, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1081, 1084, 1108, 1122, 1128], "significantli": 174, "hinder": [174, 368], "librari": [174, 175, 176, 370, 375, 385, 387, 465, 510, 515, 606, 609, 670, 673, 674, 677, 874, 887, 889, 1064, 1065, 1066, 1068, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1122], "outdat": 174, "month": 174, "rigor": 174, "maintain": [174, 351, 1069, 1070, 1073, 1075, 1078], "against": [174, 179, 180, 359, 387, 428, 435, 874, 895, 896, 899, 900, 902, 904, 906, 913, 915, 1059, 1060], "newest": 174, "version": [174, 175, 176, 350, 356, 370, 372, 874, 887, 889, 1122], "For": [174, 175, 176, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 409, 410, 420, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 545, 548, 577, 580, 581, 584, 585, 588, 602, 605, 606, 609, 610, 646, 649, 650, 653, 658, 661, 662, 665, 684, 687, 701, 704, 705, 708, 709, 712, 717, 720, 721, 724, 725, 728, 738, 743, 748, 751, 826, 842, 859, 874, 923, 932, 934, 960, 961, 964, 1004, 1007, 1064, 1065, 1066, 1068, 1080, 1085, 1088, 1093, 1096, 1105, 1132, 1133], "softwar": [174, 175, 350, 351], "pipelin": [174, 363, 375], "where": [174, 175, 176, 179, 180, 181, 182, 349, 350, 351, 352, 353, 356, 360, 361, 363, 364, 365, 366, 367, 370, 373, 374, 375, 387, 409, 416, 417, 420, 515, 545, 548, 602, 654, 657, 684, 687, 701, 704, 752, 792, 796, 805, 874, 887, 889, 895, 904, 906, 913, 915, 916, 918, 923, 925, 926, 928, 932, 934, 935, 937, 960, 961, 964, 970, 973, 974, 977, 982, 985, 1004, 1007, 1016, 1019, 1024, 1025, 1035, 1047, 1048, 1059, 1062, 1080, 1101, 1104, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122], "rapid": [174, 175, 350], "prototyp": 174, "vital": [174, 375], "signific": [174, 175, 387], "bottleneck": 174, "new": [174, 175, 176, 179, 180, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 362, 364, 365, 367, 369, 372, 375, 386, 409, 412, 415, 416, 417, 422, 423, 426, 427, 428, 460, 515, 544, 549, 552, 654, 657, 697, 700, 742, 747, 752, 774, 775, 776, 779, 780, 781, 784, 808, 809, 810, 811, 816, 817, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 960, 974, 977, 990, 993, 1004, 1007, 1024, 1029, 1040, 1041, 1042, 1043, 1046, 1122, 1132, 1133, 1143, 1153, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164], "futur": [174, 176, 350, 351, 372, 387, 874, 887, 889], "avail": [174, 179, 180, 350, 351, 356, 366, 387, 465, 484, 500, 501, 502, 512, 752, 775], "specif": [174, 179, 180, 352, 360, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 386, 387, 428, 456, 465, 507, 510, 515, 670, 673, 674, 677, 752, 774, 775, 776, 803, 874, 887, 889, 929, 931, 960, 1004, 1007, 1020, 1021, 1022, 1023, 1047, 1048, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1122, 1125, 1127, 1128, 1155, 1156], "quickli": [174, 176, 350, 351, 373, 374], "obsolet": [174, 176], "user": [174, 175, 350, 351, 353, 354, 359, 361, 364, 367, 369, 387, 1143, 1154, 1155, 1156], "constantli": 174, "invent": 174, "wheel": 174, "desir": [174, 179, 180, 428, 434, 437, 440, 465, 510, 752, 792, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154], "provid": [174, 179, 180, 350, 351, 356, 357, 360, 363, 364, 365, 366, 367, 368, 370, 374, 386, 387, 406, 407, 409, 420, 428, 443, 444, 445, 452, 456, 464, 465, 484, 752, 773, 805, 809, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 874, 935, 937, 960, 978, 981, 1004, 1007, 1059, 1060, 1080, 1101, 1104, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1159, 1160, 1161, 1162, 1163, 1164], "simultan": [174, 176], "modern": [174, 175], "simpl": [174, 350, 351, 355, 356, 357, 359, 360, 363, 364, 365, 366, 367, 370, 372, 374, 375, 387, 752, 777], "scalabl": [174, 370], "must": [174, 176, 179, 180, 181, 182, 183, 350, 351, 352, 355, 356, 357, 360, 363, 364, 365, 366, 368, 370, 374, 375, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 465, 494, 495, 496, 497, 509, 510, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 764, 765, 767, 770, 774, 775, 776, 778, 781, 784, 792, 805, 808, 809, 826, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1159, 1163], "determin": [174, 179, 180, 356, 360, 364, 365, 366, 428, 437, 440, 442, 447, 452, 453, 454, 464, 465, 500, 501, 502, 512, 515, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 561, 564, 565, 568, 569, 572, 573, 576, 581, 584, 585, 588, 589, 602, 605, 606, 609, 626, 629, 630, 633, 634, 637, 646, 649, 650, 653, 658, 661, 662, 665, 678, 681, 684, 687, 701, 704, 705, 708, 717, 720, 721, 724, 725, 728, 738, 742, 743, 747, 752, 753, 756, 760, 761, 791, 793, 797, 798, 799, 800, 801, 818, 825, 826, 842, 861, 872, 874, 875, 877, 878, 880, 881, 883, 884, 886, 893, 895, 896, 899, 904, 906, 910, 912, 913, 915, 919, 920, 922, 932, 934, 935, 937, 938, 940, 1020, 1021, 1022, 1023, 1064, 1065, 1066, 1068, 1113, 1114, 1117, 1118, 1121], "exactli": [174, 176, 357, 364, 366, 1122, 1128], "common": [174, 179, 180, 351, 352, 357, 360, 362, 364, 366, 387], "ground": [174, 359], "li": 174, "between": [174, 179, 180, 181, 182, 183, 357, 359, 360, 363, 364, 368, 369, 371, 372, 373, 375, 386, 409, 410, 428, 448, 515, 545, 548, 701, 704, 944, 945, 948, 950, 953, 955, 958, 960, 974, 977, 1004, 1007, 1024, 1030, 1047, 1049, 1050, 1064, 1065, 1066, 1068, 1122, 1159, 1161], "find": [174, 179, 180, 350, 351, 370, 373, 1064, 1065, 1066, 1068, 1122], "exist": [174, 175, 179, 180, 181, 182, 350, 352, 353, 356, 357, 358, 359, 360, 361, 362, 367, 370, 387, 752, 773, 1159, 1163], "essenti": [174, 175, 352, 357, 360, 366], "order": [174, 179, 180, 181, 182, 183, 350, 351, 353, 356, 357, 361, 363, 364, 365, 366, 368, 372, 373, 375, 387, 515, 545, 548, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 874, 887, 889, 900, 902, 923, 925, 926, 928, 938, 940, 960, 978, 981, 1020, 1021, 1022, 1059, 1062, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1165, 1166], "design": [174, 175, 354, 367, 370, 372, 387], "univers": 174, "abstract": [174, 364, 374, 387, 465, 480, 1159, 1163], "In": [174, 176, 350, 351, 355, 356, 357, 360, 361, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 465, 504, 510, 511, 514, 515, 528, 684, 687, 705, 708, 752, 758, 796, 960, 990, 993, 1047, 1053, 1055, 1122], "languag": [174, 176, 370], "first": [174, 175, 350, 351, 353, 357, 360, 363, 364, 368, 370, 372, 373, 375, 406, 407, 409, 418, 419, 428, 455, 460, 465, 484, 496, 515, 528, 531, 553, 556, 561, 564, 565, 568, 569, 572, 573, 576, 592, 594, 597, 605, 613, 614, 617, 621, 622, 625, 638, 641, 642, 645, 662, 665, 666, 669, 674, 677, 678, 681, 684, 687, 693, 696, 701, 704, 733, 737, 752, 760, 826, 837, 874, 878, 880, 884, 886, 887, 889, 896, 899, 910, 912, 916, 918, 923, 929, 931, 935, 937, 960, 966, 969, 994, 997, 1004, 1007, 1008, 1011, 1020, 1021, 1022, 1023, 1024, 1025, 1034, 1035, 1047, 1058, 1059, 1060, 1061, 1064, 1065, 1066, 1143, 1154, 1155, 1156, 1159, 1163], "see": [174, 349, 350, 351, 352, 358, 360, 364, 366, 368, 372, 373, 386, 387, 409, 410, 415, 418, 419, 428, 436, 456, 515, 528, 531, 553, 556, 561, 564, 565, 568, 569, 572, 573, 576, 589, 605, 606, 609, 638, 641, 662, 665, 674, 677, 678, 681, 684, 687, 693, 696, 701, 704, 705, 708, 733, 737, 874, 895, 904, 906, 913, 915, 920, 922, 935, 937, 938, 940, 1059, 1061, 1064, 1065, 1066, 1068, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122], "clear": [174, 175, 176, 351, 352, 357, 359, 365, 366, 370, 372, 465, 483], "front": [174, 369, 370, 373, 1122, 1128], "runner": 174, "look": [174, 350, 351, 353, 355, 357, 360, 361, 364, 365, 366, 368, 370, 372, 374, 375, 1122], "littl": [174, 372], "deeper": [174, 351, 354, 369, 465, 489, 493, 497, 1024, 1035, 1036], "follow": [174, 175, 179, 180, 350, 351, 352, 353, 355, 356, 357, 359, 361, 363, 364, 365, 366, 367, 369, 370, 372, 373, 374, 375, 387, 428, 451, 465, 509, 515, 705, 708, 752, 794, 795, 796, 816, 817, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 861, 872, 873, 874, 916, 918, 938, 940, 1024, 1030, 1036, 1064, 1065, 1066, 1068, 1122, 1143, 1153, 1159, 1163], "core": [174, 350, 352, 366, 370, 375, 465, 501, 1122], "principl": 174, "oper": [174, 179, 180, 181, 182, 184, 350, 352, 356, 357, 360, 363, 364, 366, 367, 373, 374, 409, 418, 419, 428, 456, 515, 528, 569, 572, 573, 576, 597, 621, 622, 625, 689, 692, 693, 696, 705, 708, 729, 732, 752, 762, 774, 775, 776, 818, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 861, 862, 863, 864, 865, 866, 867, 868, 870], "expos": [174, 370, 374, 752, 768], "almost": [174, 351, 364, 371, 373], "ident": [174, 176, 179, 180, 360, 362, 364, 372, 373, 387, 465, 499, 1024, 1037, 1122], "uniqu": [174, 360, 364, 387, 465, 474, 475, 1020, 1021, 1022, 1023, 1024, 1030, 1064, 1065, 1066, 1067, 1068], "syntax": [174, 175], "There": [174, 350, 351, 357, 360, 363, 364, 365, 370, 373, 387], "onli": [174, 179, 180, 349, 350, 351, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 385, 387, 465, 505, 515, 670, 673, 674, 677, 874, 896, 899, 916, 918, 960, 978, 981, 1024, 1025, 1026, 1034, 1035, 1059, 1060, 1061, 1080, 1089, 1092, 1122, 1159, 1160, 1161, 1162, 1163, 1164], "wai": [174, 175, 350, 361, 367, 372, 373, 374, 375, 387], "unsurprisingli": [174, 357], "fundament": [174, 364, 370], "consist": [174, 179, 180, 363, 367, 465, 497, 874, 887, 889, 1080, 1081, 1084, 1108, 1155, 1156], "each": [174, 175, 176, 179, 180, 181, 182, 183, 184, 351, 352, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 375, 386, 387, 398, 401, 402, 404, 409, 420, 428, 435, 465, 474, 475, 486, 487, 488, 489, 490, 491, 492, 496, 509, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 753, 756, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 861, 862, 863, 864, 865, 866, 867, 868, 869, 874, 875, 877, 878, 880, 881, 887, 889, 895, 896, 899, 904, 906, 907, 909, 913, 915, 920, 922, 923, 960, 970, 973, 986, 989, 994, 997, 999, 1004, 1007, 1012, 1015, 1016, 1019, 1024, 1030, 1037, 1047, 1048, 1059, 1062, 1064, 1065, 1066, 1080, 1081, 1084, 1108, 1122, 1128, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "veri": [174, 175, 350, 351, 355, 357, 359, 360, 364, 366, 367, 368, 371, 373, 374, 375, 387, 1122], "similar": [174, 355, 364, 365, 366, 373, 387, 515, 705, 708, 861, 872, 1143, 1154], "convent": [174, 386, 874, 896, 899, 1080, 1081, 1084, 1108], "those": [174, 179, 180, 350, 351, 352, 364, 370, 375, 409, 410, 826, 859, 874, 916, 918, 923, 960, 961, 964], "introduc": [174, 364, 373, 960, 994, 997, 1064, 1065], "2006": 174, "therefor": [174, 351, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 370, 372, 374, 387, 428, 437, 440, 515, 528, 533, 536, 577, 580, 610, 693, 696, 725, 728, 729, 732, 738, 752, 780, 861, 864, 873, 960, 994, 997, 1042, 1043, 1046, 1080, 1085, 1088, 1113, 1114, 1117], "present": [174, 179, 180, 351, 358, 364, 365, 366, 367, 368, 370], "itself": [174, 350, 351, 364, 367, 368, 374, 386, 387, 752, 758, 1024, 1036], "cut": 174, "cloth": 174, "adher": [174, 175, 356, 358, 370, 375], "semant": [174, 370, 375, 515, 705, 708], "up": [174, 175, 176, 349, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 386, 387], "hopefulli": [174, 175, 176, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386], "paint": [174, 370], "pictur": [174, 370], "how": [174, 176, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 386, 387, 1122, 1128, 1143, 1154, 1155, 1156], "pleas": [174, 175, 176, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 1122], "discuss": [174, 175, 176, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 1122], "faq": [174, 175, 176, 370, 372, 373, 374, 375, 386], "reach": [174, 175, 176, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 465, 489, 493, 497, 1024, 1036], "discord": [174, 175, 176, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 386, 1122], "you": [174, 175, 176, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 386, 387, 1122, 1128], "question": [174, 175, 176, 350, 351, 357, 359, 370, 372, 373, 374, 375, 386, 387, 1122], "central": 175, "goal": [175, 352], "being": [175, 176, 179, 180, 350, 351, 357, 359, 362, 363, 364, 365, 366, 367, 368, 370, 373, 386, 387, 409, 410, 752, 807, 812, 1064, 1067, 1122], "would": [175, 350, 351, 353, 354, 356, 357, 359, 361, 362, 363, 364, 367, 368, 369, 370, 372, 374, 375, 387, 398, 403, 465, 510, 1122], "entir": [175, 176, 179, 180, 351, 357, 358, 359, 363, 364, 367, 372, 373, 374, 375, 387, 465, 509, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1143, 1152], "forgiven": 175, "rais": [175, 179, 180, 351, 367, 370, 372, 428, 436, 515, 602, 701, 704, 752, 762, 787, 796, 810, 817, 823, 874, 896, 899, 903, 935, 937, 960, 1000, 1003, 1004, 1007, 1059, 1062, 1080, 1085, 1088, 1093, 1096, 1113, 1114, 1117, 1118, 1121, 1155, 1156, 1159, 1163], "eyebrow": 175, "somehow": 175, "pytorch": [175, 176, 352, 360, 365, 366, 367, 368, 370, 372, 375, 387, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 1122, 1159, 1160, 1161, 1162, 1163, 1164], "other": [175, 179, 180, 181, 182, 184, 350, 351, 355, 356, 357, 359, 360, 363, 364, 367, 370, 372, 374, 375, 385, 386, 387, 406, 407, 409, 410, 515, 606, 609, 752, 753, 756, 758, 826, 837, 1047, 1053, 1055, 1064, 1067, 1080, 1101, 1104, 1109, 1112, 1122], "strong": [175, 387], "industri": 175, "back": [175, 363, 369, 370, 372, 387, 1122, 1128, 1155, 1156, 1159, 1163], "momentum": 175, "won": [175, 176, 351, 375], "ad": [175, 184, 191, 347, 348, 350, 351, 352, 355, 356, 357, 359, 360, 362, 363, 364, 365, 367, 368, 370, 374, 387, 752, 816, 817, 874, 887, 889, 960, 974, 977, 1165, 1166], "just": [175, 176, 350, 351, 356, 357, 359, 360, 367, 370, 372, 373, 387, 1080, 1081, 1084, 1108, 1143, 1152], "make": [175, 176, 350, 351, 352, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 370, 372, 373, 375, 465], "problem": [175, 351, 363, 372], "even": [175, 176, 350, 351, 356, 360, 365, 366, 368, 372, 373, 374, 375, 387, 515, 701, 704, 709, 712], "wors": 175, "rather": [175, 179, 180, 355, 356, 359, 364, 375, 387, 409, 410, 465, 509, 752, 798, 799, 801, 826, 842], "funni": 175, "comic": 175, "strip": 175, "easi": [175, 350, 351, 360, 364], "feasibl": 175, "space": [175, 409, 410, 418, 419, 752, 779], "unlik": [175, 357, 364, 465], "charger": 175, "charact": 175, "encod": [175, 373, 752, 779], "instant": [175, 1122], "messag": [175, 351, 370, 372, 1168, 1169], "much": [175, 351, 355, 363, 364, 367, 370, 372, 373], "doe": [175, 179, 180, 351, 353, 354, 355, 356, 357, 359, 360, 361, 365, 367, 368, 370, 372, 373, 387, 515, 573, 576, 752, 796, 960, 999], "mandat": [175, 359, 367], "adopt": [175, 351, 363], "continu": [175, 176, 358, 359, 387], "own": [175, 176, 350, 356, 370, 387], "signatur": [175, 355, 356, 357, 364, 365, 366, 367, 368, 428, 437, 440, 515, 533, 536, 573, 576, 577, 580, 585, 610, 693, 696, 725, 728, 729, 732, 960, 974, 977, 994, 997, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088], "replac": [175, 179, 180, 351, 353, 357, 359, 362, 364, 365, 366, 370, 372, 375, 387, 752, 808, 809, 960, 961, 964, 1047, 1048], "your": [175, 176, 349, 350, 352, 353, 355, 356, 373, 374, 387, 1122], "10": [175, 177, 178, 179, 180, 181, 182, 183, 184, 236, 289, 293, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 353, 357, 364, 370, 372, 373, 409, 416, 419, 465, 515, 553, 556, 557, 560, 585, 597, 621, 622, 625, 650, 653, 725, 728, 752, 770, 780, 807, 812, 826, 843, 844, 845, 846, 861, 867, 874, 881, 884, 886, 910, 912, 929, 931, 960, 978, 981, 986, 989, 999, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1059, 1062, 1064, 1065, 1080, 1081, 1084, 1085, 1088, 1108, 1159, 1161], "100": [175, 176, 184, 293, 335, 336, 373, 374, 375, 387, 515, 725, 728, 1049, 1051, 1122], "despit": [175, 364, 366], "distinct": [175, 356, 364, 367, 369, 1064, 1065, 1066, 1068, 1122], "still": [175, 179, 180, 356, 359, 365, 372, 374, 387, 1122], "believ": [175, 351], "share": [175, 179, 180, 357, 359, 360, 361, 364, 370, 428, 460], "bring": [175, 370, 371], "benefit": [175, 176, 350, 351, 363, 364, 367, 372, 373, 387], "unrel": [175, 351], "what": [175, 176, 351, 354, 356, 357, 362, 364, 368, 369, 370, 372, 373, 374, 375, 386, 387, 1122], "again": [175, 176, 351, 355, 357, 364, 367, 373, 375, 387], "contrari": 175, "bumpi": 175, "road": 175, "allud": [175, 373], "most": [175, 179, 180, 350, 351, 355, 359, 360, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 387, 874, 887, 889], "technolog": 175, "sector": [175, 515, 523, 524, 527, 537, 540, 544, 549, 552, 584, 588, 742, 747], "full": [175, 176, 181, 182, 351, 356, 365, 368, 370, 387, 409, 428, 448, 515, 597, 621, 622, 625, 861, 867, 874, 916, 918, 920, 922, 923, 1042, 1043, 1046], "success": 175, "reason": [175, 351, 355, 357, 360, 363, 364, 365, 367, 370, 372, 515, 705, 708], "build": [175, 349, 350, 360, 369, 371, 374, 375, 387, 1064, 1065, 1066, 1068, 1122, 1143, 1154, 1155, 1156], "custom": [175, 374], "comput": [175, 176, 179, 180, 350, 360, 364, 370, 373, 387, 465, 509, 515, 528, 553, 556, 565, 568, 573, 576, 594, 597, 598, 601, 618, 621, 622, 625, 638, 641, 642, 645, 666, 669, 670, 673, 674, 677, 678, 681, 684, 687, 689, 692, 693, 696, 752, 764, 765, 767, 770, 771, 826, 828, 831, 833, 835, 837, 838, 840, 843, 845, 847, 849, 851, 853, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 870, 872, 874, 875, 877, 878, 880, 883, 887, 889, 890, 892, 893, 896, 899, 900, 902, 916, 918, 919, 920, 922, 923, 935, 937, 938, 940, 944, 945, 948, 950, 953, 955, 958, 1024, 1030, 1064, 1065, 1066, 1068, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112], "thank": [175, 373], "interoper": 175, "compon": [175, 370], "bio": [175, 350], "hardwar": [175, 350], "initi": [175, 179, 180, 181, 182, 183, 351, 361, 365, 366, 465, 861, 871, 1136, 1137, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1159, 1163], "pcie": 175, "interfac": [175, 375, 387], "motherboard": 175, "raid": 175, "storag": [175, 373], "virtual": [175, 351, 353], "bluetooth": 175, "wireless": 175, "exchang": 175, "btx": 175, "factor": [175, 465, 474, 507, 508, 509, 826, 828, 831, 833, 835, 843, 845, 847, 849, 861, 862, 863, 864, 865, 866, 867, 868, 874, 875, 877, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1159, 1160, 1161, 1162], "sata": 175, "connect": [175, 350, 374, 375, 1143, 1153, 1154], "host": [175, 387], "bu": 175, "adapt": [175, 826, 847, 849, 1159, 1162], "html": [175, 353, 356, 428, 437, 440, 515, 533, 536, 573, 576, 577, 580, 585, 610, 693, 696, 725, 728, 729, 732, 960, 974, 977, 994, 997, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088], "enabl": [175, 179, 180, 181, 182, 183, 350, 351, 359, 360, 363, 364, 367, 369, 370, 371, 373, 375, 387], "anyon": [175, 349, 387], "websit": 175, "tcp": 175, "ip": 175, "node": [175, 179, 180, 364, 1024, 1025, 1034, 1035], "commun": [175, 349, 351, 352, 387, 1122, 1128], "network": [175, 360, 364, 370, 374, 386, 861, 870, 1122, 1129, 1143, 1155, 1156], "smtp": 175, "possibl": [175, 349, 350, 351, 352, 356, 357, 359, 364, 365, 367, 370, 373, 386, 387, 752, 802, 820, 1080, 1085, 1088, 1093, 1096], "send": 175, "gmail": 175, "outlook": 175, "pop": 175, "email": 175, "ieee": [175, 408, 428, 448, 515, 528, 606, 609, 684, 687, 705, 708, 725, 728], "754": [175, 408, 428, 448, 515, 528, 606, 609, 684, 687, 705, 708, 725, 728], "allow": [175, 370, 387, 409, 418, 419, 752, 802, 1155, 1156], "calcul": [175, 179, 180, 181, 182, 183, 356, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 545, 548, 581, 584, 585, 588, 589, 602, 605, 606, 609, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 684, 687, 701, 704, 717, 720, 721, 724, 725, 728, 733, 737, 738, 743, 944, 945, 948, 950, 953, 955, 958, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112], "live": [175, 176], "depend": [175, 350, 351, 356, 362, 364, 365, 370, 387, 428, 434, 515, 516, 519, 520, 523, 524, 527, 533, 536, 537, 540, 541, 545, 548, 581, 584, 585, 588, 602, 606, 609, 646, 649, 650, 653, 654, 657, 658, 661, 701, 704, 717, 720, 721, 724, 738, 743, 874, 887, 889, 916, 918, 920, 922, 923, 1059, 1063, 1069, 1070, 1073, 1075, 1078], "did": [175, 352, 375], "aris": [175, 387], "until": [175, 351, 387, 1122], "substanti": [175, 351, 359, 363], "innov": 175, "growth": 175, "usag": [175, 370, 465, 509], "relev": [175, 350, 352, 357, 364, 365, 373, 1159, 1160, 1161, 1162, 1163, 1164], "area": [175, 367, 385, 515, 523, 524, 527, 537, 540, 544, 549, 552, 584, 588, 742, 747, 1122], "necess": 175, "parti": [175, 387], "could": [175, 176, 350, 351, 357, 359, 364, 365, 367, 370, 372, 373, 374, 1064, 1065, 1066, 1068], "easili": [175, 351, 373, 374, 375, 387, 1122], "engag": [175, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "regard": [175, 364, 465], "effect": [175, 356, 363, 364, 368, 387, 409, 420, 826, 851, 853, 1080, 1101, 1104, 1109, 1112], "2015": 175, "sinc": [175, 350, 351, 387], "alongsid": 175, "machin": [175, 350, 360, 386, 428, 448, 451, 515, 618, 874, 895, 904, 906, 913, 915], "given": [175, 176, 179, 180, 350, 351, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 374, 375, 386, 409, 410, 412, 418, 419, 465, 498, 504, 506, 507, 508, 509, 511, 514, 752, 770, 771, 781, 784, 808, 809, 824, 826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 861, 862, 863, 864, 865, 866, 867, 868, 874, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 974, 977, 978, 981, 986, 989, 994, 997, 999, 1012, 1015, 1024, 1031, 1032, 1047, 1049, 1050, 1052, 1053, 1055, 1058, 1069, 1075, 1078, 1132, 1133], "frame": [175, 386], "matur": [175, 387], "state": [175, 356, 368, 369, 370, 371, 373, 386, 515, 684, 687, 861, 871, 1122, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "than": [175, 179, 180, 351, 355, 357, 359, 364, 367, 370, 373, 374, 375, 387, 409, 410, 428, 448, 465, 509, 515, 520, 523, 524, 527, 533, 536, 545, 548, 561, 564, 569, 572, 577, 580, 584, 588, 592, 610, 613, 614, 617, 646, 649, 650, 653, 658, 661, 682, 701, 704, 705, 708, 713, 716, 725, 728, 748, 751, 752, 798, 799, 801, 826, 842, 874, 878, 880, 895, 896, 899, 904, 906, 913, 915, 938, 940, 960, 961, 964, 978, 981, 1000, 1003, 1047, 1053, 1055, 1064, 1065, 1066, 1068, 1080, 1097, 1100, 1101, 1104, 1105, 1109, 1112], "preced": [175, 374], "mention": [175, 350, 351, 357, 360, 367, 368], "aros": 175, "70": [175, 874, 910, 912, 1080, 1081, 1084, 1108], "80": [175, 874, 910, 912, 1080, 1081, 1084, 1108], "90": [175, 184, 293, 335, 336, 515, 573, 576, 709, 712, 874, 910, 912, 1049, 1051, 1080, 1081, 1084, 1108], "effort": [175, 349, 387], "stage": [175, 349, 351, 353, 354, 1122], "complet": [175, 179, 180, 351, 352, 363, 364, 372, 373, 874, 916, 918], "natur": [175, 357, 363, 364, 386, 515, 602, 646, 649, 654, 657, 874, 883, 919], "like": [175, 350, 351, 353, 354, 355, 356, 357, 359, 366, 367, 368, 369, 370, 372, 373, 374, 375, 386, 387, 826, 842, 1047, 1053, 1055, 1122], "certainli": 175, "mission": [175, 1122], "creat": [175, 179, 180, 349, 350, 351, 353, 365, 366, 367, 370, 371, 374, 385, 386, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 426, 427, 465, 474, 475, 752, 780, 781, 784, 805, 808, 809, 820, 826, 858, 1047, 1048, 1049, 1050, 1053, 1055, 1122, 1128, 1132, 1133, 1134, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "At": [175, 352], "process": [175, 176, 349, 350, 351, 353, 360, 364, 370, 375, 465, 474, 475, 504, 514], "ourselv": 175, "lead": [175, 176, 179, 180, 181, 182, 183, 387, 874, 916, 918, 923], "quansight": 175, "compani": 175, "made": [175, 351, 352, 364, 367, 370, 372], "organ": [175, 355, 360, 363, 364], "panda": 175, "scipi": 175, "conda": [175, 350, 353], "dask": [175, 1064, 1065, 1066, 1068], "apach": 175, "onnx": 175, "scikit": 175, "jupyt": 175, "aw": 175, "cupi": 175, "net": [175, 176, 370, 375], "sympi": 175, "rai": [175, 515, 545, 548], "modin": 175, "spyder": 175, "includ": [175, 179, 180, 351, 352, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 386, 387, 409, 410, 411, 421, 752, 791, 825, 874, 938, 940, 1024, 1025, 1047, 1053, 1055, 1059, 1061, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1125, 1127, 1143, 1153, 1154, 1157, 1158], "member": [175, 351], "googl": [175, 1122], "octoml": 175, "einop": [175, 179, 180, 752, 774, 775, 776], "further": [175, 176, 351, 353, 357, 363, 369, 373, 374, 1122], "sponsor": 175, "lg": 175, "electron": 175, "microsoft": 175, "d": [175, 176, 184, 293, 335, 336, 349, 350, 354, 364, 373, 752, 761, 769, 861, 862, 863, 864, 865, 866, 867, 868, 874, 884, 886, 910, 912, 1049, 1051, 1122, 1128], "shaw": 175, "intel": 175, "togeth": [175, 179, 180, 363, 364, 374, 375, 387, 1165, 1166], "major": [175, 365, 366, 387, 1059, 1062], "involv": [175, 349, 353, 354, 365, 375, 428, 456, 515, 528, 684, 687, 1122, 1128], "anoth": [175, 179, 180, 350, 351, 360, 364, 365, 372, 375, 409, 415, 428, 435, 437, 440], "promis": 175, "pursuit": 175, "unif": [175, 349, 372, 1122, 1128], "clearli": [175, 352, 357], "lot": [175, 176, 362, 372, 387], "thought": [175, 350, 351, 368], "care": [175, 351, 375], "attent": [175, 351, 363, 364, 861, 872, 873, 1143, 1154], "gone": [175, 369], "simplifi": [175, 370, 371, 372, 374], "compat": [175, 368, 387, 428, 436, 515, 528, 531, 545, 548, 553, 556, 561, 564, 565, 568, 569, 572, 573, 576, 589, 592, 594, 597, 605, 613, 614, 617, 621, 622, 625, 638, 641, 642, 645, 662, 665, 666, 669, 674, 677, 678, 681, 684, 687, 693, 696, 701, 704, 705, 708, 733, 737, 874, 895, 904, 906, 913, 915, 920, 922, 929, 931, 935, 937, 938, 940, 960, 990, 993, 1059, 1061, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122], "excit": [175, 349, 354, 1122], "complianc": 175, "hope": [175, 387], "due": [175, 350, 364, 367, 515, 684, 687], "suit": [175, 350, 351, 354, 358, 359, 373, 386], "some": [175, 176, 179, 180, 350, 351, 352, 355, 356, 357, 360, 363, 364, 365, 366, 367, 368, 371, 372, 373, 374, 386, 387, 515, 606, 609, 826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 859, 861, 869, 1122, 1143, 1151], "motiv": [175, 372], "great": [175, 176, 359, 370, 372], "convinc": 175, "celebr": 175, "encourag": [175, 386, 387, 1122, 1128], "foundat": 175, "point": [176, 351, 356, 357, 363, 367, 368, 370, 372, 373, 386, 408, 409, 410, 412, 414, 416, 422, 426, 428, 434, 448, 453, 456, 515, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 573, 576, 577, 580, 581, 584, 585, 588, 589, 602, 605, 606, 609, 610, 646, 649, 650, 653, 658, 661, 662, 665, 684, 687, 701, 704, 705, 708, 709, 712, 717, 720, 721, 724, 725, 728, 738, 742, 743, 747, 748, 751, 874, 875, 877, 881, 887, 889, 890, 892, 893, 895, 904, 906, 913, 915, 916, 918, 920, 922, 923, 938, 940, 1064, 1065, 1066, 1068, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112], "mai": [176, 350, 351, 364, 372, 374, 409, 410, 415, 465, 510, 515, 594, 597, 621, 622, 625, 642, 645, 670, 673, 674, 677, 752, 773, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1085, 1088, 1089, 1092, 1093, 1096], "ask": [176, 370, 372, 387, 1122], "perfectli": 176, "happi": [176, 350, 387], "abund": 176, "better": [176, 351, 354, 369, 372, 373, 374], "ll": [176, 349, 351, 357, 364, 367, 373], "give": [176, 350, 351, 354, 356, 357, 361, 368, 372, 960, 990, 993], "two": [176, 181, 182, 184, 356, 357, 359, 363, 364, 369, 373, 375, 409, 410, 414, 420, 424, 425, 428, 455, 460, 515, 569, 572, 709, 712, 752, 760, 874, 875, 877, 881, 883, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 919, 920, 922, 923, 925, 926, 928, 932, 934, 935, 937, 960, 1008, 1011, 1064, 1065, 1066, 1067, 1068, 1122], "streamlin": 176, "workflow": [176, 351, 373, 385, 1122], "save": [176, 179, 180, 387, 752, 813, 1155, 1156], "week": [176, 351, 352, 1122], "let": [176, 356, 357, 364, 365, 366, 370, 372, 373, 374, 375, 1080, 1089, 1092, 1101, 1104, 1105, 1109, 1112, 1122], "sai": [176, 350, 362, 372], "deepmind": 176, "releas": [176, 350, 352, 1122], "awesom": 176, "paper": 176, "love": 176, "choic": [176, 350, 367, 373, 1080, 1101, 1104, 1109, 1112], "perceiverio": 176, "happen": [176, 350, 351, 373], "slew": 176, "rush": 176, "f": [176, 353, 354, 364, 370, 373, 375, 515, 618, 752, 793, 797], "g": [176, 354, 364, 387, 428, 433, 456, 465, 481, 1047, 1052, 1053, 1055, 1064, 1065, 1066, 1068, 1080, 1085, 1088, 1093, 1096, 1097, 1100, 1105], "inevit": 176, "deviat": [176, 1042, 1043, 1046, 1047, 1052, 1080, 1101, 1104, 1157, 1158], "origin": [176, 179, 180, 181, 182, 183, 361, 362, 365, 370, 372, 515, 545, 548, 874, 900, 902, 960, 990, 993, 994, 997], "often": [176, 360, 387], "erron": 176, "train": [176, 360, 364, 366, 373, 374, 375, 385, 386, 387, 826, 828, 831, 833, 835, 843, 845, 1122], "poor": 176, "converg": 176, "perform": [176, 179, 180, 355, 357, 359, 360, 361, 363, 364, 366, 367, 368, 370, 373, 387, 398, 403, 409, 418, 419, 465, 752, 770, 774, 775, 776, 794, 795, 796, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 861, 869, 871, 874, 923, 1020, 1021, 1022, 1023, 1024, 1031, 1032, 1113, 1114, 1117, 1118, 1121], "issu": [176, 349, 352, 370, 372, 374, 387], "publish": [176, 387], "manag": [176, 349, 367, 387, 465], "get": [176, 179, 180, 349, 350, 352, 354, 360, 365, 366, 367, 370, 371, 372, 373, 374, 428, 446, 447, 448, 451, 465, 474, 475, 484, 485, 498, 499, 504, 508, 511, 514, 752, 759, 786, 787, 788, 807, 1122, 1128, 1143, 1152], "work": [176, 350, 351, 352, 354, 359, 364, 365, 366, 369, 370, 371, 372, 374, 375, 1122, 1128], "repositori": [176, 350, 351, 353, 358], "pull": [176, 349, 350, 353, 355, 387], "request": [176, 349, 355, 465, 501], "confus": [176, 367], "do": [176, 179, 180, 350, 351, 352, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 387, 515, 705, 708, 752, 796, 826, 842, 859, 1024, 1025, 1034, 1035, 1036], "expect": [176, 387, 752, 759, 1122], "codebas": [176, 349, 354, 355, 367, 369, 465, 507, 508, 1122], "total": [176, 179, 180, 181, 182, 183, 349, 351, 357, 359, 366, 373, 374, 387, 465, 511, 1059, 1062, 1080, 1101, 1104, 1109, 1112], "hour": 176, "spent": 176, "spin": 176, "off": [176, 369, 874, 884, 886, 932, 934], "test": [176, 350, 352, 354, 357, 387, 428, 453, 454, 515, 626, 629, 630, 633, 634, 637, 1113, 1114, 1117, 1118, 1121], "error": [176, 179, 180, 350, 359, 363, 366, 368, 372, 387, 398, 399, 465, 515, 598, 601, 1080, 1085, 1088, 1093, 1096, 1155, 1156, 1159, 1163], "address": [176, 351, 352, 363, 370], "sake": 176, "singl": [176, 179, 180, 351, 355, 357, 359, 360, 362, 364, 367, 368, 370, 373, 374, 375, 387, 465, 474, 475, 494, 495, 496, 497, 752, 822, 825, 1047, 1052, 1053, 1055, 1064, 1065], "multipl": [176, 179, 180, 184, 193, 279, 280, 284, 287, 293, 295, 317, 318, 319, 320, 331, 332, 335, 336, 351, 357, 360, 364, 387, 515, 532, 662, 684, 687, 752, 753, 755, 756, 757, 781, 785, 802, 874, 893, 960, 961, 964, 965, 994, 997, 998, 999, 1042, 1043, 1046, 1049, 1051, 1059, 1060, 1061, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1143, 1153], "line": [176, 350, 357, 363, 371, 372, 373, 374, 385, 1122, 1128], "directli": [176, 351, 355, 356, 360, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 386, 387, 1024, 1036], "graph": [176, 360, 364, 371, 387, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 1064, 1065, 1066, 1068, 1155, 1156], "guarante": [176, 363, 387, 1064, 1065], "turn": [176, 357, 364], "take": [176, 349, 350, 351, 356, 357, 359, 364, 365, 366, 370, 372, 374, 375, 387, 515, 573, 576, 1122, 1128], "few": [176, 351, 352, 360, 364, 365, 366, 367, 371, 372, 373, 374, 385, 1122, 1128], "second": [176, 350, 357, 367, 372, 428, 455, 460, 465, 496, 515, 528, 531, 553, 556, 561, 564, 565, 568, 569, 572, 573, 576, 592, 594, 597, 605, 613, 614, 617, 621, 622, 625, 638, 641, 642, 645, 662, 665, 666, 669, 674, 677, 678, 681, 684, 687, 693, 696, 701, 704, 733, 737, 752, 760, 807, 812, 826, 828, 831, 833, 835, 843, 845, 874, 878, 880, 884, 886, 887, 889, 896, 899, 910, 912, 916, 918, 923, 929, 931, 935, 937, 960, 1004, 1007, 1008, 1011, 1020, 1022, 1064, 1065, 1066, 1159, 1160, 1161], "automat": [176, 350, 351, 360, 364, 368, 369, 370, 371, 374, 375, 1122], "everyon": [176, 349, 351, 387], "regardless": [176, 179, 180, 349, 372, 375, 406, 407], "wouldn": 176, "nice": [176, 359], "write": [176, 179, 180, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 367, 370, 372, 375, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 434, 436, 465, 510, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 764, 765, 767, 770, 771, 774, 775, 776, 778, 780, 781, 784, 792, 805, 808, 809, 826, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1058, 1059, 1063, 1064, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "onc": [176, 350, 351, 364, 365, 366, 370, 373, 387, 465, 509, 874, 893, 923, 1047, 1048], "know": [176, 1064, 1065, 1066, 1068], "among": [176, 179, 180, 359], "frantic": 176, "port": 176, "lucid": 176, "honk": 176, "improv": [176, 351, 360, 370], "understand": [176, 350, 351, 352, 353, 354, 356, 357, 358, 368, 369], "pattern": [176, 179, 180, 356, 365, 752, 774, 775, 776], "hasn": 176, "now": [176, 179, 180, 350, 353, 355, 362, 364, 365, 368, 372, 373, 375, 386, 387, 1143, 1154, 1155, 1156], "spend": 176, "torchvis": 176, "probabl": [176, 861, 869, 1047, 1048, 1143, 1151], "sonnet": 176, "about": [176, 350, 351, 358, 369, 370, 374, 375, 387, 428, 448, 451], "next": [176, 350, 351, 352, 353, 356, 357, 361, 362, 372, 373, 428, 448, 1122, 1155, 1156, 1159, 1160, 1161, 1162, 1163, 1164], "everyth": [176, 351, 352, 371, 387], "zero": [176, 179, 180, 181, 182, 357, 363, 364, 365, 366, 368, 370, 373, 374, 398, 400, 401, 409, 412, 414, 420, 424, 425, 427, 428, 434, 515, 528, 533, 536, 561, 564, 585, 606, 609, 610, 670, 673, 674, 677, 682, 683, 684, 687, 689, 692, 693, 696, 701, 704, 705, 708, 709, 712, 725, 728, 729, 732, 738, 743, 752, 770, 805, 808, 809, 826, 828, 831, 833, 835, 843, 845, 847, 849, 861, 869, 874, 881, 895, 896, 899, 904, 906, 913, 915, 935, 937, 938, 940, 960, 974, 977, 978, 981, 986, 989, 994, 997, 1016, 1019, 1042, 1043, 1046, 1047, 1049, 1050, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1068, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1134, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1159, 1160, 1161, 1162], "need": [176, 350, 351, 352, 353, 355, 356, 357, 358, 360, 363, 364, 367, 370, 372, 373, 386, 387, 752, 764, 765, 767, 960, 961, 964, 974, 977], "said": 176, "high": [176, 179, 180, 184, 262, 293, 294, 335, 336, 352, 373, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "level": [176, 349, 352, 360, 369, 370, 373, 374, 375, 387], "optim": [176, 367, 371, 373, 375, 386, 465, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 1020, 1021, 1022, 1023, 1122, 1160, 1161, 1162, 1164], "trainer": [176, 385, 387, 1122], "statu": 176, "quo": 176, "kera": 176, "dopamin": 176, "ignit": 176, "catalyst": 176, "lightn": 176, "fastai": 176, "haiku": [176, 375], "flax": [176, 375, 387], "trax": [176, 375], "objax": [176, 375], "idea": [176, 386], "fulli": [176, 363, 364, 368, 370, 371, 372, 373, 374, 375, 387, 1143, 1153, 1154], "offer": [176, 374], "containerwithactiv": [177, 181, 182], "dict_in": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "queue": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 373, 465, 474, 475, 752, 807, 812], "queue_load_s": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "container_combine_method": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "list_join": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "queue_timeout": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 752], "print_limit": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "key_length_limit": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "print_ind": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "print_line_spac": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "ivyh": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "default_key_color": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "green": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 351, 1168, 1169], "keyword_color_dict": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "rebuild_child_contain": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "types_to_iteratively_nest": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "alphabetical_kei": [177, 178, 179, 180, 181, 182, 183, 184, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346], "containerbas": [177, 178, 179, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 364], "__getitem__": [179, 180, 364], "queri": [179, 180, 364, 365, 372, 465, 498, 508, 861, 872, 873, 1143, 1154], "slice": [179, 180, 752, 780, 781, 784, 1024, 1033], "chain": [179, 180, 363, 364, 374, 375, 387, 1020, 1021, 1022, 1024, 1037, 1165, 1166], "element": [179, 180, 356, 370, 375, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 416, 417, 424, 425, 465, 488, 492, 496, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 760, 761, 764, 765, 767, 770, 771, 778, 792, 821, 822, 861, 869, 874, 878, 880, 887, 889, 896, 899, 916, 918, 923, 960, 961, 964, 978, 981, 986, 989, 994, 997, 999, 1000, 1003, 1047, 1048, 1059, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1143, 1151], "represent": [179, 180, 181, 182, 183, 386, 408, 428, 432, 433, 448, 451, 465, 481, 482, 515, 516, 519, 528, 553, 556, 565, 568, 573, 576, 678, 681, 684, 687, 752, 758, 815, 820], "dictionari": [179, 180, 181, 182, 183, 373, 387, 465, 508], "around": [179, 180, 181, 182, 183, 351, 360, 363, 368, 372, 387], "sequenc": [179, 180, 181, 182, 183, 357, 365, 386, 465, 474, 475, 752, 761, 802, 960, 999, 1004, 1007, 1047, 1049, 1050, 1080, 1085, 1088, 1143, 1152, 1157, 1158, 1165, 1166], "multiprocess": [179, 180, 181, 182, 183, 373, 387, 465, 474, 752], "asynchron": [179, 180, 181, 182, 183], "wait": [179, 180, 181, 182, 183, 351], "size": [179, 180, 181, 182, 183, 372, 373, 409, 418, 419, 465, 507, 508, 509, 752, 808, 814, 861, 873, 874, 884, 886, 900, 902, 910, 912, 916, 918, 923, 935, 937, 960, 974, 977, 994, 997, 999, 1000, 1003, 1047, 1048, 1052, 1053, 1055, 1059, 1060, 1062, 1113, 1114, 1117, 1118, 1121, 1143, 1144, 1145], "dimens": [179, 180, 181, 182, 183, 357, 370, 373, 398, 403, 409, 424, 425, 465, 496, 752, 774, 775, 776, 779, 789, 805, 824, 861, 862, 863, 864, 865, 866, 867, 868, 871, 874, 875, 877, 878, 880, 881, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 913, 915, 916, 918, 920, 922, 923, 925, 926, 928, 932, 934, 935, 937, 938, 940, 944, 950, 953, 955, 958, 960, 966, 969, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 999, 1000, 1003, 1004, 1007, 1020, 1021, 1022, 1023, 1047, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1068, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1153, 1154], "combin": [179, 180, 181, 182, 183, 351, 357, 359, 360, 363, 364, 375, 874, 878, 880], "arriv": [179, 180, 181, 182, 183], "timeout": [179, 180, 181, 182, 183, 465, 474, 475, 752, 807, 812], "limit": [179, 180, 181, 182, 183, 351, 357, 359, 370, 373, 375, 387, 428, 448, 451, 752, 764, 765, 767, 960, 961, 964], "maximum": [179, 180, 181, 182, 183, 357, 370, 373, 375, 465, 489, 493, 497, 509, 515, 752, 764, 765, 767, 779, 826, 843, 845, 960, 961, 964, 1024, 1036, 1059, 1060, 1080, 1085, 1088, 1093, 1096, 1122], "length": [179, 180, 181, 182, 183, 373, 409, 410, 420, 874, 923, 925, 926, 928, 960, 990, 993], "whitespac": [179, 180, 181, 182, 183], "indent": [179, 180, 181, 182, 183, 373], "extra": [179, 180, 181, 182, 183, 357, 362, 363, 370, 826, 837], "newlin": [179, 180, 181, 182, 183, 356], "handl": [179, 180, 181, 182, 183, 354, 359, 360, 362, 364, 365, 366, 367, 368, 374, 387, 406, 407, 465, 481, 482, 483, 484, 485, 499, 503, 504, 511, 514, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 1159, 1160, 1161, 1162, 1163, 1164], "result": [179, 180, 181, 182, 183, 355, 356, 357, 359, 363, 364, 365, 367, 368, 373, 387, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 434, 436, 456, 465, 474, 510, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 764, 765, 767, 770, 771, 774, 775, 776, 778, 780, 781, 784, 792, 805, 808, 809, 826, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1024, 1037, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1068, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122], "color": [179, 180, 181, 182, 183, 1168, 1169], "termin": [179, 180, 181, 182, 183, 350, 351, 353, 364, 370, 373], "map": [179, 180, 181, 182, 183, 359, 360, 364, 368, 373, 386, 387, 465, 474, 1024, 1031, 1032, 1036, 1037, 1143, 1154], "termcolor": [179, 180, 181, 182, 183], "rebuild": [179, 180, 181, 182, 183], "found": [179, 180, 181, 182, 183, 350, 351, 356, 363, 364, 465, 499], "constructor": [179, 180, 181, 182, 183, 365, 366, 372, 752, 759, 1165, 1166], "param": [179, 180, 181, 182, 183, 184, 287, 319, 320, 370, 375, 752, 758, 780, 781, 784, 785], "kept": [179, 180, 181, 182, 183, 351, 367, 1020, 1021, 1022], "structur": [179, 180, 181, 182, 183, 353, 355, 360, 363, 364, 373, 374, 752, 768, 1024, 1037], "alphabet": [179, 180, 181, 182, 183], "preserv": [179, 180, 181, 182, 183, 375, 387, 826, 856, 960, 978, 981], "__setitem__": [179, 180, 363, 364, 372], "val": [179, 180, 367, 372, 752, 794, 795, 796, 810, 811], "after": [179, 180, 357, 364, 365, 369, 428, 460, 515, 725, 728, 826, 833, 835, 837, 838, 840, 843, 845, 847, 849, 851, 853, 1042, 1043, 1046, 1159, 1160, 1161, 1162, 1163, 1164], "updat": [179, 180, 350, 351, 352, 353, 354, 357, 358, 362, 363, 364, 365, 368, 370, 372, 373, 375, 387, 465, 474, 752, 796, 808, 809, 826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 861, 871, 1020, 1021, 1022, 1024, 1031, 1032, 1040, 1041, 1132, 1133, 1159, 1160, 1161, 1162, 1163, 1164], "all_fals": [179, 180], "assert_is_bool": [179, 180], "key_chain": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 437, 439, 441, 516, 518, 522, 523, 524, 526, 530, 531, 532, 533, 535, 537, 539, 543, 544, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 583, 584, 587, 588, 591, 592, 593, 596, 597, 598, 600, 604, 605, 606, 608, 612, 613, 614, 616, 620, 621, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 684, 686, 688, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 734, 736, 739, 741, 742, 744, 746, 747, 748, 750, 753, 755, 757, 765, 766, 781, 783, 785, 833, 834, 836, 838, 839, 841, 843, 844, 846, 847, 848, 850, 851, 852, 854, 896, 898, 945, 947, 949, 950, 952, 954, 955, 957, 959, 961, 963, 965, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1024, 1037, 1043, 1045, 1049, 1051, 1053, 1054, 1056, 1070, 1072, 1074, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1107, 1108, 1109, 1111, 1114, 1116, 1118, 1120], "to_appli": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 437, 439, 441, 516, 518, 522, 523, 524, 526, 530, 531, 532, 533, 535, 537, 539, 543, 544, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 583, 584, 587, 588, 591, 592, 593, 596, 597, 598, 600, 604, 605, 606, 608, 612, 613, 614, 616, 620, 621, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 684, 686, 688, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 734, 736, 739, 741, 742, 744, 746, 747, 748, 750, 753, 755, 757, 765, 766, 781, 783, 785, 833, 834, 836, 838, 839, 841, 843, 844, 846, 847, 848, 850, 851, 852, 854, 896, 898, 945, 947, 949, 950, 952, 954, 955, 957, 959, 961, 963, 965, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1024, 1037, 1043, 1045, 1053, 1054, 1056, 1070, 1072, 1074, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1107, 1108, 1109, 1111, 1114, 1116, 1118, 1120], "prune_unappli": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 319, 320, 321, 322, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 437, 439, 441, 516, 518, 522, 523, 524, 526, 530, 531, 532, 533, 535, 537, 539, 543, 544, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 583, 584, 587, 588, 591, 592, 593, 596, 597, 598, 600, 604, 605, 606, 608, 612, 613, 614, 616, 620, 621, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 684, 686, 688, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 734, 736, 739, 741, 742, 744, 746, 747, 748, 750, 753, 755, 757, 765, 766, 781, 783, 785, 833, 834, 836, 838, 839, 841, 843, 844, 846, 847, 848, 850, 851, 852, 854, 896, 898, 945, 947, 949, 950, 952, 954, 955, 957, 959, 961, 963, 965, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1024, 1037, 1043, 1045, 1053, 1054, 1056, 1070, 1072, 1074, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1107, 1108, 1109, 1111, 1114, 1116, 1118, 1120], "map_sequ": [179, 180, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 247, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 317, 318, 319, 320, 321, 322, 329, 330, 331, 332, 333, 334, 335, 336, 341, 342, 343, 344, 345, 346, 437, 439, 441, 516, 518, 522, 523, 524, 526, 530, 531, 532, 533, 535, 537, 539, 543, 544, 549, 551, 557, 559, 577, 579, 583, 584, 587, 588, 591, 593, 598, 600, 604, 606, 608, 612, 613, 614, 626, 628, 630, 632, 634, 636, 646, 648, 650, 652, 654, 656, 658, 660, 662, 670, 672, 684, 686, 688, 689, 691, 697, 699, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 734, 736, 739, 741, 742, 744, 746, 747, 748, 750, 753, 755, 757, 765, 766, 781, 783, 785, 833, 834, 836, 838, 839, 841, 843, 844, 846, 847, 848, 850, 851, 852, 854, 945, 947, 949, 950, 952, 954, 955, 957, 959, 961, 963, 965, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1008, 1010, 1012, 1014, 1016, 1018, 1043, 1045, 1053, 1054, 1056, 1070, 1072, 1074, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1107, 1108, 1109, 1111, 1114, 1116, 1118, 1120], "entri": [179, 180, 409, 418, 419, 960, 999, 1024, 1037], "boolean": [179, 180, 364, 409, 416, 428, 434, 452, 464, 465, 500, 512, 515, 553, 556, 557, 560, 565, 568, 573, 576, 666, 669, 670, 673, 674, 677, 678, 681, 752, 753, 756, 760, 761, 791, 792, 793, 797, 798, 799, 800, 801, 818, 825, 826, 842, 1020, 1021, 1022, 1024, 1034, 1080, 1093, 1096], "evalu": [179, 180, 364, 515, 602, 606, 609, 646, 649, 650, 653, 654, 657, 658, 661, 689, 692, 713, 716, 729, 732, 1024, 1025, 1034, 1035, 1113, 1114, 1117, 1118, 1121], "assert": [179, 180, 372, 373, 752, 762], "skip": [179, 180, 353, 359, 1024, 1037], "prune": [179, 180, 1024, 1037, 1038, 1039], "all_key_chain": [179, 180], "include_empti": [179, 180], "all_tru": [179, 180, 364, 373], "arrays_as_list": [179, 180], "intermedi": [179, 180], "as_arrai": [179, 180, 752, 789, 814], "as_bool": [179, 180], "as_on": [179, 180], "ones": [179, 180, 181, 182, 359, 370, 372, 373, 409, 414, 423, 515, 577, 580, 752, 805, 1122], "sub": [179, 180, 351, 352, 354, 359, 364, 372, 373, 374, 465, 490, 491, 494, 495, 496, 497, 874, 884, 886, 960, 999, 1020, 1021, 1022, 1023, 1122], "fill": [179, 180, 409, 412, 416, 417, 422, 423, 426, 427, 1047, 1049, 1050], "as_random_uniform": [179, 180], "low": [179, 180, 184, 262, 293, 294, 335, 336, 370, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1056], "uniform": [179, 180, 374, 1047, 1048, 1049, 1050, 1053, 1055, 1134, 1136, 1137, 1140, 1141], "lower": [179, 180, 351, 357, 370, 387, 409, 414, 424, 515, 682, 874, 875, 877, 1047, 1053, 1055], "boundari": [179, 180, 1047, 1053, 1055], "output": [179, 180, 350, 354, 355, 356, 357, 359, 360, 363, 364, 366, 367, 368, 370, 372, 374, 375, 387, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 434, 436, 465, 474, 475, 509, 510, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 763, 764, 765, 767, 770, 771, 774, 775, 776, 778, 780, 781, 784, 792, 805, 808, 809, 826, 837, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1024, 1037, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1058, 1059, 1063, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1122, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1151, 1152, 1153, 1154], "interv": [179, 180, 370, 375, 409, 410, 418, 419, 874, 935, 937, 960, 961, 964, 1004, 1007, 1047, 1049, 1050, 1053, 1055, 1113, 1114, 1117, 1118, 1121], "as_vari": [179, 180], "as_zero": [179, 180], "assert_contains_sub_contain": [179, 180], "sub_cont": [179, 180], "partial": [179, 180, 351, 1155, 1156], "except": [179, 180, 356, 363, 367, 372, 387, 428, 436, 752, 762, 773, 796, 823, 874, 895, 913, 915, 960, 966, 969, 1004, 1007, 1059, 1062, 1113, 1114, 1117, 1118, 1121], "diff": [179, 180, 364, 373], "screen": [179, 180, 373], "assert_contains_sub_structur": [179, 180], "check_shap": [179, 180], "static": [179, 180, 184, 191, 279, 280, 283, 284, 287, 293, 295, 299, 300, 313, 314, 317, 318, 319, 320, 321, 322, 329, 330, 331, 332, 335, 336, 341, 342, 347, 348, 352, 356, 357, 360, 387, 406, 407, 437, 441, 532, 544, 549, 662, 739, 744, 747, 753, 757, 781, 785, 961, 965, 994, 998, 1049, 1051], "assert_ident": [179, 180], "check_typ": [179, 180], "same_arrai": [179, 180, 373], "arrays_equ": [179, 180, 181, 182, 752], "datatyp": [179, 180, 409, 411, 421, 428, 442, 453, 454, 455], "exact": [179, 180, 351, 370, 1064, 1065], "assert_identical_structur": [179, 180], "at_key_chain": [179, 180], "ignore_key_error": [179, 180], "ignore_non": [179, 180], "at_kei": [179, 180], "ignor": [179, 180, 357, 387, 409, 420, 1024, 1035, 1159, 1163], "substr": [179, 180], "access": [179, 180, 351, 353, 365], "clip_min": [179, 180], "clip_max": [179, 180], "minimum": [179, 180, 370, 375, 465, 515, 516, 519, 752, 787, 788, 810, 811, 816, 817, 960, 961, 964, 1059, 1061, 1080, 1085, 1088, 1093, 1096, 1122], "config": [179, 180, 373, 1024, 1037], "right": [179, 180, 349, 350, 351, 354, 357, 373, 515, 561, 564, 569, 572, 874, 923], "duplic": [179, 180, 356, 361, 362, 372, 374], "compar": [179, 180, 359, 373, 752, 753, 756, 760, 761, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1075, 1078], "configur": [179, 180, 350, 351, 353, 365, 465, 508, 1024, 1037], "container_rightmost": [179, 180], "common_key_chain": [179, 180, 364], "across": [179, 180, 352, 357, 359, 360, 364, 365, 368, 465, 474, 475, 486, 487, 489, 490, 491, 492, 493, 497, 507, 508, 752, 760, 761, 1024, 1030, 1059, 1061], "properti": [179, 180, 357, 359, 360, 364, 372, 373, 374, 465, 477, 1155, 1156, 1159, 1160, 1161, 1162, 1164], "contains_sub_contain": [179, 180], "match": [179, 180, 364, 428, 434, 515, 705, 708, 752, 802], "contains_sub_structur": [179, 180], "copi": [179, 180, 353, 356, 361, 365, 370, 372, 373, 386, 387, 409, 411, 415, 428, 434, 465, 510, 752, 769, 821, 822, 960, 990, 993, 1024, 1026, 1069, 1075, 1078], "create_if_abs": [179, 180], "inplac": [179, 180, 184, 189, 230, 236, 237, 257, 278, 288, 289, 290, 292, 321, 322, 354, 357, 362, 363, 368, 372, 374, 752, 762, 793, 796, 797, 818, 826, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 1132, 1133, 1159, 1160, 1161, 1162, 1163, 1164], "correspond": [179, 180, 181, 182, 184, 351, 356, 357, 358, 360, 363, 364, 365, 368, 428, 435, 515, 545, 548, 701, 704, 874, 878, 880, 887, 889, 920, 922, 960, 966, 969, 994, 997, 1047, 1048, 1059, 1060, 1061, 1064, 1065, 1066, 1068, 1080, 1097, 1100, 1101, 1104, 1105, 1109, 1112], "alreadi": [179, 180, 350, 351, 361, 364, 368, 372, 387, 465, 515, 577, 580, 610, 684, 687, 709, 712, 748, 751, 874, 910, 912, 1122], "noth": [179, 180, 351], "cutoff_at_depth": [179, 180], "depth_cutoff": [179, 180], "summari": [179, 180, 351, 428, 443, 444, 445, 457, 458, 459, 465, 478, 479, 752, 768, 772, 790, 826, 855, 860], "cutoff_at_height": [179, 180], "height_cutoff": [179, 180], "deep_copi": [179, 180, 373], "intern": [179, 180, 356, 363, 364, 366, 367, 465, 826, 859, 1024, 1025, 1034, 1035, 1134, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1165, 1166], "dev": [179, 180, 181, 183, 184, 198, 350, 360, 366, 370, 372, 374, 465, 474, 499], "belong": [179, 180, 374], "dev_clon": [179, 180, 465], "clone": [179, 180, 351, 353, 465, 486, 487, 488, 489], "dev_dist": [179, 180, 465], "distribut": [179, 180, 352, 366, 387, 465, 486, 490, 491, 492, 493, 861, 869, 944, 945, 948, 950, 953, 955, 958, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1143, 1151, 1155, 1156], "along": [179, 180, 355, 367, 409, 418, 419, 465, 490, 491, 492, 493, 494, 495, 496, 497, 509, 752, 770, 771, 780, 824, 874, 900, 902, 932, 934, 935, 937, 938, 940, 944, 950, 953, 955, 958, 960, 966, 969, 978, 981, 986, 989, 994, 997, 999, 1004, 1007, 1012, 1015, 1020, 1021, 1022, 1023, 1047, 1058, 1059, 1060, 1061, 1069, 1070, 1073, 1075, 1078, 1080, 1081, 1084, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1108, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "split": [179, 180, 349, 351, 369, 370, 387, 465, 474, 490, 491, 492, 493, 507, 508, 509, 752, 802, 960, 1122], "dev_str": [179, 180], "diff_kei": [179, 180], "detect_key_diff": [179, 180], "detect_value_diff": [179, 180], "detect_shape_diff": [179, 180], "thei": [179, 180, 352, 354, 355, 357, 360, 362, 364, 365, 366, 367, 372, 373, 374, 375, 387, 428, 455, 1020, 1021, 1022, 1047, 1048, 1122, 1165, 1166], "treat": [179, 180, 371, 375, 406, 407], "detect": [179, 180, 368, 373, 374, 1024, 1025, 1035], "without": [179, 180, 351, 355, 360, 363, 364, 366, 368, 370, 372, 373, 374, 386, 387, 752, 807, 812, 960, 990, 993, 1024, 1026, 1064, 1065, 1066, 1068], "flag": [179, 180, 351, 367, 372, 465, 484, 826, 842], "container0": [179, 180], "einops_rearrang": [179, 180, 752], "axes_length": [179, 180, 752, 774, 775, 776], "rearrang": [179, 180, 752, 774, 776], "addit": [179, 180, 350, 351, 355, 356, 359, 364, 365, 372, 373, 375, 465, 510, 515, 528, 752, 774, 775, 776, 1042, 1043, 1046, 1143, 1153], "einops_reduc": [179, 180, 752], "reduct": [179, 180, 365, 372, 752, 775, 808, 809, 1113, 1114, 1117, 1118, 1121, 1122], "One": [179, 180, 365, 370, 372, 373, 752, 775, 960, 990, 993, 1047, 1049, 1050], "callabl": [179, 180, 364, 370, 388, 389, 390, 391, 392, 393, 394, 395, 396, 406, 407, 428, 449, 450, 465, 509, 752, 758, 763, 773, 775, 1020, 1021, 1022, 1023, 1024, 1030, 1034, 1035, 1036], "einops_repeat": [179, 180, 752], "find_sub_contain": [179, 180], "sub_cont_to_find": [179, 180], "exsit": [179, 180], "find_sub_structur": [179, 180], "sub_struc_to_find": [179, 180], "flatten_key_chain": [179, 180, 373, 1155, 1156], "__": [179, 180, 357, 373], "above_height": [179, 180, 373], "below_depth": [179, 180, 373], "format_key_chain": [179, 180], "format_fn": [179, 180], "format": [179, 180, 353, 356, 365, 366, 370, 372, 373, 428, 446, 465, 485, 1080, 1081, 1084, 1108, 1122], "string": [179, 180, 361, 365, 366, 370, 373, 428, 432, 433, 446, 452, 464, 465, 481, 482, 483, 484, 498, 504, 510, 511, 514, 752, 772], "from_disk_as_hdf5": [179, 180, 373], "h5_obj_or_filepath": [179, 180], "slice_obj": [179, 180], "load": [179, 180, 387], "disk": [179, 180, 373], "h5py": [179, 180], "file": [179, 180, 350, 351, 353, 355, 356, 360, 361, 363, 364, 370, 373, 752, 813, 1155, 1156], "hdf5": [179, 180, 373, 1155, 1156], "filepath": [179, 180, 351], "h5": [179, 180], "from_disk_as_json": [179, 180, 373], "json_filepath": [179, 180], "json": [179, 180, 373], "were": [179, 180, 351, 355, 359, 364], "abl": [179, 180, 350, 351, 360, 365, 367, 372, 375], "dure": [179, 180, 360, 364, 365, 366, 367, 387, 406, 407, 465, 510, 752, 823, 826, 828, 831, 833, 835, 843, 845, 874, 896, 899, 1020, 1021, 1022, 1023, 1080, 1101, 1104, 1109, 1112, 1155, 1156, 1159, 1160, 1161, 1163], "from_disk_as_pickl": [179, 180, 373], "pickle_filepath": [179, 180], "pickl": [179, 180, 364, 373], "from_flat_list": [179, 180], "flat_list": [179, 180], "hierarchi": [179, 180, 373], "flat": [179, 180, 752, 808, 960, 986, 989], "popul": [179, 180, 365, 366, 370, 1047, 1048, 1080, 1101, 1104, 1109, 1112], "from_numpi": [179, 180, 373], "gather": [179, 180, 752, 781, 784], "accord": [179, 180, 350, 353, 360, 365, 428, 437, 440, 448, 515, 528, 569, 572, 684, 687, 752, 780, 808, 809, 874, 935, 937, 960, 970, 973, 1016, 1019, 1080, 1101, 1104, 1109, 1112], "index": [179, 180, 353, 360, 364, 372, 408, 409, 414, 420, 465, 506, 752, 758, 780, 781, 784, 960, 1004, 1007, 1024, 1027, 1028, 1031, 1032, 1033, 1038, 1040, 1059, 1060, 1061, 1062, 1064, 1065, 1066, 1069, 1070, 1073, 1125, 1127], "h5_file_s": [179, 180], "content": [179, 180, 352, 353, 367, 370, 373], "batch": [179, 180, 360, 364, 373, 465, 507, 508, 752, 779, 861, 870, 874, 938, 940, 1020, 1021, 1022, 1023, 1042, 1043, 1046, 1157, 1158], "handle_inplac": [179, 180], "prime": [179, 180], "overwritten": [179, 180, 361, 363], "has_kei": [179, 180], "query_kei": [179, 180], "somewher": [179, 180], "has_key_chain": [179, 180], "has_nan": [179, 180, 752], "include_inf": [179, 180, 752, 791, 825], "leafwis": [179, 180], "nan": [179, 180, 355, 356, 408, 428, 434, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 545, 548, 577, 580, 581, 584, 585, 588, 602, 605, 606, 609, 610, 626, 629, 634, 637, 646, 649, 650, 653, 658, 661, 662, 665, 684, 687, 701, 704, 705, 708, 709, 712, 717, 720, 721, 724, 725, 728, 738, 743, 748, 751, 752, 791, 825, 861, 873, 1064, 1065, 1066, 1068, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "well": [179, 180, 359, 367, 374, 375, 386, 752, 791, 874, 920, 922], "inf": [179, 180, 408, 752, 791, 825, 874, 938, 940], "wise": [179, 180, 370, 375, 398, 399, 400, 401, 402, 403, 404, 405, 515, 516, 519, 520, 528, 531, 533, 536, 541, 545, 548, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 589, 592, 594, 597, 598, 601, 605, 613, 614, 617, 618, 621, 622, 625, 638, 641, 642, 645, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 693, 696, 701, 704, 705, 708, 733, 737, 752, 778, 960, 961, 964], "identical_array_shap": [179, 180], "exclus": [179, 180, 360, 364, 375, 409, 410, 752, 770, 798, 799, 801, 826, 842, 1047, 1049, 1050], "identical_config": [179, 180], "identical_structur": [179, 180], "if_exist": [179, 180], "inplace_upd": [179, 180, 367, 752, 1132, 1133], "key_chains_contain": [179, 180], "sub_str": [179, 180], "join": [179, 180, 960, 966, 969, 1004, 1007, 1122], "list_stack": [179, 180, 373], "dim": [179, 180, 365, 752, 805, 1143, 1154], "func": [179, 180, 364, 406, 407, 465, 509, 752, 763, 826, 837, 1024, 1037], "map_cont": [179, 180], "include_self": [179, 180], "possibi": [179, 180], "place": [179, 180, 351, 354, 355, 356, 357, 359, 360, 364, 366, 368, 375, 409, 410, 411, 412, 413, 414, 416, 417, 421, 422, 423, 426, 427, 428, 437, 440, 465, 510, 515, 528, 533, 536, 553, 556, 573, 576, 577, 580, 585, 610, 693, 696, 709, 712, 725, 728, 729, 732, 738, 743, 752, 780, 794, 795, 796, 861, 864, 873, 874, 881, 960, 974, 977, 978, 981, 994, 997, 1042, 1043, 1046, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1113, 1114, 1117, 1159, 1160, 1161, 1162, 1163, 1164], "matrix": [179, 180, 409, 420, 424, 425, 752, 753, 756, 764, 861, 870, 874, 875, 877, 881, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 900, 902, 903, 904, 906, 907, 909, 913, 915, 916, 918, 920, 922, 923, 925, 926, 928, 932, 934, 941, 943, 1143, 1153], "p": [179, 180, 184, 213, 319, 320, 350, 351, 409, 420, 752, 764, 765, 766, 767, 861, 869, 874, 900, 902, 938, 940, 1143, 1151], "integ": [179, 180, 364, 365, 372, 409, 410, 416, 428, 451, 454, 456, 515, 516, 519, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 592, 610, 613, 614, 617, 678, 681, 701, 704, 705, 708, 709, 712, 748, 751, 874, 903, 935, 937, 938, 940, 960, 999, 1047, 1049, 1050, 1057, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "flatten": [179, 180, 752, 779, 874, 910, 912, 938, 940, 960, 986, 989, 994, 997, 1059, 1060, 1061, 1064, 1065, 1066, 1068], "left": [179, 180, 350, 351, 357, 365, 515, 561, 564, 874, 887, 889, 900, 902, 923, 1059, 1060, 1122], "broadcast": [179, 180, 355, 356, 357, 364, 365, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 434, 435, 436, 465, 510, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 764, 765, 767, 770, 774, 775, 776, 778, 781, 784, 792, 805, 808, 809, 826, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1058, 1059, 1060, 1061, 1063, 1064, 1068, 1069, 1075, 1078, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "correctli": [179, 180, 350, 359, 364, 365, 368, 374, 387, 874, 900, 902, 1059, 1060], "max_depth": [179, 180, 465, 469, 472, 479, 489, 493, 497, 752, 790, 1024, 1036], "multi_map": [179, 180, 364], "map_nest": [179, 180, 184, 201, 204, 206, 207, 208, 209, 214, 221, 228, 231, 232, 239, 240, 245, 246, 248, 249, 250, 256, 260, 263, 276, 317, 318, 327, 328, 331, 332, 531, 545, 547, 553, 555, 561, 563, 565, 567, 569, 571, 573, 575, 592, 596, 597, 605, 613, 614, 616, 620, 621, 622, 624, 638, 640, 642, 644, 662, 664, 666, 668, 674, 676, 678, 680, 693, 695, 701, 703, 705, 707, 896, 898, 966, 968, 1004, 1006], "leftmost": [179, 180, 1024, 1037], "multi_map_in_static_method": [179, 180, 364], "fn_name": [179, 180], "num_arrai": [179, 180], "overwrite_at_key_chain": [179, 180], "overwrit": [179, 180, 367, 370, 465, 509], "target_dict": [179, 180], "return_dict": [179, 180], "prune_empti": [179, 180], "keep_non": [179, 180], "empti": [179, 180, 181, 182, 363, 365, 366, 409, 410, 1080, 1101, 1104, 1105, 1113, 1114, 1117, 1118, 1121], "prune_key_chain": [179, 180], "key1": [179, 180, 374], "key2": [179, 180], "key3": [179, 180], "prune_key_from_key_chain": [179, 180], "absolut": [179, 180, 349, 515, 516, 519, 874, 883, 919], "certain": [179, 180, 350, 387, 409, 410, 418, 419], "decid": [179, 180, 350, 1024, 1035], "remov": [179, 180, 351, 352, 353, 356, 359, 360, 365, 367, 375, 874, 884, 886, 896, 899, 932, 934, 960, 1000, 1003, 1020, 1021, 1022], "prune_kei": [179, 180], "prune_keys_from_key_chain": [179, 180], "remove_key_length_limit": [179, 180], "remove_print_limit": [179, 180], "reshape_lik": [179, 180], "leading_shap": [179, 180], "return_cont": [179, 180], "restructur": [179, 180], "keep_orig": [179, 180], "transpos": [179, 180, 372, 375, 465, 496, 861, 863, 865, 867, 874, 895, 907, 909, 913, 915, 1122, 1143, 1145, 1147, 1149], "old": [179, 180, 350, 367], "keep": [179, 180, 350, 351, 358, 364, 371, 373, 375, 752, 824], "start": [179, 180, 349, 350, 351, 352, 353, 354, 356, 357, 365, 369, 370, 372, 373, 374, 386, 387, 409, 410, 418, 419, 465, 480], "restructure_key_chain": [179, 180], "keychain_map": [179, 180], "set_at_key_chain": [179, 180], "set_at_kei": [179, 180], "set_framework": [179, 180, 370, 372, 373, 375], "set_ivy_backend": [179, 180], "ivy_backend": [179, 180], "attribut": [179, 180, 356, 364, 365, 371, 372, 373, 374, 428, 448, 449, 450, 451, 465, 505], "show": [179, 180, 350, 351, 357, 367, 386, 387, 1122], "show_sub_contain": [179, 180], "sub_cont_or_keychain": [179, 180], "shuffl": [179, 180, 1047, 1122], "seed_valu": [179, 180, 1047, 1057], "align": [179, 180, 350, 370, 372, 1122, 1128], "seed": [179, 180, 181, 182, 1047, 1122], "shuffle_h5_fil": [179, 180], "dataset": [179, 180, 373, 385, 1122], "size_ordered_arrai": [179, 180], "keychain": [179, 180], "smallest": [179, 180, 428, 448, 451, 515, 577, 580], "largest": [179, 180, 386, 428, 448, 451, 874, 923], "slice_kei": [179, 180], "key_slic": [179, 180], "all_depth": [179, 180], "slice_via_kei": [179, 180], "sort_by_kei": [179, 180], "num_or_size_split": [179, 180, 370, 960, 999], "with_remaind": [179, 180, 960, 999], "constitu": [179, 180, 375], "dimension": [179, 180, 409, 410, 414, 420, 874, 878, 880, 881, 895, 896, 899, 904, 906, 910, 912, 913, 915, 935, 937, 938, 940, 960, 999, 1059, 1060, 1061, 1062, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "evenli": [179, 180, 409, 410, 418, 419, 960, 999], "store": [179, 180, 356, 361, 363, 364, 370, 372, 373, 374, 752, 779, 826, 859, 874, 932, 934, 960, 999, 1155, 1156], "stop_gradi": [179, 180, 181, 182, 184, 189, 230, 236, 237, 257, 278, 288, 289, 290, 292, 321, 322, 374, 465, 509, 826, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 1020, 1021, 1022, 1023, 1122, 1159, 1160, 1161, 1162, 1163, 1164], "preserve_typ": [179, 180, 826, 856], "stop": [179, 180, 370, 387, 409, 410, 418, 419, 465, 480, 509, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 856, 1020, 1021, 1022, 1023, 1159, 1160, 1161, 1162, 1163, 1164], "alwai": [179, 180, 351, 352, 355, 356, 360, 361, 363, 364, 367, 368, 370, 372, 387, 428, 434, 515, 528, 684, 687, 752, 796, 826, 842, 856], "structural_diff": [179, 180], "to_devic": [179, 180, 465, 484], "move": [179, 180, 351, 355, 465, 510], "cuda": [179, 180, 370, 373, 387, 409, 418, 419, 465, 474, 481, 506, 752, 780, 781, 784, 805, 808, 809, 1047, 1048, 1049, 1050, 1053, 1055, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1165, 1166], "cpu": [179, 180, 351, 366, 387, 409, 418, 419, 465, 484, 485, 487, 501, 504, 506, 510, 511, 513, 514, 752, 780, 781, 784, 805, 808, 809, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1165, 1166], "target": [179, 180, 354, 369, 373, 374, 375, 465, 483, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 1122], "to_dict": [179, 180], "to_disk_as_hdf5": [179, 180, 373], "starting_index": [179, 180], "max_batch_s": [179, 180], "read": [179, 180, 353, 1122], "r": [179, 180, 350, 752, 761, 824, 874, 916, 918, 941, 943], "w": [179, 180, 184, 278, 288, 289, 290, 292, 321, 322, 370, 373, 374, 752, 761, 826, 828, 831, 833, 835, 836, 838, 840, 841, 843, 845, 846, 847, 849, 850, 851, 853, 854, 861, 862, 863, 864, 865, 866, 867, 868], "later": [179, 180, 752, 763], "append": [179, 180, 353, 359, 370, 373, 515, 561, 564, 874, 884, 886, 896, 899], "to_disk_as_json": [179, 180, 373], "to_disk_as_pickl": [179, 180, 373], "to_flat_list": [179, 180], "to_iter": [179, 180, 364], "leaf_keys_onli": [179, 180], "to_iterator_kei": [179, 180], "to_iterator_valu": [179, 180], "to_json": [179, 180], "to_list": [179, 180, 752, 1122], "to_multi_dev": [179, 180], "multidevcontain": [179, 180, 181], "distributedarrai": [179, 180], "to_numpi": [179, 180, 373, 752, 1122], "update_backend": [179, 180], "to_raw": [179, 180], "raw": [179, 180, 356], "trim_kei": [179, 180], "max_length": [179, 180], "try_kc": [179, 180], "tri": [179, 180], "arbitrari": [179, 180, 359, 360, 364, 367, 368, 374, 387, 409, 420, 428, 435, 456, 465, 494, 495, 497], "concatten": [179, 180, 465, 494, 495, 496, 497, 509], "unstack": [179, 180, 370, 373, 752, 1122], "dim_siz": [179, 180, 465], "update_config": [179, 180], "global_norm": [179, 180, 184, 213, 319, 320, 765, 766], "vector": [179, 180, 386, 409, 420, 752, 765, 767, 861, 870, 874, 878, 880, 887, 889, 896, 899, 910, 912, 923, 925, 926, 928, 935, 937, 938, 940, 941, 943, 1143, 1153], "with_default_key_color": [179, 180], "with_entries_as_list": [179, 180], "with_ivy_backend": [179, 180], "with_key_length_limit": [179, 180, 373], "with_print_ind": [179, 180, 373], "with_print_limit": [179, 180, 373], "with_print_line_spac": [179, 180], "containerwithcr": [181, 182, 311], "containerwithdatatyp": [181, 182, 313], "containerwithdevic": [181, 182, 315], "containerwithelementwis": [181, 182, 317, 364], "containerwithgener": [181, 182, 319], "containerwithgradi": [181, 182, 321], "containerwithimag": [181, 182, 323], "containerwithlay": [181, 182, 325], "containerwithlinearalgebra": [181, 182, 327], "containerwithloss": [181, 182, 329], "containerwithmanipul": [181, 182, 331, 352], "containerwithnorm": [181, 182, 333], "containerwithrandom": [181, 182, 335], "containerwithsearch": [181, 182, 337], "containerwithset": [181, 182, 339], "containerwithsort": [181, 182, 341], "containerwithstatist": [181, 182, 343], "containerwithutil": [181, 182, 345], "__add__": [181, 182, 184, 356, 357, 363, 364, 368, 372], "special": [181, 182, 184, 352, 355, 356, 357, 363, 368, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 545, 548, 573, 576, 577, 580, 581, 584, 585, 588, 602, 605, 606, 609, 610, 646, 649, 650, 653, 658, 661, 662, 665, 684, 687, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 738, 743, 748, 751, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1101, 1104, 1105, 1109, 1112], "__radd__": [181, 182, 184, 356, 357], "revers": [181, 182, 184, 352, 356, 357, 375, 387, 752, 773, 960, 978, 981], "arang": [181, 182, 365, 409, 418, 419, 1080, 1081, 1084, 1108, 1122], "arg_info": [181, 182, 752], "arg_nam": [181, 182, 752], "argmax": [181, 182, 1059, 1122], "argmin": [181, 182, 1059, 1122], "array_equ": [181, 182, 752], "as_ivy_dev": [181, 182, 372, 465], "as_ivy_dtyp": [181, 182, 428], "as_native_dev": [181, 182, 465], "as_native_dtyp": [181, 182, 428], "asarrai": [181, 182, 367, 409, 861, 862, 1064, 1066], "assert_supports_inplac": [181, 182, 752], "astyp": [181, 182, 365, 367, 428], "broadcast_arrai": [181, 182, 428], "broadcast_to": [181, 182, 365, 428], "cache_fn": [181, 182, 360, 752], "clear_mem_on_dev": [181, 182, 465], "clip_matrix_norm": [181, 182, 752], "closest_valid_dtyp": [181, 182, 428], "container_typ": [181, 182, 752], "conv1d": [181, 182, 861, 1143], "conv1d_transpos": [181, 182, 861], "conv2d": [181, 182, 861, 1122, 1143], "conv2d_transpos": [181, 182, 861], "conv3d": [181, 182, 861, 1143], "conv3d_transpos": [181, 182, 861], "copy_arrai": [181, 182, 752], "cumprod": [181, 182, 375, 752], "cumsum": [181, 182, 752, 1122], "current_backend_str": [181, 182, 752], "default_devic": [181, 182, 366, 370, 465, 503, 506, 513], "default_dtyp": [181, 182, 360, 365, 428], "default_float_dtyp": [181, 182, 365, 428], "default_int_dtyp": [181, 182, 365, 428], "depthwise_conv2d": [181, 182, 861, 1122], "dev_clone_arrai": [181, 182, 465], "dev_clone_it": [181, 182, 465], "dev_clone_nest": [181, 182, 465], "dev_dist_arrai": [181, 182, 465], "dev_dist_it": [181, 182, 465], "dev_dist_nest": [181, 182, 465], "dev_unifi": [181, 182, 465], "dev_unify_arrai": [181, 182, 465], "dev_unify_it": [181, 182, 465], "dev_unify_nest": [181, 182, 465], "dev_util": [181, 182, 366, 465], "dropout": [181, 182, 373, 861, 1143, 1154], "dtype_bit": [181, 182, 428], "empty_lik": [181, 182, 409], "execute_with_gradi": [181, 182, 364, 373, 374, 375, 387, 826, 1122], "ey": [181, 182, 375, 409, 861, 864, 868], "finfo": [181, 182, 428], "floormod": [181, 182, 752, 1122], "fourier_encod": [181, 182, 752], "from_dlpack": [181, 182, 409], "full_lik": [181, 182, 409], "function_supported_dtyp": [181, 182, 428], "function_unsupported_dtyp": [181, 182, 428], "gelu": [181, 182, 398, 1129], "get_all_arrays_in_memori": [181, 182, 752], "get_all_ivy_arrays_on_dev": [181, 182, 366, 465], "get_min_bas": [181, 182, 752], "get_min_denomin": [181, 182, 752], "get_num_dim": [181, 182, 752, 1122], "get_referrers_recurs": [181, 182, 752], "gpu_is_avail": [181, 182, 465], "handle_nest": [181, 182, 360, 364, 388], "handle_out_argu": [181, 182, 362, 365, 366, 367, 368, 388], "iinfo": [181, 182, 428], "indices_wher": [181, 182, 752, 1122], "infer_devic": [181, 182, 365, 366, 368, 388], "infer_dtyp": [181, 182, 365, 366, 368, 388], "inplace_arrays_support": [181, 182, 752], "inplace_decr": [181, 182, 752], "inplace_incr": [181, 182, 752], "inplace_variables_support": [181, 182, 752], "inputs_to_native_arrai": [181, 182, 363, 388], "invalid_dtyp": [181, 182, 428], "is_float_dtyp": [181, 182, 428], "is_int_dtyp": [181, 182, 428, 752, 822], "is_ivy_contain": [181, 182, 752], "leaky_relu": [181, 182, 398, 1122], "linear": [181, 182, 356, 370, 373, 374, 375, 398, 399, 400, 401, 752, 779, 861, 869, 920, 922, 1122, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "linspac": [181, 182, 370, 409, 410, 1122], "logspac": [181, 182, 370, 409], "lstm_updat": [181, 182, 370, 861], "match_kwarg": [181, 182, 752], "matrix_pow": [181, 182, 874], "meshgrid": [181, 182, 409], "multi_head_attent": [181, 182, 364, 367, 861], "multinomi": [181, 182, 1047], "nonzero": [181, 182, 515, 528, 684, 687, 1059], "num_arrays_in_memori": [181, 182, 752], "num_cpu_cor": [181, 182, 366, 465], "num_gpu": [181, 182, 359, 366, 465], "num_ivy_arrays_on_dev": [181, 182, 465], "one_hot": [181, 182, 375, 752, 1122], "ones_lik": [181, 182, 375, 409, 1122], "outputs_to_ivy_arrai": [181, 182, 363, 365, 366, 368, 388], "percent_used_mem_on_dev": [181, 182, 465], "print_all_arrays_in_memori": [181, 182, 752], "print_all_ivy_arrays_on_dev": [181, 182, 465], "promote_typ": [181, 182, 428], "randint": [181, 182, 184, 293, 335, 336, 1047, 1051, 1122], "random_norm": [181, 182, 861, 864, 867, 868, 874, 923, 1047, 1064, 1065], "result_typ": [181, 182, 365, 428], "scaled_dot_product_attent": [181, 182, 861], "scatter_flat": [181, 182, 752], "scatter_nd": [181, 182, 372, 752, 1122], "set_default_devic": [181, 182, 366, 465, 513], "set_default_dtyp": [181, 182, 360, 365, 428], "set_default_float_dtyp": [181, 182, 365, 428], "set_default_int_dtyp": [181, 182, 365, 428], "set_min_bas": [181, 182, 752], "set_min_denomin": [181, 182, 752], "set_queue_timeout": [181, 182, 752], "set_split_factor": [181, 182, 465], "set_tmp_dir": [181, 182, 752], "set_with_grad": [181, 182, 826], "shape_to_tupl": [181, 182, 365, 752], "sigmoid": [181, 182, 370, 373, 374, 398, 1122], "slogdet": [181, 182, 874, 883], "softplu": [181, 182, 398, 1122], "split_factor": [181, 182, 465, 474], "split_func_cal": [181, 182, 465], "stable_divid": [181, 182, 360, 752], "stable_pow": [181, 182, 752], "static_ab": [181, 182], "static_aco": [181, 182], "static_acosh": [181, 182], "static_al": [181, 182], "static_ani": [181, 182], "static_arang": [181, 182], "static_arg_info": [181, 182], "static_arg_nam": [181, 182], "static_argmax": [181, 182], "static_argmin": [181, 182], "static_arrai": [181, 182], "static_array_equ": [181, 182], "static_arrays_equ": [181, 182], "static_as_ivy_dev": [181, 182], "static_as_ivy_dtyp": [181, 182], "static_as_native_dev": [181, 182], "static_as_native_dtyp": [181, 182], "static_asarrai": [181, 182], "static_asin": [181, 182], "static_asinh": [181, 182], "static_assert_supports_inplac": [181, 182], "static_astyp": [181, 182], "static_atan": [181, 182], "static_atan2": [181, 182], "static_atanh": [181, 182], "static_bitwise_and": [181, 182], "static_bitwise_invert": [181, 182], "static_bitwise_left_shift": [181, 182], "static_bitwise_or": [181, 182], "static_bitwise_right_shift": [181, 182], "static_bitwise_xor": [181, 182], "static_broadcast_arrai": [181, 182], "static_broadcast_to": [181, 182], "static_cache_fn": [181, 182], "static_ceil": [181, 182], "static_choleski": [181, 182], "static_clear_mem_on_dev": [181, 182], "static_clip_matrix_norm": [181, 182], "static_clip_vector_norm": [181, 182], "static_closest_valid_dtyp": [181, 182], "static_concat": [181, 182], "static_constant_pad": [181, 182], "static_container_typ": [181, 182], "static_conv1d": [181, 182], "static_conv1d_transpos": [181, 182], "static_conv2d": [181, 182], "static_conv2d_transpos": [181, 182], "static_conv3d": [181, 182], "static_conv3d_transpos": [181, 182], "static_copy_arrai": [181, 182], "static_co": [181, 182], "static_cosh": [181, 182], "static_cross": [181, 182], "static_cumprod": [181, 182], "static_cumsum": [181, 182], "static_current_backend": [181, 182], "static_current_backend_str": [181, 182], "static_default": [181, 182], "static_default_devic": [181, 182], "static_default_dtyp": [181, 182], "static_default_float_dtyp": [181, 182], "static_default_int_dtyp": [181, 182], "static_depthwise_conv2d": [181, 182], "static_det": [181, 182], "static_dev": [181, 182], "static_dev_clon": [181, 182], "static_dev_clone_arrai": [181, 182], "static_dev_clone_it": [181, 182], "static_dev_clone_nest": [181, 182], "static_dev_dist": [181, 182], "static_dev_dist_arrai": [181, 182], "static_dev_dist_it": [181, 182], "static_dev_dist_nest": [181, 182], "static_dev_unifi": [181, 182], "static_dev_unify_arrai": [181, 182], "static_dev_unify_it": [181, 182], "static_dev_unify_nest": [181, 182], "static_dev_util": [181, 182], "static_diagon": [181, 182], "static_dropout": [181, 182], "static_dtyp": [181, 182], "static_dtype_bit": [181, 182], "static_eigh": [181, 182], "static_eigvalsh": [181, 182], "static_einops_rearrang": [181, 182], "static_einops_reduc": [181, 182], "static_einops_repeat": [181, 182], "static_einsum": [181, 182], "static_empti": [181, 182], "static_empty_lik": [181, 182], "static_equ": [181, 182], "static_erf": [181, 182], "static_execute_with_gradi": [181, 182], "static_exist": [181, 182], "static_exp": [181, 182], "static_expand_dim": [181, 182], "static_expm1": [181, 182], "static_ey": [181, 182], "static_finfo": [181, 182], "static_flip": [181, 182], "static_floor": [181, 182], "static_floor_divid": [181, 182], "static_floormod": [181, 182], "static_fourier_encod": [181, 182], "static_from_dlpack": [181, 182], "static_ful": [181, 182], "static_full_lik": [181, 182], "static_function_supported_dtyp": [181, 182], "static_function_unsupported_dtyp": [181, 182], "static_gath": [181, 182], "static_gelu": [181, 182], "static_get_all_arrays_in_memori": [181, 182], "static_get_all_ivy_arrays_on_dev": [181, 182], "static_get_min_bas": [181, 182], "static_get_min_denomin": [181, 182], "static_get_num_dim": [181, 182], "static_get_referrers_recurs": [181, 182], "static_gpu_is_avail": [181, 182], "static_great": [181, 182], "static_greater_equ": [181, 182], "static_handle_nest": [181, 182], "static_handle_out_argu": [181, 182], "static_has_nan": [181, 182], "static_iinfo": [181, 182], "static_indices_wher": [181, 182], "static_infer_devic": [181, 182], "static_infer_dtyp": [181, 182], "static_inplace_arrays_support": [181, 182], "static_inplace_decr": [181, 182], "static_inplace_incr": [181, 182], "static_inplace_upd": [181, 182], "static_inplace_variables_support": [181, 182], "static_inputs_to_native_arrai": [181, 182], "static_inv": [181, 182], "static_invalid_dtyp": [181, 182], "static_is_arrai": [181, 182], "static_is_float_dtyp": [181, 182], "static_is_int_dtyp": [181, 182], "static_is_ivy_arrai": [181, 182], "static_is_ivy_contain": [181, 182], "static_is_native_arrai": [181, 182], "static_is_vari": [181, 182], "static_isfinit": [181, 182], "static_isinf": [181, 182], "static_isnan": [181, 182], "static_layer_norm": [181, 182], "static_leaky_relu": [181, 182], "static_less": [181, 182], "static_less_equ": [181, 182], "static_linear": [181, 182], "static_linspac": [181, 182], "static_log": [181, 182], "static_log10": [181, 182], "static_log1p": [181, 182], "static_log2": [181, 182], "static_logaddexp": [181, 182], "static_logical_and": [181, 182], "static_logical_not": [181, 182], "static_logical_or": [181, 182], "static_logical_xor": [181, 182], "static_logspac": [181, 182], "static_lstm_upd": [181, 182], "static_match_kwarg": [181, 182], "static_matmul": [181, 182], "static_matrix_norm": [181, 182], "static_matrix_pow": [181, 182], "static_matrix_rank": [181, 182], "static_matrix_transpos": [181, 182], "static_max": [181, 182], "static_maximum": [181, 182], "static_mean": [181, 182], "static_meshgrid": [181, 182], "static_min": [181, 182], "static_minimum": [181, 182], "static_multi_head_attent": [181, 182], "static_multinomi": [181, 182], "static_multiprocess": [181, 182], "static_native_arrai": [181, 182], "static_neg": [181, 182], "static_nonzero": [181, 182], "static_not_equ": [181, 182], "static_num_arrays_in_memori": [181, 182], "static_num_cpu_cor": [181, 182], "static_num_gpu": [181, 182], "static_num_ivy_arrays_on_dev": [181, 182], "static_one_hot": [181, 182], "static_on": [181, 182], "static_ones_lik": [181, 182], "static_out": [181, 182], "static_outputs_to_ivy_arrai": [181, 182], "static_percent_used_mem_on_dev": [181, 182], "static_permute_dim": [181, 182], "static_pinv": [181, 182], "static_posit": [181, 182], "static_pow": [181, 182], "static_print_all_arrays_in_memori": [181, 182], "static_print_all_ivy_arrays_on_dev": [181, 182], "static_prod": [181, 182], "static_promote_typ": [181, 182], "static_qr": [181, 182], "static_queue_timeout": [181, 182], "static_random_norm": [181, 182], "static_relu": [181, 182], "static_remaind": [181, 182], "static_repeat": [181, 182], "static_reshap": [181, 182], "static_result_typ": [181, 182], "static_round": [181, 182], "static_scaled_dot_product_attent": [181, 182], "static_scatter_flat": [181, 182], "static_scatter_nd": [181, 182], "static_se": [181, 182], "static_set_default_devic": [181, 182], "static_set_default_dtyp": [181, 182], "static_set_default_float_dtyp": [181, 182], "static_set_default_int_dtyp": [181, 182], "static_set_min_bas": [181, 182], "static_set_min_denomin": [181, 182], "static_set_queue_timeout": [181, 182], "static_set_split_factor": [181, 182], "static_set_tmp_dir": [181, 182], "static_set_with_grad": [181, 182], "static_shap": [181, 182], "static_shape_to_tupl": [181, 182], "static_shuffl": [181, 182], "static_sigmoid": [181, 182], "static_sign": [181, 182], "static_sin": [181, 182], "static_sinh": [181, 182], "static_slogdet": [181, 182], "static_softmax": [181, 182], "static_softplu": [181, 182], "static_solv": [181, 182], "static_split": [181, 182], "static_split_factor": [181, 182], "static_split_func_cal": [181, 182], "static_sqrt": [181, 182], "static_squar": [181, 182], "static_squeez": [181, 182], "static_stable_divid": [181, 182], "static_stable_pow": [181, 182], "static_stack": [181, 182], "static_std": [181, 182], "static_stop_gradi": [181, 182], "static_sum": [181, 182], "static_supports_inplac": [181, 182], "static_svd": [181, 182], "static_svdv": [181, 182], "static_swapax": [181, 182], "static_tensordot": [181, 182], "static_til": [181, 182], "static_tmp_dir": [181, 182], "static_to_devic": [181, 182], "static_to_list": [181, 182], "static_to_native_arrays_and_back": [181, 182], "static_to_numpi": [181, 182], "static_to_scalar": [181, 182], "static_total_mem_on_dev": [181, 182], "static_tpu_is_avail": [181, 182], "static_trac": [181, 182], "static_tril": [181, 182], "static_triu": [181, 182], "static_trunc": [181, 182], "static_try_else_non": [181, 182], "static_type_promote_arrai": [181, 182], "static_unique_al": [181, 182], "static_unique_count": [181, 182], "static_unique_invers": [181, 182], "static_unique_valu": [181, 182], "static_unset_default_devic": [181, 182], "static_unset_default_dtyp": [181, 182], "static_unset_default_float_dtyp": [181, 182], "static_unset_default_int_dtyp": [181, 182], "static_unset_with_grad": [181, 182], "static_unstack": [181, 182], "static_used_mem_on_dev": [181, 182], "static_valid_dtyp": [181, 182], "static_value_is_nan": [181, 182], "static_var": [181, 182], "static_vari": [181, 182], "static_variable_data": [181, 182], "static_vecdot": [181, 182], "static_vector_norm": [181, 182], "static_vector_to_skew_symmetric_matrix": [181, 182], "static_wher": [181, 182], "static_with_grad": [181, 182], "static_zero_pad": [181, 182], "static_zero": [181, 182], "static_zeros_lik": [181, 182], "supports_inplac": [181, 182, 752], "tmp_dir": [181, 182, 752], "to_native_arrays_and_back": [181, 182, 362, 368, 388], "to_scalar": [181, 182, 752], "total_mem_on_dev": [181, 182, 366, 465], "tpu_is_avail": [181, 182, 465], "tril": [181, 182, 409], "triu": [181, 182, 409], "try_else_non": [181, 182, 752], "type_promote_arrai": [181, 182, 428], "unique_al": [181, 182, 1064], "unique_count": [181, 182, 1064], "unique_invers": [181, 182, 1064], "unique_valu": [181, 182, 1064], "unset_default_devic": [181, 182, 465], "unset_default_dtyp": [181, 182, 428], "unset_default_float_dtyp": [181, 182, 428], "unset_default_int_dtyp": [181, 182, 428], "unset_with_grad": [181, 182, 826], "used_mem_on_dev": [181, 182, 465], "valid_dtyp": [181, 182, 428], "value_is_nan": [181, 182, 752], "variable_data": [181, 182, 826], "with_grad": [181, 182, 826, 855], "zeros_lik": [181, 182, 409, 960, 961, 964, 1122], "at_dev": [181, 183, 184, 465, 478, 479], "container_method": [184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 437, 439, 441, 516, 518, 522, 523, 524, 526, 530, 531, 532, 533, 535, 537, 539, 543, 544, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 583, 584, 587, 588, 591, 592, 593, 596, 597, 598, 600, 604, 605, 606, 608, 612, 613, 614, 616, 620, 621, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 684, 686, 688, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 734, 736, 739, 741, 742, 744, 746, 747, 748, 750, 753, 755, 757, 765, 766, 781, 783, 785, 828, 830, 832, 833, 834, 836, 838, 839, 841, 843, 844, 846, 847, 848, 850, 851, 852, 854, 896, 898, 945, 947, 949, 950, 952, 954, 955, 957, 959, 961, 963, 965, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1043, 1045, 1049, 1051, 1053, 1054, 1056, 1070, 1072, 1074, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1107, 1108, 1109, 1111, 1114, 1116, 1118, 1120], "adam_upd": [184, 321, 322, 374, 826], "lr": [184, 189, 230, 236, 237, 257, 278, 288, 289, 290, 292, 321, 322, 373, 374, 826, 833, 834, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 1159, 1160, 1161, 1162, 1163, 1164], "mw_tm1": [184, 189, 236, 278, 289, 321, 322, 826, 833, 834, 835, 836, 843, 844, 845, 846], "vw_tm1": [184, 189, 236, 278, 289, 321, 322, 826, 833, 834, 835, 836, 843, 844, 845, 846], "add_ivy_container_instance_method": [184, 347], "containerexampl": [184, 191, 347, 348], "static_all_equ": [184, 193, 319, 320, 753, 755], "int32": [184, 210, 283, 313, 314, 365, 428, 437, 439, 440, 441, 449, 752, 821, 960, 974, 977, 1080, 1097, 1100, 1105], "int64": [184, 210, 283, 313, 314, 365, 428, 437, 439, 440, 441, 449, 515, 569, 572, 1059, 1060, 1061, 1080, 1097, 1100, 1105], "clip_vector_norm": [184, 319, 320, 752], "max_norm": [184, 213, 319, 320, 752, 764, 765, 766, 767], "gradient_descent_upd": [184, 321, 322, 826, 1020, 1021, 1022, 1023, 1122], "lamb_upd": [184, 321, 322, 826], "max_trust_ratio": [184, 236, 289, 321, 322, 826, 843, 844, 845, 846, 1159, 1161], "decay_lambda": [184, 236, 237, 289, 290, 321, 322, 826, 843, 844, 845, 846, 847, 848, 849, 850, 1159, 1161, 1162], "lars_upd": [184, 321, 322, 826], "optimizer_upd": [184, 321, 322, 826], "effective_grad": [184, 257, 292, 321, 322, 826, 851, 852, 853, 854], "random_uniform": [184, 335, 336, 366, 374, 1047, 1122], "static_adam_step": [184, 321, 322, 828], "87": [184, 277, 293, 321, 322, 335, 336, 826, 828, 831, 832, 1049, 1051], "976": [184, 277, 321, 322, 515, 743, 826, 828, 831, 832], "static_adam_upd": [184, 321, 322, 833], "static_add": [184, 317, 318, 356, 357, 364, 662], "static_argsort": [184, 341, 342, 1070], "static_binary_cross_entropi": [184, 329, 330, 945], "static_can_cast": [184, 313, 314, 437], "from_": [184, 283, 313, 314, 428, 437, 440, 441], "static_clip": [184, 331, 332, 961], "static_rol": [184, 284, 331, 332, 357, 364, 961, 965, 994], "static_cross_entropi": [184, 329, 330, 950], "static_divid": [184, 317, 318, 364, 613, 614], "static_gather_nd": [184, 319, 320, 781], "static_gradient_descent_upd": [184, 321, 322, 838], "static_lamb_upd": [184, 321, 322, 843], "static_lars_upd": [184, 321, 322, 847], "static_multipli": [184, 317, 318, 364, 684], "static_optimizer_upd": [184, 321, 322, 851], "static_randint": [184, 335, 336, 1049], "20": [184, 293, 335, 336, 372, 515, 573, 576, 602, 709, 712, 725, 728, 874, 884, 886, 910, 912, 929, 931, 1047, 1049, 1050, 1051, 1059, 1062, 1063, 1080, 1081, 1084, 1108], "15": [184, 293, 335, 336, 350, 357, 515, 553, 556, 709, 712, 861, 864, 874, 884, 886, 910, 912, 929, 931, 960, 994, 997, 1042, 1043, 1046, 1047, 1049, 1050, 1051, 1059, 1062, 1064, 1065, 1080, 1081, 1084, 1108], "16": [184, 293, 299, 305, 317, 318, 335, 336, 351, 357, 373, 515, 544, 549, 738, 739, 741, 747, 861, 867, 874, 884, 886, 910, 912, 1049, 1051, 1059, 1063, 1080, 1081, 1084, 1108], "12": [184, 293, 335, 336, 350, 357, 364, 515, 553, 556, 573, 576, 585, 709, 712, 752, 770, 788, 826, 828, 831, 874, 884, 886, 910, 912, 929, 931, 960, 978, 981, 986, 989, 994, 997, 1042, 1043, 1046, 1047, 1049, 1050, 1051, 1059, 1063, 1064, 1065, 1080, 1081, 1084, 1108], "40": [184, 293, 335, 336, 515, 585, 725, 728, 874, 910, 912, 1049, 1051, 1080, 1081, 1084, 1108], "gpu": [184, 293, 335, 336, 351, 366, 372, 387, 465, 484, 487, 500, 502, 506, 508, 513, 1049, 1051], "62": [184, 293, 335, 336, 1049, 1051], "52": [184, 293, 335, 336, 826, 828, 831, 874, 910, 912, 1049, 1051, 1064, 1065, 1080, 1081, 1084, 1108], "95": [184, 293, 335, 336, 826, 828, 831, 1049, 1051], "37": [184, 293, 335, 336, 515, 738, 1042, 1043, 1046, 1049, 1051], "42": [184, 293, 335, 336, 375, 398, 404, 826, 828, 831, 874, 910, 912, 1047, 1049, 1051, 1057, 1080, 1081, 1084, 1108], "14": [184, 293, 335, 336, 353, 357, 364, 515, 573, 576, 826, 828, 831, 861, 873, 874, 884, 886, 910, 912, 1049, 1051, 1064, 1065, 1080, 1081, 1084, 1108], "13": [184, 293, 335, 336, 357, 364, 515, 553, 556, 573, 576, 585, 725, 728, 752, 770, 826, 828, 831, 861, 873, 874, 884, 886, 910, 912, 1042, 1043, 1046, 1049, 1051, 1059, 1063, 1064, 1065, 1080, 1081, 1084, 1108], "static_random_uniform": [184, 335, 336, 1053], "static_sort": [184, 341, 342, 1075], "static_sparse_cross_entropi": [184, 329, 330, 955], "static_subtract": [184, 317, 318, 364, 733], "static_tan": [184, 317, 318, 357, 364, 544, 549, 747], "143": [184, 299, 305, 317, 318, 357, 515, 544, 549, 738, 739, 741, 747], "38": [184, 299, 305, 317, 318, 357, 515, 544, 549, 738, 739, 741, 747], "static_tanh": [184, 317, 318, 549], "76": [184, 300, 317, 318, 515, 549, 585, 744, 826, 828, 831, 874, 929, 931, 1080, 1081, 1084, 1108], "96": [184, 300, 317, 318, 515, 549, 738, 744, 826, 828, 831, 874, 910, 912, 1080, 1081, 1084, 1108], "995": [184, 300, 306, 317, 318, 515, 544, 549, 743, 744, 746], "9999": [184, 300, 317, 318, 549, 744], "strongli": [349, 350, 1122, 1128], "welcom": [349, 350, 351, 1122, 1128], "skill": 349, "vetern": 349, "beginn": 349, "aspect": [349, 373, 1122], "guid": [349, 350, 351, 359, 1122], "through": [349, 351, 352, 354, 357, 360, 361, 364, 369, 370, 372, 373, 374, 375, 386, 515, 545, 548], "journei": [349, 1122, 1128], "inclusvi": 349, "big": [349, 387], "team": [349, 350, 351], "board": 349, "contributor": [349, 350, 351, 369, 1122], "section": [349, 351, 352, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 373, 374, 1064, 1065, 1066, 1068], "below": [349, 350, 352, 353, 354, 355, 357, 360, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 386, 409, 420, 424, 425, 515, 553, 556, 573, 576, 585, 709, 712, 743, 874, 881, 884, 886, 932, 934, 960, 974, 977, 978, 981, 1064, 1065, 1066, 1069, 1070, 1073, 1122], "best": [349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 752, 802], "go": [349, 350, 351, 352, 354, 355, 357, 364, 369, 373, 387, 1024, 1035], "finish": [349, 350, 354, 1122], "dive": [349, 351, 352, 369, 372, 373, 387, 1122], "environ": [349, 351, 353, 386], "basic": [349, 352, 353], "fork": [349, 350, 752, 803], "doc": [349, 352, 356, 368, 370, 373, 374, 1122], "document": [349, 351, 371, 373, 375], "local": [349, 350, 353, 360], "task": [349, 351, 386, 1020, 1021, 1022, 1023, 1122], "help": [349, 350, 357, 361, 363, 364, 372, 373, 374, 385, 752, 758, 1080, 1105, 1122], "video": [349, 351, 356, 357, 368], "realli": [350, 364, 387], "contribut": [350, 351, 352, 370, 1128], "toward": [350, 370, 960, 994, 997, 1122, 1128], "page": [350, 351, 371, 375, 385, 1122, 1128], "explain": [350, 351, 352, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 1122, 1128], "main": [350, 353, 362, 364, 409, 414, 424, 425, 874, 884, 886, 932, 934], "prefer": [350, 364], "git": [350, 351], "submodul": [350, 351, 352, 353, 358, 359, 360, 366, 369, 370, 374, 1122, 1157, 1158, 1165, 1166], "com": 350, "unifyai": [350, 353], "http": [350, 356, 428, 437, 440, 515, 533, 536, 573, 576, 577, 580, 585, 610, 693, 696, 725, 728, 729, 732, 826, 828, 831, 833, 835, 960, 974, 977, 994, 997, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088], "gh": 350, "your_fold": 350, "id": [350, 363, 364, 465, 484, 1155, 1156], "cours": [350, 351, 357, 373, 387], "whatev": [350, 387], "integr": [350, 359, 428, 434], "familiar": [350, 352], "sure": [350, 352, 358], "elig": 350, "free": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 386, 1122], "student": 350, "licenc": 350, "peopl": [350, 351, 354], "seem": [350, 374, 387], "miss": [350, 357, 359, 363, 364, 1159, 1163], "explicit": [350, 353, 364, 365, 367, 370, 387], "remind": 350, "channel": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 752, 779, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153], "pace": 350, "suggest": [350, 351, 355], "latest": [350, 352, 353, 356, 387, 428, 437, 440, 515, 533, 536, 573, 576, 577, 580, 585, 610, 693, 696, 725, 728, 729, 732, 960, 974, 977, 994, 997, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1143, 1152], "packag": [350, 353, 387], "ensur": [350, 351, 359, 363, 365, 368, 752, 796], "pypi": [350, 352, 387], "person": [350, 351], "experi": [350, 371, 373, 387], "avoid": [350, 351, 359, 361, 362, 364, 372, 465, 515, 606, 609], "pip": [350, 386, 1122], "instal": [350, 353, 386, 1122], "abil": [350, 371, 387], "perhap": [350, 372, 373, 374, 387], "track": [350, 351, 465, 1024, 1036, 1155, 1156], "run": [350, 353, 358, 359, 361, 368, 370, 371, 372, 373, 374, 375, 386, 387, 465, 474, 826, 828, 831, 833, 835, 843, 845, 1020, 1021, 1022, 1023, 1143, 1154, 1155, 1156], "command": [350, 353, 1122], "ivy_dev": [350, 351, 353], "name": [350, 351, 353, 356, 359, 370, 372, 373, 375, 406, 407, 752, 758, 874, 887, 889, 916, 918, 923, 1064, 1065, 1066], "setup": 350, "click": [350, 351, 356, 1122], "icon": [350, 351], "side": [350, 351], "choos": [350, 351, 375, 465, 510, 515, 670, 673, 674, 677, 1059, 1063, 1064, 1065, 1066, 1068, 1080, 1085, 1088, 1089, 1092, 1093, 1096], "panel": 350, "select": [350, 351, 359, 370, 372, 375, 387], "drop": [350, 387], "down": [350, 372], "path": [350, 353], "manual": [350, 351, 359, 374, 1024, 1025, 1034, 1035], "builtin": [350, 353, 372, 374], "requir": [350, 353, 355, 356, 357, 359, 362, 363, 365, 366, 368, 372, 387, 406, 407, 515, 725, 728, 874, 887, 889, 960, 1004, 1007, 1132, 1133], "cmd": [350, 353], "directori": [350, 351, 353, 752, 813], "folder": [350, 351, 353, 355, 358, 359, 360], "abov": [350, 351, 353, 356, 357, 360, 361, 363, 364, 367, 368, 372, 373, 374, 375, 409, 420, 424, 425, 428, 437, 440, 515, 528, 533, 536, 553, 556, 573, 576, 577, 580, 585, 610, 684, 687, 693, 696, 709, 712, 725, 728, 729, 732, 738, 743, 752, 780, 861, 864, 873, 874, 881, 884, 886, 887, 889, 932, 934, 960, 974, 977, 978, 981, 994, 997, 1042, 1043, 1046, 1047, 1049, 1050, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1097, 1100, 1101, 1104, 1105, 1113, 1114, 1117], "m": [350, 351, 353, 354, 370, 409, 420, 424, 425, 752, 761, 874, 875, 877, 881, 884, 886, 887, 889, 890, 892, 893, 895, 896, 899, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 920, 922, 923, 925, 926, 928, 932, 934, 1047, 1052, 1053, 1055], "python3": [350, 353], "script": [350, 351, 353, 357, 370, 387], "bat": [350, 351, 353], "OR": [350, 351, 353, 515, 565, 568, 674, 677, 1113, 1118, 1121], "bin": [350, 351, 353], "mac": [350, 351, 353], "linux": [350, 351, 353], "virtualenv": 350, "os": 350, "note": [350, 351, 355, 356, 357, 364, 515, 705, 708, 874, 887, 889, 923, 960, 1004, 1007, 1064, 1066, 1080, 1089, 1092], "tick": [350, 351], "To": [350, 357, 360, 364, 373, 374, 375, 1122], "ivy_test": [350, 351], "test_array_api": [350, 351, 358, 359], "cd": [350, 351, 353], "txt": 350, "visual": [350, 387], "jetbrain": 350, "remot": 350, "mitig": 350, "potenti": [350, 369, 515, 606, 609], "conflict": [350, 351, 373], "yet": [350, 352, 364], "particular": [350, 351, 355, 367, 515, 516, 519], "system": [350, 387, 874, 920, 922], "instruct": [350, 352], "desktop": 350, "wsl": 350, "powershel": 350, "admin": 350, "visit": 350, "link": 350, "profession": 350, "execut": [350, 353, 364, 367, 370, 372, 375, 387, 752, 823], "deploy": 350, "top": [350, 351, 359, 373, 374, 1122], "press": [350, 373, 1122], "ok": 350, "caus": [350, 351, 357, 359, 364, 367, 387], "earlier": [350, 351], "might": [350, 351, 355, 359, 362, 370, 372, 373, 752, 773], "necessari": [350, 357, 361, 364, 367], "virtualis": 350, "detail": [350, 351, 352, 355, 358, 359, 360, 361, 362, 364, 368, 373, 374, 409, 415, 1064, 1065, 1066, 1068], "sudo": 350, "apt": 350, "ca": 350, "certif": 350, "curl": 350, "gnupg": 350, "lsb": 350, "mkdir": 350, "keyr": 350, "fssl": 350, "download": [350, 359], "gpg": 350, "dearmor": 350, "o": [350, 370, 752, 761], "echo": 350, "deb": 350, "arch": 350, "dpkg": 350, "architectur": [350, 375, 387], "lsb_releas": 350, "cs": 350, "tee": 350, "null": 350, "ce": 350, "cli": 350, "containerd": 350, "io": 350, "compos": [350, 364, 387], "plugin": 350, "systemctl": 350, "permiss": 350, "relat": [350, 351, 386, 465], "post": [350, 375, 1042, 1043, 1046, 1122, 1128], "It": [350, 351, 353, 354, 355, 356, 357, 361, 363, 364, 367, 370, 372, 373, 374, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 434, 436, 465, 510, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 598, 601, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 626, 629, 630, 633, 634, 637, 638, 641, 642, 645, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 666, 669, 670, 673, 674, 677, 678, 681, 682, 683, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 733, 737, 738, 742, 743, 747, 748, 751, 752, 764, 765, 767, 770, 774, 775, 776, 778, 781, 784, 792, 805, 808, 809, 826, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 877, 878, 880, 881, 883, 884, 886, 890, 892, 893, 895, 896, 899, 900, 902, 904, 906, 907, 909, 910, 912, 913, 915, 919, 920, 922, 923, 925, 926, 928, 929, 931, 932, 934, 935, 937, 938, 940, 941, 943, 944, 945, 948, 950, 953, 955, 958, 960, 961, 964, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1058, 1059, 1060, 1063, 1064, 1068, 1069, 1070, 1073, 1075, 1078, 1113, 1114, 1117, 1118, 1121], "headach": 350, "arm": 350, "m1": 350, "instead": [350, 351, 352, 356, 357, 359, 360, 364, 367, 368, 370, 372, 373, 387], "featur": [350, 355, 368, 373, 1122], "vm": 350, "azur": 350, "cloud": [350, 386], "defin": [350, 352, 355, 356, 365, 368, 372, 374, 387, 515, 684, 687, 705, 708, 752, 805, 874, 878, 880, 887, 889, 920, 922, 1047, 1049, 1050, 1080, 1085, 1088, 1089, 1092, 1093, 1096], "dockerfil": [350, 353], "longer": [350, 365, 367], "worri": 350, "platform": 350, "agnost": [350, 363, 368, 370, 372, 375, 387, 1122], "usual": 350, "studio": 350, "favourit": 350, "extens": [350, 351, 356, 409, 420, 428, 437, 440, 515, 528, 533, 536, 553, 556, 573, 576, 577, 580, 585, 610, 693, 696, 709, 712, 725, 728, 729, 732, 738, 743, 874, 881, 960, 974, 977, 978, 981, 994, 997, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1113, 1114, 1117], "theme": 350, "too": [350, 351, 387, 515, 528, 684, 687], "done": [350, 351, 357, 359, 373], "unsupport": [350, 365, 428, 449, 450], "slow": 350, "ipad": 350, "long": [350, 351, 357, 861, 871], "browser": 350, "cool": [350, 355], "requisit": 350, "head": [350, 364, 861, 872, 1122, 1143, 1154], "pane": [350, 351], "readi": [350, 352], "begin": [350, 1024, 1025, 1035], "outlin": [350, 351, 352, 354, 356, 359, 360, 364, 367, 372], "dropdown": 350, "tab": [350, 373, 1122], "master": [350, 351, 364], "vs": 350, "view": [350, 351, 409, 415, 861, 864, 868], "built": [350, 371, 409, 410, 465, 1143, 1154, 1155, 1156], "bottom": 350, "box": 350, "patient": 350, "upto": 350, "minut": 350, "launch": 350, "That": [350, 351, 372, 373, 374, 515, 705, 708], "refer": [350, 351, 359, 360, 365, 368, 387, 409, 414, 515, 606, 609, 654, 657, 826, 828, 831, 833, 835, 874, 935, 937, 941, 943, 1080, 1101, 1104, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1143, 1153], "approach": [350, 351, 359, 360, 364, 372, 373, 387], "colour": 350, "applic": [350, 365, 366, 374, 861, 872, 873, 1024, 1030, 1036], "good": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 374], "chanc": 350, "vscode": 350, "explor": [350, 371, 375, 386], "troubleshoot": 350, "sometim": [350, 351], "ever": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "64": [350, 373, 374, 515, 725, 728, 729, 732, 861, 867, 868, 874, 910, 912, 1080, 1081, 1084, 1108, 1122, 1143, 1154], "bit": [350, 357, 360, 364, 372, 428, 447, 448, 451, 515, 557, 560, 561, 564, 569, 572, 1080, 1097, 1100, 1105], "usr": 350, "more": [350, 351, 352, 354, 355, 357, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 387, 409, 410, 428, 435, 515, 606, 609, 874, 896, 899, 960, 978, 981, 1064, 1065, 1066, 1068, 1122], "nutshel": [350, 368], "hook": 350, "lint": 350, "fix": [350, 351], "fail": [350, 352, 358, 359, 370, 372], "attempt": [350, 387], "succe": 350, "problemat": 350, "proce": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "modifi": [350, 351, 356, 360, 365, 366, 370], "properli": [350, 354], "enter": [350, 351, 363, 365, 366, 368, 465], "unsur": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368], "feel": [350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 1122], "server": [351, 1122], "context": [351, 357, 364, 365, 366, 465, 752, 803, 861, 872, 1143, 1154], "suitabl": [351, 355, 364], "quick": [351, 354, 374], "tendenc": 351, "land": 351, "end": [351, 364, 367, 369, 386, 387, 409, 410, 515, 545, 548, 1122, 1128], "world": 351, "come": [351, 352, 374, 385, 1122, 1128], "fly": 351, "hard": [351, 372], "receiv": [351, 359, 365, 366, 465, 474, 475, 752, 759, 802, 1143, 1153], "respons": [351, 353], "internship": 351, "comment": 351, "trigger": 351, "unansw": 351, "label": [351, 370, 371, 375, 944, 945, 948, 950, 953, 955, 958], "respond": 351, "someon": [351, 387], "els": [351, 352, 355, 360, 361, 367, 370, 372, 374, 375, 387, 752, 762, 773, 777, 1024, 1034], "strive": [351, 387], "repli": 351, "newli": [351, 367, 406, 407, 428, 434, 752, 763], "bug": [351, 359], "serv": [351, 359, 360, 363, 364, 368, 369, 1122], "suspect": 351, "behaviour": [351, 356, 359, 363, 364, 367, 368, 372], "observ": 351, "confid": 351, "wrong": 351, "someth": [351, 355, 373, 374, 387], "bet": 351, "act": [351, 357, 387], "placehold": [351, 363, 368, 1024, 1036], "mark": [351, 359], "ii": [351, 1080, 1081, 1084, 1108], "iii": 351, "titl": [351, 1122], "issue_numb": 351, "delet": [351, 353], "No": [351, 370], "progress": [351, 364, 371, 375], "pr": 351, "soon": [351, 364, 385, 387, 1122, 1128], "solut": [351, 359, 364, 874, 920, 922], "review": [351, 355], "merg": 351, "everi": [351, 352, 353, 357, 358, 359, 360, 361, 362, 364, 367, 368, 370, 372, 374, 409, 416, 417, 752, 753, 756], "dai": 351, "close": [351, 356, 515, 606, 609, 709, 712, 874, 923], "likewis": [351, 356, 360, 364, 365, 368, 373], "freed": 351, "purpos": [351, 353, 357, 359, 360, 362, 363, 364, 368, 369, 372, 515, 606, 609, 1122], "remain": [351, 357, 387, 515, 528, 684, 687, 705, 708, 960, 990, 993, 1024, 1030], "short": [351, 374, 861, 871], "basi": [351, 358, 373], "situat": [351, 375], "alloc": [351, 387, 409, 424, 425, 428, 434, 465], "upon": [351, 357, 359, 367, 387], "period": 351, "prevent": [351, 367, 372, 826, 828, 831, 833, 835, 843, 845, 1080, 1105, 1159, 1160, 1161], "unabl": 351, "obvious": 351, "never": [351, 364], "reflect": [351, 363], "qualiti": 351, "hypothet": 351, "frustrat": 351, "delai": 351, "busi": 351, "fine": [351, 372, 375], "becaus": [351, 356, 359, 360, 361, 363, 365, 366, 367, 368, 370, 374, 375, 387], "inact": 351, "me": 351, "unfairli": 351, "definit": [351, 360, 365, 372, 874, 875, 877, 878, 880], "investig": 351, "Then": [351, 353, 372, 387], "practic": [351, 359], "separ": [351, 359, 363, 370, 372, 373], "branch": [351, 364, 387, 406, 407, 515, 545, 548], "role": [351, 371], "date": 351, "upstream": [351, 358], "complic": [351, 370], "root": [351, 353, 373, 515, 725, 728, 1047, 1048, 1052], "merge_with_upstream": 351, "sh": 351, "name_of_your_branch": 351, "resolv": [351, 1080, 1097, 1100, 1105], "push": [351, 358], "both": [351, 356, 357, 360, 364, 366, 367, 368, 370, 372, 373, 374, 375, 386, 387, 428, 437, 440, 455, 515, 528, 533, 536, 577, 580, 610, 693, 696, 701, 704, 725, 728, 729, 732, 738, 752, 780, 826, 828, 831, 861, 864, 873, 874, 878, 880, 896, 899, 935, 937, 960, 994, 997, 1042, 1043, 1046, 1080, 1085, 1088, 1113, 1114, 1117], "abort": 351, "tediou": 351, "resolut": 351, "stash": 351, "reinstat": 351, "fetch": 351, "uncommit": 351, "unstag": 351, "untrack": 351, "comprehens": 351, "explan": [351, 356, 364, 368, 372], "atlassian": 351, "tutori": 351, "quit": [351, 352, 356, 360, 362, 363], "logic": [351, 362, 363, 365, 366, 372, 465, 501, 515, 666, 669, 670, 673, 674, 677, 1113, 1114, 1117, 1118, 1121, 1122], "blame": 351, "revis": 351, "author": [351, 1122], "eg": 351, "past": 351, "l": [351, 354, 874, 875, 877, 887, 889, 896, 899, 932, 934], "grep": 351, "v": [351, 370, 373, 374, 375, 861, 873, 1122, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1163, 1165, 1166], "commit_id": 351, "handi": 351, "histori": 351, "toggl": 351, "vertic": 351, "highlight": [351, 357], "previou": [351, 359, 368, 375, 387, 826, 833, 835, 843, 845], "inform": [351, 428, 448, 451, 752, 758, 826, 856], "whenev": [351, 372, 373], "tag": 351, "think": [351, 357], "interact": [351, 1122], "gain": [351, 369, 374, 1134], "yourself": [351, 352, 386], "simpler": [351, 372], "cannot": [351, 361, 365, 375], "least": [351, 357, 360, 363, 874, 896, 899], "final": [351, 356, 357, 360, 363, 365, 367, 370, 372, 373, 409, 418, 419, 752, 779, 1143, 1154], "tickbox": 351, "corner": 351, "span": 351, "intent": [351, 367], "larg": [351, 373, 515, 528, 684, 687], "discourag": 351, "philosophi": 351, "increment": [351, 752, 795], "frequent": [351, 352], "valuabl": 351, "infrequ": 351, "earli": [351, 1122], "wast": 351, "spot": [351, 360], "mistak": 351, "propos": 351, "mountain": 351, "advoc": [351, 387], "individu": [351, 352, 360], "per": [351, 373, 465, 861, 862, 863, 864, 865, 866, 867, 868, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "style": [351, 1059, 1062], "ve": [351, 369, 372, 1047, 1048, 1122], "actual": [351, 354, 360, 367, 369, 372, 374, 387], "aim": [351, 369], "part": [351, 355, 358, 359, 360, 370, 371, 375, 386, 387, 409, 424, 425, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 1155, 1156], "subsect": 351, "session": [351, 1122], "block": [351, 360, 369, 371, 375, 387, 465, 1122], "smaller": [351, 370, 375, 960, 961, 964, 994, 997, 1080, 1097, 1100, 1105], "edit": 351, "beauti": 351, "particularli": [351, 373, 387], "concern": [351, 354, 357, 364, 367, 369], "effici": [351, 359, 360, 364, 367, 368, 370, 373, 387], "difficult": [351, 359, 387, 1064, 1065, 1066, 1068], "undo": 351, "stress": 351, "frequenc": [351, 752, 779], "pycharm": 351, "pytest": [351, 359], "button": 351, "declar": 351, "insid": [351, 353, 355, 365], "exec": 351, "rm": 351, "rf": 351, "cp": 351, "ivy_contain": 351, "bash": [351, 353], "test_ivi": [351, 359], "test_funct": 351, "test_cor": 351, "test_imag": 351, "test_random_crop": 351, "header": 351, "q": [351, 387, 861, 873, 874, 887, 889, 916, 918], "array_api_test": 351, "test_creation_funct": 351, "test_arang": 351, "window": [351, 353, 861, 862, 863, 864, 865, 866, 867, 868, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "variou": [351, 356, 362, 368, 386], "wherebi": [352, 364, 1024, 1036], "broad": 352, "todo": [352, 359], "commit": [352, 359], "NOT": [352, 515, 670, 673], "resourc": 352, "hypothesi": 352, "cover": [352, 356, 357, 360, 362, 369], "lambda": [352, 370, 373, 1159, 1162, 1164], "direct": [352, 374, 375, 386, 1069, 1075, 1078], "bind": [352, 364], "aforement": 352, "categori": [352, 355, 363, 364, 365, 369, 1122], "parent": [352, 372], "hint": [352, 355, 356, 360, 363, 367, 368, 409, 420, 428, 437, 440, 515, 528, 533, 536, 553, 556, 573, 576, 577, 580, 585, 610, 693, 696, 709, 712, 725, 728, 729, 732, 738, 743, 752, 780, 861, 864, 873, 874, 881, 960, 974, 977, 978, 981, 994, 997, 1042, 1043, 1046, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1113, 1114, 1117], "its": [352, 353, 356, 428, 435, 465, 509, 874, 896, 899, 960, 974, 977, 990, 993, 994, 997, 1008, 1011], "thorough": [352, 356, 359, 368], "transpil": [352, 369, 371, 1122, 1128], "builder": [353, 385, 387, 1122], "maco": 353, "ubuntu": 353, "uid": 353, "make_docs_without_dock": 353, "rel": [353, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 874, 884, 886, 895, 904, 906, 913, 915, 932, 934, 960, 978, 981, 994, 997, 1069, 1070, 1073, 1075, 1078, 1122], "synchron": 353, "rest": [353, 371, 375], "remove_doc": 353, "_": [353, 356, 364, 367, 372, 373, 428, 437, 440, 515, 533, 536, 573, 576, 577, 580, 585, 610, 693, 696, 725, 728, 729, 732, 826, 828, 831, 833, 835, 874, 941, 943, 960, 974, 977, 994, 997, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088], "privat": [353, 1159, 1163], "fulfil": [353, 369, 1122], "autogenerated_sourc": 353, "png": [353, 373], "_imag": 353, "lastli": 353, "rst": 353, "partial_sourc": 353, "conf": 353, "create_rst_fil": 353, "filter": [353, 861, 862, 863, 864, 865, 866, 867, 868, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "repres": [353, 372, 409, 420, 428, 447, 515, 523, 524, 527, 528, 537, 540, 544, 549, 552, 584, 585, 588, 684, 687, 721, 724, 742, 743, 747, 861, 870, 874, 883, 919, 920, 922], "overal": [353, 356, 364, 365, 366, 375], "markup": 353, "extract": [353, 355], "get_functions_and_class": 353, "doctr": 353, "readm": [353, 387], "module_nam": 353, "copy_readme_to_rst": 353, "tabl": 353, "toc": 353, "tree": 353, "append_toctree_to_rst": 353, "create_index_rst": 353, "\u03c0": [353, 515, 520, 533, 536, 541, 545, 548], "namespac": [353, 355, 365, 370, 375], "who": [354, 369, 387], "mainli": [354, 371, 373], "under": [354, 356, 357, 358, 359, 360, 364, 369, 370, 373, 375], "hood": [354, 357, 359, 360, 364, 369, 370, 373, 375], "weed": [354, 369], "behind": [354, 369, 371, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853], "navig": 354, "tour": 354, "primari": [354, 359, 361, 367, 387], "composit": [354, 359, 361, 363, 364, 367, 370, 374, 375, 387], "nestabl": [354, 356, 357, 359, 367, 428, 437, 440, 515, 528, 533, 536, 577, 580, 610, 693, 696, 725, 728, 729, 732, 738, 752, 780, 861, 864, 873, 960, 994, 997, 1042, 1043, 1046, 1080, 1085, 1088, 1113, 1114, 1117], "dynam": [354, 365, 366, 367, 370, 406, 407], "runtim": [354, 359, 465], "h": [354, 364, 861, 864, 865, 866, 867, 868], "j": [354, 752, 760, 761, 874, 932, 934, 1080, 1081, 1084, 1108], "k": [354, 370, 409, 414, 424, 425, 752, 760, 861, 873, 874, 896, 899, 916, 918, 920, 922, 923, 925, 926, 928, 932, 934, 1047, 1052, 1053, 1055, 1059, 1062], "borrow": 354, "n": [354, 409, 420, 424, 425, 752, 761, 861, 869, 874, 884, 886, 895, 896, 899, 903, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 923, 925, 926, 928, 932, 934, 935, 937, 938, 940, 941, 943, 960, 970, 973, 974, 977, 982, 985, 1004, 1007, 1016, 1019, 1047, 1052, 1053, 1055, 1059, 1062, 1080, 1089, 1092, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "taken": [355, 375, 874, 884, 886], "constant": [355, 360, 374, 375, 387, 465, 474, 475, 960, 970, 973, 1024, 1030, 1042, 1043, 1046, 1134, 1135, 1139, 1142, 1155, 1156, 1157, 1158], "compil": [355, 364, 369, 371, 387, 1122, 1155, 1156, 1159, 1160, 1161, 1162, 1163, 1164], "meta": [355, 363, 1021, 1022, 1023], "overlap": 355, "sever": [355, 387, 874, 893], "judgement": 355, "locat": [355, 359, 361, 366, 1047, 1048], "some_namespac": 355, "some_backend": 355, "another_backend": 355, "break": [355, 368, 372, 387, 1122], "anyth": [355, 1122], "refactor": 355, "ongo": 355, "subfold": [355, 359], "via": [355, 364, 365, 366, 367, 370, 372, 373, 386, 1024, 1025, 1034, 1035], "file_nam": 355, "my_func": [355, 357], "int": [355, 357, 360, 364, 365, 366, 367, 368, 375, 398, 403, 406, 407, 409, 412, 414, 416, 417, 418, 419, 422, 424, 425, 426, 428, 436, 445, 447, 448, 451, 454, 465, 487, 490, 491, 492, 493, 501, 502, 503, 509, 510, 515, 553, 556, 557, 560, 561, 564, 565, 568, 569, 572, 573, 576, 752, 758, 770, 771, 774, 775, 776, 779, 780, 789, 805, 808, 809, 814, 815, 824, 826, 828, 831, 833, 835, 843, 845, 861, 862, 864, 866, 867, 868, 874, 878, 880, 884, 886, 929, 931, 932, 934, 935, 937, 938, 940, 944, 950, 953, 955, 958, 960, 966, 969, 970, 973, 974, 977, 978, 981, 982, 985, 986, 989, 990, 993, 994, 997, 999, 1000, 1003, 1004, 1007, 1008, 1011, 1012, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1036, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1057, 1059, 1060, 1061, 1069, 1070, 1073, 1075, 1078, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "nativedtyp": [355, 365, 366, 368, 409, 410, 411, 412, 413, 414, 416, 417, 421, 422, 423, 426, 427, 428, 433, 434, 444, 445, 446, 455, 1080, 1105], "nativedevic": [355, 365, 366, 368, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 426, 427, 465, 482, 483, 484, 498, 504, 506, 508, 510, 511, 514, 752, 805, 1047, 1048, 1049, 1050, 1052, 1053, 1055], "my": 355, "numer": [355, 374, 409, 420, 428, 434, 515, 516, 519, 528, 577, 580, 589, 592, 606, 609, 610, 613, 614, 617, 626, 629, 630, 633, 634, 637, 638, 641, 670, 673, 674, 677, 684, 687, 689, 692, 693, 696, 701, 704, 705, 708, 713, 716, 729, 732, 733, 737, 748, 751, 752, 787, 788, 810, 811, 816, 817, 874, 878, 880, 896, 899, 910, 912, 923, 929, 931, 932, 934, 935, 937, 1047, 1058, 1059, 1060, 1061, 1080, 1085, 1088, 1097, 1100, 1105, 1134], "cooler": 355, "produc": [355, 465, 474, 475, 861, 873], "something_cool": 355, "category_nam": [356, 360, 365, 366, 368], "contrast": [356, 368], "backend_nam": [356, 360, 361, 362, 365, 366, 368], "account": 356, "instanti": 356, "firstli": [356, 357, 360, 363, 365, 367, 373], "templat": [356, 1122], "spec": [356, 357], "api_specif": [356, 428, 437, 440, 515, 533, 536, 573, 576, 577, 580, 585, 610, 693, 696, 725, 728, 729, 732, 960, 974, 977, 994, 997, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088], "array_api": 356, "preview": 356, "render": 356, "incorrectli": 356, "onlin": [356, 1122], "approxim": [356, 398, 399, 515, 520, 523, 524, 527, 533, 536, 537, 540, 541, 545, 548, 581, 584, 585, 588, 602, 606, 609, 646, 649, 650, 653, 654, 657, 658, 661, 701, 704, 717, 720, 721, 724, 738, 743, 874, 895, 904, 906, 913, 915], "tangent": [356, 398, 405, 515, 541, 544, 545, 548, 549, 552, 738, 742, 743, 747], "domain": [356, 515, 520, 523, 524, 527, 533, 536, 537, 540, 541, 545, 548, 581, 584, 585, 588, 602, 606, 609, 646, 649, 650, 653, 658, 661, 717, 720, 721, 724, 725, 728, 738, 743], "infin": [356, 408, 428, 434, 515, 516, 519, 523, 524, 527, 528, 531, 537, 540, 541, 545, 548, 577, 580, 581, 584, 585, 588, 592, 602, 605, 606, 609, 610, 613, 614, 617, 626, 629, 630, 633, 646, 649, 650, 653, 658, 661, 662, 665, 684, 687, 701, 704, 705, 708, 709, 712, 717, 720, 721, 724, 725, 728, 738, 743, 748, 751, 874, 938, 940, 1080, 1085, 1088, 1093, 1096, 1113, 1114, 1117, 1118, 1121], "codomain": [356, 515, 520, 523, 524, 527, 533, 536, 537, 540, 541, 545, 548, 581, 584, 585, 588, 602, 606, 609, 646, 649, 650, 653, 658, 661, 717, 720, 721, 724, 725, 728, 738, 743], "x_i": [356, 515, 516, 519, 520, 523, 524, 527, 533, 536, 537, 540, 541, 557, 560, 577, 580, 581, 584, 585, 588, 602, 606, 609, 610, 626, 629, 630, 633, 634, 637, 646, 649, 650, 653, 658, 661, 670, 673, 689, 692, 709, 712, 713, 716, 717, 720, 721, 724, 725, 728, 729, 732, 738, 743, 748, 751, 1064, 1065, 1066, 1068, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1101, 1104, 1105, 1109, 1112], "assum": [356, 361, 365, 372, 373, 387, 409, 420, 428, 437, 440, 515, 528, 533, 536, 553, 556, 573, 576, 577, 580, 581, 585, 610, 693, 696, 709, 712, 717, 720, 725, 728, 729, 732, 738, 743, 752, 780, 861, 864, 873, 874, 881, 960, 974, 977, 978, 981, 994, 997, 1042, 1043, 1046, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1113, 1114, 1117], "express": [356, 370, 375, 515, 520, 533, 536, 541, 545, 548, 581, 717, 720, 738], "radian": [356, 515, 520, 533, 536, 541, 545, 548, 581, 717, 720, 738], "float": [356, 360, 364, 365, 367, 368, 372, 374, 398, 400, 408, 409, 410, 412, 414, 416, 417, 418, 419, 422, 426, 428, 434, 444, 448, 453, 456, 465, 498, 504, 508, 511, 514, 515, 516, 519, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 573, 576, 577, 580, 581, 584, 585, 588, 589, 592, 594, 597, 602, 605, 606, 609, 610, 613, 614, 617, 618, 621, 622, 625, 638, 641, 642, 645, 646, 649, 650, 653, 658, 661, 662, 665, 684, 687, 689, 692, 693, 696, 697, 700, 701, 704, 705, 708, 709, 712, 717, 720, 721, 724, 725, 728, 733, 737, 738, 742, 743, 747, 748, 751, 752, 764, 765, 767, 779, 787, 788, 810, 811, 816, 817, 826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 861, 864, 868, 873, 874, 875, 877, 881, 887, 889, 890, 892, 893, 895, 904, 906, 913, 915, 916, 918, 920, 922, 923, 938, 940, 944, 945, 948, 950, 953, 955, 958, 1020, 1021, 1022, 1023, 1042, 1043, 1046, 1047, 1052, 1053, 1055, 1064, 1065, 1066, 1068, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112], "operand": [356, 515, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 545, 548, 573, 576, 577, 580, 581, 584, 585, 588, 602, 605, 606, 609, 610, 646, 649, 650, 653, 658, 661, 662, 665, 684, 687, 701, 704, 705, 708, 709, 712, 717, 720, 721, 724, 725, 728, 738, 743, 748, 751, 1080, 1081, 1084, 1085, 1088, 1093, 1096, 1105, 1108], "whose": [356, 409, 424, 425, 515, 523, 524, 527, 537, 540, 544, 549, 552, 581, 584, 585, 588, 701, 704, 717, 720, 721, 724, 738, 742, 743, 747, 752, 763, 874, 875, 877, 881, 884, 886, 887, 889, 890, 892, 893, 895, 904, 906, 907, 909, 910, 912, 913, 915, 916, 918, 920, 922, 923, 925, 926, 928, 932, 934, 960, 978, 981, 994, 997, 1064, 1065, 1066, 1080, 1081, 1084, 1108], "ref": [356, 515, 569, 572, 638, 641, 684, 687, 693, 696, 705, 708, 733, 737, 960, 1004, 1007], "promot": [356, 360, 365, 428, 434, 437, 440, 455, 456, 460, 515, 520, 523, 524, 527, 528, 531, 533, 536, 537, 540, 541, 544, 549, 552, 553, 556, 561, 564, 565, 568, 569, 572, 573, 576, 581, 584, 585, 588, 589, 602, 605, 606, 609, 646, 649, 650, 653, 658, 661, 662, 665, 678, 681, 684, 687, 701, 704, 705, 708, 717, 720, 721, 724, 725, 728, 738, 742, 743, 747, 874, 875, 877, 878, 880, 893, 895, 896, 899, 904, 906, 910, 912, 913, 915, 920, 922, 935, 937, 938, 940, 960, 1004, 1007, 1080, 1089, 1092], "But": [356, 364, 375], "needless": 356, "info": [356, 1122], "subset": [356, 359, 368, 370], "extend": [356, 359, 361, 368], "renam": 356, "conform": [356, 409, 420, 428, 437, 440, 515, 528, 533, 536, 553, 556, 573, 576, 577, 580, 585, 606, 609, 610, 693, 696, 709, 712, 725, 728, 729, 732, 738, 743, 874, 881, 960, 974, 977, 978, 981, 994, 997, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1113, 1114, 1117], "org": [356, 428, 437, 440, 515, 533, 536, 573, 576, 577, 580, 585, 610, 693, 696, 725, 728, 729, 732, 826, 828, 831, 833, 835, 960, 974, 977, 994, 997, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088], "elementwise_funct": [356, 515, 533, 536, 573, 576, 577, 580, 585, 610, 693, 696, 725, 728, 729, 732, 960, 994, 997, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088], "descript": [356, 364, 409, 420, 428, 437, 440, 515, 528, 533, 536, 553, 556, 573, 576, 577, 580, 585, 610, 693, 696, 709, 712, 725, 728, 729, 732, 738, 743, 752, 780, 861, 864, 873, 874, 881, 938, 940, 960, 974, 977, 978, 981, 994, 997, 1042, 1043, 1046, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088, 1113, 1114, 1117], "simplic": [356, 374, 386, 409, 420, 428, 437, 440, 515, 528, 533, 536, 553, 556, 573, 576, 577, 580, 585, 610, 693, 696, 709, 712, 725, 728, 729, 732, 738, 743, 752, 780, 861, 864, 873, 874, 881, 960, 974, 977, 978, 981, 994, 997, 1042, 1043, 1046, 1064, 1065, 1066, 1069, 1070, 1073, 1080, 1085, 1088], "judgment": 356, "beyond": [356, 960, 994, 997], "text": 356, "func_nam": [356, 357, 360], "pure": [356, 372, 375, 387], "themselv": [356, 360, 364, 365, 366, 374, 1024, 1025], "operator_nam": 356, "succinct": 356, "contstructor": 356, "though": [356, 360, 365, 373, 387], "forward": [356, 375, 386, 387, 1155, 1156, 1159, 1163], "_forward": [356, 370, 373, 374, 1122], "former": 356, "trainabl": [356, 371, 373, 374, 826, 842, 1132, 1133, 1155, 1156, 1165], "explicitli": [356, 360, 361, 363, 364, 367, 370, 387, 874, 887, 889, 1143, 1152, 1154, 1155, 1156], "latter": [356, 361], "implicit": [356, 364, 370], "docst": 356, "eight": 357, "static_": 357, "op_nam": 357, "__r": 357, "four": [357, 360, 365, 368, 373], "__sub__": [357, 363, 364, 368, 372], "__mul__": [357, 363, 364, 368, 372], "__truediv__": [357, 363, 364], "respect": [357, 363, 364, 365, 368, 409, 420, 515, 516, 519, 528, 531, 545, 548, 553, 556, 561, 564, 565, 568, 569, 572, 573, 576, 589, 592, 594, 597, 605, 613, 614, 617, 618, 621, 622, 625, 638, 641, 642, 645, 662, 665, 666, 669, 674, 677, 678, 681, 684, 687, 693, 696, 705, 708, 733, 737, 826, 828, 831, 833, 835, 837, 838, 840, 843, 845, 847, 849, 851, 853, 874, 916, 918, 1020, 1021, 1022, 1023], "recap": [357, 364, 374], "independ": [357, 358, 362, 364, 370, 375, 874, 878, 880, 920, 922, 1047, 1048], "combinatorili": 357, "variat": [357, 359], "grid": [357, 359, 386, 409, 420], "vari": [357, 359, 364, 372, 1064, 1065, 1066, 1068], "simplest": 357, "small": [357, 360, 370, 374, 387, 515, 684, 687, 874, 895, 904, 906, 913, 915, 1042, 1043, 1046, 1157, 1158], "unus": [357, 367, 406, 407], "18": [357, 364, 515, 573, 576, 874, 884, 886, 910, 912, 1080, 1081, 1084, 1108], "excess": [357, 361, 372], "showcas": [357, 386], "demonstr": [357, 372], "replic": [357, 365], "meant": 357, "imaginari": 357, "some_flag": 357, "another_flag": 357, "54": [357, 515, 581, 585, 725, 728, 861, 873, 874, 910, 912, 1047, 1052, 1080, 1081, 1084, 1108], "jointli": 357, "three": [357, 364, 369, 409, 420, 1122], "x0": [357, 752, 760], "procedur": 357, "sens": [357, 364, 372], "5574077": 357, "1850398": 357, "5463025": 357, "8422884": 357, "91601413": 357, "9647598": 357, "3738229": 357, "1597457": 357, "0963247": 357, "9955841": 357, "3278579": 357, "multi": [357, 364, 369, 387, 861, 872, 874, 878, 880, 1122, 1128, 1143, 1154], "seper": [357, 752, 779], "pars": [357, 387], "satisfi": [357, 874, 941, 943], "far": [357, 366, 371, 372, 1024, 1025, 1035], "asid": [357, 386], "irrelev": [357, 365], "increasingli": 357, "complex": [357, 373, 374, 375, 387, 874, 887, 889, 923], "rule": [357, 359, 360, 363, 364, 365, 428, 434, 437, 440, 456, 515, 544, 549, 552, 569, 572, 589, 684, 687, 705, 708, 742, 747, 874, 875, 877, 878, 880, 910, 912, 920, 922], "count": [357, 373, 465, 503, 874, 935, 937, 960, 978, 981, 1064, 1065, 1066, 1113, 1114, 1117, 1118, 1121], "14254655": 357, "1578213": 357, "380515": 357, "17": [357, 364, 398, 400, 874, 884, 886, 1047, 1052], "trivial": 357, "By": [357, 360, 364, 367, 374, 375, 752, 770, 771, 874, 935, 937, 960, 986, 989, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "non": [357, 364, 365, 370, 406, 407, 428, 434, 452, 515, 670, 673, 674, 677, 861, 864, 874, 881, 904, 906, 923, 929, 931, 935, 937, 938, 940, 1059, 1060, 1061, 1062, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1109, 1112, 1113, 1114, 1117, 1118, 1121, 1155, 1156, 1159, 1163], "dictat": [357, 363, 367, 368], "exlud": 357, "unit": [358, 359, 387, 398, 399, 400, 401, 465], "thoroughli": [358, 359], "ci": [358, 359, 387], "failur": 358, "On": [359, 371, 375], "fixtur": 359, "consum": [359, 364, 368, 465], "300": [359, 515, 709, 712], "hit": [359, 370], "permit": [359, 363, 368], "action": 359, "eleg": 359, "intellig": 359, "sampl": [359, 861, 869, 1047, 1048, 1052, 1053, 1055, 1080, 1101, 1104, 1109, 1112, 1143, 1151], "rang": [359, 373, 374, 375, 409, 410, 418, 419, 1064, 1065, 1080, 1097, 1100, 1105, 1122], "cach": [359, 360, 465, 483, 752, 763], "unexplor": 359, "known": 359, "repeatedli": [359, 364, 1024, 1033], "upload": 359, "artifact": 359, "parametr": 359, "strategi": 359, "statement": [359, 387], "plai": [359, 375], "helper": [359, 373], "verifi": [359, 365, 366, 372, 1122, 1128], "truth": [359, 515, 594, 597, 618, 621, 622, 625, 638, 641, 642, 645, 693, 696], "opt": [359, 361, 367, 372], "defer": [359, 360, 363, 364, 365, 366, 367], "suffic": [359, 362], "catch": [359, 752, 773], "systemat": 359, "safeguard": 359, "inabl": 359, "fact": [359, 373], "categor": [360, 366], "mutual": [360, 364], "constitut": [360, 370, 1080, 1101, 1104, 1109, 1112], "venn": 360, "diagram": 360, "light": [360, 387], "wherea": [360, 363, 365, 366, 368, 375], "hand": [360, 387], "log_pr": [360, 364, 367], "array_arg": 360, "typic": 360, "whatsoev": [360, 364], "commonli": [360, 1080, 1101, 1104, 1109, 1112], "outsid": [360, 366, 370, 372, 375, 960, 961, 964, 1004, 1007], "denomin": [360, 387, 752, 778, 788, 811, 816, 817, 1042, 1043, 1046, 1157, 1158], "divis": [360, 515, 569, 572, 589, 592, 613, 614, 617, 705, 708, 752, 778, 788, 811, 816, 817, 826, 828, 831, 833, 835, 843, 845, 1159, 1160, 1161], "piec": [360, 362, 363, 370], "deal": [360, 387], "concurr": [360, 364], "weight": [360, 364, 374, 375, 826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 861, 870, 871, 873, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1155, 1156, 1159, 1161, 1162], "modif": 360, "decor": [360, 362, 364, 365, 366, 367], "group": [360, 364], "briefli": [360, 373], "cast": [360, 365, 428, 434, 437, 440, 960, 966, 969, 1080, 1097, 1100, 1105, 1122], "get_all_arrays_on_dev": 360, "nested_map": [360, 1024], "index_nest": [360, 1024], "implicit_backend": 361, "unless": [361, 366, 367, 387, 515, 684, 687, 752, 805], "__dict__": [361, 370, 372], "ivy_original_dict": [361, 370], "unmodifi": [361, 365], "moment": [361, 387, 826, 828, 831, 833, 835, 843, 845, 1159, 1160, 1161], "fallback": 361, "freedom": [361, 1080, 1101, 1104, 1109, 1112], "recommend": [361, 515, 670, 673, 674, 677, 705, 708, 1080, 1089, 1092], "achiev": [362, 373, 375], "wrapper": [362, 363, 364, 365, 367, 368, 372], "topic": [362, 372], "tf": [363, 365, 366, 367, 368, 370, 375, 387, 1122], "_data": [363, 372], "organiz": [363, 364], "inherit": [363, 364, 372], "bear": [363, 364, 365], "mind": [363, 364], "necessarili": [363, 364], "although": [363, 364], "underpin": [363, 364, 370], "programmat": [363, 364], "backup": [363, 364], "accident": [363, 364], "readabl": [363, 364, 368, 372, 373], "absent": [363, 364], "perk": [363, 364], "auto": [363, 364, 373], "throw": [363, 372], "imposs": 363, "coupl": [363, 364, 372, 374], "anywai": 363, "secondli": [363, 365], "easier": 363, "five": [364, 373], "decis": [364, 370, 372], "displai": [364, 373], "arbitrarili": [364, 373], "__repr__": 364, "control": [364, 365, 367, 372, 373, 386], "__getattr__": 364, "underli": [364, 515, 553, 556, 565, 568, 573, 576, 678, 681], "__setattr__": 364, "__contains__": 364, "__getstate__": 364, "__setstate__": 364, "unpickl": 364, "expand": [364, 752, 779, 960, 974, 977], "children": 364, "shallowest": 364, "deepest": 364, "67": [364, 515, 573, 576, 585], "22": [364, 515, 573, 576, 874, 884, 886, 910, 912, 1059, 1063, 1080, 1081, 1084, 1108], "25": [364, 515, 725, 728, 729, 732, 874, 884, 886, 893, 944, 950, 953, 1042, 1043, 1046, 1080, 1081, 1084, 1108], "retain_grad": [364, 826, 837], "dy": [364, 826, 837], "dx": [364, 826, 837], "technic": [364, 367, 368, 387], "autograd": [364, 387], "grad": [364, 373, 374, 375, 1122, 1159, 1163], "redund": 364, "num_head": [364, 861, 872, 1143, 1154], "mask": [364, 861, 872, 873], "to_q_fn": [364, 861, 872], "to_kv_fn": [364, 861, 872], "to_out_fn": [364, 367, 861, 872], "to_q_v": [364, 861, 872], "to_kv_v": [364, 861, 872], "to_out_v": [364, 861, 872], "measur": [364, 861, 872, 1143, 1154], "dot": [364, 861, 872, 873, 874, 929, 931, 935, 937, 1143, 1154], "product": [364, 515, 684, 687, 752, 770, 861, 872, 873, 874, 878, 880, 896, 899, 910, 912, 929, 931, 935, 937, 1080, 1081, 1084, 1097, 1100, 1108, 1143, 1154], "implicitli": 364, "intuit": [364, 373, 374], "debug": [364, 373], "chronolog": 364, "had": [364, 367], "sequenti": [364, 374], "flow": [364, 386], "implic": 364, "slightli": [364, 370, 374], "eager": [364, 387], "int8": [365, 428, 449], "int16": [365, 428, 437, 440, 449, 1080, 1097, 1100, 1105], "uint8": [365, 428, 437, 440, 449], "uint16": [365, 428, 450, 1080, 1097, 1100, 1105], "uint32": [365, 428, 450, 1080, 1097, 1100, 1105], "uint64": [365, 428, 450, 1080, 1097, 1100, 1105], "bfloat16": [365, 428, 449], "float16": [365, 428, 450], "all_dtyp": 365, "all_numeric_dtyp": 365, "all_int_dtyp": 365, "all_float_dtyp": 365, "fall": [365, 369, 1122, 1155, 1156, 1159, 1163], "valid": [365, 370, 428, 442, 861, 862, 863, 864, 865, 866, 867, 868, 960, 1004, 1007, 1113, 1114, 1117, 1118, 1121, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "invalid": [365, 874, 935, 937, 1113, 1114, 1117, 1118, 1121], "thirdli": 365, "native_float32": 365, "importantli": [365, 372, 375, 386], "varieti": [365, 366], "conveni": [365, 366, 368, 371, 373, 374], "arguabl": [365, 366], "compound": 365, "overflow": [365, 515, 528, 1080, 1105], "arr": [365, 366, 1042, 1043, 1046], "scalar": [365, 370, 375, 387, 409, 417, 752, 805, 822, 825, 874, 938, 940], "settabl": [365, 366], "jnp": [365, 366, 367, 368, 375, 1122], "jaxarrai": [365, 366, 367, 368], "mx": [365, 366, 367, 1122], "nd": [365, 366, 367, 370, 375, 1122], "deleg": 365, "fill_valu": [365, 409, 416, 417, 515, 597, 621, 622, 625], "as_n": [365, 428, 443, 444, 445, 446, 465, 484, 485, 506], "idx": [366, 372, 752, 758], "tpu": [366, 465, 487, 512], "aliv": [366, 465, 499, 503, 505, 752, 786, 804, 806], "amount": [366, 465, 511, 944, 945, 948, 950, 953, 955, 958], "memori": [366, 367, 385, 387, 465, 483, 504, 509, 511, 514, 861, 871, 1122], "dual": 366, "thrown": [366, 387, 752, 796], "rare": [366, 387], "program": 367, "strictli": 367, "ration": 367, "speak": 367, "subtli": 367, "ensure_in_backend": [367, 752, 796], "x_nativ": 367, "val_n": 367, "is_ivy_arrai": [367, 372, 752], "is_vari": [367, 826], "assign": [367, 372], "elif": 367, "irrespect": [367, 372, 428, 434], "inclus": [367, 409, 410, 1047, 1049, 1050], "omit": [367, 368, 1064, 1065, 1066, 1068], "unspecifi": [367, 515, 701, 704, 705, 708, 874, 887, 889, 960, 1004, 1007], "predominantli": [367, 386], "math": [367, 375, 1122], "presenc": 367, "altern": [367, 373], "_wrap_fn": 367, "maxim": [367, 370], "inner": [367, 372, 874, 887, 889, 896, 899, 1020, 1021, 1022, 1023], "third": [367, 387, 874, 923, 1064, 1065], "addition": [367, 368], "leverag": 367, "equival": [367, 373, 375, 409, 410, 515, 569, 572, 670, 673, 674, 677, 705, 708, 874, 895, 904, 906, 913, 915, 920, 922, 938, 940], "input_arrai": 367, "adress": 368, "revisit": [368, 375], "dedic": [368, 372, 374, 826, 859, 1132, 1133], "__div__": 368, "dicat": 368, "futher": 368, "absenc": 368, "pep": 368, "484": 368, "annot": 368, "brittl": 368, "intend": [368, 1080, 1105], "freeli": 368, "inde": [368, 387], "flexibl": 368, "original_typ": 368, "cumbersom": 368, "sound": 369, "higher": [369, 370, 375, 387, 826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853], "overview": [369, 386], "handler": [369, 371, 375, 1122], "fledg": [370, 371], "syntact": [370, 375], "clip_by_valu": [370, 375], "clamp": [370, 375], "behavior": [370, 387, 515, 701, 704, 705, 708, 1064, 1065, 1066, 1068], "fit": [370, 960, 986, 989], "construct": [370, 371, 374, 375, 960, 1012, 1015, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166], "num": [370, 409, 418, 419], "power_seq": 370, "okai": 370, "bound": 370, "resid": [370, 374], "edg": [370, 375, 960, 961, 964, 970, 973, 1016, 1019, 1122], "larger": [370, 375, 428, 448, 960, 961, 964, 994, 997, 1080, 1101, 1104, 1109, 1112], "ml_framework": [370, 375, 409, 410], "current_framework": [370, 375], "furthermor": 370, "concaten": [370, 373, 465, 494, 752, 779, 960, 966, 969, 1122], "framework_handl": 370, "face": 370, "verbos": [370, 1122, 1169], "cprint": [370, 1168], "framework_stack": 370, "_determine_framework_from_arg": 370, "valueerror": [370, 960, 1000, 1003], "get_framework": 370, "neither": [370, 515, 528, 684, 687], "illustr": [370, 386], "un": [370, 428, 452], "nn": [370, 375, 409, 420, 1122], "init_h": [370, 861, 871], "init_c": [370, 861, 871], "kernel": [370, 387, 861, 871], "recurrent_kernel": [370, 861, 871], "bia": [370, 374, 861, 870, 871, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1153], "recurrent_bia": [370, 861, 871], "x_shape": 370, "batch_shap": [370, 372, 375, 752, 805, 861, 871, 872, 873, 874, 941, 943, 1047, 1048, 1143, 1152], "timestep": [370, 861, 871, 1143, 1152], "input_channel": [370, 374, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1152, 1153], "x_flat": 370, "wi": 370, "wi_x": 370, "wii_x": 370, "wif_x": 370, "wig_x": 370, "wio_x": 370, "recurr": [370, 861, 871], "wh": 370, "lstm": [370, 861, 871, 1143], "ht": 370, "ct": 370, "hts_list": 370, "unrol": [370, 373, 861, 871], "wii_xt": 370, "wif_xt": 370, "wig_xt": 370, "wio_xt": 370, "zip": 370, "htm1": 370, "ctm1": 370, "wh_htm1": 370, "whi_htm1": 370, "whf_htm1": 370, "whg_htm1": 370, "who_htm1": 370, "ft": 370, "gt": 370, "ot": 370, "offici": 370, "reliabl": 370, "sacrific": 370, "hear": 370, "virtu": 370, "pure_ivi": 370, "reduce_mean": [370, 373, 374, 375, 1122], "reduce_sum": [370, 1122], "reduce_var": 370, "compile_graph": [370, 375], "pure_torch": 370, "cat": [370, 375], "backbon": [370, 373], "_layer": 370, "super": [370, 373, 374, 375], "clean": [370, 371, 373], "random_unifrom": 370, "unclean": 370, "wx": 370, "temp": 370, "torchscript": 370, "fn": [370, 372, 388, 389, 390, 391, 392, 393, 394, 395, 396, 428, 449, 450, 465, 474, 475, 752, 758, 823, 1024, 1025, 1030, 1031, 1032, 1034, 1035, 1036, 1125, 1127], "example_input": [370, 406, 407], "static_argnum": [370, 406, 407], "static_argnam": [370, 406, 407], "jit": [370, 387], "frontend": 371, "primit": [371, 387], "describ": [371, 375, 1080, 1081, 1084, 1097, 1100, 1101, 1104, 1105, 1108], "hierarch": [371, 373, 374], "straight": [372, 1122], "arraywithlinalg": 372, "arraywithlog": 372, "arraywithmath": 372, "arraywithmeta": 372, "arraywithreduct": 372, "is_native_arrai": [372, 752], "_shape": 372, "_size": 372, "functool": 372, "mul": 372, "len": [372, 375, 409, 420], "_dtype": 372, "_devic": 372, "_dev_str": 372, "_pre_repr": 372, "_post_repr": 372, "ndim": [372, 874, 916, 918, 923], "mt": 372, "answer": [372, 387], "consol": 372, "typeerror": 372, "immut": 372, "behav": 372, "claim": 372, "truli": 372, "_native_wrapp": 372, "attributeerror": 372, "genuin": 372, "some_method": 372, "similarli": [372, 409, 420], "rewritten": 372, "__pow__": 372, "strang": 372, "power": [372, 373, 374, 515, 569, 572, 602, 701, 704, 752, 787, 810, 817, 874, 903, 1134], "enforc": 372, "notic": 372, "appear": [372, 960, 974, 977], "invers": [372, 386, 515, 520, 523, 524, 527, 533, 536, 537, 540, 541, 544, 545, 548, 549, 552, 584, 588, 742, 747, 874, 893, 895, 913, 915], "_wrap_method": 372, "func_wrapp": [372, 388, 389, 390, 391, 392, 393, 394, 395, 396], "__name__": 372, "non_wrapped_method": 372, "_method_wrap": 372, "native_arg": 372, "native_kwarg": 372, "inner_fn": 372, "whist": 372, "unwrap": 372, "transit": 372, "needlessli": 372, "randn": 372, "_unwrap_method": 372, "method_wrap": 372, "compartment": 372, "public": [372, 752, 768], "newshap": 372, "new_shap": 372, "tidi": 372, "shorter": 372, "crystal": 372, "41": [372, 515, 573, 576, 725, 728, 874, 875, 877, 1080, 1105], "enough": [372, 373, 374], "ton": 373, "ado": [373, 374], "incred": [373, 387], "hash": 373, "soup": 373, "walk": [373, 374], "dct": 373, "cnt": 373, "combo": [373, 1122, 1128], "hold": [373, 752, 808, 809], "1000": [373, 515, 725, 728], "uda": 373, "3333": 373, "6667": 373, "178": 373, "new_weight": 373, "0600": 373, "3100": 373, "2400": 373, "6900": 373, "delimit": 373, "autocomplet": 373, "midwai": 373, "agent": 373, "total_spe": 373, "total_height": 373, "total_width": 373, "ag": 373, "tot": 373, "total_": 373, "total_h": 373, "batch_siz": [373, 861, 862, 863, 864, 865, 866, 867, 868, 1047, 1048], "dir": 373, "adam": [373, 374, 375, 826, 828, 831, 833, 835, 843, 845, 1122, 1159, 1161], "cnt0": 373, "cnt1": 373, "diff_0": 373, "diff_1": 373, "config0": 373, "config1": 373, "Not": [373, 374, 387, 408], "decod": 373, "l0": 373, "l1": [373, 874, 938, 940], "depth": [373, 374, 375, 386, 465, 489, 493, 497, 752, 790, 805, 1024, 1036, 1155, 1156], "clearer": 373, "truncat": 373, "decoder__l0": 373, "decoder__l1": 373, "encoder__l0": 373, "encoder__l1": 373, "height": 373, "l0__b": 373, "l0__w": 373, "l1__b": 373, "l1__w": 373, "printabl": 373, "obviou": 373, "foresight": 373, "untidili": 373, "update_ag": 373, "normalize_img": 373, "img": 373, "img_max": 373, "reduce_max": [373, 1122], "img_min": 373, "reduce_min": [373, 1122], "img_rang": 373, "agent_posit": 373, "agent_veloc": 373, "agent_cam_front_rgb": 373, "agent_cam_front_depth": 373, "agent_cam_rear_rgb": 373, "agent_cam_rear_depth": 373, "agent_cam_lidar": 373, "normal": [373, 960, 1004, 1007, 1042, 1043, 1046, 1047, 1052, 1157, 1158], "cleaner": 373, "camera": 373, "front_rgb": 373, "front_depth": 373, "rear_rgb": 373, "rear_depth": 373, "lidar": 373, "rgb": 373, "rear": 373, "veloc": 373, "cam": 373, "cam_max": 373, "cam_min": 373, "cam_rang": 373, "Of": 373, "ideal": 373, "perman": 373, "afterward": 373, "thread": 373, "incorpor": 373, "pretti": 373, "straightforward": 373, "dataload": [373, 385, 1122], "_cnt": 373, "img_": 373, "_dataset_s": 373, "_batch_siz": 373, "_count": [373, 374], "__next__": 373, "filenam": 373, "img_fnam": 373, "fname": 373, "loaded_img": 373, "cv2": 373, "imread": 373, "loader": [373, 387], "batch_slic": 373, "model": [373, 374, 1122], "mymodel": [373, 1122], "linear0": [373, 374, 1122], "linear1": [373, 374, 1122], "x_in": [373, 374, 375, 1122], "001": [373, 374, 826, 828, 831, 1042, 1043, 1046], "loss_fn": [373, 374, 375, 1122], "0145": 373, "grad_fn": 373, "addbackward0": 373, "_create_vari": 374, "output_channel": [374, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1152, 1153], "with_bia": [374, 1143, 1153], "_input_channel": 374, "_output_channel": 374, "_w_shape": 374, "_b_shape": 374, "_with_bia": 374, "8979": 374, "3198": 374, "0196": 374, "3126": 374, "3717": 374, "9687": 374, "6958": 374, "5122": 374, "3902": 374, "8800": 374, "5613": 374, "1982": 374, "nightmar": 374, "overcom": 374, "fc": 374, "9563": 374, "impact": 374, "v0": 374, "v1": 374, "6440": 374, "key0": 374, "1823": 374, "8075": 374, "linear3": 374, "v2": 374, "2346": 374, "counter": 374, "hidden": [374, 861, 871, 1143, 1152], "fed": [374, 465, 509], "1300": 374, "decoupl": 374, "scheme": 374, "weight_initi": [374, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153], "glorotuniform": [374, 1134, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153], "bias_initi": [374, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1153], "_w_init": 374, "_b_init": 374, "create_vari": [374, 1134], "var_shap": [374, 1134], "fan_out": [374, 1134], "fan_in": [374, 1134], "fan_mod": [374, 1134], "fan_sum": 374, "slight": 374, "misnom": 374, "saw": 374, "vanilla": [374, 1020, 1022], "descent": [374, 826, 838, 840, 1159, 1164], "lar": [374, 826, 843, 845, 847, 849, 1159], "lamb": [374, 826, 843, 845, 1159], "compile_on_next_step": [374, 1155, 1156, 1159, 1160, 1161, 1162, 1163, 1164], "_beta1": 374, "_beta2": 374, "_epsilon": 374, "_mw": 374, "_vw": 374, "_first_pass": 374, "_should_compil": 374, "_step": [374, 1159, 1163], "new_v": 374, "_lr": 374, "isinst": [374, 375, 752, 820], "_inplac": 374, "_stop_gradi": 374, "set_stat": [374, 1159, 1160, 1161, 1162, 1163, 1164], "pre": [375, 387, 465], "captur": 375, "sparse_funct": 375, "num_class": [375, 1047, 1048], "num_dim": 375, "new_axi": 375, "_linear": 375, "to_backend": 375, "jax_graph": 375, "learnabl": [375, 1042, 1043, 1046, 1157, 1158], "to_ivy_modul": [375, 1132], "thinli": 375, "whilst": 375, "to_haiku_modul": 375, "hk": 375, "loss_fn_t": 375, "transform": [375, 386, 861, 869, 870], "without_apply_rng": 375, "rng": 375, "prngkei": 375, "init": 375, "update_rul": 375, "01": [375, 515, 709, 712], "tree_multimap": 375, "mechan": [385, 387, 1122], "vision": [385, 1122], "robot": [385, 1122], "focus": 386, "field": [386, 874, 887, 889, 916, 918, 923, 1064, 1065, 1066], "perfect": 386, "3d": [386, 1143, 1148, 1149], "differenti": 386, "demo": [386, 1122], "orient": 386, "pose": 386, "euler": [386, 408], "quaternion": 386, "rotat": 386, "matric": [386, 409, 420, 424, 425, 861, 870, 874, 875, 877, 881, 884, 886, 887, 889, 890, 892, 893, 895, 903, 904, 906, 907, 909, 913, 915, 916, 918, 920, 922, 923, 925, 926, 928, 932, 934], "angl": [386, 515, 545, 548, 585, 721, 724, 743], "ivy_mech": 386, "target_facing_rotation_matrix": 386, "polar_to_cartesian_coord": 386, "ordin": [386, 874, 920, 922], "warp": 386, "optic": 386, "voxel": 386, "ivy_vis": 386, "coords_to_voxel_grid": 386, "render_pixel_coord": 386, "neural": [386, 861, 1122, 1129, 1143], "radianc": 386, "nerf": 386, "trajectori": 386, "motion": 386, "plan": [386, 1122], "mobil": 386, "ivy_robot": 386, "sample_spline_path": 386, "rigidmobil": 386, "sample_bodi": 386, "drone": 386, "sample_link": 386, "openai": 386, "swimmer": 386, "cumul": [386, 752, 770, 771], "reward": 386, "supervis": 386, "reinforc": 386, "door": [386, 387], "intersect": 386, "cartpol": 386, "mountain_car": 386, "pendulum": 386, "reacher": 386, "polici": 386, "condit": [386, 406, 407, 1024, 1034, 1035, 1059, 1063], "learnt": 386, "ture": 386, "ntm": 386, "egospher": 386, "spatial": 386, "esm": 386, "ivy_memori": 386, "egocentr": 386, "room": 386, "inspir": 386, "doubt": 387, "grate": 387, "put": 387, "probe": 387, "undergo": 387, "remark": 387, "surpris": 387, "backward": [387, 515, 705, 708, 874, 935, 937, 1113, 1114, 1117, 1118, 1121], "lock": 387, "contunu": 387, "minor": 387, "xla": 387, "buffer": 387, "kind": [387, 428, 448, 451, 515, 701, 704, 1080, 1097, 1100, 1105], "gold": 387, "dex": 387, "phase": 387, "lax": 387, "scan": 387, "tricki": 387, "predictor": 387, "tight": 387, "driver": 387, "schedul": 387, "algorithm": [387, 861, 862, 863, 864, 865, 866, 867, 868, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "dispatch": 387, "Will": 387, "ast": 387, "dynamic": 387, "cond": 387, "jacobian": 387, "checkpoint": 387, "autodiff": 387, "shine": 387, "merci": 387, "superset": 387, "cluster": 387, "compet": 387, "paradigm": 387, "parallelis": [387, 465, 474, 475], "spmd": 387, "mixtur": [387, 826, 828, 831], "expert": 387, "sophist": 387, "depart": 387, "routin": 387, "hundr": 387, "thousand": 387, "deepli": [387, 1024, 1026], "broadli": 387, "heavili": 387, "supplementari": 387, "Is": 387, "reusabl": 387, "fanci": 387, "fusion": 387, "lose": 387, "vmap": 387, "pmap": 387, "overhead": 387, "ineffici": 387, "eventu": 387, "supplement": 387, "backdoor": 387, "callback": 387, "record": 387, "metric": 387, "somewhat": 387, "outsourc": 387, "inputs_to_ivy_arrai": 388, "gaussian": [398, 399], "leaki": [398, 399, 400], "alpha": [398, 400], "rectifi": [398, 400, 401], "slope": [398, 400], "39": [398, 400, 515, 602, 826, 828, 831, 874, 910, 912, 1080, 1081, 1084, 1108], "85": [398, 400, 515, 573, 576], "48": [398, 400, 515, 725, 728, 826, 828, 831, 874, 910, 912, 1080, 1081, 1084, 1108], "88": [398, 400, 515, 573, 576, 874, 910, 912, 1080, 1081, 1084, 1108], "269": [398, 402], "731": [398, 402], "881": [398, 402], "214": [398, 402], "978": [398, 402], "891": [398, 402], "422": [398, 403], "155": [398, 403], "0768": [398, 403], "231": [398, 403], "693": [398, 403, 944, 955, 958], "49": [398, 403, 515, 725, 728, 1080, 1081, 1084, 1108], "147": [398, 403], "363": [398, 403], "3461": [398, 404], "6491": [398, 404], "535": [398, 404], "hyperbol": [398, 405, 515, 523, 524, 527, 537, 540, 544, 549, 552, 584, 585, 588, 721, 724, 742, 743, 747], "55": [398, 405, 861, 867, 874, 910, 912, 1080, 1081, 1084, 1108], "501": [398, 405], "faster": [406, 407], "invoc": [406, 407], "718281828459045": 408, "newaxi": 408, "alia": 408, "pi": 408, "141592653589793": 408, "mathemat": [408, 515, 528, 545, 548, 606, 609, 684, 687, 874, 938, 940], "half": [409, 410, 1047, 1049, 1050, 1053, 1055], "chosen": [409, 410, 515, 545, 548, 1059, 1063], "distanc": [409, 410], "adjac": [409, 410], "interpret": [409, 411, 421], "uniniti": [409, 412, 413], "n_row": [409, 414], "n_col": [409, 414], "elsewher": [409, 414, 1059, 1063], "row": [409, 414, 874, 920, 922, 923, 1047, 1048, 1059, 1062], "column": [409, 414, 874, 887, 889, 916, 918, 920, 922, 923], "__dlpack__": [409, 415, 465, 510], "interchang": [409, 415, 960, 1008, 1011], "endpoint": [409, 418], "xy": [409, 420], "coordin": [409, 420, 515, 545, 548], "cartesian": [409, 420], "ij": [409, 420, 1080, 1081, 1084, 1108], "rank": [409, 420, 752, 824, 874, 878, 880, 904, 906, 916, 918, 920, 922, 932, 934, 935, 937, 938, 940, 960, 970, 973, 974, 977, 1004, 1007, 1016, 1019, 1059, 1062, 1113, 1114, 1117, 1118, 1121], "ni": [409, 420], "xi": [409, 420], "n1": [409, 420], "n2": [409, 420], "n3": [409, 420], "accordingli": [409, 420, 515, 606, 609, 874, 938, 940, 1059, 1061, 1064, 1065, 1066, 1068, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "xv": [409, 420], "yv": [409, 420], "triangular": [409, 424, 425, 874, 875, 877, 916, 918], "innermost": [409, 424, 425, 874, 875, 877, 881, 884, 886, 887, 889, 890, 892, 893, 895, 904, 906, 907, 909, 913, 915, 916, 918, 920, 922, 923, 925, 926, 928, 932, 934], "mxn": [409, 424, 425, 874, 884, 886, 895, 904, 906, 907, 909, 913, 915, 916, 918, 925, 926, 928, 932, 934], "defaultdtyp": [428, 429], "defaultfloatdtyp": [428, 430], "float_dtyp": [428, 444, 458], "defaultintdtyp": [428, 431], "dtype_in": [428, 432, 433, 447, 452, 453, 454, 464], "incompat": [428, 436], "occur": [428, 437, 440, 1059, 1060, 1061, 1064, 1065, 1066, 1068], "data_type_funct": [428, 437, 440], "closest": [428, 442, 515, 577, 580, 592, 610, 613, 614, 617, 709, 712, 748, 751], "floatdtyp": [428, 444], "int_dtyp": [428, 445, 459], "intdtyp": [428, 445], "followng": [428, 448], "occupi": [428, 448, 451, 752, 808, 809], "ep": [428, 448, 874, 895, 904, 906, 913, 915], "smallest_norm": [428, 448], "precis": [428, 448, 515, 684, 687, 725, 728], "encapsul": [428, 451], "type1": [428, 455], "type2": [428, 455], "arrays_and_dtyp": [428, 456], "ret1": [428, 460], "ret2": [428, 460], "noinspect": [429, 430, 431, 466, 827], "pyshadowingnam": [429, 430, 431, 466, 827], "defaultdevic": [465, 466], "__enter__": 465, "_dev": 465, "initialis": 465, "devcloneditem": [465, 487], "multidevitem": [465, 467, 470], "devclonedit": 465, "multidevit": [465, 468, 471, 474, 475, 479], "devclonednest": 465, "multidevnest": [465, 469, 472], "devdistitem": 465, "devdistit": 465, "devdistnest": 465, "devmanag": [465, 473], "dev_mapp": 465, "da_dim_s": 465, "safety_factor": 465, "min_dev_dim_s": 465, "max_dev_dim_step_ratio": 465, "min_unit_dev_tune_step": 465, "min_sf_tune_step": 465, "starting_split_factor": 465, "max_split_factor_step_s": 465, "tune_dev_alloc": 465, "tune_dev_split": 465, "mapper": [465, 474, 475], "receivess": 465, "ratio": [465, 826, 843, 845, 1159, 1161], "safe": [465, 474], "oom": 465, "tune": 465, "da_tune_step": 465, "ds_tune_step": 465, "to_clon": 465, "to_distribut": 465, "multidevic": [465, 474], "parallel": [465, 474, 475], "mutlidevic": [465, 474], "repeated_config_check": 465, "tune_step": 465, "devmapp": [465, 475], "ret_fn": [465, 474, 475], "queue_class": [465, 474, 475], "worker_class": [465, 474, 475], "worker": [465, 474, 475], "used_dev": [465, 474], "sf": [465, 474], "devmappermultiproc": 465, "multidev": [465, 476, 477, 478, 497], "profil": 465, "save_dir": [465, 480], "deviceic": [465, 486], "spread": [465, 497], "139740789224448": [465, 499], "physic": [465, 501], "x3": [465, 503], "x4": [465, 503], "process_specif": [465, 504, 514], "percentag": [465, 504], "ram": [465, 504, 511, 514], "alon": [465, 504, 514], "attr_onli": [465, 505], "chunk": [465, 507, 508, 509], "max_chunk_s": [465, 509], "chunk_siz": [465, 509], "input_ax": [465, 509], "output_ax": [465, 509], "feed": [465, 509], "fist": [465, 509], "stream": [465, 510], "caveat": [465, 510], "portabl": [465, 510, 1122], "gb": [465, 511, 514], "reset": [465, 513], "magnitud": [515, 516, 519, 528, 684, 687, 874, 923, 925, 926, 928], "princip": [515, 520, 533, 536, 541], "cosin": [515, 520, 523, 524, 527, 581, 584, 585, 588], "x1_i": [515, 528, 531, 545, 548, 553, 556, 561, 564, 565, 568, 569, 572, 573, 576, 589, 592, 594, 597, 605, 613, 614, 617, 618, 621, 622, 625, 638, 641, 642, 645, 662, 665, 666, 669, 674, 677, 678, 681, 684, 687, 693, 696, 701, 704, 705, 708, 733, 737], "x2_i": [515, 528, 531, 545, 548, 553, 556, 561, 564, 565, 568, 569, 572, 573, 576, 589, 592, 594, 597, 605, 613, 614, 617, 618, 621, 622, 625, 638, 641, 642, 645, 662, 665, 666, 669, 674, 677, 678, 681, 684, 687, 693, 696, 701, 704, 705, 708, 733, 737], "finit": [515, 528, 545, 548, 626, 629, 684, 687, 701, 704, 705, 708], "nor": [515, 528, 684, 687], "nearest": [515, 528, 684, 687, 709, 712], "2019": [515, 528, 606, 609, 684, 687], "commut": [515, 528], "sine": [515, 533, 536, 537, 540, 717, 720, 721, 724], "57": [515, 533, 536, 573, 576, 585], "524": [515, 533, 536], "644": [515, 533, 536], "201": [515, 533, 536, 709, 712], "305": [515, 533, 536], "412": [515, 533, 536], "quotient": [515, 545, 548], "notat": [515, 545, 548, 1080, 1081, 1084, 1108], "denot": [515, 545, 548], "pair": [515, 545, 548, 861, 873, 874, 878, 880], "quadrant": [515, 545, 548], "3\u03c0": [515, 545, 548], "549": [515, 544, 549, 552, 742, 747], "bitwis": [515, 553, 556, 565, 568, 573, 576, 678, 681], "AND": [515, 553, 556, 666, 669, 1113, 1114, 1117], "binari": [515, 553, 556, 565, 568, 573, 576, 678, 681, 944, 945, 948], "invert": [515, 557, 560], "arithmet": [515, 569, 572, 1080, 1089, 1092], "propag": [515, 569, 572, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1101, 1104, 1105, 1109, 1112], "thu": [515, 569, 572, 701, 704, 705, 708, 874, 887, 889], "lh": [515, 569, 572], "rh": [515, 569, 572], "xor": [515, 573, 576, 678, 681], "78": [515, 573, 576, 874, 910, 912, 1080, 1081, 1084, 1108], "91": [515, 573, 576, 874, 910, 912, 1080, 1081, 1084, 1108], "23": [515, 573, 576, 861, 867, 874, 884, 886, 1059, 1063], "66": [515, 573, 576, 874, 910, 912, 1080, 1081, 1084, 1108], "77": [515, 573, 576, 874, 910, 912, 1080, 1081, 1084, 1108], "79": [515, 573, 576], "89": [515, 573, 576, 874, 929, 931, 1080, 1105], "98": [515, 573, 576, 874, 910, 912, 1059, 1063, 1080, 1081, 1084, 1108], "26": [515, 573, 576, 826, 828, 831, 861, 868, 874, 884, 886, 910, 912, 929, 931, 1080, 1081, 1084, 1108], "21": [515, 573, 576, 752, 770, 874, 884, 886, 910, 912, 944, 955, 958, 1080, 1081, 1084, 1108], "34": [515, 573, 576, 725, 728], "24": [515, 573, 576, 725, 728, 752, 770, 826, 828, 831, 874, 884, 886, 910, 912, 1080, 1081, 1084, 1108], "51": [515, 573, 576], "27": [515, 573, 576, 585, 725, 728, 861, 873, 874, 910, 912, 1080, 1081, 1084, 1108], "74": [515, 573, 576], "59": [515, 573, 576], "416": [515, 581], "122": [515, 585], "368": [515, 585], "670": [515, 585], "202": [515, 585, 709, 712], "548": [515, 585], "1490": [515, 585], "dividend": [515, 589, 705, 708], "divisor": [515, 589, 705, 708, 826, 828, 831, 833, 835, 843, 845, 1080, 1101, 1104, 1109, 1112, 1159, 1160, 1161], "gauss": [515, 598, 601], "exponenti": [515, 531, 598, 601, 602, 605, 662, 665, 701, 704], "logarithm": [515, 531, 602, 605, 646, 649, 650, 653, 654, 657, 658, 661, 662, 665, 874, 883, 919], "72": [515, 602, 826, 828, 831, 874, 910, 912, 1080, 1081, 1084, 1108], "accur": [515, 606, 609], "fdlibm": [515, 606, 609], "compliant": [515, 606, 609, 670, 673, 674, 677, 1080, 1085, 1088, 1089, 1092, 1093, 1096], "greatest": [515, 592, 610, 613, 614, 617], "out_i": [515, 626, 629, 630, 633, 634, 637], "threshold": [515, 682, 683], "exce": [515, 683], "y_i": [515, 689, 692], "expon": [515, 701, 704, 752, 817], "versu": [515, 701, 704], "odd": [515, 701, 704], "modulu": [515, 705, 708], "primarili": [515, 705, 708], "5654": [515, 709, 712], "034": [515, 709, 712], "433": [515, 709, 712], "343": [515, 709, 712], "44": [515, 709, 712, 725, 728, 729, 732, 874, 910, 912, 1059, 1063, 1080, 1081, 1084, 1108], "30": [515, 709, 712, 874, 910, 912, 1080, 1081, 1084, 1108, 1134, 1140], "81": [515, 709, 712, 729, 732, 1080, 1081, 1084, 1108], "527": [515, 709, 712], "301": [515, 709, 712], "indistinguish": [515, 725, 728], "infinit": [515, 725, 728], "83": [515, 725, 728], "32455532": [515, 725, 728], "89897949": [515, 725, 728], "50": [515, 725, 728, 874, 910, 912, 1059, 1062, 1080, 1081, 1084, 1108], "31": [515, 725, 728], "169": [515, 725, 728], "47": [515, 725, 728], "73": [515, 725, 728, 874, 875, 877, 1042, 1043, 1046], "93": [515, 725, 728], "35": [515, 725, 728, 861, 873, 874, 878, 880, 1059, 1063, 1080, 1081, 1084, 1108], "09": [515, 729, 732, 861, 873], "61": [515, 729, 732, 944, 945, 948], "546": [515, 738], "842": [515, 738], "916": [515, 738, 944, 945, 948], "996": [515, 738], "328": [515, 738], "real": [515, 743], "462": [515, 743], "604": [515, 743], "984": [515, 743], "997": [515, 743, 1042, 1043, 1046], "decim": [515, 748, 751], "inspect": [752, 758, 1126, 1127], "downscal": [752, 764, 765, 767], "60": [752, 770, 874, 910, 912, 1080, 1081, 1084, 1108], "default_v": [752, 773], "catch_except": [752, 773], "rev": [752, 773], "with_cal": [752, 773], "arrang": [752, 774], "123": [752, 777], "mod": [752, 778], "max_freq": [752, 779], "num_band": [752, 779], "pad": [752, 779, 861, 862, 863, 864, 865, 866, 867, 868, 960, 970, 973, 1016, 1019, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "fourier": [752, 779], "band": [752, 779], "linearli": [752, 779, 874, 920, 922], "oppos": [752, 779], "geometr": [752, 779], "seen_set": [752, 790], "local_set": [752, 790], "decrement": [752, 794], "is_arrai": 752, "allow_dupl": [752, 802], "forkserv": [752, 803], "spawn": [752, 803], "hot": [752, 805], "scatter": [752, 805, 808, 809], "overrid": [752, 805], "tmp_dr": [752, 813], "temporari": [752, 813], "min_denomin": [752, 816], "stabil": [752, 816, 817, 1069, 1070, 1073, 1075, 1078], "_min_denomin": [752, 816], "min_bas": [752, 817], "_min_bas": [752, 817, 1042, 1043, 1046, 1157, 1158], "100000023841858": [752, 820], "200000047683716": [752, 820], "299999952316284": [752, 820], "400000095367432": [752, 820], "599999904632568": [752, 820], "101": [752, 821], "unpack": [752, 824], "gradienttrack": [826, 827], "delta": [826, 828, 831], "cost": [826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 1020, 1021, 1022, 1023], "ws": [826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853], "en": [826, 828, 831, 833, 835], "wikipedia": [826, 828, 831, 833, 835], "wiki": [826, 828, 831, 833, 835], "stochastic_gradient_desc": [826, 828, 831, 833, 835], "dc": [826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853], "dw": [826, 828, 831, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853], "averag": [826, 828, 831, 833, 835, 843, 845, 1020, 1021, 1022], "forget": [826, 828, 831, 833, 835, 843, 845, 1159, 1160, 1161], "004": [826, 828, 831], "009": [826, 828, 831], "86": [826, 828, 831], "28": [826, 828, 831, 861, 864, 867, 868, 874, 910, 912, 1080, 1081, 1084, 1108], "45": [826, 828, 831, 874, 910, 912, 960, 999, 1042, 1043, 1046, 1080, 1081, 1084, 1108], "0125": [826, 828, 831], "601": [826, 828, 831], "581": [826, 828, 831], "025": [826, 828, 831], "992": [826, 828, 831], "209": [826, 828, 831, 1064, 1065], "271": [826, 828, 831], "0717": [826, 828, 831], "142": [826, 828, 831], "182": [826, 828, 831], "624": [826, 828, 831, 1047, 1053, 1055], "06": [826, 828, 831], "02": [826, 828, 831], "744": [826, 828, 831], "626": [826, 828, 831], "65": [826, 828, 831, 874, 910, 912, 1080, 1081, 1084, 1108], "024": [826, 828, 831], "096": [826, 828, 831], "216": [826, 828, 831], "384": [826, 828, 831], "rate": [826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853, 1020, 1021, 1022, 1023, 1143, 1154, 1159, 1160, 1161, 1162, 1163, 1164], "ws_new": [826, 833, 835, 838, 840, 843, 845, 847, 849, 851, 853], "retain": [826, 837], "trust": [826, 843, 845, 1159, 1161], "decai": [826, 843, 845, 847, 849, 1159, 1161, 1162], "layerwis": [826, 847, 849, 1159, 1162], "stride": [861, 862, 863, 864, 865, 866, 867, 868, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "data_format": [861, 862, 863, 864, 865, 866, 867, 868, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "nwc": [861, 862, 863, 1143, 1144, 1145], "dilat": [861, 862, 863, 864, 865, 866, 867, 868, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "convolut": [861, 862, 863, 864, 865, 866, 867, 868, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "d_in": [861, 862, 863, 864, 865, 866, 867], "fw": [861, 862, 863, 864, 865, 866, 867, 868], "d_out": [861, 862, 863, 864, 865, 866, 867], "slide": [861, 862, 863, 864, 865, 866, 867, 868, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150], "ncw": [861, 862, 863, 1143, 1144, 1145], "wio": [861, 862], "output_shap": [861, 863, 865, 867, 1143, 1145, 1147, 1149], "nhwc": [861, 864, 865, 868, 1143, 1146, 1147, 1150], "fh": [861, 864, 865, 866, 867, 868], "nchw": [861, 864, 865, 868, 1143, 1146, 1147, 1150], "hwio": [861, 864], "unequ": [861, 864], "unsqueez": [861, 864, 868], "ndhwc": [861, 866, 867, 1143, 1148, 1149], "volum": [861, 866], "fd": [861, 866, 867], "ncdhw": [861, 866, 867, 1143, 1148, 1149], "dhwio": [861, 866], "256": [861, 867], "258": [861, 867], "128": [861, 867, 874, 910, 912], "depthwis": [861, 868, 1143, 1150], "333": [861, 868], "inp": [861, 868], "prob": [861, 869, 1047, 1048, 1143, 1151], "randomli": [861, 869, 1143, 1151], "bernoulli": [861, 869], "out_featur": [861, 869, 870], "incom": [861, 870], "outer_batch_shap": [861, 870], "inner_batch_shap": [861, 870], "in_featur": [861, 870], "cell": [861, 871, 1143, 1152], "num_queri": [861, 872, 873], "x_feat_dim": [861, 872], "num_kei": [861, 872, 873], "cont_feat_dim": [861, 872], "numhead": [861, 872], "feat_dim": [861, 872, 873], "out_feat_dim": [861, 872], "score": [861, 873], "04": [861, 873], "03": [861, 873, 1042, 1043, 1046], "08": [861, 873], "decomposit": [874, 875, 877, 916, 918, 923], "symmetr": [874, 875, 877, 887, 889, 890, 892, 941, 943], "u": [874, 875, 877, 923], "577": [874, 875, 877], "707": [874, 875, 877], "vif": [874, 878, 880], "92": [874, 881], "293": [874, 881], "46997": [874, 881], "eigendecomposit": [874, 887, 889], "qlq\u1d40": [874, 887, 889], "orthogon": [874, 887, 889], "eig": [874, 887, 889], "eigenvalu": [874, 887, 889, 890, 892], "eigenvector": [874, 887, 889], "75": [874, 893, 910, 912], "prepend": [874, 896, 899], "singular": [874, 895, 904, 906, 913, 915, 923, 925, 926, 928], "toler": [874, 895, 904, 906, 913, 915], "largest_singular_valu": [874, 895, 904, 906, 913, 915], "array_lik": [874, 910, 912], "33": [874, 910, 912, 1042, 1043, 1046, 1080, 1081, 1084, 1108], "36": [874, 910, 912, 1080, 1081, 1084, 1108], "84": [874, 910, 912, 1080, 1081, 1084, 1108], "105": [874, 910, 912, 944, 945, 948], "112": [874, 910, 912, 1080, 1081, 1084, 1108], "104": [874, 910, 912, 1080, 1081, 1084, 1108], "120": [874, 910, 912], "moor": [874, 895, 913, 915], "penros": [874, 895, 913, 915], "pseudo": [874, 895, 913, 915], "orthonorm": [874, 916, 918, 923], "2d": [874, 883, 919, 1143, 1146, 1147, 1150], "logdet": [874, 883, 919], "coeffici": [874, 920, 922], "usvh": [874, 923], "vh": [874, 923], "hermitian": [874, 923], "et": [874, 923], "cetera": [874, 923], "adjoint": [874, 923], "reconstruct": [874, 923, 1064, 1065, 1067], "reconstructed_x": [874, 923], "contract": [874, 929, 931, 1080, 1081, 1084, 1108], "doubl": [874, 929, 931], "singleton": [874, 938, 940, 960, 1000, 1003, 1059, 1061, 1080, 1085, 1088, 1089, 1092, 1093, 1096, 1097, 1100, 1101, 1104, 1105, 1109, 1112, 1113, 1114, 1117, 1118, 1121], "liter": [874, 938, 940], "manhattan": [874, 938, 940], "l2": [874, 938, 940], "euclidean": [874, 938, 940], "mathbf": [874, 941, 943], "mathbb": [874, 941, 943], "skew": [874, 941, 943], "entropi": [944, 945, 948, 950, 953, 955, 958], "predict": [944, 945, 948, 950, 953, 955, 958], "smooth": [944, 945, 948, 950, 953, 955, 958], "223": [944, 945, 948], "357": [944, 945, 948, 955, 958], "511": [944, 945, 948], "discret": [944, 950, 953], "3862944": [944, 950, 953], "35667497": [944, 950, 953], "spars": [944, 955, 958], "logit": [944, 955, 958], "793291": [944, 955, 958], "512926": [944, 955, 958], "before_1": [960, 970, 973, 1016, 1019], "after_1": [960, 970, 973, 1016, 1019], "before_n": [960, 970, 973, 1016, 1019], "after_n": [960, 970, 973, 1016, 1019], "insert": [960, 974, 977, 1024, 1029, 1059, 1060], "manipulation_funct": [960, 974, 977], "reorder": [960, 978, 981], "permut": [960, 982, 985, 1008, 1011], "repetit": [960, 986, 989, 1012, 1015], "restor": [960, 994, 997], "classivi": [960, 999], "famili": [960, 1004, 1007], "intxx": [960, 1004, 1007], "floatxx": [960, 1004, 1007], "fomaml_step": 1020, "inner_cost_fn": [1020, 1021, 1022], "outer_cost_fn": [1020, 1021, 1022], "inner_grad_step": [1020, 1021, 1022, 1023], "inner_learning_r": [1020, 1021, 1022, 1023], "inner_optimization_step": [1020, 1021, 1022, 1023], "inner_batch_fn": [1020, 1021, 1022], "outer_batch_fn": [1020, 1021, 1022], "average_across_step": [1020, 1021, 1022], "inner_v": [1020, 1021, 1022], "keep_inner_v": [1020, 1021, 1022], "outer_v": [1020, 1021, 1022], "keep_outer_v": [1020, 1021, 1022], "return_inner_v": [1020, 1021, 1022, 1023], "num_task": [1020, 1021, 1022, 1023], "maml": [1020, 1021, 1022], "recev": [1020, 1021, 1022], "0x7f2ab980b820": [1020, 1021, 1022, 1023], "maml_step": 1020, "rece": [1020, 1022], "reptile_step": 1020, "cost_fn": [1020, 1023], "reptil": [1020, 1023], "receivng": [1020, 1023], "all_nested_indic": 1024, "include_nest": [1024, 1025], "_index": [1024, 1025, 1035], "_base": [1024, 1025, 1034, 1035], "copy_nest": 1024, "to_mut": [1024, 1026, 1036], "mutabl": [1024, 1026, 1036], "insert_into_nest_at_index": 1024, "insert_into_nest_at_indic": 1024, "map_nest_at_index": 1024, "map_nest_at_indic": 1024, "multi_index_nest": 1024, "nested_ani": 1024, "check_nest": [1024, 1034, 1035], "conditon": [1024, 1034, 1035], "nested_indices_wher": 1024, "stop_after_n_found": [1024, 1035], "_depth": [1024, 1036], "_tuple_check_fn": [1024, 1036], "_list_check_fn": [1024, 1036], "_dict_check_fn": [1024, 1036], "nested_multi_map": 1024, "nest0": [1024, 1037], "ivy_arrai": [1024, 1037], "funciton": [1024, 1037], "prune_nest_at_index": 1024, "prune_nest_at_indic": 1024, "set_nest_at_index": 1024, "set_nest_at_indic": 1024, "mini": [1042, 1043, 1046, 1157, 1158], "gamma": [1042, 1043, 1046], "beta": [1042, 1043, 1046], "0976": [1042, 1043, 1046], "3452": [1042, 1043, 1046], "2740": [1042, 1043, 1046], "1047": [1042, 1043, 1046], "5886": [1042, 1043, 1046], "2732": [1042, 1043, 1046], "7696": [1042, 1043, 1046], "7024": [1042, 1043, 1046], "2518": [1042, 1043, 1046], "58": [1042, 1043, 1046, 1064, 1065], "283": [1042, 1043, 1046], "585": [1042, 1043, 1046], "909": [1042, 1043, 1046], "628": [1042, 1043, 1046], "225": [1042, 1043, 1046], "425": [1042, 1043, 1046], "norm_idx": [1042, 1043, 1046], "228": [1042, 1043, 1046], "0285": [1042, 1043, 1046], "199": [1042, 1043, 1046], "204": [1042, 1043, 1046], "population_s": [1047, 1048], "num_sampl": [1047, 1048], "draw": [1047, 1048, 1052, 1053, 1055], "unnorm": [1047, 1048], "drawn": [1047, 1048, 1049, 1050, 1052, 1053, 1055], "home": [1047, 1048, 1052], "uniformli": [1047, 1049, 1050, 1053, 1055], "highest": [1047, 1049, 1050], "parameter": [1047, 1052, 1053, 1055], "6444774682897879": [1047, 1052], "811": [1047, 1052], "508": [1047, 1052], "564": [1047, 1052], "7268672": [1047, 1052], "968": [1047, 1052], "175": [1047, 1052, 1064, 1065], "064": [1047, 1052], "40935726": [1047, 1052], "556": [1047, 1052], "26431865": [1047, 1053, 1055], "475": [1047, 1053, 1055], "878": [1047, 1053, 1055], "861": [1047, 1053, 1055], "89150229": [1047, 1053, 1055], "89629126": [1047, 1053, 1055], "94198485": [1047, 1053, 1055], "91405606": [1047, 1053, 1055], "72848724": [1047, 1053, 1055], "7550739": [1047, 1053, 1055], "00109": [1047, 1053, 1055], "occurr": [1059, 1060, 1061, 1064, 1065], "yield": [1059, 1063], "43": [1059, 1063], "x_j": [1064, 1065, 1066, 1068], "impli": [1064, 1065, 1066, 1068], "inverse_indic": [1064, 1065, 1067], "aggreg": [1064, 1065], "fourth": [1064, 1065], "607": [1064, 1065], "735": [1064, 1065], "667": [1064, 1065], "381": [1064, 1065], "857": [1064, 1065], "0396": [1064, 1065], "166": [1064, 1065], "828": [1064, 1065], "144": [1064, 1065], "40501155": [1064, 1065], "77361575": [1064, 1065], "97776199": [1064, 1065], "36831157": [1064, 1065], "89148434": [1064, 1065], "9512272": [1064, 1065], "67542176": [1064, 1065], "41985657": [1064, 1065], "23478023": [1064, 1065], "1141": [1064, 1065], "8101": [1064, 1065], "9298": [1064, 1065], "8460": [1064, 1065], "2119": [1064, 1065], "3519": [1064, 1065], "6252": [1064, 1065], "4033": [1064, 1065], "7443": [1064, 1065], "2577": [1064, 1065], "3707": [1064, 1065], "0545": [1064, 1065], "3238": [1064, 1065], "5944": [1064, 1065], "0775": [1064, 1065], "4327": [1064, 1065], "176": [1064, 1065], "889": [1064, 1065], "763": [1064, 1065], "071": [1064, 1065], "262": [1064, 1065], "456": [1064, 1065], "114": [1064, 1065], "349": [1064, 1065], "615": [1064, 1065], "594": [1064, 1065], "335": [1064, 1065], "212": [1064, 1065], "457": [1064, 1065], "827": [1064, 1065], "ascend": [1069, 1070, 1073], "einstein": [1080, 1081, 1084, 1108], "summat": [1080, 1081, 1084, 1108], "seq": [1080, 1081, 1084, 1108], "jk": [1080, 1081, 1084, 1108], "ik": [1080, 1081, 1084, 1108], "126": [1080, 1081, 1084, 1108], "510": [1080, 1081, 1084, 1108], "99": [1080, 1081, 1084, 1108], "108": [1080, 1081, 1084, 1108], "117": [1080, 1081, 1084, 1108], "sentinel": [1080, 1085, 1088, 1093, 1096], "unsign": [1080, 1097, 1100, 1105], "degre": [1080, 1101, 1104, 1109, 1112], "bessel": [1080, 1101, 1104, 1109, 1112], "8164966": [1080, 1101, 1104], "varianc": [1080, 1109, 1112], "unbias": [1080, 1109, 1112], "simplicit": [1113, 1114, 1117], "autom": 1122, "grow": 1122, "ai": 1122, "got": 1122, "colab": 1122, "sharp": 1122, "weekli": 1122, "event": 1122, "immedi": 1122, "favorit": 1122, "jax_concat": 1122, "tf_concat": 1122, "np_concat": 1122, "mx_concat": 1122, "torch_concat": 1122, "prompt": 1122, "get_devic": 1122, "reduce_prod": 1122, "gradient_imag": 1122, "linalg": 1122, "bilinear_resampl": 1122, "stack_imag": 1122, "neural_net": 1122, "ecosystem": [1122, 1128], "popular": [1122, 1128], "acceler": 1122, "articl": 1122, "lenton2021ivi": 1122, "inter": 1122, "lenton": 1122, "daniel": 1122, "pardo": 1122, "fabio": 1122, "falck": 1122, "fabian": 1122, "jame": 1122, "stephen": 1122, "clark": 1122, "ronald": 1122, "journal": 1122, "arxiv": 1122, "preprint": 1122, "2102": 1122, "02886": 1122, "2021": 1122, "add_array_spec": 1125, "fn_array_spec": 1125, "geglu": 1129, "native_modul": [1132, 1133], "native_module_class": [1132, 1133], "firstlayersiren": 1134, "kaimingnorm": [1134, 1138], "negative_slop": 1134, "Ones": 1134, "siren": 1134, "w0": [1134, 1140], "filter_s": [1143, 1144, 1145], "1d": [1143, 1144, 1145], "conv1dtranspos": 1143, "filter_shap": [1143, 1146, 1147, 1148, 1149, 1150], "conv2dtranspos": 1143, "conv3dtranspos": 1143, "depthwiseconv2d": 1143, "num_channel": [1143, 1150], "bernoul": [1143, 1151], "num_lay": [1143, 1152], "return_sequ": [1143, 1152], "return_st": [1143, 1152], "get_initial_st": [1143, 1152], "dens": [1143, 1153], "multiheadattent": 1143, "query_dim": [1143, 1154], "head_dim": [1143, 1154], "dropout_r": [1143, 1154], "context_dim": [1143, 1154], "with_to_q_fn": [1143, 1154], "with_to_kv_fn": [1143, 1154], "with_to_out_fn": [1143, 1154], "build_mod": [1143, 1154, 1155, 1156], "on_init": [1143, 1154, 1155, 1156], "__call__": [1143, 1154, 1155, 1156], "store_var": [1155, 1156], "arg_stateful_idx": [1155, 1156], "kwarg_stateful_idx": [1155, 1156], "fallback_to_non_compil": [1155, 1156, 1159, 1163], "with_partial_v": [1155, 1156], "initialz": [1155, 1156], "from_cal": [1155, 1156], "check_submod_ret": [1155, 1156], "get_mod_kei": [1155, 1156], "top_mod": [1155, 1156], "mod_depth": [1155, 1156], "mod_height": [1155, 1156], "mod_with_top_mod_key_chain": [1155, 1156], "save_weight": [1155, 1156], "weights_path": [1155, 1156], "show_mod_in_top_mod": [1155, 1156], "upper_depth": [1155, 1156], "lower_depth": [1155, 1156], "show_structur": [1155, 1156], "show_v_in_top_v": [1155, 1156], "sub_mod": [1155, 1156], "show_v": [1155, 1156], "track_submod_call_ord": [1155, 1156], "track_submod_ret": [1155, 1156], "v_with_top_v_key_chain": [1155, 1156], "layernorm": 1157, "normalized_shap": [1157, 1158], "elementwise_affin": [1157, 1158], "trail": [1157, 1158], "affin": [1157, 1158], "0001": [1159, 1160, 1161], "init_on_first_step": [1159, 1163], "ignore_miss": [1159, 1163], "overriden": [1159, 1163], "sgd": 1159, "stochast": [1159, 1164], "sub_modul": [1165, 1166]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "array_methods"], [117, 0, 0, "-", "conversions"], [122, 0, 0, "-", "creation"], [124, 0, 0, "-", "data_type"], [126, 0, 0, "-", "device"], [128, 0, 0, "-", "elementwise"], [130, 0, 0, "-", "general"], [132, 0, 0, "-", "gradients"], [134, 0, 0, "-", "image"], [136, 0, 0, "-", "layers"], [138, 0, 0, "-", "linear_algebra"], [140, 0, 0, "-", "losses"], [142, 0, 0, "-", "manipulation"], [144, 0, 0, "-", "norms"], [146, 0, 0, "-", "random"], [148, 0, 0, "-", "searching"], [150, 0, 0, "-", "set"], [152, 0, 0, "-", "sorting"], [154, 0, 0, "-", "statistical"], [156, 0, 0, "-", "utility"], [158, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[517, 2, 1, "", "abs"], [524, 2, 1, "", "acos"], [525, 2, 1, "", "acosh"], [829, 2, 1, "", "adam_step"], [662, 2, 1, "", "add"], [8, 2, 1, "", "add_ivy_array_instance_methods"], [1115, 2, 1, "", "all"], [754, 2, 1, "", "all_equal"], [1119, 2, 1, "", "any"], [1071, 2, 1, "", "argsort"], [534, 2, 1, "", "asin"], [538, 2, 1, "", "asinh"], [549, 2, 1, "", "atan"], [546, 2, 1, "", "atan2"], [550, 2, 1, "", "atanh"], [946, 2, 1, "", "binary_cross_entropy"], [554, 2, 1, "", "bitwise_and"], [558, 2, 1, "", "bitwise_invert"], [562, 2, 1, "", "bitwise_left_shift"], [566, 2, 1, "", "bitwise_or"], [570, 2, 1, "", "bitwise_right_shift"], [574, 2, 1, "", "bitwise_xor"], [438, 2, 1, "", "can_cast"], [578, 2, 1, "", "ceil"], [876, 2, 1, "", "cholesky"], [962, 2, 1, "", "clip"], [967, 2, 1, "", "concat"], [971, 2, 1, "", "constant_pad"], [582, 2, 1, "", "cos"], [586, 2, 1, "", "cosh"], [879, 2, 1, "", "cross"], [951, 2, 1, "", "cross_entropy"], [919, 2, 1, "", "det"], [885, 2, 1, "", "diagonal"], [614, 2, 1, "", "divide"], [888, 2, 1, "", "eigh"], [891, 2, 1, "", "eigvalsh"], [1082, 2, 1, "", "einsum"], [622, 2, 1, "", "equal"], [599, 2, 1, "", "erf"], [662, 2, 1, "", "exp"], [975, 2, 1, "", "expand_dims"], [607, 2, 1, "", "expm1"], [979, 2, 1, "", "flip"], [614, 2, 1, "", "floor"], [615, 2, 1, "", "floor_divide"], [782, 2, 1, "", "gather_nd"], [622, 2, 1, "", "greater"], [623, 2, 1, "", "greater_equal"], [913, 2, 1, "", "inv"], [627, 2, 1, "", "isfinite"], [631, 2, 1, "", "isinf"], [635, 2, 1, "", "isnan"], [1044, 2, 1, "", "layer_norm"], [639, 2, 1, "", "less"], [643, 2, 1, "", "less_equal"], [647, 2, 1, "", "log"], [651, 2, 1, "", "log10"], [655, 2, 1, "", "log1p"], [659, 2, 1, "", "log2"], [663, 2, 1, "", "logaddexp"], [667, 2, 1, "", "logical_and"], [671, 2, 1, "", "logical_not"], [675, 2, 1, "", "logical_or"], [679, 2, 1, "", "logical_xor"], [897, 2, 1, "", "matmul"], [901, 2, 1, "", "matrix_norm"], [905, 2, 1, "", "matrix_rank"], [908, 2, 1, "", "matrix_transpose"], [1086, 2, 1, "", "max"], [1090, 2, 1, "", "mean"], [1094, 2, 1, "", "min"], [685, 2, 1, "", "multiply"], [690, 2, 1, "", "negative"], [694, 2, 1, "", "not_equal"], [911, 2, 1, "", "outer"], [983, 2, 1, "", "permute_dims"], [914, 2, 1, "", "pinv"], [698, 2, 1, "", "positive"], [702, 2, 1, "", "pow"], [1098, 2, 1, "", "prod"], [917, 2, 1, "", "qr"], [706, 2, 1, "", "remainder"], [987, 2, 1, "", "repeat"], [991, 2, 1, "", "reshape"], [995, 2, 1, "", "roll"], [710, 2, 1, "", "round"], [714, 2, 1, "", "sign"], [718, 2, 1, "", "sin"], [722, 2, 1, "", "sinh"], [921, 2, 1, "", "solve"], [1076, 2, 1, "", "sort"], [956, 2, 1, "", "sparse_cross_entropy"], [726, 2, 1, "", "sqrt"], [730, 2, 1, "", "square"], [1001, 2, 1, "", "squeeze"], [1005, 2, 1, "", "stack"], [1102, 2, 1, "", "std"], [735, 2, 1, "", "subtract"], [1106, 2, 1, "", "sum"], [926, 2, 1, "", "svd"], [927, 2, 1, "", "svdvals"], [1009, 2, 1, "", "swapaxes"], [740, 2, 1, "", "tan"], [745, 2, 1, "", "tanh"], [930, 2, 1, "", "tensordot"], [1013, 2, 1, "", "tile"], [933, 2, 1, "", "trace"], [749, 2, 1, "", "trunc"], [1110, 2, 1, "", "var"], [936, 2, 1, "", "vecdot"], [939, 2, 1, "", "vector_norm"], [942, 2, 1, "", "vector_to_skew_symmetric_matrix"], [1017, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[118, 2, 1, "", "args_to_ivy"], [119, 2, 1, "", "args_to_native"], [120, 2, 1, "", "to_ivy"], [121, 2, 1, "", "to_native"]], "ivy.array.creation": [[123, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[125, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[125, 3, 1, "", "can_cast"]], "ivy.array.device": [[127, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[129, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[129, 3, 1, "", "abs"], [129, 3, 1, "", "acos"], [129, 3, 1, "", "acosh"], [129, 3, 1, "", "add"], [129, 3, 1, "", "asin"], [129, 3, 1, "", "asinh"], [129, 3, 1, "", "atan"], [129, 3, 1, "", "atan2"], [129, 3, 1, "", "atanh"], [129, 3, 1, "", "bitwise_and"], [129, 3, 1, "", "bitwise_invert"], [129, 3, 1, "", "bitwise_left_shift"], [129, 3, 1, "", "bitwise_or"], [129, 3, 1, "", "bitwise_right_shift"], [129, 3, 1, "", "bitwise_xor"], [129, 3, 1, "", "ceil"], [129, 3, 1, "", "cos"], [129, 3, 1, "", "cosh"], [129, 3, 1, "", "divide"], [129, 3, 1, "", "equal"], [129, 3, 1, "", "erf"], [129, 3, 1, "", "exp"], [129, 3, 1, "", "expm1"], [129, 3, 1, "", "floor"], [129, 3, 1, "", "floor_divide"], [129, 3, 1, "", "greater"], [129, 3, 1, "", "greater_equal"], [129, 3, 1, "", "isfinite"], [129, 3, 1, "", "isinf"], [129, 3, 1, "", "isnan"], [129, 3, 1, "", "less"], [129, 3, 1, "", "less_equal"], [129, 3, 1, "", "log"], [129, 3, 1, "", "log10"], [129, 3, 1, "", "log1p"], [129, 3, 1, "", "log2"], [129, 3, 1, "", "logaddexp"], [129, 3, 1, "", "logical_and"], [129, 3, 1, "", "logical_not"], [129, 3, 1, "", "logical_or"], [129, 3, 1, "", "logical_xor"], [129, 3, 1, "", "multiply"], [129, 3, 1, "", "negative"], [129, 3, 1, "", "not_equal"], [129, 3, 1, "", "positive"], [129, 3, 1, "", "pow"], [129, 3, 1, "", "remainder"], [129, 3, 1, "", "round"], [129, 3, 1, "", "sign"], [129, 3, 1, "", "sin"], [129, 3, 1, "", "sinh"], [129, 3, 1, "", "sqrt"], [129, 3, 1, "", "square"], [129, 3, 1, "", "subtract"], [129, 3, 1, "", "tan"], [129, 3, 1, "", "tanh"], [129, 3, 1, "", "trunc"]], "ivy.array.general": [[131, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[131, 3, 1, "", "all_equal"], [131, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[133, 1, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[133, 3, 1, "", "adam_step"]], "ivy.array.image": [[135, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[137, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[139, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[139, 3, 1, "", "cholesky"], [139, 3, 1, "", "cross"], [139, 3, 1, "", "det"], [139, 3, 1, "", "diagonal"], [139, 3, 1, "", "eigh"], [139, 3, 1, "", "eigvalsh"], [139, 3, 1, "", "inv"], [139, 3, 1, "", "matmul"], [139, 3, 1, "", "matrix_norm"], [139, 3, 1, "", "matrix_rank"], [139, 3, 1, "", "matrix_transpose"], [139, 3, 1, "", "outer"], [139, 3, 1, "", "pinv"], [139, 3, 1, "", "qr"], [139, 3, 1, "", "solve"], [139, 3, 1, "", "svd"], [139, 3, 1, "", "svdvals"], [139, 3, 1, "", "tensordot"], [139, 3, 1, "", "trace"], [139, 3, 1, "", "vecdot"], [139, 3, 1, "", "vector_norm"], [139, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[141, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[141, 3, 1, "", "binary_cross_entropy"], [141, 3, 1, "", "cross_entropy"], [141, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[143, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[143, 3, 1, "", "clip"], [143, 3, 1, "", "concat"], [143, 3, 1, "", "constant_pad"], [143, 3, 1, "", "expand_dims"], [143, 3, 1, "", "flip"], [143, 3, 1, "", "permute_dims"], [143, 3, 1, "", "repeat"], [143, 3, 1, "", "reshape"], [143, 3, 1, "", "roll"], [143, 3, 1, "", "squeeze"], [143, 3, 1, "", "stack"], [143, 3, 1, "", "swapaxes"], [143, 3, 1, "", "tile"], [143, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[145, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[145, 3, 1, "", "layer_norm"]], "ivy.array.random": [[147, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[149, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[151, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[153, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[153, 3, 1, "", "argsort"], [153, 3, 1, "", "sort"]], "ivy.array.statistical": [[155, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[155, 3, 1, "", "einsum"], [155, 3, 1, "", "max"], [155, 3, 1, "", "mean"], [155, 3, 1, "", "min"], [155, 3, 1, "", "prod"], [155, 3, 1, "", "std"], [155, 3, 1, "", "sum"], [155, 3, 1, "", "var"]], "ivy.array.utility": [[157, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[157, 3, 1, "", "all"], [157, 3, 1, "", "any"]], "ivy.array.wrapping": [[159, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[160, 0, 0, "-", "backend_handler"], [388, 0, 0, "-", "func_wrapper"], [1125, 0, 0, "-", "inspection"], [1168, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[160, 1, 1, "", "ContextManager"], [162, 2, 1, "", "choose_random_backend"], [163, 2, 1, "", "clear_backend_stack"], [164, 2, 1, "", "current_backend"], [165, 2, 1, "", "get_backend"], [166, 2, 1, "", "set_backend"], [167, 2, 1, "", "try_import_ivy_jax"], [168, 2, 1, "", "try_import_ivy_mxnet"], [169, 2, 1, "", "try_import_ivy_numpy"], [170, 2, 1, "", "try_import_ivy_tf"], [171, 2, 1, "", "try_import_ivy_torch"], [172, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[160, 3, 1, "", "__init__"]], "ivy.container": [[177, 0, 0, "-", "activations"], [179, 0, 0, "-", "base"], [181, 0, 0, "-", "container"], [184, 0, 0, "-", "container_methods"], [311, 0, 0, "-", "creation"], [313, 0, 0, "-", "data_type"], [315, 0, 0, "-", "device"], [317, 0, 0, "-", "elementwise"], [319, 0, 0, "-", "general"], [321, 0, 0, "-", "gradients"], [323, 0, 0, "-", "image"], [325, 0, 0, "-", "layers"], [327, 0, 0, "-", "linear_algebra"], [329, 0, 0, "-", "losses"], [331, 0, 0, "-", "manipulation"], [333, 0, 0, "-", "norms"], [335, 0, 0, "-", "random"], [337, 0, 0, "-", "searching"], [339, 0, 0, "-", "set"], [341, 0, 0, "-", "sorting"], [343, 0, 0, "-", "statistical"], [345, 0, 0, "-", "utility"], [347, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[178, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[180, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[180, 3, 1, "", "__getitem__"], [180, 3, 1, "", "__init__"], [180, 3, 1, "", "__setitem__"], [180, 3, 1, "", "all_false"], [180, 3, 1, "", "all_key_chains"], [180, 3, 1, "", "all_true"], [180, 3, 1, "", "arrays_as_lists"], [180, 3, 1, "", "as_arrays"], [180, 3, 1, "", "as_bools"], [180, 3, 1, "", "as_ones"], [180, 3, 1, "", "as_random_uniform"], [180, 3, 1, "", "as_variables"], [180, 3, 1, "", "as_zeros"], [180, 3, 1, "", "assert_contains_sub_container"], [180, 3, 1, "", "assert_contains_sub_structure"], [180, 3, 1, "", "assert_identical"], [180, 3, 1, "", "assert_identical_structure"], [180, 3, 1, "", "at_key_chain"], [180, 3, 1, "", "at_key_chains"], [180, 3, 1, "", "at_keys"], [180, 3, 1, "", "clip"], [180, 3, 1, "", "combine"], [180, 3, 1, "", "common_key_chains"], [180, 4, 1, "", "config"], [180, 3, 1, "", "contains_sub_container"], [180, 3, 1, "", "contains_sub_structure"], [180, 3, 1, "", "copy"], [180, 3, 1, "", "create_if_absent"], [180, 3, 1, "", "cutoff_at_depth"], [180, 3, 1, "", "cutoff_at_height"], [180, 3, 1, "", "deep_copy"], [180, 4, 1, "", "dev"], [180, 3, 1, "", "dev_clone"], [180, 3, 1, "", "dev_dist"], [180, 4, 1, "", "dev_str"], [180, 3, 1, "", "diff"], [180, 3, 1, "", "dtype"], [180, 3, 1, "", "einops_rearrange"], [180, 3, 1, "", "einops_reduce"], [180, 3, 1, "", "einops_repeat"], [180, 3, 1, "", "find_sub_container"], [180, 3, 1, "", "find_sub_structure"], [180, 3, 1, "", "flatten_key_chain"], [180, 3, 1, "", "flatten_key_chains"], [180, 3, 1, "", "format_key_chains"], [180, 3, 1, "", "from_disk_as_hdf5"], [180, 3, 1, "", "from_disk_as_json"], [180, 3, 1, "", "from_disk_as_pickled"], [180, 3, 1, "", "from_flat_list"], [180, 3, 1, "", "from_numpy"], [180, 3, 1, "", "gather"], [180, 3, 1, "", "gather_nd"], [180, 3, 1, "", "h5_file_size"], [180, 3, 1, "", "handle_inplace"], [180, 3, 1, "", "has_key"], [180, 3, 1, "", "has_key_chain"], [180, 3, 1, "", "has_nans"], [180, 3, 1, "", "identical"], [180, 3, 1, "", "identical_array_shapes"], [180, 3, 1, "", "identical_configs"], [180, 3, 1, "", "identical_structure"], [180, 3, 1, "", "if_exists"], [180, 3, 1, "", "inplace_update"], [180, 4, 1, "", "ivy"], [180, 3, 1, "", "key_chains_containing"], [180, 3, 1, "", "list_join"], [180, 3, 1, "", "list_stack"], [180, 3, 1, "", "map"], [180, 3, 1, "", "map_conts"], [180, 3, 1, "", "matrix_norm"], [180, 4, 1, "", "max_depth"], [180, 3, 1, "", "maximum"], [180, 3, 1, "", "minimum"], [180, 3, 1, "", "multi_map"], [180, 3, 1, "", "multi_map_in_static_method"], [180, 3, 1, "", "num_arrays"], [180, 3, 1, "", "overwrite_at_key_chain"], [180, 3, 1, "", "overwrite_at_key_chains"], [180, 3, 1, "", "prune_empty"], [180, 3, 1, "", "prune_key_chain"], [180, 3, 1, "", "prune_key_chains"], [180, 3, 1, "", "prune_key_from_key_chains"], [180, 3, 1, "", "prune_keys"], [180, 3, 1, "", "prune_keys_from_key_chains"], [180, 3, 1, "", "reduce"], [180, 3, 1, "", "remove_key_length_limit"], [180, 3, 1, "", "remove_print_limit"], [180, 3, 1, "", "reshape_like"], [180, 3, 1, "", "restructure"], [180, 3, 1, "", "restructure_key_chains"], [180, 3, 1, "", "set_at_key_chain"], [180, 3, 1, "", "set_at_key_chains"], [180, 3, 1, "", "set_at_keys"], [180, 3, 1, "", "set_framework"], [180, 3, 1, "", "set_ivy_backend"], [180, 4, 1, "", "shape"], [180, 4, 1, "", "shapes"], [180, 3, 1, "", "show"], [180, 3, 1, "", "show_sub_container"], [180, 3, 1, "", "shuffle"], [180, 3, 1, "", "shuffle_h5_file"], [180, 3, 1, "", "size_ordered_arrays"], [180, 3, 1, "", "slice_keys"], [180, 3, 1, "", "slice_via_key"], [180, 3, 1, "", "sort_by_key"], [180, 3, 1, "", "split"], [180, 3, 1, "", "stop_gradients"], [180, 3, 1, "", "structural_diff"], [180, 3, 1, "", "to_device"], [180, 3, 1, "", "to_dict"], [180, 3, 1, "", "to_disk_as_hdf5"], [180, 3, 1, "", "to_disk_as_json"], [180, 3, 1, "", "to_disk_as_pickled"], [180, 3, 1, "", "to_flat_list"], [180, 3, 1, "", "to_iterator"], [180, 3, 1, "", "to_iterator_keys"], [180, 3, 1, "", "to_iterator_values"], [180, 3, 1, "", "to_ivy"], [180, 3, 1, "", "to_jsonable"], [180, 3, 1, "", "to_list"], [180, 3, 1, "", "to_multi_dev"], [180, 3, 1, "", "to_native"], [180, 3, 1, "", "to_numpy"], [180, 3, 1, "", "to_raw"], [180, 3, 1, "", "trim_key"], [180, 3, 1, "", "try_kc"], [180, 3, 1, "", "unify"], [180, 3, 1, "", "unstack"], [180, 3, 1, "", "update_config"], [180, 3, 1, "", "vector_norm"], [180, 3, 1, "", "with_default_key_color"], [180, 3, 1, "", "with_entries_as_lists"], [180, 3, 1, "", "with_ivy_backend"], [180, 3, 1, "", "with_key_length_limit"], [180, 3, 1, "", "with_print_indent"], [180, 3, 1, "", "with_print_limit"], [180, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[182, 1, 1, "", "Container"], [183, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[182, 3, 1, "", "__add__"], [182, 3, 1, "", "__init__"], [182, 3, 1, "", "__radd__"], [182, 3, 1, "", "arange"], [182, 3, 1, "", "arg_info"], [182, 3, 1, "", "arg_names"], [182, 3, 1, "", "argmax"], [182, 3, 1, "", "argmin"], [182, 3, 1, "", "array"], [182, 3, 1, "", "array_equal"], [182, 3, 1, "", "arrays_equal"], [182, 3, 1, "", "as_ivy_dev"], [182, 3, 1, "", "as_ivy_dtype"], [182, 3, 1, "", "as_native_dev"], [182, 3, 1, "", "as_native_dtype"], [182, 3, 1, "", "asarray"], [182, 3, 1, "", "assert_supports_inplace"], [182, 3, 1, "", "astype"], [182, 3, 1, "", "broadcast_arrays"], [182, 3, 1, "", "broadcast_to"], [182, 3, 1, "", "cache_fn"], [182, 3, 1, "", "cholesky"], [182, 3, 1, "", "clear_mem_on_dev"], [182, 3, 1, "", "clip_matrix_norm"], [182, 3, 1, "", "closest_valid_dtype"], [182, 3, 1, "", "container_types"], [182, 3, 1, "", "conv1d"], [182, 3, 1, "", "conv1d_transpose"], [182, 3, 1, "", "conv2d"], [182, 3, 1, "", "conv2d_transpose"], [182, 3, 1, "", "conv3d"], [182, 3, 1, "", "conv3d_transpose"], [182, 3, 1, "", "copy_array"], [182, 3, 1, "", "cross"], [182, 3, 1, "", "cumprod"], [182, 3, 1, "", "cumsum"], [182, 3, 1, "", "current_backend"], [182, 3, 1, "", "current_backend_str"], [182, 3, 1, "", "default"], [182, 3, 1, "", "default_device"], [182, 3, 1, "", "default_dtype"], [182, 3, 1, "", "default_float_dtype"], [182, 3, 1, "", "default_int_dtype"], [182, 3, 1, "", "depthwise_conv2d"], [182, 3, 1, "", "det"], [182, 3, 1, "", "dev_clone_array"], [182, 3, 1, "", "dev_clone_iter"], [182, 3, 1, "", "dev_clone_nest"], [182, 3, 1, "", "dev_dist_array"], [182, 3, 1, "", "dev_dist_iter"], [182, 3, 1, "", "dev_dist_nest"], [182, 3, 1, "", "dev_unify"], [182, 3, 1, "", "dev_unify_array"], [182, 3, 1, "", "dev_unify_iter"], [182, 3, 1, "", "dev_unify_nest"], [182, 3, 1, "", "dev_util"], [182, 3, 1, "", "diagonal"], [182, 3, 1, "", "dropout"], [182, 3, 1, "", "dtype_bits"], [182, 3, 1, "", "eigh"], [182, 3, 1, "", "eigvalsh"], [182, 3, 1, "", "empty"], [182, 3, 1, "", "empty_like"], [182, 3, 1, "", "execute_with_gradients"], [182, 3, 1, "", "exists"], [182, 3, 1, "", "eye"], [182, 3, 1, "", "finfo"], [182, 3, 1, "", "floormod"], [182, 3, 1, "", "fourier_encode"], [182, 3, 1, "", "from_dlpack"], [182, 3, 1, "", "full"], [182, 3, 1, "", "full_like"], [182, 3, 1, "", "function_supported_dtypes"], [182, 3, 1, "", "function_unsupported_dtypes"], [182, 3, 1, "", "gelu"], [182, 3, 1, "", "get_all_arrays_in_memory"], [182, 3, 1, "", "get_all_ivy_arrays_on_dev"], [182, 3, 1, "", "get_min_base"], [182, 3, 1, "", "get_min_denominator"], [182, 3, 1, "", "get_num_dims"], [182, 3, 1, "", "get_referrers_recursive"], [182, 3, 1, "", "gpu_is_available"], [182, 3, 1, "", "handle_nestable"], [182, 3, 1, "", "handle_out_argument"], [182, 3, 1, "", "iinfo"], [182, 3, 1, "", "indices_where"], [182, 3, 1, "", "infer_device"], [182, 3, 1, "", "infer_dtype"], [182, 3, 1, "", "inplace_arrays_supported"], [182, 3, 1, "", "inplace_decrement"], [182, 3, 1, "", "inplace_increment"], [182, 3, 1, "", "inplace_variables_supported"], [182, 3, 1, "", "inputs_to_native_arrays"], [182, 3, 1, "", "inv"], [182, 3, 1, "", "invalid_dtype"], [182, 3, 1, "", "is_float_dtype"], [182, 3, 1, "", "is_int_dtype"], [182, 3, 1, "", "is_ivy_container"], [182, 3, 1, "", "leaky_relu"], [182, 3, 1, "", "linear"], [182, 3, 1, "", "linspace"], [182, 3, 1, "", "logspace"], [182, 3, 1, "", "lstm_update"], [182, 3, 1, "", "match_kwargs"], [182, 3, 1, "", "matrix_power"], [182, 3, 1, "", "matrix_rank"], [182, 3, 1, "", "matrix_transpose"], [182, 3, 1, "", "meshgrid"], [182, 3, 1, "", "multi_head_attention"], [182, 3, 1, "", "multinomial"], [182, 3, 1, "", "multiprocessing"], [182, 3, 1, "", "native_array"], [182, 3, 1, "", "nonzero"], [182, 3, 1, "", "num_arrays_in_memory"], [182, 3, 1, "", "num_cpu_cores"], [182, 3, 1, "", "num_gpus"], [182, 3, 1, "", "num_ivy_arrays_on_dev"], [182, 3, 1, "", "one_hot"], [182, 3, 1, "", "ones"], [182, 3, 1, "", "ones_like"], [182, 3, 1, "", "outer"], [182, 3, 1, "", "outputs_to_ivy_arrays"], [182, 3, 1, "", "percent_used_mem_on_dev"], [182, 3, 1, "", "pinv"], [182, 3, 1, "", "print_all_arrays_in_memory"], [182, 3, 1, "", "print_all_ivy_arrays_on_dev"], [182, 3, 1, "", "promote_types"], [182, 3, 1, "", "qr"], [182, 3, 1, "", "queue_timeout"], [182, 3, 1, "", "randint"], [182, 3, 1, "", "random_normal"], [182, 3, 1, "", "relu"], [182, 3, 1, "", "result_type"], [182, 3, 1, "", "scaled_dot_product_attention"], [182, 3, 1, "", "scatter_flat"], [182, 3, 1, "", "scatter_nd"], [182, 3, 1, "", "seed"], [182, 3, 1, "", "set_default_device"], [182, 3, 1, "", "set_default_dtype"], [182, 3, 1, "", "set_default_float_dtype"], [182, 3, 1, "", "set_default_int_dtype"], [182, 3, 1, "", "set_min_base"], [182, 3, 1, "", "set_min_denominator"], [182, 3, 1, "", "set_queue_timeout"], [182, 3, 1, "", "set_split_factor"], [182, 3, 1, "", "set_tmp_dir"], [182, 3, 1, "", "set_with_grads"], [182, 3, 1, "", "shape_to_tuple"], [182, 3, 1, "", "sigmoid"], [182, 3, 1, "", "slogdet"], [182, 3, 1, "", "softmax"], [182, 3, 1, "", "softplus"], [182, 3, 1, "", "solve"], [182, 3, 1, "", "split_factor"], [182, 3, 1, "", "split_func_call"], [182, 3, 1, "", "stable_divide"], [182, 3, 1, "", "stable_pow"], [182, 3, 1, "", "static_abs"], [182, 3, 1, "", "static_acos"], [182, 3, 1, "", "static_acosh"], [182, 3, 1, "", "static_all"], [182, 3, 1, "", "static_any"], [182, 3, 1, "", "static_arange"], [182, 3, 1, "", "static_arg_info"], [182, 3, 1, "", "static_arg_names"], [182, 3, 1, "", "static_argmax"], [182, 3, 1, "", "static_argmin"], [182, 3, 1, "", "static_array"], [182, 3, 1, "", "static_array_equal"], [182, 3, 1, "", "static_arrays_equal"], [182, 3, 1, "", "static_as_ivy_dev"], [182, 3, 1, "", "static_as_ivy_dtype"], [182, 3, 1, "", "static_as_native_dev"], [182, 3, 1, "", "static_as_native_dtype"], [182, 3, 1, "", "static_asarray"], [182, 3, 1, "", "static_asin"], [182, 3, 1, "", "static_asinh"], [182, 3, 1, "", "static_assert_supports_inplace"], [182, 3, 1, "", "static_astype"], [182, 3, 1, "", "static_atan"], [182, 3, 1, "", "static_atan2"], [182, 3, 1, "", "static_atanh"], [182, 3, 1, "", "static_bitwise_and"], [182, 3, 1, "", "static_bitwise_invert"], [182, 3, 1, "", "static_bitwise_left_shift"], [182, 3, 1, "", "static_bitwise_or"], [182, 3, 1, "", "static_bitwise_right_shift"], [182, 3, 1, "", "static_bitwise_xor"], [182, 3, 1, "", "static_broadcast_arrays"], [182, 3, 1, "", "static_broadcast_to"], [182, 3, 1, "", "static_cache_fn"], [182, 3, 1, "", "static_ceil"], [182, 3, 1, "", "static_cholesky"], [182, 3, 1, "", "static_clear_mem_on_dev"], [182, 3, 1, "", "static_clip_matrix_norm"], [182, 3, 1, "", "static_clip_vector_norm"], [182, 3, 1, "", "static_closest_valid_dtype"], [182, 3, 1, "", "static_concat"], [182, 3, 1, "", "static_constant_pad"], [182, 3, 1, "", "static_container_types"], [182, 3, 1, "", "static_conv1d"], [182, 3, 1, "", "static_conv1d_transpose"], [182, 3, 1, "", "static_conv2d"], [182, 3, 1, "", "static_conv2d_transpose"], [182, 3, 1, "", "static_conv3d"], [182, 3, 1, "", "static_conv3d_transpose"], [182, 3, 1, "", "static_copy_array"], [182, 3, 1, "", "static_cos"], [182, 3, 1, "", "static_cosh"], [182, 3, 1, "", "static_cross"], [182, 3, 1, "", "static_cumprod"], [182, 3, 1, "", "static_cumsum"], [182, 3, 1, "", "static_current_backend"], [182, 3, 1, "", "static_current_backend_str"], [182, 3, 1, "", "static_default"], [182, 3, 1, "", "static_default_device"], [182, 3, 1, "", "static_default_dtype"], [182, 3, 1, "", "static_default_float_dtype"], [182, 3, 1, "", "static_default_int_dtype"], [182, 3, 1, "", "static_depthwise_conv2d"], [182, 3, 1, "", "static_det"], [182, 3, 1, "", "static_dev"], [182, 3, 1, "", "static_dev_clone"], [182, 3, 1, "", "static_dev_clone_array"], [182, 3, 1, "", "static_dev_clone_iter"], [182, 3, 1, "", "static_dev_clone_nest"], [182, 3, 1, "", "static_dev_dist"], [182, 3, 1, "", "static_dev_dist_array"], [182, 3, 1, "", "static_dev_dist_iter"], [182, 3, 1, "", "static_dev_dist_nest"], [182, 3, 1, "", "static_dev_unify"], [182, 3, 1, "", "static_dev_unify_array"], [182, 3, 1, "", "static_dev_unify_iter"], [182, 3, 1, "", "static_dev_unify_nest"], [182, 3, 1, "", "static_dev_util"], [182, 3, 1, "", "static_diagonal"], [182, 3, 1, "", "static_dropout"], [182, 3, 1, "", "static_dtype"], [182, 3, 1, "", "static_dtype_bits"], [182, 3, 1, "", "static_eigh"], [182, 3, 1, "", "static_eigvalsh"], [182, 3, 1, "", "static_einops_rearrange"], [182, 3, 1, "", "static_einops_reduce"], [182, 3, 1, "", "static_einops_repeat"], [182, 3, 1, "", "static_einsum"], [182, 3, 1, "", "static_empty"], [182, 3, 1, "", "static_empty_like"], [182, 3, 1, "", "static_equal"], [182, 3, 1, "", "static_erf"], [182, 3, 1, "", "static_execute_with_gradients"], [182, 3, 1, "", "static_exists"], [182, 3, 1, "", "static_exp"], [182, 3, 1, "", "static_expand_dims"], [182, 3, 1, "", "static_expm1"], [182, 3, 1, "", "static_eye"], [182, 3, 1, "", "static_finfo"], [182, 3, 1, "", "static_flip"], [182, 3, 1, "", "static_floor"], [182, 3, 1, "", "static_floor_divide"], [182, 3, 1, "", "static_floormod"], [182, 3, 1, "", "static_fourier_encode"], [182, 3, 1, "", "static_from_dlpack"], [182, 3, 1, "", "static_full"], [182, 3, 1, "", "static_full_like"], [182, 3, 1, "", "static_function_supported_dtypes"], [182, 3, 1, "", "static_function_unsupported_dtypes"], [182, 3, 1, "", "static_gather"], [182, 3, 1, "", "static_gelu"], [182, 3, 1, "", "static_get_all_arrays_in_memory"], [182, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [182, 3, 1, "", "static_get_min_base"], [182, 3, 1, "", "static_get_min_denominator"], [182, 3, 1, "", "static_get_num_dims"], [182, 3, 1, "", "static_get_referrers_recursive"], [182, 3, 1, "", "static_gpu_is_available"], [182, 3, 1, "", "static_greater"], [182, 3, 1, "", "static_greater_equal"], [182, 3, 1, "", "static_handle_nestable"], [182, 3, 1, "", "static_handle_out_argument"], [182, 3, 1, "", "static_has_nans"], [182, 3, 1, "", "static_iinfo"], [182, 3, 1, "", "static_indices_where"], [182, 3, 1, "", "static_infer_device"], [182, 3, 1, "", "static_infer_dtype"], [182, 3, 1, "", "static_inplace_arrays_supported"], [182, 3, 1, "", "static_inplace_decrement"], [182, 3, 1, "", "static_inplace_increment"], [182, 3, 1, "", "static_inplace_update"], [182, 3, 1, "", "static_inplace_variables_supported"], [182, 3, 1, "", "static_inputs_to_native_arrays"], [182, 3, 1, "", "static_inv"], [182, 3, 1, "", "static_invalid_dtype"], [182, 3, 1, "", "static_is_array"], [182, 3, 1, "", "static_is_float_dtype"], [182, 3, 1, "", "static_is_int_dtype"], [182, 3, 1, "", "static_is_ivy_array"], [182, 3, 1, "", "static_is_ivy_container"], [182, 3, 1, "", "static_is_native_array"], [182, 3, 1, "", "static_is_variable"], [182, 3, 1, "", "static_isfinite"], [182, 3, 1, "", "static_isinf"], [182, 3, 1, "", "static_isnan"], [182, 3, 1, "", "static_layer_norm"], [182, 3, 1, "", "static_leaky_relu"], [182, 3, 1, "", "static_less"], [182, 3, 1, "", "static_less_equal"], [182, 3, 1, "", "static_linear"], [182, 3, 1, "", "static_linspace"], [182, 3, 1, "", "static_log"], [182, 3, 1, "", "static_log10"], [182, 3, 1, "", "static_log1p"], [182, 3, 1, "", "static_log2"], [182, 3, 1, "", "static_logaddexp"], [182, 3, 1, "", "static_logical_and"], [182, 3, 1, "", "static_logical_not"], [182, 3, 1, "", "static_logical_or"], [182, 3, 1, "", "static_logical_xor"], [182, 3, 1, "", "static_logspace"], [182, 3, 1, "", "static_lstm_update"], [182, 3, 1, "", "static_match_kwargs"], [182, 3, 1, "", "static_matmul"], [182, 3, 1, "", "static_matrix_norm"], [182, 3, 1, "", "static_matrix_power"], [182, 3, 1, "", "static_matrix_rank"], [182, 3, 1, "", "static_matrix_transpose"], [182, 3, 1, "", "static_max"], [182, 3, 1, "", "static_maximum"], [182, 3, 1, "", "static_mean"], [182, 3, 1, "", "static_meshgrid"], [182, 3, 1, "", "static_min"], [182, 3, 1, "", "static_minimum"], [182, 3, 1, "", "static_multi_head_attention"], [182, 3, 1, "", "static_multinomial"], [182, 3, 1, "", "static_multiprocessing"], [182, 3, 1, "", "static_native_array"], [182, 3, 1, "", "static_negative"], [182, 3, 1, "", "static_nonzero"], [182, 3, 1, "", "static_not_equal"], [182, 3, 1, "", "static_num_arrays_in_memory"], [182, 3, 1, "", "static_num_cpu_cores"], [182, 3, 1, "", "static_num_gpus"], [182, 3, 1, "", "static_num_ivy_arrays_on_dev"], [182, 3, 1, "", "static_one_hot"], [182, 3, 1, "", "static_ones"], [182, 3, 1, "", "static_ones_like"], [182, 3, 1, "", "static_outer"], [182, 3, 1, "", "static_outputs_to_ivy_arrays"], [182, 3, 1, "", "static_percent_used_mem_on_dev"], [182, 3, 1, "", "static_permute_dims"], [182, 3, 1, "", "static_pinv"], [182, 3, 1, "", "static_positive"], [182, 3, 1, "", "static_pow"], [182, 3, 1, "", "static_print_all_arrays_in_memory"], [182, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [182, 3, 1, "", "static_prod"], [182, 3, 1, "", "static_promote_types"], [182, 3, 1, "", "static_qr"], [182, 3, 1, "", "static_queue_timeout"], [182, 3, 1, "", "static_random_normal"], [182, 3, 1, "", "static_relu"], [182, 3, 1, "", "static_remainder"], [182, 3, 1, "", "static_repeat"], [182, 3, 1, "", "static_reshape"], [182, 3, 1, "", "static_result_type"], [182, 3, 1, "", "static_round"], [182, 3, 1, "", "static_scaled_dot_product_attention"], [182, 3, 1, "", "static_scatter_flat"], [182, 3, 1, "", "static_scatter_nd"], [182, 3, 1, "", "static_seed"], [182, 3, 1, "", "static_set_default_device"], [182, 3, 1, "", "static_set_default_dtype"], [182, 3, 1, "", "static_set_default_float_dtype"], [182, 3, 1, "", "static_set_default_int_dtype"], [182, 3, 1, "", "static_set_min_base"], [182, 3, 1, "", "static_set_min_denominator"], [182, 3, 1, "", "static_set_queue_timeout"], [182, 3, 1, "", "static_set_split_factor"], [182, 3, 1, "", "static_set_tmp_dir"], [182, 3, 1, "", "static_set_with_grads"], [182, 3, 1, "", "static_shape"], [182, 3, 1, "", "static_shape_to_tuple"], [182, 3, 1, "", "static_shuffle"], [182, 3, 1, "", "static_sigmoid"], [182, 3, 1, "", "static_sign"], [182, 3, 1, "", "static_sin"], [182, 3, 1, "", "static_sinh"], [182, 3, 1, "", "static_slogdet"], [182, 3, 1, "", "static_softmax"], [182, 3, 1, "", "static_softplus"], [182, 3, 1, "", "static_solve"], [182, 3, 1, "", "static_split"], [182, 3, 1, "", "static_split_factor"], [182, 3, 1, "", "static_split_func_call"], [182, 3, 1, "", "static_sqrt"], [182, 3, 1, "", "static_square"], [182, 3, 1, "", "static_squeeze"], [182, 3, 1, "", "static_stable_divide"], [182, 3, 1, "", "static_stable_pow"], [182, 3, 1, "", "static_stack"], [182, 3, 1, "", "static_std"], [182, 3, 1, "", "static_stop_gradient"], [182, 3, 1, "", "static_sum"], [182, 3, 1, "", "static_supports_inplace"], [182, 3, 1, "", "static_svd"], [182, 3, 1, "", "static_svdvals"], [182, 3, 1, "", "static_swapaxes"], [182, 3, 1, "", "static_tensordot"], [182, 3, 1, "", "static_tile"], [182, 3, 1, "", "static_tmp_dir"], [182, 3, 1, "", "static_to_device"], [182, 3, 1, "", "static_to_list"], [182, 3, 1, "", "static_to_native_arrays_and_back"], [182, 3, 1, "", "static_to_numpy"], [182, 3, 1, "", "static_to_scalar"], [182, 3, 1, "", "static_total_mem_on_dev"], [182, 3, 1, "", "static_tpu_is_available"], [182, 3, 1, "", "static_trace"], [182, 3, 1, "", "static_tril"], [182, 3, 1, "", "static_triu"], [182, 3, 1, "", "static_trunc"], [182, 3, 1, "", "static_try_else_none"], [182, 3, 1, "", "static_type_promote_arrays"], [182, 3, 1, "", "static_unique_all"], [182, 3, 1, "", "static_unique_counts"], [182, 3, 1, "", "static_unique_inverse"], [182, 3, 1, "", "static_unique_values"], [182, 3, 1, "", "static_unset_default_device"], [182, 3, 1, "", "static_unset_default_dtype"], [182, 3, 1, "", "static_unset_default_float_dtype"], [182, 3, 1, "", "static_unset_default_int_dtype"], [182, 3, 1, "", "static_unset_with_grads"], [182, 3, 1, "", "static_unstack"], [182, 3, 1, "", "static_used_mem_on_dev"], [182, 3, 1, "", "static_valid_dtype"], [182, 3, 1, "", "static_value_is_nan"], [182, 3, 1, "", "static_var"], [182, 3, 1, "", "static_variable"], [182, 3, 1, "", "static_variable_data"], [182, 3, 1, "", "static_vecdot"], [182, 3, 1, "", "static_vector_norm"], [182, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [182, 3, 1, "", "static_where"], [182, 3, 1, "", "static_with_grads"], [182, 3, 1, "", "static_zero_pad"], [182, 3, 1, "", "static_zeros"], [182, 3, 1, "", "static_zeros_like"], [182, 3, 1, "", "stop_gradient"], [182, 3, 1, "", "supports_inplace"], [182, 3, 1, "", "svd"], [182, 3, 1, "", "svdvals"], [182, 3, 1, "", "tensordot"], [182, 3, 1, "", "tmp_dir"], [182, 3, 1, "", "to_native_arrays_and_back"], [182, 3, 1, "", "to_scalar"], [182, 3, 1, "", "total_mem_on_dev"], [182, 3, 1, "", "tpu_is_available"], [182, 3, 1, "", "trace"], [182, 3, 1, "", "tril"], [182, 3, 1, "", "triu"], [182, 3, 1, "", "try_else_none"], [182, 3, 1, "", "type_promote_arrays"], [182, 3, 1, "", "unique_all"], [182, 3, 1, "", "unique_counts"], [182, 3, 1, "", "unique_inverse"], [182, 3, 1, "", "unique_values"], [182, 3, 1, "", "unset_default_device"], [182, 3, 1, "", "unset_default_dtype"], [182, 3, 1, "", "unset_default_float_dtype"], [182, 3, 1, "", "unset_default_int_dtype"], [182, 3, 1, "", "unset_with_grads"], [182, 3, 1, "", "used_mem_on_dev"], [182, 3, 1, "", "valid_dtype"], [182, 3, 1, "", "value_is_nan"], [182, 3, 1, "", "variable"], [182, 3, 1, "", "variable_data"], [182, 3, 1, "", "vecdot"], [182, 3, 1, "", "vector_to_skew_symmetric_matrix"], [182, 3, 1, "", "where"], [182, 3, 1, "", "with_grads"], [182, 3, 1, "", "zeros"], [182, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[183, 3, 1, "", "__init__"], [183, 3, 1, "", "at_dev"], [183, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[184, 2, 1, "", "__add__"], [184, 2, 1, "", "__init__"], [184, 2, 1, "", "__radd__"], [518, 2, 1, "", "abs"], [524, 2, 1, "", "acos"], [588, 2, 1, "", "acosh"], [830, 2, 1, "", "adam_step"], [834, 2, 1, "", "adam_update"], [662, 2, 1, "", "add"], [191, 2, 1, "", "add_ivy_container_instance_methods"], [1116, 2, 1, "", "all"], [755, 2, 1, "", "all_equal"], [1120, 2, 1, "", "any"], [1072, 2, 1, "", "argsort"], [535, 2, 1, "", "asin"], [539, 2, 1, "", "asinh"], [198, 2, 1, "", "at_dev"], [199, 2, 1, "", "at_devs"], [549, 2, 1, "", "atan"], [547, 2, 1, "", "atan2"], [747, 2, 1, "", "atanh"], [947, 2, 1, "", "binary_cross_entropy"], [555, 2, 1, "", "bitwise_and"], [559, 2, 1, "", "bitwise_invert"], [563, 2, 1, "", "bitwise_left_shift"], [567, 2, 1, "", "bitwise_or"], [571, 2, 1, "", "bitwise_right_shift"], [575, 2, 1, "", "bitwise_xor"], [439, 2, 1, "", "can_cast"], [579, 2, 1, "", "ceil"], [963, 2, 1, "", "clip"], [766, 2, 1, "", "clip_vector_norm"], [968, 2, 1, "", "concat"], [972, 2, 1, "", "constant_pad"], [588, 2, 1, "", "cos"], [587, 2, 1, "", "cosh"], [952, 2, 1, "", "cross_entropy"], [614, 2, 1, "", "divide"], [1108, 2, 1, "", "einsum"], [622, 2, 1, "", "equal"], [600, 2, 1, "", "erf"], [662, 2, 1, "", "exp"], [976, 2, 1, "", "expand_dims"], [608, 2, 1, "", "expm1"], [980, 2, 1, "", "flip"], [614, 2, 1, "", "floor"], [616, 2, 1, "", "floor_divide"], [783, 2, 1, "", "gather_nd"], [839, 2, 1, "", "gradient_descent_update"], [622, 2, 1, "", "greater"], [624, 2, 1, "", "greater_equal"], [628, 2, 1, "", "isfinite"], [632, 2, 1, "", "isinf"], [636, 2, 1, "", "isnan"], [844, 2, 1, "", "lamb_update"], [848, 2, 1, "", "lars_update"], [1045, 2, 1, "", "layer_norm"], [640, 2, 1, "", "less"], [644, 2, 1, "", "less_equal"], [648, 2, 1, "", "log"], [652, 2, 1, "", "log10"], [656, 2, 1, "", "log1p"], [660, 2, 1, "", "log2"], [664, 2, 1, "", "logaddexp"], [668, 2, 1, "", "logical_and"], [672, 2, 1, "", "logical_not"], [676, 2, 1, "", "logical_or"], [680, 2, 1, "", "logical_xor"], [898, 2, 1, "", "matmul"], [1087, 2, 1, "", "max"], [1091, 2, 1, "", "mean"], [1095, 2, 1, "", "min"], [686, 2, 1, "", "multiply"], [691, 2, 1, "", "negative"], [695, 2, 1, "", "not_equal"], [852, 2, 1, "", "optimizer_update"], [984, 2, 1, "", "permute_dims"], [699, 2, 1, "", "positive"], [703, 2, 1, "", "pow"], [1099, 2, 1, "", "prod"], [1054, 2, 1, "", "random_uniform"], [707, 2, 1, "", "remainder"], [988, 2, 1, "", "repeat"], [992, 2, 1, "", "reshape"], [996, 2, 1, "", "roll"], [711, 2, 1, "", "round"], [715, 2, 1, "", "sign"], [719, 2, 1, "", "sin"], [723, 2, 1, "", "sinh"], [1077, 2, 1, "", "sort"], [957, 2, 1, "", "sparse_cross_entropy"], [727, 2, 1, "", "sqrt"], [731, 2, 1, "", "square"], [1002, 2, 1, "", "squeeze"], [1006, 2, 1, "", "stack"], [832, 2, 1, "", "static_adam_step"], [836, 2, 1, "", "static_adam_update"], [662, 2, 1, "", "static_add"], [757, 2, 1, "", "static_all_equal"], [1074, 2, 1, "", "static_argsort"], [949, 2, 1, "", "static_binary_cross_entropy"], [441, 2, 1, "", "static_can_cast"], [965, 2, 1, "", "static_clip"], [954, 2, 1, "", "static_cross_entropy"], [614, 2, 1, "", "static_divide"], [785, 2, 1, "", "static_gather_nd"], [841, 2, 1, "", "static_gradient_descent_update"], [846, 2, 1, "", "static_lamb_update"], [850, 2, 1, "", "static_lars_update"], [688, 2, 1, "", "static_multiply"], [854, 2, 1, "", "static_optimizer_update"], [1051, 2, 1, "", "static_randint"], [1056, 2, 1, "", "static_random_uniform"], [998, 2, 1, "", "static_roll"], [1079, 2, 1, "", "static_sort"], [959, 2, 1, "", "static_sparse_cross_entropy"], [734, 2, 1, "", "static_subtract"], [747, 2, 1, "", "static_tan"], [744, 2, 1, "", "static_tanh"], [1103, 2, 1, "", "std"], [736, 2, 1, "", "subtract"], [1107, 2, 1, "", "sum"], [1010, 2, 1, "", "swapaxes"], [747, 2, 1, "", "tan"], [746, 2, 1, "", "tanh"], [1014, 2, 1, "", "tile"], [750, 2, 1, "", "trunc"], [1111, 2, 1, "", "var"], [1018, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[312, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[314, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[314, 3, 1, "", "can_cast"], [314, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[316, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[318, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[318, 3, 1, "", "abs"], [318, 3, 1, "", "acos"], [318, 3, 1, "", "acosh"], [318, 3, 1, "", "add"], [318, 3, 1, "", "asin"], [318, 3, 1, "", "asinh"], [318, 3, 1, "", "atan"], [318, 3, 1, "", "atan2"], [318, 3, 1, "", "atanh"], [318, 3, 1, "", "bitwise_and"], [318, 3, 1, "", "bitwise_invert"], [318, 3, 1, "", "bitwise_left_shift"], [318, 3, 1, "", "bitwise_or"], [318, 3, 1, "", "bitwise_right_shift"], [318, 3, 1, "", "bitwise_xor"], [318, 3, 1, "", "ceil"], [318, 3, 1, "", "cos"], [318, 3, 1, "", "cosh"], [318, 3, 1, "", "divide"], [318, 3, 1, "", "equal"], [318, 3, 1, "", "erf"], [318, 3, 1, "", "exp"], [318, 3, 1, "", "expm1"], [318, 3, 1, "", "floor"], [318, 3, 1, "", "floor_divide"], [318, 3, 1, "", "greater"], [318, 3, 1, "", "greater_equal"], [318, 3, 1, "", "isfinite"], [318, 3, 1, "", "isinf"], [318, 3, 1, "", "isnan"], [318, 3, 1, "", "less"], [318, 3, 1, "", "less_equal"], [318, 3, 1, "", "log"], [318, 3, 1, "", "log10"], [318, 3, 1, "", "log1p"], [318, 3, 1, "", "log2"], [318, 3, 1, "", "logaddexp"], [318, 3, 1, "", "logical_and"], [318, 3, 1, "", "logical_not"], [318, 3, 1, "", "logical_or"], [318, 3, 1, "", "logical_xor"], [318, 3, 1, "", "multiply"], [318, 3, 1, "", "negative"], [318, 3, 1, "", "not_equal"], [318, 3, 1, "", "positive"], [318, 3, 1, "", "pow"], [318, 3, 1, "", "remainder"], [318, 3, 1, "", "round"], [318, 3, 1, "", "sign"], [318, 3, 1, "", "sin"], [318, 3, 1, "", "sinh"], [318, 3, 1, "", "sqrt"], [318, 3, 1, "", "square"], [318, 3, 1, "", "static_add"], [318, 3, 1, "", "static_divide"], [318, 3, 1, "", "static_multiply"], [318, 3, 1, "", "static_subtract"], [318, 3, 1, "", "static_tan"], [318, 3, 1, "", "static_tanh"], [318, 3, 1, "", "subtract"], [318, 3, 1, "", "tan"], [318, 3, 1, "", "tanh"], [318, 3, 1, "", "trunc"]], "ivy.container.general": [[320, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[320, 3, 1, "", "all_equal"], [320, 3, 1, "", "clip_vector_norm"], [320, 3, 1, "", "gather_nd"], [320, 3, 1, "", "static_all_equal"], [320, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[322, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[322, 3, 1, "", "adam_step"], [322, 3, 1, "", "adam_update"], [322, 3, 1, "", "gradient_descent_update"], [322, 3, 1, "", "lamb_update"], [322, 3, 1, "", "lars_update"], [322, 3, 1, "", "optimizer_update"], [322, 3, 1, "", "static_adam_step"], [322, 3, 1, "", "static_adam_update"], [322, 3, 1, "", "static_gradient_descent_update"], [322, 3, 1, "", "static_lamb_update"], [322, 3, 1, "", "static_lars_update"], [322, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[324, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[326, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[328, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[328, 3, 1, "", "matmul"]], "ivy.container.losses": [[330, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[330, 3, 1, "", "binary_cross_entropy"], [330, 3, 1, "", "cross_entropy"], [330, 3, 1, "", "sparse_cross_entropy"], [330, 3, 1, "", "static_binary_cross_entropy"], [330, 3, 1, "", "static_cross_entropy"], [330, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[332, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[332, 3, 1, "", "clip"], [332, 3, 1, "", "concat"], [332, 3, 1, "", "constant_pad"], [332, 3, 1, "", "expand_dims"], [332, 3, 1, "", "flip"], [332, 3, 1, "", "permute_dims"], [332, 3, 1, "", "repeat"], [332, 3, 1, "", "reshape"], [332, 3, 1, "", "roll"], [332, 3, 1, "", "squeeze"], [332, 3, 1, "", "stack"], [332, 3, 1, "", "static_clip"], [332, 3, 1, "", "static_roll"], [332, 3, 1, "", "swapaxes"], [332, 3, 1, "", "tile"], [332, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[334, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[334, 3, 1, "", "layer_norm"]], "ivy.container.random": [[336, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[336, 3, 1, "", "random_uniform"], [336, 3, 1, "", "static_randint"], [336, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[338, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[340, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[342, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[342, 3, 1, "", "argsort"], [342, 3, 1, "", "sort"], [342, 3, 1, "", "static_argsort"], [342, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[344, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[344, 3, 1, "", "einsum"], [344, 3, 1, "", "max"], [344, 3, 1, "", "mean"], [344, 3, 1, "", "min"], [344, 3, 1, "", "prod"], [344, 3, 1, "", "std"], [344, 3, 1, "", "sum"], [344, 3, 1, "", "var"]], "ivy.container.utility": [[346, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[346, 3, 1, "", "all"], [346, 3, 1, "", "any"]], "ivy.container.wrapping": [[348, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[389, 2, 1, "", "handle_nestable"], [390, 2, 1, "", "handle_out_argument"], [391, 2, 1, "", "infer_device"], [392, 2, 1, "", "infer_dtype"], [393, 2, 1, "", "inputs_to_ivy_arrays"], [394, 2, 1, "", "inputs_to_native_arrays"], [395, 2, 1, "", "outputs_to_ivy_arrays"], [396, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[398, 0, 0, "-", "activations"], [406, 0, 0, "-", "compilation"], [408, 0, 0, "-", "constants"], [409, 0, 0, "-", "creation"], [428, 0, 0, "-", "data_type"], [465, 0, 0, "-", "device"], [515, 0, 0, "-", "elementwise"], [752, 0, 0, "-", "general"], [826, 0, 0, "-", "gradients"], [861, 0, 0, "-", "layers"], [874, 0, 0, "-", "linear_algebra"], [944, 0, 0, "-", "losses"], [960, 0, 0, "-", "manipulation"], [1020, 0, 0, "-", "meta"], [1024, 0, 0, "-", "nest"], [1042, 0, 0, "-", "norms"], [1047, 0, 0, "-", "random"], [1059, 0, 0, "-", "searching"], [1064, 0, 0, "-", "set"], [1069, 0, 0, "-", "sorting"], [1080, 0, 0, "-", "statistical"], [1113, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[399, 2, 1, "", "gelu"], [400, 2, 1, "", "leaky_relu"], [401, 2, 1, "", "relu"], [402, 2, 1, "", "sigmoid"], [403, 2, 1, "", "softmax"], [404, 2, 1, "", "softplus"], [405, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[407, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[408, 5, 1, "", "e"], [408, 5, 1, "", "inf"], [408, 5, 1, "", "nan"], [408, 5, 1, "", "newaxis"], [408, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[410, 2, 1, "", "arange"], [409, 2, 1, "", "array"], [411, 2, 1, "", "asarray"], [412, 2, 1, "", "empty"], [413, 2, 1, "", "empty_like"], [414, 2, 1, "", "eye"], [415, 2, 1, "", "from_dlpack"], [416, 2, 1, "", "full"], [417, 2, 1, "", "full_like"], [418, 2, 1, "", "linspace"], [419, 2, 1, "", "logspace"], [420, 2, 1, "", "meshgrid"], [421, 2, 1, "", "native_array"], [422, 2, 1, "", "ones"], [423, 2, 1, "", "ones_like"], [424, 2, 1, "", "tril"], [425, 2, 1, "", "triu"], [426, 2, 1, "", "zeros"], [427, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[428, 1, 1, "", "DefaultDtype"], [428, 1, 1, "", "DefaultFloatDtype"], [428, 1, 1, "", "DefaultIntDtype"], [432, 2, 1, "", "as_ivy_dtype"], [433, 2, 1, "", "as_native_dtype"], [434, 2, 1, "", "astype"], [435, 2, 1, "", "broadcast_arrays"], [436, 2, 1, "", "broadcast_to"], [440, 2, 1, "", "can_cast"], [442, 2, 1, "", "closest_valid_dtype"], [443, 2, 1, "", "default_dtype"], [444, 2, 1, "", "default_float_dtype"], [445, 2, 1, "", "default_int_dtype"], [446, 2, 1, "", "dtype"], [447, 2, 1, "", "dtype_bits"], [448, 2, 1, "", "finfo"], [449, 2, 1, "", "function_supported_dtypes"], [450, 2, 1, "", "function_unsupported_dtypes"], [451, 2, 1, "", "iinfo"], [452, 2, 1, "", "invalid_dtype"], [453, 2, 1, "", "is_float_dtype"], [454, 2, 1, "", "is_int_dtype"], [455, 2, 1, "", "promote_types"], [456, 2, 1, "", "result_type"], [457, 2, 1, "", "set_default_dtype"], [458, 2, 1, "", "set_default_float_dtype"], [459, 2, 1, "", "set_default_int_dtype"], [460, 2, 1, "", "type_promote_arrays"], [461, 2, 1, "", "unset_default_dtype"], [462, 2, 1, "", "unset_default_float_dtype"], [463, 2, 1, "", "unset_default_int_dtype"], [464, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[428, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[428, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[428, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[465, 1, 1, "", "DefaultDevice"], [467, 1, 1, "", "DevClonedItem"], [468, 1, 1, "", "DevClonedIter"], [469, 1, 1, "", "DevClonedNest"], [470, 1, 1, "", "DevDistItem"], [471, 1, 1, "", "DevDistIter"], [472, 1, 1, "", "DevDistNest"], [465, 1, 1, "", "DevManager"], [474, 1, 1, "", "DevMapper"], [475, 1, 1, "", "DevMapperMultiProc"], [465, 1, 1, "", "MultiDev"], [477, 1, 1, "", "MultiDevItem"], [478, 1, 1, "", "MultiDevIter"], [479, 1, 1, "", "MultiDevNest"], [480, 1, 1, "", "Profiler"], [481, 2, 1, "", "as_ivy_dev"], [482, 2, 1, "", "as_native_dev"], [483, 2, 1, "", "clear_mem_on_dev"], [484, 2, 1, "", "default_device"], [485, 2, 1, "", "dev"], [486, 2, 1, "", "dev_clone"], [487, 2, 1, "", "dev_clone_array"], [488, 2, 1, "", "dev_clone_iter"], [489, 2, 1, "", "dev_clone_nest"], [490, 2, 1, "", "dev_dist"], [491, 2, 1, "", "dev_dist_array"], [492, 2, 1, "", "dev_dist_iter"], [493, 2, 1, "", "dev_dist_nest"], [494, 2, 1, "", "dev_unify"], [495, 2, 1, "", "dev_unify_array"], [496, 2, 1, "", "dev_unify_iter"], [497, 2, 1, "", "dev_unify_nest"], [498, 2, 1, "", "dev_util"], [499, 2, 1, "", "get_all_ivy_arrays_on_dev"], [500, 2, 1, "", "gpu_is_available"], [501, 2, 1, "", "num_cpu_cores"], [502, 2, 1, "", "num_gpus"], [503, 2, 1, "", "num_ivy_arrays_on_dev"], [504, 2, 1, "", "percent_used_mem_on_dev"], [505, 2, 1, "", "print_all_ivy_arrays_on_dev"], [506, 2, 1, "", "set_default_device"], [507, 2, 1, "", "set_split_factor"], [508, 2, 1, "", "split_factor"], [509, 2, 1, "", "split_func_call"], [510, 2, 1, "", "to_device"], [511, 2, 1, "", "total_mem_on_dev"], [512, 2, 1, "", "tpu_is_available"], [513, 2, 1, "", "unset_default_device"], [514, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[465, 3, 1, "", "__enter__"], [465, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[465, 3, 1, "", "__init__"], [465, 3, 1, "", "da_tune_step"], [465, 4, 1, "", "dim_size"], [465, 3, 1, "", "ds_tune_step"], [465, 3, 1, "", "map"], [465, 3, 1, "", "repeated_config_check"], [465, 4, 1, "", "tune_step"], [465, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[474, 3, 1, "", "__init__"], [474, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[475, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[465, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[477, 3, 1, "", "__init__"], [477, 3, 1, "", "items"], [477, 3, 1, "", "keys"], [477, 4, 1, "", "shape"], [477, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[478, 3, 1, "", "__init__"], [478, 3, 1, "", "at_dev"], [478, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[479, 3, 1, "", "__init__"], [479, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[480, 3, 1, "", "__init__"], [480, 3, 1, "", "start"], [480, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[519, 2, 1, "", "abs"], [520, 2, 1, "", "acos"], [588, 2, 1, "", "acosh"], [528, 2, 1, "", "add"], [536, 2, 1, "", "asin"], [540, 2, 1, "", "asinh"], [541, 2, 1, "", "atan"], [548, 2, 1, "", "atan2"], [747, 2, 1, "", "atanh"], [556, 2, 1, "", "bitwise_and"], [560, 2, 1, "", "bitwise_invert"], [564, 2, 1, "", "bitwise_left_shift"], [568, 2, 1, "", "bitwise_or"], [572, 2, 1, "", "bitwise_right_shift"], [576, 2, 1, "", "bitwise_xor"], [580, 2, 1, "", "ceil"], [581, 2, 1, "", "cos"], [585, 2, 1, "", "cosh"], [589, 2, 1, "", "divide"], [594, 2, 1, "", "equal"], [601, 2, 1, "", "erf"], [602, 2, 1, "", "exp"], [609, 2, 1, "", "expm1"], [610, 2, 1, "", "floor"], [617, 2, 1, "", "floor_divide"], [618, 2, 1, "", "greater"], [625, 2, 1, "", "greater_equal"], [629, 2, 1, "", "isfinite"], [633, 2, 1, "", "isinf"], [637, 2, 1, "", "isnan"], [641, 2, 1, "", "less"], [645, 2, 1, "", "less_equal"], [649, 2, 1, "", "log"], [653, 2, 1, "", "log10"], [657, 2, 1, "", "log1p"], [661, 2, 1, "", "log2"], [665, 2, 1, "", "logaddexp"], [669, 2, 1, "", "logical_and"], [673, 2, 1, "", "logical_not"], [677, 2, 1, "", "logical_or"], [681, 2, 1, "", "logical_xor"], [682, 2, 1, "", "maximum"], [683, 2, 1, "", "minimum"], [687, 2, 1, "", "multiply"], [692, 2, 1, "", "negative"], [696, 2, 1, "", "not_equal"], [700, 2, 1, "", "positive"], [704, 2, 1, "", "pow"], [708, 2, 1, "", "remainder"], [712, 2, 1, "", "round"], [716, 2, 1, "", "sign"], [720, 2, 1, "", "sin"], [724, 2, 1, "", "sinh"], [728, 2, 1, "", "sqrt"], [732, 2, 1, "", "square"], [737, 2, 1, "", "subtract"], [738, 2, 1, "", "tan"], [743, 2, 1, "", "tanh"], [751, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[756, 2, 1, "", "all_equal"], [758, 2, 1, "", "arg_info"], [759, 2, 1, "", "arg_names"], [760, 2, 1, "", "array_equal"], [761, 2, 1, "", "arrays_equal"], [762, 2, 1, "", "assert_supports_inplace"], [763, 2, 1, "", "cache_fn"], [764, 2, 1, "", "clip_matrix_norm"], [767, 2, 1, "", "clip_vector_norm"], [768, 2, 1, "", "container_types"], [769, 2, 1, "", "copy_array"], [770, 2, 1, "", "cumprod"], [771, 2, 1, "", "cumsum"], [772, 2, 1, "", "current_backend_str"], [773, 2, 1, "", "default"], [774, 2, 1, "", "einops_rearrange"], [775, 2, 1, "", "einops_reduce"], [776, 2, 1, "", "einops_repeat"], [777, 2, 1, "", "exists"], [778, 2, 1, "", "floormod"], [779, 2, 1, "", "fourier_encode"], [780, 2, 1, "", "gather"], [784, 2, 1, "", "gather_nd"], [786, 2, 1, "", "get_all_arrays_in_memory"], [787, 2, 1, "", "get_min_base"], [788, 2, 1, "", "get_min_denominator"], [789, 2, 1, "", "get_num_dims"], [790, 2, 1, "", "get_referrers_recursive"], [791, 2, 1, "", "has_nans"], [792, 2, 1, "", "indices_where"], [793, 2, 1, "", "inplace_arrays_supported"], [794, 2, 1, "", "inplace_decrement"], [795, 2, 1, "", "inplace_increment"], [796, 2, 1, "", "inplace_update"], [797, 2, 1, "", "inplace_variables_supported"], [798, 2, 1, "", "is_array"], [799, 2, 1, "", "is_ivy_array"], [800, 2, 1, "", "is_ivy_container"], [801, 2, 1, "", "is_native_array"], [802, 2, 1, "", "match_kwargs"], [803, 2, 1, "", "multiprocessing"], [804, 2, 1, "", "num_arrays_in_memory"], [805, 2, 1, "", "one_hot"], [806, 2, 1, "", "print_all_arrays_in_memory"], [807, 2, 1, "", "queue_timeout"], [808, 2, 1, "", "scatter_flat"], [809, 2, 1, "", "scatter_nd"], [810, 2, 1, "", "set_min_base"], [811, 2, 1, "", "set_min_denominator"], [812, 2, 1, "", "set_queue_timeout"], [813, 2, 1, "", "set_tmp_dir"], [814, 2, 1, "", "shape"], [815, 2, 1, "", "shape_to_tuple"], [816, 2, 1, "", "stable_divide"], [817, 2, 1, "", "stable_pow"], [818, 2, 1, "", "supports_inplace"], [819, 2, 1, "", "tmp_dir"], [820, 2, 1, "", "to_list"], [821, 2, 1, "", "to_numpy"], [822, 2, 1, "", "to_scalar"], [823, 2, 1, "", "try_else_none"], [824, 2, 1, "", "unstack"], [825, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[826, 1, 1, "", "GradientTracking"], [831, 2, 1, "", "adam_step"], [835, 2, 1, "", "adam_update"], [837, 2, 1, "", "execute_with_gradients"], [840, 2, 1, "", "gradient_descent_update"], [842, 2, 1, "", "is_variable"], [845, 2, 1, "", "lamb_update"], [849, 2, 1, "", "lars_update"], [853, 2, 1, "", "optimizer_update"], [855, 2, 1, "", "set_with_grads"], [856, 2, 1, "", "stop_gradient"], [857, 2, 1, "", "unset_with_grads"], [858, 2, 1, "", "variable"], [859, 2, 1, "", "variable_data"], [860, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[826, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[862, 2, 1, "", "conv1d"], [863, 2, 1, "", "conv1d_transpose"], [864, 2, 1, "", "conv2d"], [865, 2, 1, "", "conv2d_transpose"], [866, 2, 1, "", "conv3d"], [867, 2, 1, "", "conv3d_transpose"], [868, 2, 1, "", "depthwise_conv2d"], [869, 2, 1, "", "dropout"], [870, 2, 1, "", "linear"], [871, 2, 1, "", "lstm_update"], [872, 2, 1, "", "multi_head_attention"], [873, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[877, 2, 1, "", "cholesky"], [880, 2, 1, "", "cross"], [881, 2, 1, "", "det"], [886, 2, 1, "", "diagonal"], [889, 2, 1, "", "eigh"], [892, 2, 1, "", "eigvalsh"], [893, 2, 1, "", "inv"], [899, 2, 1, "", "matmul"], [902, 2, 1, "", "matrix_norm"], [903, 2, 1, "", "matrix_power"], [906, 2, 1, "", "matrix_rank"], [909, 2, 1, "", "matrix_transpose"], [912, 2, 1, "", "outer"], [915, 2, 1, "", "pinv"], [918, 2, 1, "", "qr"], [919, 2, 1, "", "slogdet"], [922, 2, 1, "", "solve"], [923, 2, 1, "", "svd"], [928, 2, 1, "", "svdvals"], [931, 2, 1, "", "tensordot"], [934, 2, 1, "", "trace"], [937, 2, 1, "", "vecdot"], [940, 2, 1, "", "vector_norm"], [943, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[948, 2, 1, "", "binary_cross_entropy"], [953, 2, 1, "", "cross_entropy"], [958, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[964, 2, 1, "", "clip"], [969, 2, 1, "", "concat"], [973, 2, 1, "", "constant_pad"], [977, 2, 1, "", "expand_dims"], [981, 2, 1, "", "flip"], [985, 2, 1, "", "permute_dims"], [989, 2, 1, "", "repeat"], [993, 2, 1, "", "reshape"], [997, 2, 1, "", "roll"], [999, 2, 1, "", "split"], [1003, 2, 1, "", "squeeze"], [1007, 2, 1, "", "stack"], [1011, 2, 1, "", "swapaxes"], [1015, 2, 1, "", "tile"], [1019, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[1021, 2, 1, "", "fomaml_step"], [1022, 2, 1, "", "maml_step"], [1023, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[1025, 2, 1, "", "all_nested_indices"], [1026, 2, 1, "", "copy_nest"], [1027, 2, 1, "", "index_nest"], [1028, 2, 1, "", "insert_into_nest_at_index"], [1029, 2, 1, "", "insert_into_nest_at_indices"], [1030, 2, 1, "", "map"], [1031, 2, 1, "", "map_nest_at_index"], [1032, 2, 1, "", "map_nest_at_indices"], [1033, 2, 1, "", "multi_index_nest"], [1034, 2, 1, "", "nested_any"], [1035, 2, 1, "", "nested_indices_where"], [1036, 2, 1, "", "nested_map"], [1037, 2, 1, "", "nested_multi_map"], [1038, 2, 1, "", "prune_nest_at_index"], [1039, 2, 1, "", "prune_nest_at_indices"], [1040, 2, 1, "", "set_nest_at_index"], [1041, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[1046, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[1048, 2, 1, "", "multinomial"], [1050, 2, 1, "", "randint"], [1052, 2, 1, "", "random_normal"], [1055, 2, 1, "", "random_uniform"], [1057, 2, 1, "", "seed"], [1058, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[1060, 2, 1, "", "argmax"], [1061, 2, 1, "", "argmin"], [1062, 2, 1, "", "nonzero"], [1063, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[1065, 2, 1, "", "unique_all"], [1066, 2, 1, "", "unique_counts"], [1067, 2, 1, "", "unique_inverse"], [1068, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[1073, 2, 1, "", "argsort"], [1078, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[1108, 2, 1, "", "einsum"], [1088, 2, 1, "", "max"], [1092, 2, 1, "", "mean"], [1096, 2, 1, "", "min"], [1100, 2, 1, "", "prod"], [1104, 2, 1, "", "std"], [1105, 2, 1, "", "sum"], [1112, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[1117, 2, 1, "", "all"], [1121, 2, 1, "", "any"]], "ivy.inspection": [[1126, 2, 1, "", "add_array_specs"], [1127, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[1129, 0, 0, "-", "activations"], [1132, 0, 0, "-", "converters"], [1134, 0, 0, "-", "initializers"], [1143, 0, 0, "-", "layers"], [1155, 0, 0, "-", "module"], [1157, 0, 0, "-", "norms"], [1159, 0, 0, "-", "optimizers"], [1165, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1130, 1, 1, "", "GEGLU"], [1131, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1130, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1131, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[1133, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1134, 1, 1, "", "Constant"], [1136, 1, 1, "", "FirstLayerSiren"], [1137, 1, 1, "", "GlorotUniform"], [1134, 1, 1, "", "KaimingNormal"], [1139, 1, 1, "", "Ones"], [1140, 1, 1, "", "Siren"], [1134, 1, 1, "", "Uniform"], [1142, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1134, 3, 1, "", "__init__"], [1134, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1136, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1137, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1134, 3, 1, "", "__init__"], [1134, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1139, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1140, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1134, 3, 1, "", "__init__"], [1134, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1142, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[1144, 1, 1, "", "Conv1D"], [1145, 1, 1, "", "Conv1DTranspose"], [1146, 1, 1, "", "Conv2D"], [1147, 1, 1, "", "Conv2DTranspose"], [1148, 1, 1, "", "Conv3D"], [1149, 1, 1, "", "Conv3DTranspose"], [1150, 1, 1, "", "DepthwiseConv2D"], [1151, 1, 1, "", "Dropout"], [1152, 1, 1, "", "LSTM"], [1153, 1, 1, "", "Linear"], [1154, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1144, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1145, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1146, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1147, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1148, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1149, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1150, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1151, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1152, 3, 1, "", "__init__"], [1152, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1153, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1154, 3, 1, "", "__init__"]], "ivy.stateful.module": [[1156, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[1156, 3, 1, "", "__init__"], [1156, 3, 1, "", "build"], [1156, 4, 1, "", "build_mode"], [1156, 4, 1, "", "built"], [1156, 3, 1, "", "check_submod_rets"], [1156, 3, 1, "", "get_mod_key"], [1156, 3, 1, "", "mod_depth"], [1156, 3, 1, "", "mod_height"], [1156, 3, 1, "", "mod_with_top_mod_key_chain"], [1156, 3, 1, "", "save_weights"], [1156, 3, 1, "", "show_mod_in_top_mod"], [1156, 3, 1, "", "show_structure"], [1156, 3, 1, "", "show_v_in_top_v"], [1156, 3, 1, "", "sub_mods"], [1156, 3, 1, "", "track_submod_call_order"], [1156, 3, 1, "", "track_submod_rets"], [1156, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1158, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1158, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1160, 1, 1, "", "Adam"], [1161, 1, 1, "", "LAMB"], [1162, 1, 1, "", "LARS"], [1163, 1, 1, "", "Optimizer"], [1164, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1160, 3, 1, "", "__init__"], [1160, 3, 1, "", "set_state"], [1160, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1161, 3, 1, "", "__init__"], [1161, 3, 1, "", "set_state"], [1161, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1162, 3, 1, "", "__init__"], [1162, 3, 1, "", "set_state"], [1162, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1163, 3, 1, "", "__init__"], [1163, 3, 1, "", "set_state"], [1163, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1164, 3, 1, "", "__init__"], [1164, 3, 1, "", "set_state"], [1164, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1166, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1166, 3, 1, "", "__init__"]], "ivy.verbosity": [[1169, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 177, 398, 1129], "arraywithactiv": 1, "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 175, 358, 363, 368, 372, 438, 517, 521, 525, 529, 534, 538, 542, 546, 550, 554, 558, 562, 566, 570, 574, 578, 582, 586, 590, 595, 599, 603, 607, 611, 615, 619, 623, 627, 631, 635, 639, 643, 647, 651, 655, 659, 663, 667, 671, 675, 679, 685, 690, 694, 698, 702, 706, 710, 714, 718, 722, 726, 730, 735, 740, 745, 749, 754, 782, 829, 876, 879, 882, 885, 888, 891, 894, 897, 901, 905, 908, 911, 914, 917, 921, 924, 927, 930, 933, 936, 939, 942, 946, 951, 956, 962, 967, 971, 975, 979, 983, 987, 991, 995, 1001, 1005, 1009, 1013, 1017, 1044, 1071, 1076, 1082, 1086, 1090, 1094, 1098, 1102, 1106, 1110, 1115, 1119], "method": [2, 184, 364, 372, 373], "ab": [3, 185, 516, 517, 518, 519], "aco": [4, 186, 520, 521, 522, 523], "acosh": [5, 187, 524, 525, 526, 527], "adam_step": [6, 188, 828, 829, 830, 831], "add": [7, 190, 357, 528, 529, 530, 531], "add_ivy_array_instance_method": [8, 159], "all": [9, 192, 1114, 1115, 1116, 1117], "all_equ": [10, 193, 753, 754, 755, 756], "ani": [11, 194, 1118, 1119, 1120, 1121], "argsort": [12, 195, 1070, 1071, 1072, 1073], "asin": [13, 196, 533, 534, 535, 536], "asinh": [14, 197, 537, 538, 539, 540], "atan": [15, 200, 541, 542, 543, 544], "atan2": [16, 201, 545, 546, 547, 548], "atanh": [17, 202, 549, 550, 551, 552], "binary_cross_entropi": [18, 203, 945, 946, 947, 948], "bitwise_and": [19, 204, 553, 554, 555, 556], "bitwise_invert": [20, 205, 557, 558, 559, 560], "bitwise_left_shift": [21, 206, 561, 562, 563, 564], "bitwise_or": [22, 207, 565, 566, 567, 568], "bitwise_right_shift": [23, 208, 569, 570, 571, 572], "bitwise_xor": [24, 209, 573, 574, 575, 576], "can_cast": [25, 210, 437, 438, 439, 440], "ceil": [26, 211, 577, 578, 579, 580], "choleski": [27, 875, 876, 877], "clip": [28, 212, 961, 962, 963, 964], "concat": [29, 214, 966, 967, 968, 969], "constant_pad": [30, 215, 970, 971, 972, 973], "co": [31, 216, 581, 582, 583, 584], "cosh": [32, 217, 585, 586, 587, 588], "cross": [33, 878, 879, 880], "cross_entropi": [34, 218, 950, 951, 952, 953], "det": [35, 881, 882, 883], "diagon": [36, 884, 885, 886], "divid": [37, 219, 589, 590, 591, 592], "eigh": [38, 887, 888, 889], "eigvalsh": [39, 890, 891, 892], "einsum": [40, 220, 1081, 1082, 1083, 1084], "equal": [41, 221, 594, 595, 596, 597], "erf": [42, 222, 598, 599, 600, 601], "exp": [43, 223, 602, 603, 604, 605], "expand_dim": [44, 224, 974, 975, 976, 977], "expm1": [45, 225, 606, 607, 608, 609], "flip": [46, 226, 978, 979, 980, 981], "floor": [47, 227, 610, 611, 612, 613], "floor_divid": [48, 228, 614, 615, 616, 617], "gather_nd": [49, 229, 781, 782, 783, 784], "greater": [50, 231, 618, 619, 620, 621], "greater_equ": [51, 232, 622, 623, 624, 625], "inv": [52, 893, 894, 895], "isfinit": [53, 233, 626, 627, 628, 629], "isinf": [54, 234, 630, 631, 632, 633], "isnan": [55, 235, 634, 635, 636, 637], "layer_norm": [56, 238, 1043, 1044, 1045, 1046], "less": [57, 239, 638, 639, 640, 641], "less_equ": [58, 240, 642, 643, 644, 645], "log": [59, 241, 646, 647, 648, 649], "log10": [60, 242, 650, 651, 652, 653], "log1p": [61, 243, 654, 655, 656, 657], "log2": [62, 244, 658, 659, 660, 661], "logaddexp": [63, 245, 662, 663, 664, 665], "logical_and": [64, 246, 666, 667, 668, 669], "logical_not": [65, 247, 670, 671, 672, 673], "logical_or": [66, 248, 674, 675, 676, 677], "logical_xor": [67, 249, 678, 679, 680, 681], "matmul": [68, 250, 896, 897, 898, 899], "matrix_norm": [69, 900, 901, 902], "matrix_rank": [70, 904, 905, 906], "matrix_transpos": [71, 907, 908, 909], "max": [72, 251, 1085, 1086, 1087, 1088], "mean": [73, 252, 1089, 1090, 1091, 1092], "min": [74, 253, 1093, 1094, 1095, 1096], "multipli": [75, 254, 684, 685, 686, 687], "neg": [76, 255, 689, 690, 691, 692], "not_equ": [77, 256, 693, 694, 695, 696], "outer": [78, 910, 911, 912], "permute_dim": [79, 258, 982, 983, 984, 985], "pinv": [80, 913, 914, 915], "posit": [81, 259, 697, 698, 699, 700], "pow": [82, 260, 701, 702, 703, 704], "prod": [83, 261, 1097, 1098, 1099, 1100], "qr": [84, 916, 917, 918], "remaind": [85, 263, 705, 706, 707, 708], "repeat": [86, 264, 986, 987, 988, 989], "reshap": [87, 265, 990, 991, 992, 993], "roll": [88, 266, 357, 994, 995, 996, 997], "round": [89, 267, 709, 710, 711, 712], "sign": [90, 268, 713, 714, 715, 716], "sin": [91, 269, 717, 718, 719, 720], "sinh": [92, 270, 721, 722, 723, 724], "solv": [93, 920, 921, 922], "sort": [94, 152, 271, 341, 1069, 1075, 1076, 1077, 1078], "sparse_cross_entropi": [95, 272, 955, 956, 957, 958], "sqrt": [96, 273, 725, 726, 727, 728], "squar": [97, 274, 729, 730, 731, 732], "squeez": [98, 275, 1000, 1001, 1002, 1003], "stack": [99, 276, 1004, 1005, 1006, 1007], "std": [100, 301, 1101, 1102, 1103, 1104], "subtract": [101, 302, 733, 735, 736, 737], "sum": [102, 303, 1105, 1106, 1107, 1108], "svd": [103, 923, 924, 925], "svdval": [104, 926, 927, 928], "swapax": [105, 304, 1008, 1009, 1010, 1011], "tan": [106, 305, 357, 738, 740, 741, 742], "tanh": [107, 306, 405, 743, 745, 746, 747], "tensordot": [108, 929, 930, 931], "tile": [109, 307, 1012, 1013, 1014, 1015], "trace": [110, 932, 933, 934], "trunc": [111, 308, 748, 749, 750, 751], "var": [112, 309, 1109, 1110, 1111, 1112], "vecdot": [113, 935, 936, 937], "vector_norm": [114, 938, 939, 940], "vector_to_skew_symmetric_matrix": [115, 941, 942, 943], "zero_pad": [116, 310, 1016, 1017, 1018, 1019], "convers": 117, "args_to_ivi": 118, "args_to_n": 119, "to_ivi": 120, "to_n": 121, "creation": [122, 311, 409], "arraywithcr": 123, "data": [124, 313, 359, 365, 373, 387, 428, 1064, 1065, 1066, 1068], "type": [124, 313, 360, 365, 387, 428], "arraywithdatatyp": 125, "devic": [126, 315, 366, 368, 465], "arraywithdevic": 127, "elementwis": [128, 317, 515], "arraywithelementwis": 129, "gener": [130, 319, 359, 752], "arraywithgener": 131, "gradient": [132, 321, 826], "arraywithgradi": 133, "imag": [134, 323], "arraywithimag": 135, "layer": [136, 325, 861, 1143], "arraywithlay": 137, "linear": [138, 327, 870, 874, 1153], "algebra": [138, 327, 874], "arraywithlinearalgebra": 139, "loss": [140, 329, 944], "arraywithloss": 141, "manipul": [142, 331, 960], "arraywithmanipul": 143, "norm": [144, 333, 1042, 1157], "arraywithnorm": 145, "random": [146, 335, 1047], "arraywithrandom": 147, "search": [148, 337, 1059], "arraywithsearch": 149, "set": [150, 339, 350, 361, 1064], "arraywithset": 151, "arraywithsort": 153, "statist": [154, 343, 1080], "arraywithstatist": 155, "util": [156, 345, 1113], "arraywithutil": 157, "wrap": [158, 347, 362], "backend": [160, 355, 361, 370, 387], "handler": [160, 370], "choose_random_backend": 162, "clear_backend_stack": 163, "current_backend": 164, "get_backend": 165, "set_backend": 166, "try_import_ivy_jax": 167, "try_import_ivy_mxnet": 168, "try_import_ivy_numpi": 169, "try_import_ivy_tf": 170, "try_import_ivy_torch": 171, "unset_backend": 172, "background": [173, 1122], "ml": 174, "explos": 174, "standard": 175, "skeptic": 175, "complimentari": 175, "vs": [175, 387], "competit": 175, "do": 175, "work": [175, 353], "The": [175, 351, 372, 387], "api": [175, 352, 355, 358, 364, 370, 372, 374, 375], "why": 176, "unifi": [176, 372], "No": [176, 350], "more": 176, "re": 176, "implement": 176, "infinit": 176, "shelf": 176, "life": 176, "containerwithactiv": 178, "base": 179, "containerbas": 180, "contain": [181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 364, 373, 439, 441, 518, 522, 526, 530, 532, 535, 539, 543, 547, 551, 555, 559, 563, 567, 571, 575, 579, 583, 587, 591, 593, 596, 600, 604, 608, 612, 616, 620, 624, 628, 632, 636, 640, 644, 648, 652, 656, 660, 664, 668, 672, 676, 680, 686, 688, 691, 695, 699, 703, 707, 711, 715, 719, 723, 727, 731, 734, 736, 739, 741, 744, 746, 750, 755, 757, 766, 783, 785, 830, 832, 834, 836, 839, 841, 844, 846, 848, 850, 852, 854, 898, 947, 949, 952, 954, 957, 959, 963, 965, 968, 972, 976, 980, 984, 988, 992, 996, 998, 1002, 1006, 1010, 1014, 1018, 1045, 1051, 1054, 1056, 1072, 1074, 1077, 1079, 1083, 1087, 1091, 1095, 1099, 1103, 1107, 1111, 1116, 1120], "multidevcontain": 183, "adam_upd": [189, 833, 834, 835], "add_ivy_container_instance_method": [191, 348], "at_dev": [198, 199], "clip_vector_norm": [213, 765, 766, 767], "gradient_descent_upd": [230, 838, 839, 840], "lamb_upd": [236, 843, 844, 845], "lars_upd": [237, 847, 848, 849], "optimizer_upd": [257, 851, 852, 853], "random_uniform": [262, 1053, 1054, 1055], "static_adam_step": [277, 832], "static_adam_upd": [278, 836], "static_add": [279, 532], "static_all_equ": [280, 757], "static_argsort": [281, 1074], "static_binary_cross_entropi": [282, 949], "static_can_cast": [283, 441], "static_clip": [284, 965], "static_cross_entropi": [285, 954], "static_divid": [286, 593], "static_gather_nd": [287, 785], "static_gradient_descent_upd": [288, 841], "static_lamb_upd": [289, 846], "static_lars_upd": [290, 850], "static_multipli": [291, 688], "static_optimizer_upd": [292, 854], "static_randint": [293, 1051], "static_random_uniform": [294, 1056], "static_rol": [295, 998], "static_sort": [296, 1079], "static_sparse_cross_entropi": [297, 959], "static_subtract": [298, 734], "static_tan": [299, 739], "static_tanh": [300, 744], "containerwithcr": 312, "containerwithdatatyp": 314, "containerwithdevic": 316, "containerwithelementwis": 318, "containerwithgener": 320, "containerwithgradi": 322, "containerwithimag": 324, "containerwithlay": 326, "containerwithlinearalgebra": 328, "containerwithloss": 330, "containerwithmanipul": 332, "containerwithnorm": 334, "containerwithrandom": 336, "containerwithsearch": 338, "containerwithset": 340, "containerwithsort": 342, "containerwithstatist": 344, "containerwithutil": 346, "contribut": [349, 1122], "up": 350, "clone": 350, "ivi": [350, 355, 357, 359, 363, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 438, 439, 440, 441, 517, 518, 519, 521, 522, 523, 525, 526, 527, 529, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 543, 544, 546, 547, 548, 550, 551, 552, 554, 555, 556, 558, 559, 560, 562, 563, 564, 566, 567, 568, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 615, 616, 617, 619, 620, 621, 623, 624, 625, 627, 628, 629, 631, 632, 633, 635, 636, 637, 639, 640, 641, 643, 644, 645, 647, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 665, 667, 668, 669, 671, 672, 673, 675, 676, 677, 679, 680, 681, 685, 686, 687, 688, 690, 691, 692, 694, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 723, 724, 726, 727, 728, 730, 731, 732, 734, 735, 736, 737, 739, 740, 741, 742, 744, 745, 746, 747, 749, 750, 751, 754, 755, 756, 757, 766, 767, 782, 783, 784, 785, 829, 830, 831, 832, 834, 835, 836, 839, 840, 841, 844, 845, 846, 848, 849, 850, 852, 853, 854, 876, 877, 879, 880, 882, 883, 885, 886, 888, 889, 891, 892, 894, 895, 897, 898, 899, 901, 902, 905, 906, 908, 909, 911, 912, 914, 915, 917, 918, 921, 922, 924, 925, 927, 928, 930, 931, 933, 934, 936, 937, 939, 940, 942, 943, 946, 947, 948, 949, 951, 952, 953, 954, 956, 957, 958, 959, 962, 963, 964, 965, 967, 968, 969, 971, 972, 973, 975, 976, 977, 979, 980, 981, 983, 984, 985, 987, 988, 989, 991, 992, 993, 995, 996, 997, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1044, 1045, 1046, 1050, 1051, 1054, 1055, 1056, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1082, 1083, 1084, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103, 1104, 1106, 1107, 1108, 1110, 1111, 1112, 1115, 1116, 1117, 1119, 1120, 1121], "pycharm": 350, "virtual": 350, "environ": 350, "docker": [350, 351, 353], "us": [350, 353, 373], "miniconda": [350, 353], "venv": [350, 353], "interpret": 350, "window": 350, "maco": 350, "ubuntu": 350, "github": 350, "codespac": 350, "pre": 350, "commit": [350, 351], "basic": 351, "get": 351, "help": 351, "todo": 351, "list": 351, "issu": 351, "manag": 351, "your": 351, "fork": 351, "who": 351, "To": 351, "ask": 351, "With": 351, "command": 351, "line": 351, "browser": 351, "pull": 351, "request": 351, "small": 351, "often": 351, "run": 351, "test": [351, 358, 359], "local": 351, "open": 352, "task": 352, "function": [352, 360, 362, 364, 365, 366, 368, 370, 375, 387], "format": 352, "frontend": [352, 375], "build": [353, 370], "doc": 353, "dockerless": 353, "document": 353, "pipelin": [353, 387], "make_doc": 353, "sh": 353, "entrypoint": 353, "_make_doc": 353, "generate_src_rst_fil": 353, "py": 353, "sphinx": 353, "correct_built_html_fil": 353, "remove_fil": 353, "deep": 354, "dive": 354, "navig": 355, "code": 355, "categor": 355, "submodul": 355, "design": [355, 369, 1122], "docstr": [356, 357], "exampl": [357, 368], "hypothesi": 359, "self": 359, "consist": 359, "explicit": 359, "test_array_funct": 359, "primari": 360, "composit": 360, "mix": 360, "standalon": 360, "nestabl": [360, 364, 368], "conveni": 360, "nativ": 363, "handl": 363, "instanc": [364, 372], "static": 364, "special": 364, "modul": [365, 366, 374, 1155, 1156], "argument": [365, 366, 367, 368], "other": [365, 366], "inplac": 367, "updat": 367, "out": [367, 368], "copi": 367, "dtype": [368, 446], "number": 368, "oper": [368, 372, 387], "integ": 368, "sequenc": 368, "block": 370, "framework": [370, 371], "graph": [370, 375], "compil": [370, 375, 406, 407], "class": 372, "monkei": 372, "patch": 372, "construct": 373, "represent": 373, "recurs": 373, "built": 373, "ins": 373, "access": 373, "save": 373, "load": 373, "comparison": 373, "custom": [373, 387], "case": 373, "compartment": 373, "configur": 373, "network": [373, 375], "weight": 373, "state": [374, 387], "initi": [374, 1134], "optim": [374, 1159, 1163], "transpil": 375, "role": 375, "convert": [375, 1132], "model": [375, 382, 387], "builder": 377, "ecosystem": 378, "gym": [379, 386], "mech": 380, "memori": [381, 386], "robot": [383, 386], "vision": [384, 386], "extens": [385, 1122], "appli": 386, "librari": 386, "mechan": 386, "faq": 387, "maintain": 387, "version": 387, "dynam": 387, "size": 387, "shape": [387, 814, 1064, 1065, 1066, 1068], "check": 387, "control": 387, "flow": 387, "auto": 387, "differenti": 387, "replica": 387, "parallel": 387, "support": 387, "altern": 387, "structur": 387, "func": 388, "wrapper": 388, "handle_nest": 389, "handle_out_argu": 390, "infer_devic": 391, "infer_dtyp": 392, "inputs_to_ivy_arrai": 393, "inputs_to_native_arrai": 394, "outputs_to_ivy_arrai": 395, "to_native_arrays_and_back": 396, "gelu": [399, 1131], "leaky_relu": 400, "relu": 401, "sigmoid": 402, "softmax": 403, "softplu": 404, "constant": 408, "note": [409, 415], "arang": 410, "asarrai": 411, "empti": 412, "empty_lik": 413, "ey": 414, "from_dlpack": 415, "full": 416, "full_lik": 417, "linspac": 418, "logspac": 419, "meshgrid": 420, "native_arrai": 421, "ones": 422, "ones_lik": 423, "tril": 424, "triu": 425, "zero": [426, 1142], "zeros_lik": 427, "as_ivy_dtyp": 432, "as_native_dtyp": 433, "astyp": 434, "broadcast_arrai": 435, "broadcast_to": 436, "closest_valid_dtyp": 442, "default_dtyp": 443, "default_float_dtyp": 444, "default_int_dtyp": 445, "dtype_bit": 447, "finfo": 448, "function_supported_dtyp": 449, "function_unsupported_dtyp": 450, "iinfo": 451, "invalid_dtyp": 452, "is_float_dtyp": 453, "is_int_dtyp": 454, "promote_typ": 455, "result_typ": 456, "set_default_dtyp": 457, "set_default_float_dtyp": 458, "set_default_int_dtyp": 459, "type_promote_arrai": 460, "unset_default_dtyp": 461, "unset_default_float_dtyp": 462, "unset_default_int_dtyp": 463, "valid_dtyp": 464, "devcloneditem": 467, "devclonedit": 468, "devclonednest": 469, "devdistitem": 470, "devdistit": 471, "devdistnest": 472, "devmapp": 474, "devmappermultiproc": 475, "multidevitem": 477, "multidevit": 478, "multidevnest": 479, "profil": 480, "as_ivy_dev": 481, "as_native_dev": 482, "clear_mem_on_dev": 483, "default_devic": 484, "dev": 485, "dev_clon": 486, "dev_clone_arrai": 487, "dev_clone_it": 488, "dev_clone_nest": 489, "dev_dist": 490, "dev_dist_arrai": 491, "dev_dist_it": 492, "dev_dist_nest": 493, "dev_unifi": 494, "dev_unify_arrai": 495, "dev_unify_it": 496, "dev_unify_nest": 497, "dev_util": 498, "get_all_ivy_arrays_on_dev": 499, "gpu_is_avail": 500, "num_cpu_cor": 501, "num_gpu": 502, "num_ivy_arrays_on_dev": 503, "percent_used_mem_on_dev": 504, "print_all_ivy_arrays_on_dev": 505, "set_default_devic": 506, "set_split_factor": 507, "split_factor": 508, "split_func_cal": 509, "to_devic": 510, "total_mem_on_dev": 511, "tpu_is_avail": 512, "unset_default_devic": 513, "used_mem_on_dev": 514, "maximum": 682, "minimum": 683, "arg_info": 758, "arg_nam": 759, "array_equ": 760, "arrays_equ": 761, "assert_supports_inplac": 762, "cache_fn": 763, "clip_matrix_norm": 764, "container_typ": 768, "copy_arrai": 769, "cumprod": 770, "cumsum": 771, "current_backend_str": 772, "default": 773, "einops_rearrang": 774, "einops_reduc": 775, "einops_repeat": 776, "exist": 777, "floormod": 778, "fourier_encod": 779, "gather": 780, "get_all_arrays_in_memori": 786, "get_min_bas": 787, "get_min_denomin": 788, "get_num_dim": 789, "get_referrers_recurs": 790, "has_nan": 791, "indices_wher": 792, "inplace_arrays_support": 793, "inplace_decr": 794, "inplace_incr": 795, "inplace_upd": 796, "inplace_variables_support": 797, "is_arrai": 798, "is_ivy_arrai": 799, "is_ivy_contain": 800, "is_native_arrai": 801, "match_kwarg": 802, "multiprocess": 803, "num_arrays_in_memori": 804, "one_hot": 805, "print_all_arrays_in_memori": 806, "queue_timeout": 807, "scatter_flat": 808, "scatter_nd": 809, "set_min_bas": 810, "set_min_denomin": 811, "set_queue_timeout": 812, "set_tmp_dir": 813, "shape_to_tupl": 815, "stable_divid": 816, "stable_pow": 817, "supports_inplac": 818, "tmp_dir": 819, "to_list": 820, "to_numpi": 821, "to_scalar": 822, "try_else_non": 823, "unstack": 824, "value_is_nan": 825, "execute_with_gradi": 837, "is_vari": 842, "set_with_grad": 855, "stop_gradi": 856, "unset_with_grad": 857, "variabl": 858, "variable_data": 859, "with_grad": 860, "conv1d": [862, 1144], "conv1d_transpos": 863, "conv2d": [864, 1146], "conv2d_transpos": 865, "conv3d": [866, 1148], "conv3d_transpos": 867, "depthwise_conv2d": 868, "dropout": [869, 1151], "lstm_updat": 871, "multi_head_attent": 872, "scaled_dot_product_attent": 873, "matrix_pow": 903, "slogdet": 919, "split": 999, "meta": 1020, "fomaml_step": 1021, "maml_step": 1022, "reptile_step": 1023, "nest": 1024, "all_nested_indic": 1025, "copy_nest": 1026, "index_nest": 1027, "insert_into_nest_at_index": 1028, "insert_into_nest_at_indic": 1029, "map": 1030, "map_nest_at_index": 1031, "map_nest_at_indic": 1032, "multi_index_nest": 1033, "nested_ani": 1034, "nested_indices_wher": 1035, "nested_map": 1036, "nested_multi_map": 1037, "prune_nest_at_index": 1038, "prune_nest_at_indic": 1039, "set_nest_at_index": 1040, "set_nest_at_indic": 1041, "multinomi": 1048, "randint": [1049, 1050], "random_norm": 1052, "seed": 1057, "shuffl": 1058, "argmax": 1060, "argmin": 1061, "nonzero": 1062, "where": 1063, "depend": [1064, 1065, 1066, 1068], "output": [1064, 1065, 1066, 1068], "unique_al": 1065, "unique_count": 1066, "unique_invers": 1067, "unique_valu": 1068, "content": 1122, "overview": 1122, "quick": 1122, "start": 1122, "roadmap": [1122, 1128], "citat": 1122, "inspect": 1125, "add_array_spec": 1126, "fn_array_spec": 1127, "geglu": 1130, "to_ivy_modul": 1133, "firstlayersiren": 1136, "glorotuniform": 1137, "Ones": 1139, "siren": 1140, "conv1dtranspos": 1145, "conv2dtranspos": 1147, "conv3dtranspos": 1149, "depthwiseconv2d": 1150, "lstm": 1152, "multiheadattent": 1154, "layernorm": 1158, "adam": 1160, "lamb": 1161, "lar": 1162, "sgd": 1164, "sequenti": [1165, 1166], "verbos": 1168, "cprint": 1169}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})