Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_type", "array/data_type/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/creation", "container/creation/ContainerWithCreation", "container/data_type", "container/data_type/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_functional", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_type.rst", "array/data_type/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_type.rst", "container/data_type/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_functional.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "can_cast array", "can_cast functional", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "abs array", "abs functional", "acos", "acos array", "acosh functional", "acosh", "acosh array", "acosh functional", "add", "add array", "logaddexp functional", "asin", "asin array", "asin functional", "asinh", "asinh array", "asinh functional", "atan", "atan array", "atanh functional", "atan2", "atan2 array", "atan2 functional", "atanh", "atanh array", "atanh functional", "bitwise_and", "bitwise_and array", "bitwise_and functional", "bitwise_invert", "bitwise_invert array", "bitwise_invert functional", "bitwise_left_shift", "bitwise_left_shift array", "bitwise_left_shift functional", "bitwise_or", "bitwise_or array", "bitwise_or functional", "bitwise_right_shift", "bitwise_right_shift array", "bitwise_right_shift functional", "bitwise_xor", "bitwise_xor array", "bitwise_xor functional", "ceil", "ceil array", "ceil functional", "cos", "cos array", "acosh functional", "cosh", "cosh array", "acosh functional", "divide", "divide array", "floor_divide functional", "equal", "equal array", "greater_equal functional", "erf", "erf array", "erf container", "erf functional", "exp", "exp array", "logaddexp functional", "expm1", "expm1 array", "expm1 functional", "floor", "floor array", "floor_divide functional", "floor_divide", "floor_divide array", "floor_divide functional", "greater", "greater array", "greater_equal functional", "greater_equal", "greater_equal array", "greater_equal functional", "isfinite", "isfinite array", "isfinite functional", "isinf", "isinf array", "isinf functional", "isnan", "isnan array", "isnan functional", "less", "less array", "less functional", "less_equal", "less_equal array", "less_equal functional", "log", "log array", "log functional", "log10", "log10 array", "log10 functional", "log1p", "log1p array", "log1p functional", "log2", "log2 array", "log2 functional", "logaddexp", "logaddexp array", "logaddexp functional", "logical_and", "logical_and array", "logical_and functional", "logical_not", "logical_not array", "logical_not functional", "logical_or", "logical_or array", "logical_or functional", "logical_xor", "logical_xor array", "logical_xor functional", "maximum", "minimum", "multiply", "multiply array", "multiply functional", "negative", "negative array", "negative functional", "not_equal", "not_equal array", "not_equal functional", "positive", "positive array", "positive functional", "pow", "pow array", "pow functional", "remainder", "remainder array", "remainder functional", "round", "round array", "round functional", "sign", "sign array", "sign functional", "sin", "sin array", "sin container", "sin functional", "sinh", "sinh array", "sinh functional", "sqrt", "sqrt array", "sqrt functional", "square", "square array", "square functional", "subtract", "subtract array", "subtract functional", "tan", "tan array", "atanh functional", "tanh", "tanh array", "atanh functional", "trunc", "trunc array", "trunc functional", "General", "all_equal", "all_equal array", "all_equal functional", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "gather_nd array", "gather_nd functional", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "adam_update", "execute_with_gradients", "gradient_descent_update", "is_variable", "lamb_update", "lars_update", "optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "cross", "det", "diagonal", "eigh", "eigvalsh", "inv", "matmul", "matmul array", "matmul functional", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "trace", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "binary_cross_entropy array", "binary_cross_entropy functional", "cross_entropy", "cross_entropy array", "cross_entropy functional", "sparse_cross_entropy", "sparse_cross_entropy array", "sparse_cross_entropy functional", "Manipulation", "clip", "clip array", "clip functional", "static_clip container", "concat", "concat array", "concat functional", "constant_pad", "constant_pad array", "constant_pad functional", "expand_dims", "expand_dims array", "expand_dims functional", "flip", "flip array", "flip functional", "permute_dims", "permute_dims array", "permute_dims functional", "repeat", "repeat array", "repeat functional", "reshape", "reshape array", "reshape functional", "roll", "roll array", "roll functional", "split", "squeeze", "squeeze array", "squeeze functional", "stack", "stack array", "stack functional", "swapaxes", "swapaxes array", "swapaxes functional", "tile", "tile array", "tile functional", "zero_pad", "zero_pad array", "zero_pad functional", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "layer_norm array", "layer_norm functional", "Random", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "argsort array", "argsort functional", "sort", "sort array", "sort functional", "Statistical", "einsum", "einsum array", "einsum functional", "max", "max array", "max functional", "mean", "mean array", "mean functional", "min", "min array", "min functional", "prod", "prod array", "prod functional", "std", "std array", "std functional", "sum", "sum array", "einsum functional", "var", "var array", "var functional", "Utility", "all", "all array", "all functional", "any", "any array", "any functional", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 114, 115, 117, 121, 122, 123, 124, 126, 128, 129, 131, 132, 133, 143, 144, 145, 186, 207, 221, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 447, 452, 485, 491, 510, 515, 529, 630, 632, 642, 659, 662, 708, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 114, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755], "arrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 197, 202, 204, 207, 209, 210, 212, 216, 221, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 255, 259, 261, 265, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 335, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 441, 443, 444, 446, 447, 448, 450, 453, 454, 455, 457, 458, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 478, 480, 481, 482, 483, 484, 485, 487, 488, 490, 493, 494, 495, 497, 498, 503, 507, 509, 510, 511, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 585, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 607, 609, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625, 626, 627, 628, 629, 630, 632, 642, 643, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 708, 711, 713, 729, 737, 740], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 121, 122, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755], "base": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 117, 120, 122, 128, 144, 167, 177, 186, 221, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 271, 336, 369, 371, 372, 374, 375, 377, 378, 380, 410, 412, 447, 476, 499, 506, 515, 664, 665, 666, 668, 676, 677, 679, 697, 715, 716, 717, 720, 722, 723, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "abc": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 64, 65, 130, 221, 230, 236, 447, 468, 741, 742, 745, 749], "activ": [1, 43, 44, 63, 105, 106, 108, 109, 111, 113, 132, 157, 158, 159, 160, 161, 162, 163, 708, 716, 717], "support": [1, 3, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 133, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 749, 750, 752, 753, 755], "framework": [1, 2, 3, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 112, 116, 118, 119, 120, 121, 124, 126, 127, 130, 133, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 749, 750, 752, 753, 755], "collect": [2, 64, 65, 117, 144, 156, 164, 221, 447, 515, 531, 571, 630, 643, 648, 652, 715, 729, 743, 745], "function": [2, 9, 10, 13, 14, 15, 16, 27, 28, 43, 44, 45, 49, 50, 51, 59, 64, 65, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 119, 121, 125, 127, 129, 130, 131, 132, 143, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 278, 281, 282, 284, 287, 290, 293, 296, 299, 302, 305, 308, 311, 314, 317, 318, 320, 323, 326, 329, 332, 336, 339, 342, 345, 348, 351, 354, 357, 360, 363, 366, 369, 372, 375, 378, 381, 384, 387, 390, 393, 396, 397, 398, 401, 404, 407, 410, 413, 416, 419, 422, 426, 429, 432, 435, 438, 439, 441, 444, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 578, 581, 582, 583, 585, 586, 589, 592, 595, 598, 601, 604, 607, 608, 610, 611, 614, 617, 620, 623, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 676, 677, 680, 683, 686, 689, 692, 695, 698, 701, 702, 705, 708, 711, 713, 715, 716, 717, 745, 748, 750], "wrap": [2, 9, 10, 13, 14, 15, 16, 27, 28, 44, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 106, 112, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 133, 145, 146, 154, 195, 196, 272, 273, 282, 292, 296, 317, 318, 381, 439, 443, 447, 448, 449, 456, 472, 473, 515, 529, 582, 583, 585, 607, 608], "accept": [2, 108, 109, 114, 115, 117, 118, 121, 122, 124, 125, 126, 130, 167, 178, 186, 195, 197, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 323, 342, 387, 389, 390, 392, 413, 415, 416, 418, 429, 431, 432, 434, 438, 447, 471, 531, 534, 543, 544, 547, 581, 592, 594, 595, 597, 607, 609, 648, 649, 651, 664, 665, 666, 669, 670, 672, 676, 680, 682, 683, 685, 701, 702, 704, 708], "return": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 45, 49, 50, 57, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 220, 221, 230, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 640, 641, 642, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 713, 718, 719, 729, 738, 739, 745, 749], "instanc": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 27, 28, 43, 44, 64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 89, 90, 105, 106, 110, 114, 115, 117, 118, 121, 123, 125, 126, 131, 132, 133, 146, 154, 156, 158, 159, 160, 161, 162, 163, 167, 178, 186, 195, 196, 197, 221, 230, 262, 271, 272, 273, 281, 282, 284, 286, 292, 296, 299, 301, 314, 316, 317, 318, 319, 323, 331, 342, 350, 351, 353, 381, 396, 397, 401, 403, 416, 418, 429, 431, 432, 434, 438, 439, 443, 447, 448, 449, 460, 471, 472, 473, 485, 509, 511, 531, 534, 537, 543, 544, 545, 546, 547, 571, 572, 574, 581, 582, 583, 592, 594, 595, 597, 601, 603, 607, 608, 609, 610, 617, 619, 648, 649, 651, 652, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 676, 677, 679, 680, 682, 697, 701, 702, 704, 718, 719], "args_to_ivi": 2, "arg": [2, 3, 4, 45, 49, 64, 65, 111, 128, 130, 132, 221, 230, 245, 249, 253, 265, 447, 498, 718, 719, 741, 742], "include_deriv": [2, 3, 4, 5, 6, 630, 632, 642], "none": [2, 3, 4, 5, 6, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 45, 47, 50, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 132, 133, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 192, 194, 199, 200, 201, 204, 207, 221, 230, 231, 239, 240, 263, 264, 265, 266, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 457, 458, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 479, 481, 482, 486, 492, 494, 497, 498, 499, 500, 505, 506, 512, 515, 518, 520, 522, 523, 524, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 636, 641, 642, 643, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 718, 719, 720, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "kwarg": [2, 3, 4, 45, 49, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 128, 130, 132, 221, 230, 245, 249, 253, 447, 491, 718, 719, 741, 742], "keyword": [2, 3, 4, 64, 65, 66, 67, 68, 113, 123, 124, 125, 126, 131, 167, 178, 221, 230, 231, 245, 249, 253, 447, 452, 491, 630, 636, 676, 695, 741, 742], "variabl": [2, 3, 4, 5, 6, 64, 65, 66, 67, 114, 119, 122, 123, 125, 126, 131, 132, 133, 145, 447, 455, 483, 484, 485, 486, 487, 488, 490, 507, 515, 518, 519, 520, 521, 522, 523, 524, 526, 529, 531, 542, 544, 563, 626, 627, 628, 629, 648, 649, 651, 708, 718, 719, 720, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "form": [2, 3, 4, 5, 6, 60, 64, 65, 107, 118, 132, 133, 167, 169, 179, 182, 183, 447, 451, 515, 518, 520, 522, 523, 524, 531, 544, 545, 547, 548, 549, 550, 551, 557, 558, 560, 561, 563, 564, 565, 567, 630, 632, 642], "all": [2, 3, 4, 5, 6, 41, 42, 43, 44, 59, 60, 61, 64, 65, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 146, 154, 164, 165, 167, 168, 182, 183, 221, 230, 255, 261, 447, 448, 450, 453, 454, 475, 495, 510, 531, 541, 544, 563, 566, 569, 581, 595, 597, 607, 609, 626, 627, 628, 629, 630, 631, 632, 641, 642, 643, 652, 653, 656, 701, 708, 711, 713], "nest": [2, 3, 4, 5, 6, 64, 65, 66, 67, 68, 113, 118, 121, 122, 130, 131, 132, 145, 221, 245, 249, 253, 447, 509, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 741, 742, 745, 746, 747, 748, 749, 750], "otherwis": [2, 3, 4, 5, 6, 45, 57, 64, 65, 121, 123, 124, 126, 128, 130, 167, 168, 186, 192, 195, 197, 199, 200, 201, 221, 240, 271, 354, 356, 357, 359, 360, 362, 447, 455, 512, 515, 521, 526, 544, 545, 547, 568, 569, 626, 627, 628, 630, 643, 659, 660, 661, 663, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "argument": [2, 3, 4, 5, 6, 45, 49, 50, 59, 64, 65, 66, 67, 68, 110, 112, 113, 114, 115, 117, 118, 119, 121, 122, 128, 130, 131, 164, 165, 167, 168, 186, 195, 197, 212, 221, 230, 231, 245, 249, 253, 271, 281, 284, 286, 317, 319, 342, 429, 431, 432, 434, 438, 447, 451, 452, 456, 464, 471, 491, 498, 531, 534, 543, 581, 607, 609, 630, 636, 648, 649, 651, 676, 680, 682, 695, 701, 702, 704, 711, 713, 718, 719, 741, 742], "ar": [2, 3, 4, 59, 60, 61, 64, 65, 66, 67, 68, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 146, 154, 167, 168, 221, 230, 231, 255, 259, 261, 265, 271, 320, 387, 389, 390, 392, 416, 418, 422, 425, 438, 447, 448, 450, 453, 454, 455, 475, 481, 482, 486, 493, 495, 507, 531, 540, 544, 546, 552, 554, 555, 557, 560, 564, 565, 568, 581, 582, 584, 595, 597, 607, 609, 630, 632, 636, 642, 652, 655, 656, 659, 660, 661, 662, 664, 665, 708, 751, 752], "unchang": [2, 3, 4, 5, 6], "paramet": [2, 3, 4, 5, 6, 43, 44, 45, 49, 50, 64, 65, 66, 67, 68, 105, 106, 113, 114, 117, 130, 131, 144, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 230, 231, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 335, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 441, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 607, 609, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 711, 713, 718, 719, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "iter": [2, 3, 4, 5, 6, 43, 44, 61, 64, 65, 66, 67, 68, 105, 106, 122, 128, 131, 164, 165, 221, 243, 244, 246, 247, 248, 249, 252, 265, 447, 448, 450, 498, 503, 581, 589, 591, 601, 603, 610, 620, 622, 623, 625, 630, 631, 632, 636, 640, 641, 642], "ani": [2, 3, 4, 41, 42, 43, 44, 45, 49, 57, 59, 60, 61, 64, 65, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 164, 165, 167, 169, 179, 186, 195, 197, 221, 266, 271, 281, 284, 286, 317, 319, 329, 331, 342, 350, 351, 353, 366, 368, 429, 431, 432, 434, 438, 447, 448, 450, 464, 465, 466, 467, 468, 471, 480, 487, 488, 489, 490, 505, 506, 515, 519, 531, 534, 543, 581, 607, 609, 626, 627, 628, 629, 630, 636, 640, 648, 649, 651, 652, 656, 676, 680, 682, 701, 702, 704, 708], "The": [2, 3, 4, 5, 6, 45, 49, 50, 58, 59, 61, 64, 65, 66, 67, 68, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 144, 156, 157, 158, 161, 163, 164, 165, 167, 168, 173, 177, 178, 182, 183, 186, 190, 191, 192, 198, 203, 205, 206, 208, 211, 216, 220, 221, 230, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 267, 270, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 335, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 438, 440, 443, 444, 446, 447, 451, 453, 456, 457, 463, 464, 470, 472, 474, 483, 484, 485, 487, 488, 489, 490, 492, 497, 498, 499, 500, 501, 504, 505, 506, 514, 515, 517, 518, 520, 522, 523, 524, 526, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 610, 620, 622, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 655, 659, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 708, 718, 719, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749], "posit": [2, 3, 4, 13, 14, 75, 76, 126, 131, 144, 166, 167, 172, 186, 204, 221, 245, 249, 253, 271, 272, 274, 354, 356, 357, 359, 398, 400, 413, 415, 447, 470, 544, 545, 581, 592, 594, 607, 609, 652, 657, 659, 662, 701, 702, 704, 705, 707, 718, 719], "check": [2, 3, 4, 5, 6, 59, 60, 61, 64, 65, 108, 109, 122, 127, 128, 130, 131, 132, 133, 144, 186, 198, 205, 206, 208, 220, 221, 260, 270, 447, 455, 468, 480, 487, 488, 489, 490, 507, 514, 515, 521, 544, 549, 630, 631, 640, 641, 642, 708], "option": [2, 3, 4, 5, 6, 43, 44, 45, 50, 64, 65, 105, 106, 108, 109, 113, 114, 115, 118, 122, 123, 124, 125, 126, 128, 133, 145, 156, 158, 159, 161, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 198, 199, 200, 201, 208, 220, 221, 240, 264, 265, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 336, 338, 339, 341, 342, 354, 356, 357, 359, 360, 362, 363, 365, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 447, 451, 458, 461, 462, 463, 469, 471, 492, 494, 497, 498, 505, 506, 515, 526, 531, 534, 537, 538, 543, 544, 555, 557, 560, 569, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 592, 594, 595, 597, 598, 600, 601, 603, 607, 609, 610, 611, 613, 614, 616, 617, 619, 626, 627, 628, 629, 630, 631, 636, 641, 642, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707], "dict": [2, 3, 4, 5, 6, 45, 57, 64, 65, 66, 67, 68, 122, 131, 132, 221, 230, 231, 240, 243, 246, 247, 248, 249, 447, 451, 465, 466, 467, 630, 632, 633, 636, 639, 642, 643], "type": [2, 3, 4, 5, 6, 10, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 51, 57, 64, 65, 66, 67, 68, 72, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 120, 121, 122, 124, 125, 126, 128, 130, 131, 133, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 220, 221, 237, 238, 239, 240, 241, 243, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 480, 481, 483, 484, 485, 487, 488, 489, 490, 494, 497, 498, 499, 500, 503, 505, 506, 507, 509, 510, 511, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 526, 528, 531, 532, 534, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 640, 641, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740], "bool": [2, 3, 4, 5, 6, 9, 10, 64, 65, 105, 106, 115, 122, 123, 125, 133, 164, 165, 167, 174, 186, 192, 195, 196, 197, 199, 200, 201, 202, 205, 208, 209, 210, 220, 221, 240, 241, 256, 265, 268, 271, 299, 301, 302, 304, 308, 310, 314, 316, 329, 331, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 384, 386, 387, 389, 390, 392, 404, 406, 447, 448, 450, 453, 454, 461, 464, 468, 470, 478, 480, 485, 487, 488, 489, 490, 503, 513, 514, 515, 526, 544, 545, 555, 564, 569, 581, 610, 626, 627, 628, 629, 630, 631, 632, 636, 640, 641, 642, 652, 653, 659, 660, 661, 669, 670, 672, 673, 675, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "whether": [2, 3, 4, 5, 6, 64, 65, 66, 67, 68, 105, 106, 107, 108, 123, 125, 126, 156, 157, 164, 165, 186, 192, 202, 208, 209, 210, 220, 221, 240, 241, 252, 256, 257, 260, 261, 265, 268, 270, 271, 360, 362, 447, 448, 450, 453, 454, 461, 464, 468, 470, 478, 480, 482, 485, 486, 487, 488, 489, 490, 491, 503, 507, 513, 514, 515, 518, 519, 520, 521, 522, 523, 524, 526, 531, 539, 544, 549, 626, 627, 628, 629, 630, 631, 632, 636, 640, 641, 642, 643, 652, 653, 701, 702, 704, 705, 707, 718, 719, 729, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750], "also": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 27, 28, 59, 60, 64, 65, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 107, 108, 109, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 178, 186, 195, 196, 197, 271, 272, 273, 281, 282, 284, 286, 292, 296, 299, 301, 314, 316, 317, 318, 319, 323, 342, 381, 416, 418, 429, 431, 432, 434, 438, 439, 443, 447, 448, 449, 471, 472, 473, 485, 515, 518, 531, 534, 540, 543, 544, 547, 581, 582, 583, 585, 592, 594, 595, 597, 607, 608, 609, 626, 627, 628, 629, 630, 631, 632, 640, 641, 642, 648, 649, 651, 664, 665, 666, 669, 670, 672, 676, 680, 682, 701, 702, 704, 729, 739], "recurs": [2, 3, 4, 5, 6, 64, 65, 108, 111, 118, 122, 132, 145, 630, 631, 632, 640, 641, 642], "deriv": [2, 3, 4, 5, 6, 123, 124, 130, 132, 167, 171, 175, 181, 185, 515, 517, 518, 520, 522, 523, 524, 630, 632, 642, 741, 745, 749, 751], "from": [2, 3, 4, 5, 6, 43, 44, 45, 49, 50, 51, 59, 60, 61, 64, 65, 66, 67, 68, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 168, 169, 171, 173, 174, 175, 178, 179, 181, 185, 186, 195, 197, 212, 221, 230, 231, 240, 255, 259, 264, 265, 271, 348, 429, 431, 447, 464, 471, 472, 474, 509, 515, 518, 522, 531, 539, 542, 544, 548, 564, 568, 581, 595, 597, 604, 606, 611, 613, 626, 627, 628, 629, 630, 632, 642, 643, 652, 653, 654, 655, 656, 659, 663, 664, 665, 667, 676, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708, 714, 718, 719, 729, 737, 740, 745, 749], "tupl": [2, 3, 4, 5, 6, 64, 65, 113, 122, 123, 124, 126, 130, 131, 132, 145, 164, 165, 167, 169, 170, 174, 179, 180, 184, 186, 194, 206, 221, 240, 447, 470, 504, 531, 534, 537, 538, 544, 557, 560, 564, 566, 569, 581, 586, 588, 589, 591, 595, 597, 598, 600, 607, 609, 611, 613, 614, 616, 623, 625, 626, 627, 628, 629, 630, 632, 633, 635, 637, 638, 639, 641, 642, 644, 645, 646, 647, 652, 655, 656, 659, 662, 664, 665, 666, 667, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "list": [2, 3, 4, 5, 6, 43, 44, 64, 65, 105, 106, 108, 110, 111, 113, 115, 123, 124, 126, 128, 131, 132, 133, 145, 167, 168, 169, 170, 178, 179, 180, 184, 186, 193, 221, 230, 231, 240, 242, 243, 246, 247, 250, 251, 265, 447, 454, 504, 509, 513, 531, 532, 533, 534, 535, 536, 537, 538, 544, 566, 581, 586, 588, 595, 597, 610, 614, 616, 630, 631, 632, 636, 641, 642, 648, 649, 651, 659, 662, 701, 702, 704, 705, 707, 708, 729, 730, 731, 732, 733, 734, 735, 736], "default": [2, 3, 4, 5, 6, 43, 44, 45, 50, 64, 65, 66, 67, 68, 105, 106, 109, 114, 115, 118, 119, 122, 123, 124, 126, 132, 156, 157, 158, 159, 161, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 199, 200, 201, 202, 221, 230, 231, 240, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 260, 262, 263, 264, 265, 266, 269, 270, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 336, 338, 339, 341, 342, 354, 356, 357, 359, 360, 362, 363, 365, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 447, 448, 450, 451, 457, 458, 461, 462, 469, 470, 471, 478, 479, 480, 482, 485, 486, 487, 488, 490, 491, 492, 494, 496, 497, 498, 501, 503, 505, 506, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 555, 557, 560, 561, 564, 566, 567, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 607, 609, 610, 611, 613, 614, 616, 617, 619, 626, 627, 628, 629, 630, 631, 632, 636, 640, 641, 642, 643, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 664, 665, 666, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 718, 719, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "fals": [2, 3, 4, 5, 6, 15, 16, 37, 38, 39, 40, 41, 42, 45, 52, 53, 54, 55, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 122, 125, 131, 132, 133, 186, 192, 195, 197, 202, 221, 240, 241, 252, 256, 257, 260, 265, 268, 270, 271, 299, 301, 331, 332, 334, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 387, 389, 390, 392, 422, 424, 447, 448, 449, 450, 453, 454, 461, 464, 468, 470, 478, 485, 487, 488, 490, 491, 503, 513, 515, 518, 519, 520, 521, 522, 523, 524, 544, 545, 555, 564, 569, 581, 582, 585, 610, 626, 627, 628, 629, 630, 631, 632, 636, 640, 641, 642, 643, 652, 653, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 718, 719, 741, 742, 745, 746, 747, 748, 749, 750], "str": [2, 3, 4, 45, 50, 64, 65, 123, 124, 167, 178, 186, 190, 198, 199, 200, 203, 204, 207, 208, 209, 210, 213, 214, 215, 220, 221, 237, 240, 241, 243, 246, 247, 248, 249, 265, 447, 451, 463, 465, 466, 467, 492, 497, 498, 531, 532, 534, 536, 537, 538, 544, 561, 626, 627, 628, 629, 630, 636, 676, 677, 679, 697], "kei": [2, 3, 4, 64, 65, 66, 67, 68, 122, 131, 221, 233, 447, 451, 459, 531, 542, 543, 626, 627, 628, 630, 633, 639, 643, 718, 719, 729, 740, 745, 749], "word": [2, 3, 4, 167, 168, 652, 656, 718, 719], "ret": [2, 3, 4, 5, 6, 45, 49, 50, 57, 64, 65, 113, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 220, 221, 230, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 335, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 441, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 497, 498, 503, 505, 506, 507, 509, 510, 511, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 607, 609, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 636, 640, 641, 642, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 711, 713, 718, 719, 745, 749], "same": [2, 3, 4, 59, 61, 64, 65, 108, 109, 111, 113, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 167, 168, 171, 175, 178, 181, 182, 183, 185, 186, 192, 193, 194, 221, 230, 231, 265, 271, 272, 274, 281, 302, 304, 317, 319, 342, 398, 400, 413, 415, 416, 418, 419, 421, 444, 446, 447, 469, 471, 472, 474, 494, 497, 498, 515, 521, 526, 531, 532, 533, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 558, 560, 561, 563, 564, 567, 568, 581, 586, 588, 595, 597, 598, 600, 607, 609, 611, 613, 614, 616, 626, 627, 628, 630, 643, 664, 665, 666, 668, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 695, 697, 698, 700, 708, 729, 730, 731, 732, 733, 734, 735, 736], "convert": [2, 3, 4, 5, 6, 61, 64, 65, 121, 128, 145, 146, 154, 167, 169, 179, 186, 190, 191, 221, 237, 238, 239, 240, 260, 267, 270, 447, 504, 510, 511, 544, 570, 630, 632, 642, 643, 719], "args_to_n": [2, 125, 130], "nativ": [2, 4, 5, 6, 45, 51, 64, 65, 123, 125, 130, 131, 167, 179, 186, 190, 191, 198, 221, 237, 238, 239, 240, 241, 260, 267, 270, 447, 485, 487, 490, 718, 719], "backend": [2, 4, 6, 49, 50, 51, 57, 59, 64, 65, 109, 110, 112, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130, 133, 186, 205, 206, 208, 220, 221, 256, 258, 268, 447, 482, 485, 486, 492, 515, 518, 520, 522, 523, 524, 529, 708, 714, 718, 719, 745, 746, 747, 748, 749, 750], "to_ivi": [2, 64, 65, 130, 630, 643], "x": [2, 5, 6, 9, 10, 13, 14, 15, 16, 27, 28, 45, 49, 57, 64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 99, 100, 111, 113, 114, 115, 118, 119, 122, 125, 126, 128, 130, 131, 132, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 169, 171, 173, 175, 178, 179, 181, 182, 183, 184, 185, 186, 192, 194, 195, 196, 197, 202, 221, 240, 241, 242, 243, 246, 247, 255, 259, 264, 266, 271, 272, 274, 275, 277, 278, 280, 281, 282, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 314, 316, 317, 318, 319, 320, 322, 323, 325, 331, 332, 335, 336, 339, 341, 342, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 369, 371, 372, 374, 375, 377, 378, 380, 381, 387, 389, 396, 397, 401, 403, 407, 409, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 438, 439, 440, 441, 443, 444, 446, 447, 453, 454, 455, 457, 458, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 480, 481, 483, 484, 485, 487, 488, 489, 490, 494, 503, 507, 509, 510, 511, 513, 514, 515, 519, 521, 526, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 569, 571, 572, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 620, 622, 623, 625, 630, 631, 636, 640, 641, 642, 648, 649, 651, 652, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 708, 729, 740], "input": [2, 5, 6, 64, 65, 66, 67, 68, 75, 76, 77, 78, 89, 90, 93, 94, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 171, 173, 175, 178, 179, 181, 182, 183, 185, 186, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 209, 210, 211, 212, 216, 221, 230, 231, 240, 241, 242, 243, 245, 246, 249, 253, 259, 265, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 441, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 457, 458, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 480, 481, 483, 484, 485, 487, 488, 489, 490, 503, 504, 507, 509, 510, 511, 513, 514, 515, 519, 521, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 585, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 607, 609, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625, 626, 627, 628, 629, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744], "an": [2, 5, 6, 43, 44, 60, 61, 64, 65, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 156, 159, 160, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 197, 204, 209, 210, 212, 221, 243, 247, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 443, 444, 446, 447, 456, 457, 458, 460, 469, 470, 471, 481, 485, 487, 488, 489, 490, 510, 511, 512, 515, 521, 526, 528, 529, 531, 534, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 560, 561, 562, 563, 564, 567, 568, 569, 581, 582, 584, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 604, 606, 607, 609, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625, 630, 636, 648, 649, 651, 652, 654, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 708, 718, 719, 741, 742, 745, 746, 747, 749], "If": [2, 5, 6, 45, 49, 50, 51, 59, 64, 65, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 145, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 194, 212, 221, 240, 264, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 317, 319, 320, 322, 323, 325, 336, 338, 339, 341, 342, 369, 371, 372, 374, 378, 380, 381, 383, 387, 389, 390, 392, 398, 400, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 438, 444, 446, 447, 485, 515, 518, 520, 522, 523, 524, 544, 545, 546, 555, 557, 560, 561, 563, 564, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 592, 594, 595, 597, 607, 609, 610, 611, 613, 614, 616, 626, 627, 628, 630, 642, 643, 652, 655, 656, 659, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 673, 675, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708], "set": [2, 5, 6, 36, 45, 49, 50, 51, 57, 59, 64, 65, 98, 107, 109, 112, 113, 118, 120, 121, 122, 123, 124, 125, 128, 130, 131, 221, 240, 250, 251, 262, 263, 264, 265, 271, 293, 295, 447, 448, 450, 499, 500, 501, 502, 515, 518, 520, 521, 522, 523, 524, 544, 546, 555, 557, 560, 563, 630, 631, 640, 641, 642, 646, 647, 652, 657, 659, 660, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 692, 694, 698, 700, 729, 738, 745, 746, 747, 748, 749, 750], "appli": [2, 5, 6, 9, 10, 13, 14, 15, 16, 27, 28, 64, 65, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 110, 114, 115, 117, 118, 120, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 156, 157, 158, 159, 160, 161, 162, 163, 186, 195, 196, 212, 272, 273, 282, 292, 296, 317, 318, 381, 439, 443, 447, 448, 449, 465, 466, 467, 472, 473, 515, 522, 523, 531, 540, 542, 543, 544, 557, 560, 571, 572, 574, 575, 577, 578, 580, 581, 582, 583, 585, 607, 608, 614, 616, 626, 627, 628, 630, 636, 639, 642, 643, 648, 649, 651, 708, 715, 716, 717, 743, 744], "leaf": [2, 5, 6, 64, 65, 118, 122, 131, 630, 631, 640, 641], "contain": [2, 5, 6, 15, 16, 59, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 117, 118, 123, 125, 126, 127, 128, 129, 132, 133, 145, 156, 159, 160, 162, 167, 168, 171, 173, 180, 182, 183, 184, 186, 195, 197, 221, 242, 243, 246, 255, 259, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 443, 444, 446, 447, 448, 449, 450, 451, 454, 457, 458, 460, 461, 468, 471, 472, 474, 480, 489, 509, 510, 511, 531, 534, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 592, 594, 595, 597, 598, 600, 601, 603, 607, 609, 610, 617, 619, 626, 627, 628, 629, 630, 643, 648, 649, 651, 652, 653, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 672, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 708, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 745, 749, 751, 752], "within": [2, 5, 6, 109, 117, 132, 145, 167, 168, 652, 656], "union": [2, 5, 6, 15, 16, 64, 65, 113, 115, 118, 121, 122, 123, 124, 125, 126, 128, 133, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 237, 238, 239, 240, 241, 243, 246, 247, 248, 249, 254, 260, 262, 264, 265, 266, 267, 270, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 335, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 441, 443, 444, 446, 447, 448, 450, 453, 454, 457, 458, 461, 462, 465, 466, 467, 469, 470, 471, 472, 473, 474, 478, 480, 481, 483, 484, 485, 494, 497, 498, 503, 504, 509, 510, 511, 513, 514, 515, 517, 518, 520, 522, 523, 524, 526, 528, 531, 532, 534, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 607, 609, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 641, 642, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707], "nativearrai": [2, 5, 6, 15, 16, 113, 115, 118, 121, 122, 125, 126, 128, 130, 133, 146, 154, 156, 158, 159, 160, 161, 162, 163, 167, 168, 169, 171, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 192, 193, 194, 195, 197, 202, 204, 207, 209, 210, 212, 216, 221, 240, 241, 243, 259, 265, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 335, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 441, 443, 444, 446, 447, 448, 449, 450, 453, 454, 457, 458, 460, 461, 462, 465, 466, 467, 469, 470, 471, 472, 473, 474, 478, 480, 481, 483, 484, 485, 494, 497, 498, 503, 509, 510, 511, 513, 514, 515, 517, 518, 520, 522, 523, 524, 526, 528, 531, 532, 534, 536, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 607, 609, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625, 630, 632, 642, 648, 649, 651, 652, 653, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707], "mayb": [2, 5, 6, 108, 128, 130], "manner": [2, 5, 6, 59, 64, 65, 113, 114, 124, 131, 144, 145, 630, 642], "so": [2, 5, 6, 9, 10, 13, 14, 15, 16, 27, 28, 59, 60, 64, 65, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 113, 114, 115, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 145, 146, 154, 195, 196, 272, 273, 282, 292, 296, 317, 318, 381, 439, 443, 448, 449, 472, 473, 582, 583, 585, 607, 608, 630, 631, 641, 708], "travers": [2, 5, 6, 64, 65, 122, 128, 130, 630, 642], "lowest": [2, 5, 6, 64, 65, 118, 145, 630, 642, 652, 654], "leav": [2, 5, 6, 64, 65, 66, 67, 114, 115, 117, 118, 122, 123, 125, 126, 131, 132, 581, 614, 616, 630, 631, 632, 640, 641, 642], "search": [2, 5, 6, 34, 59, 64, 65, 96, 108, 113, 115, 117, 660, 661, 662, 663], "s": [2, 5, 6, 45, 49, 50, 51, 57, 60, 61, 64, 65, 107, 108, 109, 111, 112, 114, 115, 117, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 166, 167, 178, 182, 183, 186, 205, 206, 221, 240, 264, 271, 413, 415, 447, 454, 515, 518, 520, 522, 524, 544, 564, 565, 630, 636, 642, 676, 692, 694, 698, 700, 708, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752], "case": [2, 5, 6, 60, 64, 65, 66, 67, 68, 108, 109, 110, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 145, 167, 178, 221, 260, 267, 270, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 314, 316, 317, 319, 320, 322, 323, 325, 336, 338, 339, 341, 342, 369, 371, 372, 374, 378, 380, 381, 383, 398, 400, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 438, 444, 446, 447, 485, 497, 498, 544, 555, 581, 604, 606, 630, 633, 639, 676, 680, 682, 683, 685, 686, 688, 692, 694, 695, 698, 700, 729, 740, 741, 742, 745, 749], "to_n": [2, 64, 65], "item": [2, 6, 43, 44, 64, 65, 123, 128, 130, 131, 133, 186, 199, 221, 230, 231, 233, 240, 242, 244, 246, 248, 252, 447, 459, 479, 505, 506, 630, 635, 636, 637, 638, 642, 646, 647, 708, 741, 742], "convers": [3, 4, 5, 6, 61, 64, 65, 127, 129, 133, 144, 145, 708, 714], "arraywithcr": 7, "creation": [8, 64, 65, 66, 67, 68, 70, 113, 123, 124, 128, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185], "data_typ": [9, 10, 71, 72, 113, 123, 186, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "arraywithdatatyp": 9, "can_cast": [9, 10, 71, 72, 118, 123, 186], "method": [9, 10, 13, 14, 15, 16, 27, 28, 43, 44, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 110, 113, 114, 115, 117, 118, 121, 126, 128, 129, 132, 133, 145, 156, 158, 159, 160, 161, 162, 163, 167, 173, 178, 195, 196, 271, 272, 273, 282, 284, 286, 292, 296, 299, 301, 314, 316, 317, 318, 319, 323, 331, 342, 350, 351, 353, 381, 396, 397, 401, 403, 416, 418, 429, 431, 432, 434, 439, 443, 447, 448, 449, 459, 460, 471, 472, 473, 497, 498, 509, 511, 515, 522, 523, 531, 537, 543, 544, 545, 546, 547, 571, 572, 574, 581, 582, 583, 585, 592, 594, 595, 597, 601, 603, 607, 608, 610, 617, 619, 630, 631, 641, 642, 643, 648, 649, 651, 652, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 676, 677, 679, 680, 682, 697, 701, 702, 704, 708, 729, 740, 741, 742], "variant": [9, 10, 13, 14, 15, 16, 27, 28, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 114, 115, 195, 196, 272, 273, 282, 292, 296, 317, 318, 381, 439, 443, 448, 449, 472, 473, 582, 583, 585, 607, 608], "thi": [9, 10, 13, 14, 15, 16, 27, 28, 59, 60, 61, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 167, 168, 169, 178, 179, 186, 195, 196, 197, 221, 245, 249, 253, 260, 265, 270, 271, 272, 273, 274, 281, 282, 284, 286, 292, 296, 299, 301, 311, 313, 314, 316, 317, 318, 319, 323, 339, 341, 342, 381, 387, 389, 390, 392, 413, 415, 416, 418, 429, 431, 432, 434, 438, 439, 443, 447, 448, 449, 470, 471, 472, 473, 485, 496, 501, 515, 518, 520, 521, 522, 523, 524, 529, 531, 534, 540, 543, 544, 547, 555, 562, 581, 582, 583, 585, 592, 594, 595, 597, 604, 606, 607, 608, 609, 614, 616, 630, 636, 642, 643, 648, 649, 651, 659, 660, 664, 665, 666, 668, 669, 670, 672, 676, 680, 682, 683, 685, 692, 694, 698, 700, 701, 702, 704, 708, 714, 741, 742, 745, 746, 747, 748, 749, 750], "simpli": [9, 10, 13, 14, 15, 16, 27, 28, 64, 65, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 109, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 132, 133, 195, 196, 271, 272, 273, 282, 292, 296, 317, 318, 339, 341, 381, 439, 443, 448, 449, 472, 473, 582, 583, 585, 607, 608], "docstr": [9, 10, 13, 14, 15, 16, 27, 28, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 110, 111, 112, 113, 118, 122, 126, 167, 178, 186, 195, 196, 197, 271, 272, 273, 281, 282, 284, 286, 292, 296, 299, 301, 314, 316, 317, 318, 319, 323, 342, 381, 416, 418, 429, 431, 432, 434, 438, 439, 443, 448, 449, 472, 473, 544, 547, 581, 582, 583, 585, 592, 594, 595, 597, 607, 608, 609, 664, 665, 666, 669, 670, 672, 676, 680, 682, 701, 702, 704], "minim": [9, 10, 13, 14, 15, 16, 27, 28, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 114, 125, 128, 195, 196, 272, 273, 282, 292, 296, 317, 318, 381, 439, 443, 448, 449, 472, 473, 582, 583, 585, 607, 608], "chang": [9, 10, 13, 14, 15, 16, 27, 28, 61, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 110, 111, 114, 116, 117, 122, 128, 132, 145, 195, 196, 221, 272, 273, 282, 292, 296, 317, 318, 381, 439, 443, 448, 449, 472, 473, 544, 546, 581, 582, 583, 585, 604, 606, 607, 608, 630, 632, 642, 708, 714], "exampl": [9, 10, 13, 14, 15, 16, 27, 28, 43, 44, 45, 49, 50, 51, 57, 61, 66, 67, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 174, 175, 178, 180, 181, 184, 185, 186, 192, 195, 196, 197, 205, 206, 221, 240, 241, 243, 255, 256, 257, 258, 259, 262, 264, 266, 268, 269, 271, 281, 282, 284, 286, 292, 296, 298, 299, 301, 302, 304, 311, 313, 314, 316, 317, 318, 319, 320, 323, 331, 336, 342, 348, 350, 351, 353, 363, 365, 381, 396, 397, 401, 403, 416, 418, 429, 431, 432, 434, 438, 439, 440, 443, 447, 448, 449, 450, 453, 454, 460, 461, 468, 471, 472, 473, 474, 477, 488, 503, 509, 510, 511, 531, 532, 534, 536, 537, 538, 543, 544, 545, 546, 547, 548, 551, 557, 559, 564, 566, 567, 571, 572, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585, 586, 588, 592, 594, 595, 597, 601, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 616, 617, 619, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 676, 677, 679, 692, 694, 695, 697, 701, 702, 704, 708], "1": [9, 10, 13, 14, 15, 16, 25, 26, 27, 28, 29, 30, 37, 38, 45, 51, 57, 60, 61, 64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 111, 115, 118, 122, 125, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 163, 167, 168, 175, 176, 177, 178, 180, 181, 185, 186, 192, 195, 196, 197, 204, 221, 225, 228, 230, 235, 240, 241, 243, 245, 249, 253, 255, 258, 259, 266, 271, 275, 277, 278, 280, 281, 282, 284, 286, 292, 293, 295, 296, 299, 301, 302, 304, 311, 313, 314, 316, 317, 318, 319, 320, 322, 323, 325, 331, 336, 339, 341, 342, 348, 350, 351, 353, 363, 365, 369, 371, 372, 374, 375, 377, 378, 380, 381, 396, 397, 401, 403, 410, 412, 416, 418, 419, 421, 422, 425, 429, 431, 432, 434, 438, 439, 443, 447, 448, 449, 450, 453, 454, 460, 461, 468, 471, 472, 473, 474, 488, 494, 497, 498, 503, 506, 509, 510, 511, 513, 531, 532, 533, 534, 535, 536, 537, 538, 539, 543, 544, 545, 546, 547, 548, 551, 557, 559, 563, 564, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 616, 617, 619, 630, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 682, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 708, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752], "2": [9, 10, 13, 14, 15, 16, 27, 28, 45, 49, 64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 111, 115, 119, 122, 126, 127, 128, 130, 131, 132, 133, 145, 156, 158, 159, 160, 161, 163, 166, 167, 174, 175, 178, 180, 181, 185, 186, 192, 195, 196, 197, 221, 240, 241, 243, 255, 257, 259, 266, 271, 281, 282, 284, 286, 290, 292, 293, 295, 296, 299, 301, 302, 304, 311, 313, 314, 316, 317, 318, 319, 320, 323, 331, 336, 342, 348, 350, 351, 353, 363, 365, 378, 380, 381, 396, 397, 401, 403, 416, 418, 429, 431, 432, 434, 438, 439, 443, 447, 448, 449, 450, 453, 454, 457, 458, 461, 468, 471, 472, 473, 474, 488, 503, 509, 531, 534, 535, 536, 537, 538, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 557, 559, 560, 561, 564, 566, 567, 569, 571, 572, 574, 578, 580, 581, 582, 583, 584, 585, 586, 588, 592, 594, 595, 597, 601, 603, 604, 606, 607, 608, 609, 610, 611, 613, 617, 619, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 676, 677, 679, 680, 682, 697, 701, 702, 704, 708], "3": [9, 10, 13, 14, 15, 16, 27, 28, 66, 67, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 108, 111, 115, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 166, 167, 175, 178, 181, 184, 185, 186, 195, 196, 197, 221, 240, 243, 259, 266, 271, 281, 282, 284, 286, 299, 301, 311, 313, 314, 316, 317, 319, 323, 331, 336, 342, 348, 350, 351, 353, 363, 365, 381, 396, 397, 401, 403, 416, 418, 429, 431, 432, 434, 438, 447, 448, 449, 453, 454, 461, 468, 471, 472, 473, 474, 503, 509, 511, 531, 532, 533, 534, 536, 537, 538, 543, 544, 545, 546, 547, 548, 551, 557, 559, 564, 566, 567, 570, 571, 572, 574, 578, 580, 581, 582, 583, 584, 585, 586, 588, 592, 594, 595, 597, 601, 603, 604, 606, 607, 609, 610, 611, 613, 617, 619, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 676, 677, 679, 680, 682, 695, 697, 701, 702, 704, 708], "print": [9, 10, 13, 14, 15, 16, 27, 28, 43, 44, 45, 49, 50, 51, 57, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 105, 106, 108, 115, 122, 128, 130, 131, 132, 156, 158, 159, 160, 161, 162, 163, 167, 174, 175, 178, 180, 181, 184, 185, 186, 192, 195, 196, 197, 205, 206, 221, 241, 255, 256, 257, 258, 259, 261, 264, 268, 271, 281, 282, 284, 286, 292, 296, 298, 299, 301, 302, 304, 311, 313, 314, 316, 317, 318, 319, 320, 323, 331, 336, 342, 348, 350, 351, 353, 363, 365, 381, 396, 397, 401, 403, 416, 418, 429, 431, 432, 434, 438, 439, 440, 443, 447, 448, 449, 450, 453, 454, 460, 461, 468, 471, 472, 473, 474, 477, 495, 503, 509, 510, 511, 531, 532, 534, 536, 537, 538, 543, 544, 545, 546, 547, 548, 551, 559, 564, 566, 567, 571, 572, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585, 592, 594, 595, 597, 601, 603, 604, 606, 607, 608, 609, 610, 611, 613, 617, 619, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 676, 677, 679, 680, 682, 692, 694, 695, 697, 701, 702, 704, 708], "dtype": [9, 10, 39, 40, 64, 65, 71, 72, 101, 102, 113, 115, 118, 123, 124, 130, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 180, 181, 184, 185, 186, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 261, 271, 311, 313, 447, 453, 454, 494, 510, 531, 539, 581, 592, 594, 648, 649, 651, 652, 656, 659, 660, 661, 669, 673, 675, 676, 677, 689, 690, 691, 692, 694, 695, 696, 701, 702, 704, 708, 720, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 751, 752], "float32": [9, 10, 71, 72, 115, 123, 186, 190, 191, 195, 196, 197, 205, 648, 649, 651], "float64": [9, 10, 123, 186, 192, 195, 196, 197, 205], "true": [9, 10, 15, 16, 37, 38, 43, 44, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 117, 118, 122, 123, 125, 128, 130, 131, 132, 133, 156, 157, 164, 165, 167, 176, 186, 192, 195, 196, 197, 221, 240, 257, 261, 262, 271, 299, 301, 314, 316, 331, 332, 334, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 387, 389, 390, 392, 422, 424, 447, 448, 449, 450, 453, 454, 455, 456, 461, 468, 470, 480, 481, 488, 503, 509, 511, 514, 515, 518, 520, 521, 522, 523, 524, 526, 531, 539, 544, 545, 555, 564, 569, 571, 572, 574, 575, 577, 578, 580, 581, 582, 585, 610, 626, 627, 628, 629, 630, 631, 640, 641, 643, 652, 653, 659, 660, 661, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 729, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750], "arraywithdevic": [11, 130], "devic": [12, 60, 64, 65, 74, 93, 94, 109, 112, 113, 118, 120, 123, 130, 131, 145, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 447, 471, 472, 474, 494, 497, 498, 652, 653, 654, 655, 656, 718, 719, 720, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752], "arraywithelementwis": [13, 110, 121], "ab": [13, 14, 75, 76, 117, 120, 271, 410, 412, 544, 569, 708], "out": [13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 59, 60, 61, 64, 65, 66, 67, 75, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 130, 131, 132, 133, 144, 156, 158, 159, 160, 161, 162, 163, 167, 168, 170, 171, 172, 174, 175, 180, 181, 182, 183, 184, 185, 186, 192, 194, 221, 266, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 457, 458, 460, 461, 462, 465, 466, 467, 469, 471, 472, 473, 474, 481, 494, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 664, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 729, 737], "aco": [13, 14, 75, 76, 271, 278, 708], "acosh": [13, 14, 75, 76, 186, 205, 206, 271, 708], "add": [13, 14, 43, 44, 64, 65, 66, 67, 75, 76, 77, 78, 105, 106, 108, 109, 110, 112, 113, 114, 118, 119, 121, 122, 126, 128, 130, 145, 271, 381, 648, 649, 651, 708, 714, 743, 744], "x2": [13, 14, 15, 16, 23, 24, 64, 65, 75, 76, 77, 78, 85, 86, 115, 126, 186, 216, 221, 259, 271, 281, 282, 283, 293, 294, 295, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 326, 327, 328, 329, 330, 331, 338, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 363, 364, 365, 366, 367, 368, 381, 382, 383, 384, 385, 386, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 404, 405, 406, 410, 411, 412, 413, 414, 415, 435, 436, 437, 447, 448, 449, 450, 531, 536, 544, 546, 552, 553, 554, 559, 563, 566, 568, 659, 663], "y": [13, 14, 15, 16, 27, 28, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 113, 115, 119, 122, 128, 130, 156, 158, 159, 160, 161, 162, 163, 167, 174, 175, 178, 180, 181, 185, 186, 192, 221, 241, 255, 259, 264, 271, 281, 282, 284, 286, 292, 293, 295, 296, 299, 301, 302, 304, 311, 313, 314, 316, 317, 318, 319, 320, 323, 331, 336, 342, 350, 351, 353, 381, 396, 397, 401, 403, 416, 418, 429, 431, 432, 434, 438, 439, 443, 447, 448, 449, 450, 453, 454, 460, 461, 468, 469, 471, 472, 473, 474, 503, 509, 510, 511, 515, 519, 531, 537, 538, 540, 544, 545, 546, 547, 551, 559, 566, 567, 571, 572, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585, 586, 588, 592, 594, 595, 597, 601, 603, 604, 606, 607, 608, 609, 610, 617, 619, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 669, 670, 672, 676, 677, 679, 680, 682, 692, 694, 695, 697, 701, 702, 704], "4": [13, 14, 27, 28, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 111, 115, 119, 122, 128, 130, 131, 132, 133, 156, 158, 159, 161, 167, 175, 178, 181, 185, 186, 195, 197, 221, 243, 259, 271, 281, 282, 284, 286, 293, 295, 299, 301, 314, 316, 317, 319, 323, 331, 342, 350, 351, 353, 381, 396, 397, 401, 403, 416, 418, 429, 431, 432, 434, 438, 447, 454, 461, 470, 471, 472, 474, 509, 531, 534, 535, 536, 538, 541, 543, 544, 546, 547, 548, 551, 557, 559, 566, 567, 571, 578, 580, 581, 582, 583, 584, 585, 586, 588, 592, 594, 595, 597, 601, 603, 604, 606, 607, 609, 610, 617, 619, 648, 649, 651, 652, 653, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 676, 677, 679, 680, 682, 697, 701, 702, 704, 708, 745, 746, 747, 748, 750], "5": [13, 14, 15, 16, 27, 28, 66, 67, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 109, 111, 115, 119, 126, 130, 131, 132, 156, 158, 159, 161, 167, 175, 178, 181, 184, 185, 186, 195, 197, 221, 243, 259, 271, 281, 282, 284, 286, 292, 296, 298, 299, 301, 311, 313, 314, 316, 317, 318, 319, 323, 331, 342, 350, 351, 353, 381, 396, 397, 401, 403, 416, 418, 429, 431, 432, 434, 438, 440, 443, 447, 448, 449, 454, 461, 471, 472, 474, 509, 531, 534, 536, 537, 543, 544, 545, 546, 547, 548, 551, 559, 566, 567, 571, 578, 580, 581, 582, 583, 584, 585, 586, 588, 592, 594, 595, 597, 601, 603, 604, 606, 607, 609, 610, 617, 619, 648, 649, 651, 652, 653, 654, 658, 659, 661, 662, 663, 664, 665, 666, 669, 670, 672, 676, 677, 679, 680, 682, 697, 701, 702, 704, 729, 740], "6": [13, 14, 27, 28, 66, 67, 75, 76, 77, 78, 93, 94, 111, 115, 119, 122, 130, 131, 132, 156, 158, 159, 161, 167, 175, 221, 243, 259, 271, 281, 282, 284, 286, 299, 301, 302, 304, 314, 316, 317, 318, 319, 323, 331, 342, 350, 351, 353, 381, 396, 397, 401, 403, 416, 418, 429, 431, 432, 434, 438, 447, 454, 461, 471, 472, 474, 509, 531, 534, 537, 538, 543, 544, 546, 547, 548, 559, 564, 566, 571, 572, 574, 578, 580, 581, 582, 583, 584, 586, 588, 592, 594, 595, 597, 601, 603, 604, 606, 607, 609, 610, 617, 619, 648, 649, 651, 652, 653, 654, 659, 660, 663, 664, 665, 666, 676, 677, 679, 680, 682, 697], "z": [13, 14, 15, 16, 66, 67, 75, 76, 77, 78, 115, 119, 122, 128, 130, 221, 255, 271, 281, 282, 299, 301, 314, 316, 331, 350, 351, 353, 381, 396, 397, 447, 453, 454, 471, 472, 473, 474, 503, 544, 546, 571, 572, 574, 575, 577, 581, 582, 584, 659, 660, 676, 677, 679, 680, 682, 697], "7": [13, 14, 27, 28, 66, 67, 75, 76, 93, 94, 109, 111, 115, 118, 122, 125, 156, 158, 159, 221, 243, 271, 281, 282, 299, 301, 302, 304, 314, 316, 317, 319, 323, 331, 336, 342, 350, 351, 353, 381, 396, 397, 416, 418, 429, 431, 438, 447, 454, 461, 471, 472, 474, 515, 517, 518, 522, 531, 537, 538, 543, 544, 546, 547, 548, 559, 566, 571, 572, 574, 575, 577, 578, 580, 581, 582, 583, 584, 592, 594, 595, 597, 601, 603, 610, 617, 619, 648, 649, 651, 652, 653, 654, 655, 656, 659, 663, 664, 665, 676, 677, 679, 697], "9": [13, 14, 27, 28, 66, 67, 75, 76, 79, 80, 93, 94, 111, 115, 131, 132, 271, 281, 282, 299, 301, 302, 304, 381, 396, 397, 416, 418, 429, 431, 432, 434, 447, 471, 472, 474, 515, 517, 518, 522, 531, 534, 537, 538, 544, 546, 547, 548, 559, 564, 566, 581, 582, 583, 584, 595, 597, 601, 603, 607, 609, 610, 652, 653, 654, 659, 663, 664, 665, 676, 677, 679, 697, 745, 746, 747], "asin": [13, 14, 75, 76, 271, 708], "asinh": [13, 14, 75, 76, 271, 708], "atan": [13, 14, 75, 76, 271, 296, 708], "atan2": [13, 14, 75, 76, 271, 708], "atanh": [13, 14, 75, 76, 271, 708], "bitwise_and": [13, 14, 75, 76, 271], "bitwise_invert": [13, 14, 75, 76, 271], "bitwise_left_shift": [13, 14, 75, 76, 271], "bitwise_or": [13, 14, 75, 76, 271], "bitwise_right_shift": [13, 14, 75, 76, 271], "bitwise_xor": [13, 14, 75, 76, 271], "ceil": [13, 14, 75, 76, 167, 168, 271, 708], "0": [13, 14, 15, 16, 27, 28, 29, 30, 39, 40, 45, 49, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 113, 114, 115, 128, 130, 131, 132, 133, 156, 158, 159, 160, 161, 162, 163, 167, 168, 172, 176, 177, 181, 182, 183, 184, 185, 186, 192, 195, 197, 204, 221, 223, 226, 230, 233, 237, 240, 241, 243, 246, 247, 248, 249, 250, 251, 252, 253, 255, 259, 262, 264, 265, 269, 271, 272, 274, 275, 277, 278, 280, 281, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 305, 307, 311, 313, 314, 316, 317, 318, 319, 320, 322, 323, 325, 331, 336, 339, 341, 342, 350, 351, 353, 369, 371, 372, 374, 378, 380, 396, 397, 398, 400, 401, 403, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 438, 439, 440, 443, 444, 446, 447, 448, 449, 450, 453, 454, 457, 458, 460, 461, 462, 468, 471, 472, 474, 479, 488, 494, 497, 498, 503, 509, 510, 511, 515, 517, 518, 522, 523, 531, 532, 534, 536, 537, 538, 543, 544, 545, 546, 547, 548, 551, 564, 566, 567, 569, 571, 572, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 600, 601, 603, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 630, 642, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 672, 676, 677, 679, 680, 682, 683, 685, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 704, 708, 720, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752], "co": [13, 14, 60, 75, 76, 128, 144, 271, 277, 278, 325, 447, 470, 708], "cosh": [13, 14, 75, 76, 271, 277, 278, 708], "divid": [13, 14, 64, 65, 75, 76, 115, 121, 271, 328, 344, 345, 347, 447, 505, 581, 610], "equal": [13, 14, 64, 65, 75, 76, 115, 122, 123, 167, 172, 174, 175, 186, 192, 271, 305, 307, 311, 313, 351, 354, 356, 357, 359, 410, 412, 416, 418, 447, 448, 450, 453, 454, 544, 548, 557, 560, 581, 582, 584, 589, 591, 610, 623, 625, 652, 656, 664, 665, 666, 668, 669, 670, 672, 673, 675, 676, 683, 685, 692, 694, 695, 698, 700], "erf": [13, 14, 75, 76, 271], "exp": [13, 14, 75, 76, 271, 283, 338, 339, 341, 381, 383, 708], "expm1": [13, 14, 75, 76, 271], "floor": [13, 14, 75, 76, 271, 311, 313, 328, 345, 447, 469, 708], "floor_divid": [13, 14, 75, 76, 271], "greater": [13, 14, 64, 65, 75, 76, 271, 275, 284, 286, 293, 295, 305, 307, 311, 313, 328, 331, 342, 344, 345, 347, 351, 410, 412, 413, 415, 419, 421, 444, 446, 544, 546, 581, 611, 613, 652, 656], "greater_equ": [13, 14, 75, 76, 271], "isfinit": [13, 14, 75, 76, 271], "isinf": [13, 14, 75, 76, 271], "isnan": [13, 14, 75, 76, 271], "less": [13, 14, 60, 64, 65, 75, 76, 109, 115, 122, 126, 127, 128, 271, 275, 277, 278, 280, 284, 286, 293, 295, 317, 319, 322, 325, 369, 371, 372, 374, 378, 380, 410, 412, 413, 415, 419, 421, 429, 431, 544, 557, 560, 569, 652, 656, 676, 698, 700], "less_equ": [13, 14, 75, 76, 271], "log": [13, 14, 75, 76, 108, 109, 118, 122, 125, 128, 131, 167, 177, 271, 283, 338, 375, 377, 381, 383, 544, 562, 708], "log10": [13, 14, 75, 76, 271], "log1p": [13, 14, 75, 76, 271], "log2": [13, 14, 75, 76, 271], "logaddexp": [13, 14, 75, 76, 271], "logical_and": [13, 14, 75, 76, 271, 708], "logical_not": [13, 14, 75, 76, 271, 708], "logical_or": [13, 14, 75, 76, 271, 708], "logical_xor": [13, 14, 75, 76, 271], "multipli": [13, 14, 75, 76, 115, 119, 121, 271, 447, 461], "neg": [13, 14, 75, 76, 118, 122, 125, 156, 158, 167, 168, 172, 271, 354, 356, 357, 359, 398, 400, 410, 412, 413, 415, 544, 564, 568, 569, 581, 595, 597, 607, 609, 701, 702, 704, 705, 707], "not_equ": [13, 14, 75, 76, 271], "pow": [13, 14, 75, 76, 271], "remaind": [13, 14, 64, 65, 75, 76, 271, 447, 469, 581, 610], "round": [13, 14, 59, 60, 61, 75, 76, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 271, 281, 317, 319, 328, 342, 344, 345, 347, 398, 400, 429, 431, 444, 446, 708], "sign": [13, 14, 60, 75, 76, 108, 129, 133, 167, 168, 271, 272, 274, 281, 293, 295, 311, 313, 398, 400, 413, 415, 544, 562, 664, 665, 666, 668, 676, 689, 691, 695], "sin": [13, 14, 75, 76, 121, 128, 271, 447, 470, 708], "sinh": [13, 14, 75, 76, 271, 708], "sqrt": [13, 14, 75, 76, 271, 544, 569], "squar": [13, 14, 75, 76, 271, 429, 431, 531, 534, 544, 545, 547, 549, 550, 551, 556, 562, 563, 564], "subtract": [13, 14, 75, 76, 115, 121, 271], "tan": [13, 14, 75, 76, 114, 118, 122, 125, 126, 128, 271, 284, 286, 292, 296, 443, 664, 665, 666, 669, 670, 672, 708], "56": [13, 14, 75, 76, 115, 271, 292, 296, 429, 431, 438, 439, 443, 544, 559, 676, 677, 679, 697], "19": [13, 14, 75, 76, 115, 271, 292, 296, 314, 316, 438, 439, 443, 544, 548], "tanh": [13, 14, 75, 76, 128, 156, 271, 292, 296, 708], "trunc": [13, 14, 75, 76, 271], "elementwis": [14, 64, 65, 76, 113, 118, 128, 133, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 335, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 441, 443, 444, 446], "arraywithgener": [15, 130], "all_equ": [15, 16, 77, 78, 447], "equality_matrix": [15, 16, 77, 78, 447, 448, 449, 450], "With": [15, 16, 60, 61, 64, 65, 66, 67, 75, 76, 77, 78, 89, 90, 93, 94, 108, 115, 117, 128, 156, 158, 159, 160, 161, 162, 163, 167, 178, 186, 195, 197, 221, 243, 259, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 323, 331, 342, 350, 351, 353, 396, 397, 401, 403, 416, 418, 429, 431, 432, 434, 438, 447, 448, 449, 450, 454, 460, 461, 468, 471, 472, 474, 509, 510, 511, 531, 534, 537, 538, 543, 544, 545, 546, 547, 548, 555, 566, 571, 572, 574, 578, 580, 581, 582, 584, 585, 592, 594, 595, 597, 601, 603, 607, 609, 610, 617, 619, 648, 649, 651, 652, 653, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 676, 677, 679, 697, 701, 702, 704], "x1": [15, 16, 75, 76, 77, 78, 115, 126, 186, 216, 221, 259, 271, 281, 283, 293, 295, 299, 301, 305, 307, 308, 310, 311, 313, 314, 316, 326, 328, 329, 331, 338, 344, 345, 347, 348, 350, 351, 353, 363, 365, 366, 368, 381, 383, 384, 386, 390, 392, 393, 395, 396, 397, 398, 400, 404, 406, 410, 412, 413, 415, 435, 437, 447, 448, 449, 450, 453, 531, 536, 544, 546, 552, 554, 559, 563, 566, 568, 659, 663], "mix": [15, 16, 66, 67, 112, 115, 117, 128, 186, 212, 221, 259, 271, 281, 299, 301, 314, 316, 331, 350, 351, 353, 396, 397, 447, 448, 449, 460, 468, 471, 472, 474, 509, 510, 511, 531, 534, 537, 538, 543, 544, 566, 571, 572, 574, 578, 580, 581, 582, 584, 648, 649, 651, 659, 663, 676, 677, 679, 683, 685, 697], "native_arrai": [15, 16, 45, 51, 57, 66, 67, 77, 78, 156, 158, 159, 160, 161, 162, 163, 167, 178, 186, 195, 197, 221, 243, 259, 271, 284, 286, 299, 301, 314, 316, 317, 319, 331, 342, 350, 351, 353, 396, 397, 401, 403, 429, 431, 432, 434, 447, 448, 449, 450, 454, 460, 461, 468, 471, 472, 474, 509, 510, 511, 531, 534, 537, 538, 543, 544, 546, 547, 548, 566, 571, 572, 574, 578, 580, 581, 582, 584, 592, 594, 595, 597, 601, 603, 610, 617, 619, 648, 649, 651, 652, 653, 659, 660, 661, 662, 663, 664, 665, 666, 676, 677, 679, 680, 682, 697, 701, 702, 704], "gather_nd": [15, 16, 64, 65, 77, 78, 447, 708], "indic": [15, 16, 64, 65, 77, 78, 111, 129, 133, 156, 161, 271, 419, 421, 447, 471, 472, 473, 474, 481, 494, 497, 498, 531, 532, 533, 534, 535, 536, 537, 538, 544, 569, 581, 607, 609, 630, 631, 633, 635, 637, 638, 639, 641, 644, 645, 646, 647, 648, 649, 651, 652, 653, 659, 660, 661, 662, 664, 665, 667, 669, 670, 672, 673, 675, 708, 711, 713, 729, 730, 731, 732, 733, 734, 735, 736, 741, 742], "gener": [16, 43, 44, 64, 65, 78, 105, 106, 109, 110, 111, 112, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 164, 167, 168, 176, 177, 186, 195, 197, 271, 284, 286, 314, 316, 317, 319, 323, 342, 413, 415, 429, 431, 432, 434, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 521, 581, 592, 594, 607, 609, 652, 653, 654, 656, 657, 664, 665, 666, 669, 670, 672, 676, 680, 682, 708, 745, 749], "arraywithgradi": [17, 130], "gradient": [18, 64, 65, 80, 113, 122, 131, 132, 144, 145, 221, 265, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 626, 627, 628, 629, 708, 745, 746, 747, 748, 749, 750], "arraywithimag": [19, 130], "imag": [20, 82, 108, 111, 113, 128, 129, 131, 133, 144, 531, 532, 533, 534, 535, 537, 538, 708], "arraywithlay": 21, "layer": [22, 59, 84, 113, 114, 128, 129, 132, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 648, 649, 651, 708, 720, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752], "linear_algebra": [23, 24, 85, 86, 113, 130, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570], "arraywithlinearalgebra": 23, "matmul": [23, 24, 85, 86, 113, 119, 128, 544, 564, 708], "arraywithloss": 25, "binary_cross_entropi": [25, 26, 87, 88, 571], "pred": [25, 26, 87, 88, 118, 122, 125, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580], "epsilon": [25, 26, 29, 30, 79, 80, 87, 88, 91, 92, 118, 122, 125, 132, 515, 517, 518, 522, 544, 557, 560, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 648, 649, 650, 651, 743, 744, 745, 746, 747], "1e": [25, 26, 29, 30, 79, 80, 87, 88, 91, 92, 118, 122, 125, 132, 133, 447, 477, 515, 517, 518, 522, 544, 564, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 648, 649, 650, 651, 708, 745, 746, 747, 748, 750], "07": [25, 26, 79, 80, 87, 88, 132, 515, 517, 518, 522, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 745, 746, 747], "cross_entropi": [25, 26, 87, 88, 118, 122, 125, 571, 578, 580], "axi": [25, 26, 27, 28, 37, 38, 39, 40, 41, 42, 64, 65, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 115, 118, 122, 123, 125, 126, 128, 130, 133, 144, 156, 161, 167, 176, 177, 221, 223, 226, 233, 246, 247, 248, 249, 250, 251, 252, 253, 265, 447, 461, 462, 471, 513, 544, 546, 548, 568, 569, 571, 575, 576, 577, 578, 579, 580, 581, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 601, 602, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 622, 623, 625, 652, 658, 659, 660, 661, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707], "sparse_cross_entropi": [25, 26, 87, 88, 571], "loss": [26, 88, 113, 118, 131, 132, 133, 572, 574, 575, 577, 578, 580, 708], "arraywithmanipul": 27, "clip": [27, 28, 64, 65, 89, 90, 118, 122, 125, 128, 131, 133, 271, 396, 397, 447, 457, 458, 581, 585, 708], "x_min": [27, 28, 64, 65, 89, 90, 128, 133, 581, 582, 583, 584, 585], "x_max": [27, 28, 64, 65, 89, 90, 128, 133, 581, 582, 583, 584, 585], "roll": [27, 28, 89, 90, 122, 126, 581, 582, 583], "8": [27, 28, 66, 67, 75, 76, 93, 94, 108, 111, 115, 122, 127, 131, 156, 160, 221, 243, 271, 281, 299, 301, 317, 319, 323, 331, 350, 351, 353, 396, 397, 416, 418, 429, 431, 432, 434, 447, 454, 471, 472, 474, 531, 538, 544, 546, 547, 548, 559, 566, 571, 572, 574, 581, 582, 583, 584, 595, 597, 601, 603, 610, 652, 653, 654, 659, 663, 664, 665, 676, 677, 679, 697, 708, 729, 740], "concat": [27, 28, 64, 65, 89, 90, 221, 250, 251, 252, 253, 265, 447, 470, 581, 708], "xs": [27, 28, 89, 90, 122, 221, 244, 248, 250, 251, 252, 447, 448, 450, 454, 515, 519, 581, 586, 587, 588], "constant_pad": [27, 28, 89, 90, 581], "pad_width": [27, 28, 89, 90, 581, 589, 590, 591, 623, 624, 625], "valu": [27, 28, 64, 65, 66, 67, 68, 89, 90, 109, 115, 117, 118, 122, 123, 124, 125, 126, 128, 130, 133, 145, 167, 168, 172, 174, 175, 176, 177, 186, 192, 199, 200, 201, 221, 233, 264, 265, 271, 272, 274, 275, 281, 284, 286, 290, 317, 319, 328, 329, 331, 332, 335, 342, 344, 345, 347, 348, 350, 351, 353, 363, 365, 366, 368, 396, 397, 398, 400, 404, 406, 407, 409, 410, 412, 416, 418, 444, 446, 447, 457, 458, 459, 464, 470, 471, 472, 474, 479, 482, 486, 496, 497, 498, 499, 500, 501, 514, 515, 517, 518, 519, 522, 526, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 557, 560, 561, 562, 563, 564, 565, 569, 581, 582, 584, 589, 590, 591, 601, 603, 604, 606, 623, 625, 626, 627, 628, 630, 634, 635, 636, 637, 638, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 742, 743, 744, 745, 746, 747, 749], "expand_dim": [27, 28, 89, 90, 128, 131, 581, 708], "flip": [27, 28, 89, 90, 130, 131, 133, 271, 302, 304, 581, 601, 603, 708], "permute_dim": [27, 28, 89, 90, 581], "ax": [27, 28, 64, 65, 89, 90, 113, 115, 123, 130, 221, 265, 447, 461, 544, 555, 563, 566, 569, 581, 589, 591, 595, 597, 598, 599, 600, 607, 609, 611, 613, 617, 619, 623, 625, 659, 660, 661, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "repeat": [27, 28, 64, 65, 89, 90, 109, 114, 115, 119, 121, 122, 447, 467, 581, 620, 622], "reshap": [27, 28, 64, 65, 89, 90, 125, 128, 130, 133, 581, 708], "shape": [27, 28, 64, 65, 89, 90, 93, 94, 109, 113, 114, 115, 123, 124, 125, 126, 128, 130, 131, 132, 133, 156, 159, 167, 170, 171, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 221, 233, 261, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 331, 336, 338, 339, 341, 342, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 447, 458, 469, 472, 474, 478, 494, 497, 498, 504, 531, 533, 534, 535, 537, 538, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 557, 558, 559, 560, 561, 563, 564, 565, 567, 568, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 605, 606, 607, 609, 610, 611, 613, 614, 616, 617, 619, 623, 625, 652, 654, 655, 656, 659, 660, 662, 669, 670, 672, 673, 675, 676, 677, 679, 697, 701, 702, 704, 705, 707, 708, 729, 731, 732, 733, 734, 735, 736, 743, 744], "shift": [27, 28, 89, 90, 115, 126, 271, 305, 307, 311, 313, 581, 607, 608, 609], "squeez": [27, 28, 89, 90, 581, 708], "stack": [27, 28, 64, 65, 89, 90, 128, 167, 182, 183, 544, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 560, 561, 564, 565, 567, 581, 630, 631, 640, 641, 708, 729, 738], "swapax": [27, 28, 89, 90, 581], "axis0": [27, 28, 89, 90, 581, 617, 618, 619], "axis1": [27, 28, 89, 90, 544, 548, 581, 617, 618, 619], "tile": [27, 28, 89, 90, 581, 708], "rep": [27, 28, 89, 90, 581, 620, 621, 622], "zero_pad": [27, 28, 89, 90, 581, 708], "manipul": [28, 59, 90, 113, 133, 144, 582, 584, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 607, 609, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625], "arraywithnorm": 29, "layer_norm": [29, 30, 91, 92, 648], "normalized_idx": [29, 30, 91, 92, 648, 649, 650, 651], "05": [29, 30, 91, 92, 221, 648, 649, 650, 651], "scale": [29, 30, 91, 92, 122, 221, 263, 264, 515, 523, 531, 539, 542, 543, 648, 649, 650, 651, 729, 737, 740, 745, 748], "offset": [29, 30, 91, 92, 544, 548, 567, 648, 649, 650, 651], "new_std": [29, 30, 91, 92, 648, 649, 650, 651, 743, 744], "norm": [30, 64, 65, 92, 113, 447, 457, 458, 544, 555, 569, 649, 651, 708, 744, 745, 747], "arraywithrandom": [31, 130], "random": [32, 64, 65, 94, 113, 124, 133, 144, 653, 654, 655, 656, 657, 658, 708], "arraywithsearch": 33, "arraywithset": 35, "arraywithsort": 37, "argsort": [37, 38, 99, 100, 669], "descend": [37, 38, 99, 100, 544, 564, 565, 669, 670, 671, 672, 673, 674, 675], "stabl": [37, 38, 99, 100, 108, 128, 145, 447, 476, 477, 499, 500, 505, 506, 669, 670, 671, 672, 673, 674, 675], "sort": [38, 64, 65, 66, 67, 68, 100, 113, 544, 549, 564, 565, 670, 672], "arraywithstatist": 39, "einsum": [39, 40, 101, 102, 676], "equat": [39, 40, 101, 102, 544, 563, 676, 677, 678, 679, 697], "max": [39, 40, 64, 65, 101, 102, 186, 204, 207, 271, 396, 447, 457, 458, 466, 497, 498, 544, 557, 560, 676, 745, 747], "keepdim": [39, 40, 41, 42, 64, 65, 101, 102, 103, 104, 447, 513, 544, 555, 569, 659, 660, 661, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707], "mean": [39, 40, 64, 65, 101, 102, 105, 106, 108, 109, 112, 115, 118, 122, 123, 124, 125, 128, 130, 131, 132, 133, 144, 145, 221, 250, 251, 252, 253, 265, 447, 466, 626, 627, 628, 629, 630, 636, 652, 655, 664, 665, 676, 708, 720], "min": [39, 40, 64, 65, 101, 102, 186, 204, 207, 271, 397, 447, 466, 497, 498, 505, 544, 561, 564, 565, 569, 676], "prod": [39, 40, 64, 65, 101, 102, 115, 123, 447, 466, 676], "std": [39, 40, 101, 102, 115, 652, 655, 664, 665, 676], "correct": [39, 40, 101, 102, 109, 110, 112, 118, 122, 123, 124, 126, 186, 216, 581, 582, 584, 676, 692, 693, 694, 698, 699, 700, 708], "sum": [39, 40, 64, 65, 101, 102, 118, 122, 123, 125, 128, 221, 250, 251, 252, 253, 265, 271, 281, 283, 338, 381, 383, 447, 462, 466, 497, 498, 531, 543, 544, 564, 567, 569, 676, 677, 679, 692, 694, 697], "var": [39, 40, 101, 102, 105, 106, 115, 128, 626, 627, 628, 676], "statist": [40, 102, 105, 106, 113, 123, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700], "arraywithutil": 41, "util": [42, 104, 113, 124, 221, 254, 702, 704, 705, 707], "add_ivy_array_instance_method": 43, "cl": [43, 44, 105, 106], "modul": [43, 44, 45, 49, 50, 61, 64, 65, 66, 67, 68, 105, 106, 108, 111, 117, 118, 119, 121, 125, 128, 129, 131, 133, 144, 145, 447, 492, 652, 653, 655, 656, 708, 715, 716, 717, 718, 719, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 751, 752], "to_ignor": [43, 44, 105, 106, 630, 641], "loop": [43, 44, 105, 106, 119, 145, 626, 627, 628, 629], "over": [43, 44, 45, 49, 59, 61, 64, 65, 105, 106, 108, 114, 115, 119, 125, 130, 145, 544, 555, 566, 568, 569, 648, 649, 651, 652, 656, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 743, 744], "etc": [43, 44, 61, 64, 65, 105, 106, 108, 109, 110, 113, 115, 117, 121, 122, 123, 126, 128, 130, 131, 145, 167, 176, 177, 447, 471, 472, 474, 494, 497, 498, 652, 653, 654, 656, 664, 665, 666, 668, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752], "us": [43, 44, 45, 50, 57, 60, 61, 64, 65, 66, 67, 68, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 144, 145, 156, 158, 159, 160, 161, 162, 163, 166, 186, 203, 221, 230, 231, 256, 260, 263, 264, 265, 266, 268, 270, 271, 284, 286, 299, 301, 314, 316, 323, 331, 342, 350, 351, 353, 396, 397, 401, 403, 416, 418, 429, 431, 447, 471, 476, 477, 491, 497, 498, 499, 500, 505, 506, 515, 517, 518, 522, 523, 531, 537, 539, 540, 542, 543, 544, 547, 548, 555, 571, 572, 574, 581, 592, 594, 595, 597, 601, 603, 607, 609, 617, 619, 626, 627, 628, 629, 630, 631, 633, 639, 640, 641, 643, 648, 649, 651, 659, 660, 661, 662, 664, 665, 666, 676, 677, 679, 697, 701, 702, 704, 708, 729, 737, 740, 741, 742, 743, 744, 745, 747, 748], "_wrap_funct": [43, 44, 105, 106, 118, 120], "we": [43, 44, 45, 50, 51, 57, 58, 59, 60, 61, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 515, 519, 708, 714], "want": [43, 44, 45, 50, 60, 105, 106, 107, 108, 109, 117, 131, 132, 133, 145], "don": [43, 44, 61, 105, 106, 108, 109, 110, 123, 132, 145], "t": [43, 44, 45, 50, 60, 61, 105, 106, 108, 109, 110, 111, 115, 123, 128, 130, 131, 132, 133, 145, 447, 454, 531, 540, 541], "As": [43, 44, 59, 105, 106, 109, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 664, 665, 666, 668], "shown": [43, 44, 64, 65, 105, 106, 109, 115, 126, 128, 130, 145, 167, 178, 271, 299, 301, 314, 316, 323, 416, 418, 544, 547, 581, 592, 594, 595, 597, 664, 665, 666, 669, 670, 672], "appropri": [43, 44, 105, 106, 109, 120, 271, 281, 398, 400, 659, 660], "our": [43, 44, 59, 60, 105, 106, 107, 108, 109, 115, 122, 127, 130, 131, 132, 133, 145, 708], "toi": [43, 44, 105, 106], "arrayexampl": [43, 44], "import": [43, 44, 45, 49, 60, 105, 106, 110, 113, 114, 115, 119, 121, 122, 123, 124, 125, 128, 130, 131, 133, 145, 221, 262, 708, 714], "pass": [43, 44, 45, 49, 64, 65, 66, 67, 68, 105, 106, 110, 114, 115, 116, 117, 118, 119, 121, 122, 125, 126, 130, 145, 186, 198, 221, 230, 265, 271, 293, 295, 447, 456, 485, 515, 529, 626, 627, 628, 718, 719, 741, 742, 745, 749, 751, 752], "hasattr": [43, 44, 105, 106, 130], "relu": [43, 44, 66, 67, 131, 132, 156, 157, 158, 708], "softmax": [43, 44, 66, 67, 156, 531, 542, 543, 708], "backend_handl": [45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 708], "contextmanag": [45, 46], "object": [45, 64, 65, 66, 67, 68, 130, 133, 167, 173, 186, 204, 221, 266, 515, 630, 633, 635, 637, 638, 639, 644, 645, 646, 647, 652, 658, 720, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742], "__init__": [45, 46, 49, 50, 64, 65, 66, 67, 68, 113, 119, 123, 128, 130, 131, 132, 133, 186, 187, 188, 189, 221, 222, 229, 230, 231, 232, 233, 234, 235, 236, 515, 516, 652, 653, 655, 656, 708, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "choose_random_backend": 45, "exclud": [45, 47, 115, 128, 167, 168, 652, 656], "clear_backend_stack": 45, "current_backend": [45, 66, 67, 113, 118], "current": [45, 49, 50, 57, 61, 64, 65, 66, 67, 68, 108, 109, 110, 111, 118, 124, 128, 133, 144, 145, 186, 205, 206, 208, 220, 221, 230, 254, 255, 259, 261, 447, 475, 482, 486, 493, 495, 630, 631, 640, 641, 708], "prioriti": [45, 49, 64, 65, 109, 125], "global_backend": [45, 49], "which": [45, 49, 50, 59, 60, 61, 64, 65, 66, 67, 68, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 156, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 195, 197, 198, 202, 204, 207, 208, 220, 221, 230, 231, 241, 246, 247, 248, 249, 250, 251, 252, 253, 255, 259, 261, 263, 264, 265, 271, 413, 415, 447, 451, 461, 462, 464, 471, 472, 474, 475, 481, 485, 493, 494, 495, 497, 498, 513, 515, 518, 519, 520, 522, 523, 524, 526, 528, 529, 531, 542, 544, 546, 548, 555, 563, 564, 568, 569, 571, 575, 577, 578, 580, 581, 586, 588, 595, 597, 601, 603, 607, 609, 610, 614, 616, 630, 635, 636, 637, 638, 643, 644, 645, 646, 647, 652, 653, 654, 656, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 672, 673, 675, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708, 711, 713, 718, 719, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752], "try": [45, 49, 58, 60, 61, 64, 65, 108, 109, 110, 111, 121, 122, 130, 145, 447, 512, 708], "infer": [45, 49, 112, 119, 123, 124, 128, 133, 164, 165, 167, 168, 169, 171, 174, 175, 179, 181, 185, 271, 348, 447, 478, 503, 581, 604, 606], "when": [45, 49, 59, 60, 64, 65, 66, 67, 68, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 145, 186, 192, 221, 271, 281, 339, 341, 410, 412, 447, 456, 485, 506, 571, 572, 574, 575, 577, 578, 580, 630, 641, 659, 660, 661, 663, 676, 680, 682, 686, 688, 692, 694, 698, 700, 708, 741, 742], "global": [45, 49, 50, 51, 57, 64, 65, 66, 67, 68, 118, 119, 123, 124, 128, 186, 199, 200, 201, 221, 230, 231, 263, 264, 265, 447, 476, 477, 496, 499, 500, 501, 505, 506, 648, 649, 651, 743, 744], "numpi": [45, 49, 50, 51, 59, 60, 64, 65, 109, 110, 117, 119, 123, 124, 125, 126, 128, 130, 133, 447, 510, 676, 677, 679, 697, 708], "np": [45, 49, 121, 123, 124, 125, 126, 130, 131, 133, 708], "py": [45, 49, 50, 109, 113, 114, 118, 119, 123, 124, 126, 128, 130, 132, 133, 652, 653, 655, 656], "noqa": [45, 49, 50, 167, 178, 186, 195, 197, 271, 281, 299, 301, 314, 316, 317, 319, 323, 416, 418, 429, 431, 432, 434, 438, 544, 547, 581, 592, 594, 595, 597, 607, 609, 676, 680, 682], "set_backend": [45, 49, 50, 57, 118, 119, 120, 123, 186, 205, 206, 221, 262, 447, 503, 708], "ha": [45, 49, 50, 59, 60, 61, 64, 65, 109, 114, 115, 118, 119, 120, 123, 124, 128, 130, 132, 133, 144, 145, 167, 178, 221, 240, 271, 272, 274, 398, 400, 410, 412, 544, 552, 554, 562, 563, 564, 567, 581, 592, 594, 611, 613, 664, 665, 666, 668, 676, 683, 685, 689, 691, 692, 694, 695, 698, 700], "jax": [45, 49, 50, 51, 60, 61, 109, 110, 119, 123, 124, 125, 126, 128, 130, 133, 145, 515, 521, 664, 665, 666, 668, 708], "get_backend": [45, 118, 119], "specifi": [45, 50, 64, 65, 112, 117, 118, 123, 124, 125, 126, 128, 131, 132, 133, 167, 168, 170, 174, 176, 177, 180, 182, 183, 184, 186, 192, 194, 221, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 259, 261, 264, 265, 266, 271, 413, 415, 447, 451, 461, 471, 472, 474, 480, 513, 544, 548, 555, 566, 567, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 589, 591, 595, 597, 607, 609, 611, 613, 614, 616, 623, 625, 630, 635, 637, 638, 644, 645, 646, 647, 659, 660, 661, 664, 665, 666, 668, 669, 670, 672, 676, 677, 679, 689, 691, 695, 697, 701, 702, 704, 705, 707], "isn": [45, 50, 109, 131, 145], "associ": [45, 50, 109, 118, 120, 145, 271, 281, 398, 400, 544, 557, 560, 570], "retriev": [45, 50, 109, 447, 451], "i": [45, 50, 109, 111, 112, 128, 131, 133, 167, 168, 178, 271, 272, 274, 293, 295, 305, 307, 311, 313, 317, 319, 328, 342, 344, 345, 347, 354, 356, 396, 397, 401, 403, 410, 412, 413, 415, 447, 453, 454, 515, 518, 520, 522, 523, 524, 544, 546, 552, 554, 557, 560, 563, 564, 567, 569, 581, 614, 616, 664, 665, 666, 668, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 692, 694, 695, 697, 698, 700], "e": [45, 50, 60, 61, 107, 109, 111, 112, 122, 131, 145, 166, 167, 178, 186, 191, 212, 221, 237, 271, 272, 274, 293, 295, 305, 307, 311, 313, 317, 319, 328, 336, 342, 344, 345, 347, 354, 356, 369, 371, 375, 377, 396, 397, 401, 403, 410, 412, 413, 415, 515, 518, 520, 522, 523, 524, 544, 546, 552, 554, 557, 560, 563, 564, 569, 581, 614, 616, 652, 655, 656, 664, 665, 666, 668, 669, 670, 672, 673, 675, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700], "one": [45, 50, 60, 61, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 108, 109, 115, 118, 121, 122, 123, 125, 126, 127, 130, 131, 133, 145, 167, 168, 178, 186, 193, 195, 197, 221, 250, 251, 252, 253, 265, 447, 448, 450, 491, 494, 497, 498, 544, 552, 554, 555, 559, 561, 568, 569, 581, 582, 585, 592, 594, 595, 597, 607, 609, 611, 613, 659, 660, 662, 664, 665, 666, 667, 668, 676, 677, 679, 697, 708], "torch": [45, 50, 57, 109, 113, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 164, 165, 186, 205, 206, 221, 262, 447, 503, 581, 592, 594, 708], "tensorflow": [45, 50, 57, 60, 61, 109, 110, 123, 124, 125, 126, 128, 133, 145, 708], "mxnet": [45, 50, 60, 110, 123, 124, 125, 128, 133, 708], "either": [45, 50, 57, 64, 65, 108, 109, 111, 114, 115, 118, 119, 122, 123, 124, 128, 130, 131, 145, 167, 173, 271, 281, 283, 293, 295, 338, 357, 359, 369, 371, 372, 374, 378, 380, 381, 383, 398, 400, 413, 415, 419, 421, 422, 425, 438, 447, 464, 487, 491, 492, 544, 552, 554, 626, 627, 628, 629, 676, 689, 691, 695, 729, 740, 741, 742], "doesn": [45, 50, 108, 111, 115, 123, 128, 145], "matter": [45, 50, 59, 115], "been": [45, 50, 109, 114, 118, 119, 122, 123, 124, 126, 128, 144, 145, 221, 240, 447, 465, 466, 467, 652, 653], "ivy_np": [45, 50], "ivy_jax": [45, 50], "subsequ": [45, 51, 108, 115, 117, 118, 121, 125, 126, 132], "call": [45, 51, 57, 60, 66, 67, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 221, 265, 447, 496, 501, 512, 515, 519, 630, 631, 636, 640, 641, 729, 740, 741, 742, 745, 749], "ndarrai": [45, 51, 121, 123, 124, 125, 126, 130, 167, 169, 179, 447, 510], "Or": [45, 51, 131], "jaxlib": [45, 51, 108, 123, 124, 126, 130], "xla_extens": [45, 51, 123, 124, 126, 130], "devicearrai": [45, 51, 130], "try_import_ivy_jax": 45, "warn": [45, 52, 53, 54, 55, 56], "try_import_ivy_mxnet": 45, "try_import_ivy_numpi": 45, "try_import_ivy_tf": 45, "try_import_ivy_torch": 45, "unset_backend": [45, 119], "unset": [45, 57, 119, 128, 130], "adjust": [45, 57, 676, 692, 694, 698, 700], "previous": [45, 57, 108, 111, 117, 118, 128, 447, 456], "implement": [45, 57, 109, 110, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 186, 192, 212, 221, 266, 271, 272, 274, 275, 277, 278, 280, 284, 286, 287, 289, 290, 293, 295, 320, 322, 323, 325, 336, 339, 341, 369, 371, 372, 374, 375, 377, 378, 380, 398, 400, 410, 412, 413, 415, 422, 425, 426, 428, 438, 544, 549, 664, 665, 666, 668, 669, 670, 672, 673, 675, 676, 680, 682, 683, 685, 686, 688, 708], "wa": [45, 57, 60, 64, 65, 115, 128, 130, 447, 512, 630, 643, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "last": [45, 57, 61, 64, 65, 109, 115, 119, 145, 156, 161, 221, 240, 531, 541, 544, 546, 548, 555, 567, 568, 571, 575, 577, 578, 580, 581, 595, 597, 607, 609, 610, 614, 616, 669, 670, 672, 673, 675, 701, 702, 704, 705, 707, 729, 739], "henc": [45, 57, 664, 665, 666, 668], "here": [45, 57, 108, 109, 110, 113, 115, 122, 126, 128, 129, 130, 131, 132, 133, 144, 145], "tensor": [45, 57, 59, 64, 65, 113, 118, 119, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 167, 176, 177, 186, 202, 271, 299, 301, 396, 397, 447, 494, 497, 498, 531, 539, 541, 544, 566, 581, 592, 594, 604, 606, 610, 652, 653, 659, 662, 708, 729, 737, 739], "howev": [45, 57, 60, 108, 110, 114, 117, 118, 119, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 145], "befor": [45, 57, 64, 65, 108, 109, 110, 114, 117, 121, 123, 124, 125, 128, 131, 145, 221, 265, 271, 444, 446, 531, 542, 543, 626, 627, 628, 630, 642, 664, 665, 666, 668, 676, 689, 691, 695], "becom": [45, 57, 59, 61, 109, 115, 122, 128, 133, 145, 581, 582, 584], "swap": [45, 57, 581, 617, 619], "python": [45, 57, 58, 59, 60, 108, 109, 111, 128, 130, 131, 145, 167, 168, 221, 260, 270, 271, 413, 415, 708, 714], "op": [45, 57, 113, 128, 145], "eagertensor": [45, 57], "def": [46, 110, 113, 115, 118, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 187, 188, 189, 222, 229, 232, 516, 708, 721, 724, 727], "ml": [58, 60, 61, 107, 127, 128, 129, 131, 132, 133, 144, 708, 714], "explos": [58, 60, 708], "A": [58, 59, 60, 61, 64, 65, 66, 67, 68, 111, 112, 117, 118, 122, 123, 124, 128, 131, 145, 167, 172, 179, 221, 230, 231, 265, 271, 407, 409, 441, 447, 477, 509, 544, 559, 562, 563, 564, 581, 610, 614, 616, 630, 631, 633, 635, 637, 638, 639, 640, 641, 644, 645, 646, 647, 676, 677, 679, 697, 701, 702, 704, 705, 707, 708, 751, 752], "huge": [58, 60, 131, 708], "number": [58, 59, 64, 65, 66, 67, 68, 108, 115, 122, 124, 125, 128, 131, 133, 164, 165, 166, 167, 168, 169, 172, 176, 177, 178, 179, 186, 193, 203, 204, 207, 209, 210, 212, 221, 257, 258, 259, 271, 281, 293, 295, 317, 319, 328, 342, 344, 345, 347, 396, 397, 398, 400, 410, 412, 413, 415, 416, 418, 419, 421, 444, 446, 447, 448, 450, 470, 477, 478, 493, 511, 514, 531, 542, 544, 549, 557, 562, 564, 568, 581, 582, 584, 589, 591, 598, 600, 601, 603, 607, 609, 610, 614, 616, 620, 622, 623, 625, 626, 627, 628, 629, 652, 653, 657, 659, 662, 664, 665, 666, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740], "tool": [58, 61, 109, 129, 133, 144, 145, 708], "have": [58, 59, 60, 61, 64, 65, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145, 156, 159, 167, 168, 170, 171, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 204, 221, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 443, 444, 446, 447, 458, 465, 466, 467, 469, 515, 521, 529, 531, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 592, 594, 595, 597, 598, 600, 601, 603, 607, 609, 611, 613, 614, 616, 617, 619, 652, 654, 658, 659, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 673, 675, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708], "explod": [58, 59, 708], "onto": [58, 59, 221, 250, 251, 630, 636, 642, 708], "scene": [58, 59, 112, 127, 129, 515, 518, 520, 522, 523, 524, 708], "b": [58, 61, 66, 67, 71, 72, 75, 76, 77, 78, 89, 90, 93, 94, 107, 112, 115, 118, 119, 122, 127, 128, 129, 131, 132, 133, 143, 186, 195, 197, 221, 243, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 323, 331, 342, 350, 351, 353, 401, 403, 416, 418, 429, 431, 432, 434, 438, 447, 448, 450, 453, 454, 460, 461, 468, 471, 472, 474, 511, 531, 534, 537, 538, 543, 544, 545, 546, 547, 559, 563, 566, 570, 571, 572, 574, 581, 582, 584, 585, 592, 594, 595, 597, 601, 603, 607, 609, 614, 616, 617, 619, 648, 649, 651, 652, 655, 656, 659, 661, 662, 663, 669, 670, 672, 676, 677, 679, 680, 682, 697, 701, 702, 704, 708, 714], "why": [58, 60, 109, 122, 125, 126, 130, 708], "unifi": [58, 60, 64, 65, 121, 128, 145, 221, 250, 251, 252, 253, 265, 708], "should": [58, 60, 64, 65, 66, 67, 68, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 131, 132, 164, 165, 167, 178, 182, 183, 186, 194, 221, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 336, 338, 339, 341, 342, 354, 356, 357, 359, 360, 362, 363, 365, 369, 371, 372, 374, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 404, 406, 410, 412, 413, 415, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 443, 444, 446, 447, 456, 485, 494, 515, 518, 520, 522, 523, 524, 531, 543, 544, 545, 546, 547, 548, 551, 552, 554, 557, 559, 560, 561, 563, 564, 566, 567, 568, 569, 581, 604, 606, 652, 658, 659, 660, 661, 664, 665, 666, 668, 676, 677, 679, 680, 682, 683, 685, 689, 691, 692, 694, 695, 697, 698, 700, 708], "them": [58, 59, 60, 61, 117, 119, 121, 122, 128, 130, 131, 132, 145, 708], "c": [58, 60, 61, 93, 94, 107, 112, 115, 118, 122, 127, 128, 129, 131, 145, 447, 453, 454, 460, 511, 515, 517, 518, 520, 522, 523, 524, 531, 537, 581, 614, 616, 659, 662, 676, 677, 679, 692, 694, 697, 698, 700, 708, 714], "standard": [58, 112, 113, 114, 116, 117, 121, 125, 126, 145, 167, 178, 186, 195, 197, 204, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 323, 342, 416, 418, 429, 431, 432, 434, 438, 544, 547, 581, 592, 594, 595, 597, 607, 609, 648, 649, 651, 652, 655, 664, 665, 666, 669, 670, 672, 676, 680, 682, 692, 694, 698, 700, 701, 702, 704, 708, 714, 743, 744], "re": [58, 59, 60, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 130, 133, 145, 221, 265, 447, 465, 544, 566, 581, 607, 609, 659, 663, 708], "collabor": [58, 59, 60, 708], "consortium": [58, 60, 708, 714], "data": [58, 60, 64, 65, 66, 67, 68, 112, 113, 114, 118, 120, 122, 124, 125, 126, 130, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 194, 195, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 216, 220, 221, 223, 224, 225, 226, 227, 228, 233, 234, 235, 237, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 404, 406, 410, 412, 413, 415, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 443, 444, 446, 447, 453, 454, 487, 488, 490, 507, 515, 521, 529, 531, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 581, 592, 594, 595, 597, 598, 600, 604, 606, 607, 609, 611, 613, 614, 616, 652, 658, 659, 660, 661, 662, 669, 670, 672, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708, 714, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740], "api": [58, 59, 108, 109, 112, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 131, 145, 167, 178, 186, 195, 197, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 323, 342, 416, 418, 429, 431, 432, 434, 438, 544, 547, 581, 592, 594, 595, 597, 607, 609, 664, 665, 666, 669, 670, 672, 676, 680, 682, 701, 702, 704, 708, 714], "open": [59, 60, 61, 107, 108, 111, 114, 144, 167, 168, 652, 654, 656, 708], "project": [59, 60, 61, 108, 109, 111, 113, 119, 130, 132, 144, 145, 652, 653, 655, 656], "grown": 59, "consider": [59, 115, 126], "recent": [59, 60, 108, 109], "year": [59, 61, 145, 708], "especi": [59, 108], "deep": [59, 64, 65, 107, 109, 110, 127, 131, 708], "learn": [59, 60, 108, 110, 112, 118, 127, 133, 144, 271, 348, 515, 518, 520, 522, 523, 524, 626, 627, 628, 629, 708, 745, 746, 747, 748, 749, 750], "can": [59, 60, 61, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 167, 169, 179, 186, 195, 197, 221, 263, 264, 265, 544, 551, 581, 604, 606, 652, 654, 708, 714], "seen": [59, 60, 115, 130, 131], "rapidli": 59, "increas": [59, 221, 245, 249, 253, 581, 589, 591, 623, 625, 630, 642], "github": [59, 109, 110, 114, 117], "repo": [59, 60, 61, 108, 109, 116, 128, 130, 131, 132, 133, 144, 708, 714], "term": [59, 109, 122, 531, 541, 729, 739], "time": [59, 60, 61, 108, 109, 110, 117, 118, 122, 123, 126, 128, 131, 133, 145, 515, 518, 522, 531, 541, 581, 620, 622, 626, 627, 628, 629, 659, 660, 661, 664, 665, 666, 729, 740, 741, 742], "These": [59, 60, 61, 109, 114, 115, 117, 118, 122, 123, 125, 126, 128, 129, 131, 132, 133, 145, 544, 549, 708, 714], "written": [59, 108, 113, 114, 121, 125, 126, 128, 130, 133, 145], "mani": [59, 60, 61, 64, 65, 108, 109, 110, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 145, 581, 610], "differ": [59, 60, 61, 64, 65, 66, 67, 68, 108, 109, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 145, 186, 204, 221, 242, 243, 246, 247, 271, 281, 398, 400, 435, 437, 531, 540, 581, 614, 616, 676, 689, 691, 695, 708], "while": [59, 60, 64, 65, 66, 67, 68, 108, 109, 115, 119, 125, 132, 133, 145, 271, 387, 389, 390, 392, 664, 665, 676, 683, 685], "wonder": [59, 61, 130], "thing": [59, 60, 61, 108, 109, 110, 119, 130, 131], "research": [59, 144], "develop": [59, 60, 61, 107, 108, 109, 110, 144, 145, 708], "consid": [59, 60, 64, 65, 113, 118, 129, 130, 131, 271, 387, 389, 390, 392, 664, 665, 666, 668], "speed": 59, "evolv": 59, "sharabl": 59, "code": [59, 60, 61, 64, 65, 66, 67, 68, 108, 109, 110, 111, 112, 114, 115, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 143, 145, 156, 158, 159, 160, 161, 162, 163, 221, 243, 266, 271, 314, 316, 432, 434, 531, 537, 538, 664, 665, 666, 669, 670, 672, 676, 677, 679, 697, 708, 714], "significantli": 59, "hinder": [59, 126], "librari": [59, 60, 61, 128, 133, 143, 145, 221, 266, 271, 339, 341, 387, 389, 390, 392, 544, 549, 664, 665, 666, 668, 676, 680, 682, 683, 685, 686, 688, 708], "outdat": 59, "month": 59, "rigor": 59, "maintain": [59, 109, 145, 669, 670, 672, 673, 675], "against": [59, 64, 65, 117, 145, 186, 193, 544, 552, 554, 555, 557, 560, 659, 660], "newest": 59, "version": [59, 60, 61, 108, 114, 128, 130, 544, 549, 708], "For": [59, 60, 61, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 167, 168, 178, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 317, 319, 320, 322, 323, 325, 336, 338, 339, 341, 342, 369, 371, 372, 374, 378, 380, 381, 383, 398, 400, 410, 412, 413, 415, 416, 418, 422, 425, 426, 428, 429, 431, 438, 444, 446, 515, 521, 529, 544, 564, 567, 581, 582, 584, 614, 616, 664, 665, 666, 668, 676, 680, 682, 686, 688, 695, 718, 719], "softwar": [59, 60, 108, 109], "pipelin": [59, 121, 133], "where": [59, 60, 61, 64, 65, 66, 67, 107, 108, 109, 110, 111, 114, 118, 119, 121, 122, 123, 124, 125, 128, 131, 132, 133, 145, 167, 174, 175, 178, 271, 293, 295, 336, 375, 377, 398, 400, 410, 412, 447, 481, 485, 494, 544, 549, 557, 560, 561, 564, 565, 567, 568, 581, 582, 584, 589, 591, 592, 594, 598, 600, 614, 616, 623, 625, 630, 631, 641, 652, 653, 659, 662, 676, 692, 694, 698, 700, 701, 702, 704, 705, 707, 708], "rapid": [59, 60, 108], "prototyp": 59, "vital": [59, 133], "signific": [59, 60, 145], "bottleneck": 59, "new": [59, 60, 61, 64, 65, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 120, 122, 123, 125, 127, 130, 133, 144, 167, 170, 173, 174, 175, 180, 181, 184, 185, 186, 216, 271, 292, 296, 298, 375, 377, 407, 409, 440, 441, 443, 447, 465, 466, 467, 470, 471, 472, 474, 497, 498, 499, 500, 505, 506, 515, 518, 520, 522, 523, 524, 581, 592, 594, 604, 606, 614, 616, 630, 635, 646, 647, 648, 649, 651, 708, 718, 719, 729, 739, 743, 744, 745, 746, 747, 748, 749, 750], "futur": [59, 61, 108, 109, 130, 145, 544, 549], "avail": [59, 64, 65, 108, 109, 114, 124, 145, 221, 240, 256, 257, 258, 268, 447, 466], "specif": [59, 64, 65, 110, 118, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 144, 145, 186, 212, 221, 263, 266, 271, 387, 389, 390, 392, 447, 465, 466, 467, 492, 544, 549, 566, 581, 614, 616, 626, 627, 628, 629, 652, 653, 676, 680, 682, 683, 685, 686, 688, 708, 711, 713, 714, 741, 742], "quickli": [59, 61, 108, 109, 131, 132], "obsolet": [59, 61], "user": [59, 60, 108, 109, 111, 112, 117, 119, 122, 125, 127, 145, 729, 740, 741, 742], "constantli": 59, "invent": 59, "wheel": 59, "desir": [59, 64, 65, 186, 192, 195, 197, 221, 266, 447, 481, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740], "provid": [59, 64, 65, 108, 109, 114, 115, 118, 121, 122, 123, 124, 125, 126, 128, 132, 144, 145, 164, 165, 167, 178, 186, 199, 200, 201, 208, 212, 220, 221, 240, 447, 464, 494, 498, 515, 518, 520, 522, 523, 524, 544, 568, 581, 595, 597, 614, 616, 659, 660, 676, 692, 694, 698, 700, 701, 702, 704, 705, 707, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 745, 746, 747, 748, 749, 750], "simultan": [59, 61], "modern": [59, 60], "simpl": [59, 108, 109, 113, 114, 115, 117, 118, 121, 122, 123, 124, 125, 128, 130, 132, 133, 145, 447, 468], "scalabl": [59, 128], "must": [59, 61, 64, 65, 66, 67, 68, 108, 109, 110, 113, 114, 115, 118, 121, 122, 123, 124, 126, 128, 132, 133, 156, 159, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 221, 250, 251, 252, 253, 265, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 443, 444, 446, 447, 458, 469, 498, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 586, 588, 592, 594, 595, 597, 598, 600, 601, 603, 607, 609, 611, 613, 614, 616, 617, 619, 652, 654, 657, 659, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 673, 675, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 745, 749], "determin": [59, 64, 65, 114, 118, 122, 123, 124, 186, 195, 197, 198, 203, 208, 209, 210, 220, 221, 256, 257, 258, 268, 271, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 305, 307, 308, 310, 311, 313, 314, 316, 320, 322, 323, 325, 326, 336, 338, 339, 341, 354, 356, 357, 359, 360, 362, 369, 371, 372, 374, 378, 380, 381, 383, 393, 395, 398, 400, 410, 412, 413, 415, 422, 425, 426, 428, 429, 431, 438, 440, 443, 447, 448, 450, 453, 454, 480, 482, 486, 487, 488, 489, 490, 507, 514, 515, 521, 531, 542, 544, 545, 546, 547, 548, 551, 552, 554, 557, 559, 560, 562, 563, 567, 568, 569, 626, 627, 628, 629, 664, 665, 666, 668, 701, 702, 704, 705, 707], "exactli": [59, 61, 115, 122, 124, 708, 714], "common": [59, 64, 65, 109, 110, 115, 118, 120, 122, 124, 145], "ground": [59, 117], "li": 59, "between": [59, 64, 65, 66, 67, 68, 115, 117, 118, 121, 122, 126, 127, 129, 130, 131, 133, 144, 167, 168, 186, 204, 271, 293, 295, 410, 412, 571, 572, 574, 575, 577, 578, 580, 581, 592, 594, 614, 616, 630, 636, 652, 654, 664, 665, 666, 668, 708, 745, 747], "find": [59, 64, 65, 108, 109, 128, 131, 664, 665, 666, 668, 708], "exist": [59, 60, 64, 65, 66, 67, 108, 110, 111, 114, 115, 116, 117, 118, 119, 120, 125, 128, 145, 447, 464, 745, 749], "essenti": [59, 60, 110, 115, 118, 124], "order": [59, 64, 65, 66, 67, 68, 108, 109, 111, 114, 115, 119, 121, 122, 123, 124, 126, 130, 131, 133, 145, 271, 293, 295, 515, 518, 520, 522, 523, 524, 544, 549, 555, 564, 565, 569, 581, 595, 597, 626, 627, 628, 659, 662, 664, 665, 666, 668, 669, 670, 672, 673, 675, 751, 752], "design": [59, 60, 112, 125, 128, 130, 145], "univers": 59, "abstract": [59, 122, 132, 145, 221, 236, 745, 749], "In": [59, 61, 108, 109, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 221, 260, 266, 267, 270, 271, 281, 398, 400, 413, 415, 447, 451, 485, 581, 604, 606, 652, 656, 708], "languag": [59, 61, 128], "first": [59, 60, 108, 109, 111, 115, 118, 121, 122, 126, 128, 130, 131, 133, 164, 165, 167, 176, 177, 186, 211, 216, 221, 240, 252, 271, 281, 283, 299, 301, 305, 307, 308, 310, 311, 313, 314, 316, 328, 329, 331, 338, 344, 345, 347, 350, 351, 353, 363, 365, 366, 368, 381, 383, 384, 386, 390, 392, 393, 395, 398, 400, 404, 406, 410, 412, 435, 437, 447, 453, 515, 519, 544, 546, 548, 549, 552, 554, 559, 561, 564, 566, 568, 581, 586, 588, 607, 609, 614, 616, 617, 619, 626, 627, 628, 629, 630, 631, 640, 641, 652, 658, 659, 660, 661, 664, 665, 666, 729, 740, 741, 742, 745, 749], "see": [59, 107, 108, 109, 110, 116, 118, 122, 124, 126, 130, 131, 144, 145, 167, 168, 173, 176, 177, 186, 194, 212, 271, 281, 283, 299, 301, 305, 307, 308, 310, 311, 313, 314, 316, 326, 338, 339, 341, 363, 365, 381, 383, 390, 392, 393, 395, 398, 400, 404, 406, 410, 412, 413, 415, 435, 437, 544, 557, 560, 563, 568, 569, 659, 661, 664, 665, 666, 668, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708], "clear": [59, 60, 61, 109, 110, 115, 117, 123, 124, 128, 130, 221, 239], "front": [59, 127, 128, 131, 708, 714], "runner": 59, "look": [59, 108, 109, 111, 113, 115, 118, 119, 122, 123, 124, 126, 128, 130, 132, 133, 708], "littl": [59, 130], "deeper": [59, 109, 112, 127, 221, 245, 249, 253, 630, 641, 642], "follow": [59, 60, 64, 65, 108, 109, 110, 111, 113, 114, 115, 117, 119, 121, 122, 123, 124, 125, 127, 128, 130, 131, 132, 133, 145, 186, 207, 221, 265, 271, 413, 415, 447, 483, 484, 485, 505, 506, 515, 518, 520, 522, 523, 524, 531, 542, 543, 544, 561, 569, 630, 636, 642, 664, 665, 666, 668, 708, 729, 739, 745, 749], "core": [59, 108, 110, 124, 128, 133, 221, 257, 708], "principl": 59, "oper": [59, 64, 65, 66, 67, 108, 110, 114, 115, 118, 121, 122, 124, 125, 131, 132, 167, 176, 177, 186, 212, 271, 281, 311, 313, 314, 316, 331, 350, 351, 353, 401, 403, 413, 415, 432, 434, 447, 455, 465, 466, 467, 507, 515, 518, 520, 522, 523, 524, 531, 532, 533, 534, 535, 536, 537, 538, 540], "expos": [59, 128, 132, 447, 459], "almost": [59, 109, 122, 129, 131], "ident": [59, 61, 64, 65, 118, 120, 122, 130, 131, 145, 221, 255, 630, 643, 708], "uniqu": [59, 118, 122, 145, 221, 230, 231, 626, 627, 628, 629, 630, 636, 664, 665, 666, 667, 668], "syntax": [59, 60], "There": [59, 108, 109, 115, 118, 121, 122, 123, 128, 131, 145], "onli": [59, 64, 65, 107, 108, 109, 113, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 143, 145, 221, 261, 271, 387, 389, 390, 392, 544, 552, 554, 561, 581, 595, 597, 630, 631, 632, 640, 641, 659, 660, 661, 676, 683, 685, 708, 745, 746, 747, 748, 749, 750], "wai": [59, 60, 108, 119, 125, 130, 131, 132, 133, 145], "unsurprisingli": [59, 115], "fundament": [59, 122, 128], "consist": [59, 64, 65, 121, 125, 221, 253, 544, 549, 676, 677, 679, 697, 741, 742], "each": [59, 60, 61, 64, 65, 66, 67, 68, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 144, 145, 156, 159, 160, 162, 167, 178, 186, 193, 221, 230, 231, 242, 243, 244, 245, 246, 247, 248, 252, 265, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 443, 444, 446, 447, 448, 450, 515, 518, 520, 522, 523, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 544, 545, 546, 547, 549, 552, 554, 557, 558, 560, 563, 564, 581, 589, 591, 601, 603, 607, 609, 610, 614, 616, 620, 622, 623, 625, 630, 636, 643, 652, 653, 659, 662, 664, 665, 666, 676, 677, 679, 697, 708, 714, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "veri": [59, 60, 108, 109, 113, 115, 117, 118, 122, 124, 125, 126, 129, 131, 132, 133, 145, 708], "similar": [59, 113, 122, 123, 124, 131, 145, 271, 413, 415, 531, 542, 729, 740], "convent": [59, 144, 544, 552, 554, 676, 677, 679, 697], "those": [59, 64, 65, 108, 109, 110, 122, 128, 133, 167, 168, 515, 529, 544, 561, 564, 581, 582, 584], "introduc": [59, 122, 131, 581, 607, 609, 664, 665], "2006": 59, "therefor": [59, 109, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 145, 186, 195, 197, 271, 281, 284, 286, 317, 319, 342, 429, 431, 432, 434, 438, 447, 471, 531, 534, 543, 581, 607, 609, 648, 649, 651, 676, 680, 682, 701, 702, 704], "present": [59, 64, 65, 109, 116, 122, 123, 124, 125, 126, 128], "itself": [59, 108, 109, 122, 125, 126, 132, 144, 145, 447, 451, 630, 642], "cut": 59, "cloth": 59, "adher": [59, 60, 114, 116, 128, 133], "semant": [59, 128, 133, 271, 413, 415], "up": [59, 60, 61, 107, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 144, 145], "hopefulli": [59, 60, 61, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144], "paint": [59, 128], "pictur": [59, 128], "how": [59, 61, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 144, 145, 708, 714, 729, 740, 741, 742], "pleas": [59, 60, 61, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 708], "discuss": [59, 60, 61, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 708], "faq": [59, 60, 61, 128, 130, 131, 132, 133, 144], "reach": [59, 60, 61, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 221, 245, 249, 253, 630, 642], "discord": [59, 60, 61, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 144, 708], "you": [59, 60, 61, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 708, 714], "question": [59, 60, 61, 108, 109, 115, 117, 128, 130, 131, 132, 133, 144, 145, 708], "central": 60, "goal": [60, 110], "being": [60, 61, 64, 65, 108, 109, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128, 131, 144, 145, 167, 168, 447, 496, 501, 664, 667, 708], "would": [60, 108, 109, 111, 112, 114, 115, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 132, 133, 145, 156, 161, 221, 266, 708], "entir": [60, 61, 64, 65, 109, 115, 116, 117, 121, 122, 125, 130, 131, 132, 133, 145, 221, 265, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 729, 738], "forgiven": 60, "rais": [60, 64, 65, 109, 125, 128, 130, 186, 194, 271, 336, 410, 412, 447, 455, 476, 485, 499, 506, 512, 544, 552, 554, 556, 568, 581, 611, 613, 614, 616, 659, 662, 676, 680, 682, 686, 688, 701, 702, 704, 705, 707, 741, 742, 745, 749], "eyebrow": 60, "somehow": 60, "pytorch": [60, 61, 110, 118, 123, 124, 125, 126, 128, 130, 133, 145, 515, 518, 520, 522, 523, 524, 708, 745, 746, 747, 748, 749, 750], "other": [60, 64, 65, 66, 67, 108, 109, 113, 114, 115, 117, 118, 121, 122, 125, 128, 130, 132, 133, 143, 144, 145, 164, 165, 167, 168, 271, 339, 341, 447, 448, 450, 451, 515, 519, 652, 656, 664, 667, 676, 692, 694, 698, 700, 708], "strong": [60, 145], "industri": 60, "back": [60, 121, 127, 128, 130, 145, 708, 714, 741, 742, 745, 749], "momentum": 60, "won": [60, 61, 109, 133], "ad": [60, 105, 106, 108, 109, 110, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 128, 132, 145, 447, 505, 506, 544, 549, 581, 592, 594, 751, 752], "just": [60, 61, 108, 109, 114, 115, 117, 118, 125, 128, 130, 131, 145, 676, 677, 679, 697, 729, 738], "make": [60, 61, 108, 109, 110, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 133, 221], "problem": [60, 109, 121, 130], "even": [60, 61, 108, 109, 114, 118, 123, 124, 126, 130, 131, 132, 133, 145, 271, 410, 412, 416, 418], "wors": 60, "rather": [60, 64, 65, 113, 114, 117, 122, 133, 145, 167, 168, 221, 265, 447, 487, 488, 490, 515, 521], "funni": 60, "comic": 60, "strip": 60, "easi": [60, 108, 109, 118, 122], "feasibl": 60, "space": [60, 167, 168, 176, 177, 447, 470], "unlik": [60, 115, 122, 221], "charger": 60, "charact": 60, "encod": [60, 131, 447, 470], "instant": [60, 708], "messag": [60, 109, 128, 130, 754, 755], "much": [60, 109, 113, 121, 122, 125, 128, 130, 131], "doe": [60, 64, 65, 109, 111, 112, 113, 114, 115, 117, 118, 119, 123, 125, 126, 128, 130, 131, 145, 271, 314, 316, 447, 485, 581, 610], "mandat": [60, 117, 125], "adopt": [60, 109, 121], "continu": [60, 61, 116, 117, 145], "own": [60, 61, 108, 114, 128, 145], "signatur": [60, 113, 114, 115, 122, 123, 124, 125, 126, 186, 195, 197, 271, 284, 286, 314, 316, 317, 319, 323, 342, 429, 431, 432, 434, 581, 592, 594, 607, 609, 664, 665, 666, 669, 670, 672, 676, 680, 682], "replac": [60, 64, 65, 109, 111, 115, 117, 120, 122, 123, 124, 128, 130, 133, 145, 447, 497, 498, 581, 582, 584, 652, 653], "your": [60, 61, 107, 108, 110, 111, 113, 114, 131, 132, 145, 708], "10": [60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 111, 115, 122, 128, 130, 131, 167, 174, 177, 221, 271, 299, 301, 302, 304, 323, 331, 350, 351, 353, 372, 374, 429, 431, 447, 461, 471, 472, 474, 496, 501, 515, 522, 531, 537, 544, 547, 548, 559, 566, 581, 595, 597, 601, 603, 610, 648, 649, 651, 652, 653, 654, 659, 662, 664, 665, 676, 677, 679, 680, 682, 697, 745, 747], "100": [60, 61, 93, 94, 131, 132, 133, 145, 271, 429, 431, 708], "despit": [60, 122, 124], "distinct": [60, 114, 122, 125, 127, 664, 665, 666, 668, 708], "still": [60, 64, 65, 114, 117, 123, 130, 132, 145, 708], "believ": [60, 109], "share": [60, 64, 65, 115, 117, 118, 119, 122, 128, 186, 216], "bring": [60, 128, 129], "benefit": [60, 61, 108, 109, 121, 122, 125, 130, 131, 145], "unrel": [60, 109], "what": [60, 61, 109, 112, 114, 115, 120, 122, 126, 127, 128, 130, 131, 132, 133, 144, 145, 708], "again": [60, 61, 109, 113, 115, 122, 125, 131, 133, 145], "contrari": 60, "bumpi": 60, "road": 60, "allud": [60, 131], "most": [60, 64, 65, 108, 109, 113, 117, 118, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 145, 544, 549], "technolog": 60, "sector": [60, 271, 277, 278, 280, 287, 289, 292, 296, 298, 322, 325, 440, 443], "full": [60, 61, 66, 67, 109, 114, 123, 126, 128, 145, 167, 186, 204, 271, 331, 350, 351, 353, 531, 537, 544, 561, 563, 564, 648, 649, 651], "success": 60, "reason": [60, 109, 113, 115, 118, 121, 122, 123, 125, 128, 130, 271, 413, 415], "build": [60, 107, 108, 118, 127, 129, 132, 133, 145, 664, 665, 666, 668, 708, 729, 740, 741, 742], "custom": [60, 132], "comput": [60, 61, 64, 65, 108, 118, 122, 128, 131, 145, 221, 265, 271, 281, 299, 301, 308, 310, 314, 316, 329, 331, 332, 335, 348, 350, 351, 353, 363, 365, 366, 368, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 401, 403, 404, 406, 447, 457, 458, 461, 462, 515, 517, 518, 519, 520, 522, 523, 524, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 544, 545, 546, 549, 550, 551, 552, 554, 555, 561, 562, 563, 564, 568, 569, 571, 572, 574, 575, 577, 578, 580, 630, 636, 664, 665, 666, 668, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700], "thank": [60, 131], "interoper": 60, "compon": [60, 128], "bio": [60, 108], "hardwar": [60, 108], "initi": [60, 64, 65, 66, 67, 68, 109, 119, 123, 124, 221, 531, 541, 722, 723, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 745, 749], "pcie": 60, "interfac": [60, 133, 145], "motherboard": 60, "raid": 60, "storag": [60, 131], "virtual": [60, 109, 111], "bluetooth": 60, "wireless": 60, "exchang": 60, "btx": 60, "factor": [60, 221, 230, 263, 264, 265, 515, 517, 518, 522, 523, 531, 532, 533, 534, 535, 536, 537, 538, 544, 545, 729, 730, 731, 732, 733, 734, 735, 736, 745, 746, 747, 748], "sata": 60, "connect": [60, 108, 132, 133, 729, 739, 740], "host": [60, 145], "bu": 60, "adapt": [60, 515, 523, 745, 748], "html": [60, 111, 114, 186, 195, 197, 271, 284, 286, 314, 316, 317, 319, 323, 342, 429, 431, 432, 434, 581, 592, 594, 607, 609, 664, 665, 666, 669, 670, 672, 676, 680, 682], "enabl": [60, 64, 65, 66, 67, 68, 108, 109, 117, 118, 121, 122, 125, 127, 128, 129, 131, 133, 145], "anyon": [60, 107, 145], "websit": 60, "tcp": 60, "ip": 60, "node": [60, 64, 65, 122, 630, 631, 640, 641], "commun": [60, 107, 109, 110, 145, 708, 714], "network": [60, 118, 122, 128, 132, 144, 531, 540, 708, 715, 729, 741, 742], "smtp": 60, "possibl": [60, 107, 108, 109, 110, 114, 115, 117, 122, 123, 125, 128, 131, 144, 145, 447, 491, 509, 676, 680, 682, 686, 688], "send": 60, "gmail": 60, "outlook": 60, "pop": 60, "email": 60, "ieee": [60, 166, 186, 204, 271, 281, 339, 341, 398, 400, 413, 415, 429, 431], "754": [60, 166, 186, 204, 271, 281, 339, 341, 398, 400, 413, 415, 429, 431], "allow": [60, 128, 145, 167, 176, 177, 447, 491, 741, 742], "calcul": [60, 64, 65, 66, 67, 68, 114, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 320, 322, 323, 325, 326, 336, 338, 339, 341, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 398, 400, 410, 412, 422, 425, 426, 428, 429, 431, 435, 437, 438, 571, 572, 574, 575, 577, 578, 580, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700], "live": [60, 61], "depend": [60, 108, 109, 114, 120, 122, 123, 128, 145, 186, 192, 271, 272, 274, 275, 277, 278, 280, 284, 286, 287, 289, 290, 293, 295, 320, 322, 323, 325, 336, 339, 341, 369, 371, 372, 374, 375, 377, 378, 380, 410, 412, 422, 425, 426, 428, 438, 544, 549, 561, 563, 564, 659, 663, 669, 670, 672, 673, 675], "did": [60, 110, 133], "aris": [60, 145], "until": [60, 109, 145, 708], "substanti": [60, 109, 117, 121], "innov": 60, "growth": 60, "usag": [60, 128, 221, 265], "relev": [60, 108, 110, 115, 122, 123, 131, 745, 746, 747, 748, 749, 750], "area": [60, 125, 143, 271, 277, 278, 280, 287, 289, 292, 296, 298, 322, 325, 440, 443, 708], "necess": 60, "parti": [60, 145], "could": [60, 61, 108, 109, 115, 117, 122, 123, 125, 128, 130, 131, 132, 664, 665, 666, 668], "easili": [60, 109, 131, 132, 133, 145, 708], "engag": [60, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "regard": [60, 122, 221], "effect": [60, 114, 121, 122, 126, 145, 167, 178, 515, 524, 676, 692, 694, 698, 700], "2015": 60, "sinc": [60, 108, 109, 145], "alongsid": 60, "machin": [60, 108, 118, 144, 186, 204, 207, 271, 348, 544, 557, 560], "given": [60, 61, 64, 65, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 132, 133, 144, 167, 168, 170, 176, 177, 221, 254, 260, 262, 263, 264, 265, 267, 270, 447, 461, 462, 472, 474, 497, 498, 513, 515, 517, 518, 520, 522, 523, 524, 531, 532, 533, 534, 535, 536, 537, 538, 544, 570, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 592, 594, 595, 597, 601, 603, 607, 609, 610, 620, 622, 630, 637, 638, 652, 654, 655, 656, 658, 669, 673, 675, 718, 719], "frame": [60, 144], "matur": [60, 145], "state": [60, 114, 126, 127, 128, 129, 131, 144, 271, 398, 400, 531, 541, 708, 715, 716, 717, 718, 719, 720, 722, 723, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "than": [60, 64, 65, 109, 113, 115, 117, 122, 125, 128, 131, 132, 133, 145, 167, 168, 186, 204, 221, 265, 271, 275, 277, 278, 280, 284, 286, 293, 295, 305, 307, 311, 313, 317, 319, 322, 325, 328, 342, 344, 345, 347, 369, 371, 372, 374, 378, 380, 396, 410, 412, 413, 415, 419, 421, 429, 431, 444, 446, 447, 487, 488, 490, 515, 521, 544, 546, 552, 554, 557, 560, 569, 581, 582, 584, 595, 597, 611, 613, 652, 656, 664, 665, 666, 668, 676, 689, 691, 692, 694, 695, 698, 700], "preced": [60, 132], "mention": [60, 108, 109, 115, 118, 125, 126], "aros": 60, "70": [60, 544, 559, 676, 677, 679, 697], "80": [60, 544, 559, 676, 677, 679, 697], "90": [60, 93, 94, 271, 314, 316, 416, 418, 544, 559, 676, 677, 679, 697], "effort": [60, 107, 145], "stage": [60, 107, 109, 111, 112, 708], "complet": [60, 64, 65, 109, 110, 121, 122, 130, 131, 544, 561], "natur": [60, 115, 121, 122, 144, 271, 336, 369, 371, 375, 377, 544, 562], "like": [60, 108, 109, 111, 112, 113, 114, 115, 117, 124, 125, 126, 127, 128, 130, 131, 132, 133, 144, 145, 515, 521, 652, 656, 708], "certainli": 60, "mission": [60, 708], "creat": [60, 64, 65, 107, 108, 109, 111, 123, 124, 125, 128, 129, 132, 143, 144, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 184, 185, 221, 230, 231, 447, 471, 472, 474, 494, 497, 498, 509, 515, 528, 652, 653, 654, 656, 708, 714, 718, 719, 720, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "At": [60, 110], "process": [60, 61, 107, 108, 109, 111, 118, 122, 128, 133, 221, 230, 231, 260, 270], "ourselv": 60, "lead": [60, 61, 64, 65, 66, 67, 68, 145, 544, 561, 564], "quansight": 60, "compani": 60, "made": [60, 109, 110, 122, 125, 128, 130], "organ": [60, 113, 118, 121, 122], "panda": 60, "scipi": 60, "conda": [60, 108, 111], "dask": [60, 664, 665, 666, 668], "apach": 60, "onnx": 60, "scikit": 60, "jupyt": 60, "aw": 60, "cupi": 60, "net": [60, 61, 128, 133], "sympi": 60, "rai": [60, 271, 293, 295], "modin": 60, "spyder": 60, "includ": [60, 64, 65, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 144, 145, 167, 168, 169, 179, 447, 480, 514, 544, 569, 630, 631, 652, 656, 659, 661, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 711, 713, 729, 739, 740, 743, 744], "member": [60, 109], "googl": [60, 708], "octoml": 60, "einop": [60, 64, 65, 447, 465, 466, 467], "further": [60, 61, 109, 111, 115, 121, 127, 131, 132, 708], "sponsor": 60, "lg": 60, "electron": 60, "microsoft": 60, "d": [60, 61, 93, 94, 107, 108, 112, 122, 131, 447, 454, 460, 531, 532, 533, 534, 535, 536, 537, 538, 544, 548, 559, 708, 714], "shaw": 60, "intel": 60, "togeth": [60, 64, 65, 121, 122, 132, 133, 145, 751, 752], "major": [60, 123, 124, 145, 659, 662], "involv": [60, 107, 111, 112, 123, 133, 186, 212, 271, 281, 398, 400, 708, 714], "anoth": [60, 64, 65, 108, 109, 118, 122, 123, 130, 133, 167, 173, 186, 193, 195, 197], "promis": 60, "pursuit": 60, "unif": [60, 107, 130, 708, 714], "clearli": [60, 110, 115], "lot": [60, 61, 120, 130, 145], "thought": [60, 108, 109, 126], "care": [60, 109, 133], "attent": [60, 109, 121, 122, 531, 542, 543, 729, 740], "gone": [60, 127], "simplifi": [60, 128, 129, 130, 132], "compat": [60, 126, 145, 186, 194, 271, 281, 283, 293, 295, 299, 301, 305, 307, 308, 310, 311, 313, 314, 316, 326, 328, 329, 331, 338, 344, 345, 347, 350, 351, 353, 363, 365, 366, 368, 381, 383, 384, 386, 390, 392, 393, 395, 398, 400, 404, 406, 410, 412, 413, 415, 435, 437, 544, 557, 560, 563, 566, 568, 569, 581, 604, 606, 659, 661, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708], "excit": [60, 107, 112, 708], "complianc": 60, "hope": [60, 145], "due": [60, 108, 122, 125, 271, 398, 400], "suit": [60, 108, 109, 112, 116, 117, 131, 144], "some": [60, 61, 64, 65, 108, 109, 110, 113, 114, 115, 118, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 144, 145, 271, 339, 341, 515, 517, 518, 520, 522, 523, 524, 529, 531, 539, 708, 729, 737], "motiv": [60, 130], "great": [60, 61, 117, 128, 130], "convinc": 60, "celebr": 60, "encourag": [60, 144, 145, 708, 714], "foundat": 60, "point": [61, 109, 114, 115, 121, 125, 126, 128, 130, 131, 144, 166, 167, 168, 170, 172, 174, 180, 184, 186, 192, 204, 209, 212, 271, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 314, 316, 317, 319, 320, 322, 323, 325, 326, 336, 338, 339, 341, 342, 369, 371, 372, 374, 378, 380, 381, 383, 398, 400, 410, 412, 413, 415, 416, 418, 422, 425, 426, 428, 429, 431, 438, 440, 443, 444, 446, 544, 545, 547, 549, 550, 551, 557, 560, 561, 563, 564, 569, 664, 665, 666, 668, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700], "mai": [61, 108, 109, 122, 130, 132, 167, 168, 173, 221, 266, 271, 329, 331, 350, 351, 353, 366, 368, 387, 389, 390, 392, 447, 464, 664, 665, 666, 668, 669, 670, 672, 673, 675, 676, 680, 682, 683, 685, 686, 688], "ask": [61, 128, 130, 145, 708], "perfectli": 61, "happi": [61, 108, 145], "abund": 61, "better": [61, 109, 112, 127, 130, 131, 132], "ll": [61, 107, 109, 115, 122, 125, 131], "give": [61, 108, 109, 112, 114, 115, 119, 126, 130, 581, 604, 606], "two": [61, 66, 67, 114, 115, 117, 121, 122, 127, 131, 133, 167, 168, 172, 178, 182, 183, 186, 211, 216, 271, 311, 313, 416, 418, 447, 453, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 581, 617, 619, 664, 665, 666, 667, 668, 708], "streamlin": 61, "workflow": [61, 109, 131, 143, 708], "save": [61, 64, 65, 145, 447, 502, 741, 742], "week": [61, 109, 110, 708], "let": [61, 114, 115, 122, 123, 124, 128, 130, 131, 132, 133, 676, 683, 685, 692, 694, 695, 698, 700, 708], "sai": [61, 108, 120, 130], "deepmind": 61, "releas": [61, 108, 110, 708], "awesom": 61, "paper": 61, "love": 61, "choic": [61, 108, 125, 131, 676, 692, 694, 698, 700], "perceiverio": 61, "happen": [61, 108, 109, 131], "slew": 61, "rush": 61, "f": [61, 111, 112, 122, 128, 131, 133, 271, 348, 447, 482, 486], "g": [61, 112, 122, 145, 186, 191, 212, 221, 237, 652, 655, 656, 664, 665, 666, 668, 676, 680, 682, 686, 688, 689, 691, 695], "inevit": 61, "deviat": [61, 648, 649, 651, 652, 655, 676, 692, 694, 743, 744], "origin": [61, 64, 65, 66, 67, 68, 119, 120, 123, 128, 130, 271, 293, 295, 544, 555, 581, 604, 606, 607, 609], "often": [61, 118, 145], "erron": 61, "train": [61, 118, 122, 124, 131, 132, 133, 143, 144, 145, 515, 517, 518, 522, 708], "poor": 61, "converg": 61, "perform": [61, 64, 65, 113, 115, 117, 118, 119, 121, 122, 124, 125, 126, 128, 131, 145, 156, 161, 167, 176, 177, 221, 447, 461, 465, 466, 467, 483, 484, 485, 515, 518, 520, 522, 523, 524, 531, 539, 541, 544, 564, 626, 627, 628, 629, 630, 637, 638, 701, 702, 704, 705, 707], "issu": [61, 107, 110, 128, 130, 132, 145], "publish": [61, 145], "manag": [61, 107, 125, 145, 221], "get": [61, 64, 65, 107, 108, 110, 112, 118, 123, 124, 125, 128, 129, 130, 131, 132, 186, 202, 203, 204, 207, 221, 230, 231, 240, 241, 254, 255, 260, 264, 267, 270, 447, 452, 475, 476, 477, 496, 708, 714, 729, 738], "work": [61, 108, 109, 110, 112, 117, 122, 123, 124, 127, 128, 129, 130, 132, 133, 708, 714], "repositori": [61, 108, 109, 111, 116], "pull": [61, 107, 108, 111, 113, 145], "request": [61, 107, 113, 221, 257], "confus": [61, 125], "do": [61, 64, 65, 108, 109, 110, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 145, 271, 413, 415, 447, 485, 515, 521, 529, 630, 631, 640, 641, 642], "expect": [61, 145, 447, 452, 708], "codebas": [61, 107, 112, 113, 125, 127, 221, 263, 264, 708], "total": [61, 64, 65, 66, 67, 68, 107, 109, 115, 117, 124, 131, 132, 145, 221, 267, 659, 662, 676, 692, 694, 698, 700], "hour": 61, "spent": 61, "spin": 61, "off": [61, 127, 544, 548, 567], "test": [61, 108, 110, 112, 115, 145, 186, 209, 210, 271, 354, 356, 357, 359, 360, 362, 701, 702, 704, 705, 707], "error": [61, 64, 65, 108, 117, 121, 124, 126, 130, 145, 156, 157, 221, 271, 332, 335, 676, 680, 682, 686, 688, 741, 742, 745, 749], "address": [61, 109, 110, 121, 128], "sake": 61, "singl": [61, 64, 65, 109, 113, 115, 117, 118, 120, 122, 125, 126, 128, 131, 132, 133, 145, 221, 230, 231, 250, 251, 252, 253, 447, 511, 514, 652, 655, 656, 664, 665], "multipl": [61, 64, 65, 75, 76, 77, 78, 89, 90, 93, 94, 109, 115, 118, 122, 145, 271, 398, 400, 447, 448, 450, 491, 544, 551, 581, 582, 584, 585, 607, 609, 610, 648, 649, 651, 659, 660, 661, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 729, 739], "line": [61, 108, 115, 121, 129, 130, 131, 132, 143, 708, 714], "directli": [61, 109, 113, 114, 118, 121, 122, 123, 124, 125, 126, 128, 130, 132, 133, 144, 145, 630, 642], "graph": [61, 118, 122, 129, 145, 515, 518, 520, 522, 523, 524, 664, 665, 666, 668, 741, 742], "guarante": [61, 121, 145, 664, 665], "turn": [61, 115, 122], "step": [61, 64, 65, 79, 80, 108, 109, 111, 115, 119, 121, 122, 123, 124, 128, 131, 132, 133, 144, 167, 168, 176, 177, 221, 515, 517, 518, 520, 522, 523, 524, 626, 627, 628, 629, 708, 745, 746, 747, 748, 749, 750], "take": [61, 107, 108, 109, 114, 115, 117, 122, 123, 124, 128, 130, 132, 133, 145, 271, 314, 316, 708, 714], "few": [61, 109, 110, 118, 122, 123, 124, 125, 129, 130, 131, 132, 143, 708, 714], "second": [61, 108, 115, 125, 130, 186, 211, 216, 221, 252, 271, 281, 283, 299, 301, 305, 307, 308, 310, 311, 313, 314, 316, 328, 329, 331, 338, 344, 345, 347, 350, 351, 353, 363, 365, 366, 368, 381, 383, 384, 386, 390, 392, 393, 395, 398, 400, 404, 406, 410, 412, 435, 437, 447, 453, 496, 501, 515, 517, 518, 522, 544, 546, 548, 549, 552, 554, 559, 561, 564, 566, 568, 581, 614, 616, 617, 619, 626, 628, 664, 665, 666, 745, 746, 747], "automat": [61, 108, 109, 118, 122, 126, 127, 128, 129, 132, 133, 708], "everyon": [61, 107, 109, 145], "regardless": [61, 64, 65, 107, 130, 133, 164, 165], "wouldn": 61, "nice": [61, 117], "write": [61, 64, 65, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 125, 128, 130, 133, 156, 159, 221, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 336, 338, 339, 341, 342, 354, 356, 357, 359, 360, 362, 363, 365, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 447, 458, 462, 469, 471, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 592, 594, 595, 597, 598, 600, 601, 603, 607, 609, 611, 613, 614, 616, 617, 619, 648, 649, 651, 652, 654, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707], "onc": [61, 108, 109, 122, 123, 124, 128, 131, 145, 221, 265, 544, 551, 564, 652, 653], "know": [61, 664, 665, 666, 668], "among": [61, 64, 65, 117], "frantic": 61, "port": 61, "lucid": 61, "honk": 61, "improv": [61, 109, 118, 128], "understand": [61, 108, 109, 110, 111, 112, 114, 115, 116, 126, 127], "pattern": [61, 64, 65, 114, 123, 447, 465, 466, 467], "hasn": 61, "now": [61, 64, 65, 108, 111, 113, 120, 122, 123, 126, 130, 131, 133, 144, 145, 729, 740, 741, 742], "spend": 61, "torchvis": 61, "probabl": [61, 531, 539, 652, 653, 729, 737], "sonnet": 61, "about": [61, 108, 109, 116, 127, 128, 132, 133, 145, 186, 204, 207], "next": [61, 108, 109, 110, 111, 114, 115, 119, 120, 130, 131, 186, 204, 708, 741, 742, 745, 746, 747, 748, 749, 750], "everyth": [61, 109, 110, 129, 145], "zero": [61, 64, 65, 66, 67, 115, 121, 122, 123, 124, 126, 128, 131, 132, 156, 158, 159, 167, 170, 172, 178, 182, 183, 185, 186, 192, 271, 281, 284, 286, 305, 307, 323, 339, 341, 342, 387, 389, 390, 392, 396, 397, 398, 400, 401, 403, 410, 412, 413, 415, 416, 418, 429, 431, 432, 434, 438, 447, 461, 494, 497, 498, 515, 517, 518, 522, 523, 531, 539, 544, 547, 552, 554, 557, 560, 568, 569, 581, 592, 594, 595, 597, 601, 603, 607, 609, 623, 625, 648, 649, 651, 652, 654, 659, 660, 661, 662, 664, 665, 666, 668, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707, 708, 720, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 745, 746, 747, 748], "need": [61, 108, 109, 110, 111, 113, 114, 115, 116, 118, 121, 122, 125, 128, 130, 131, 144, 145, 447, 457, 458, 581, 582, 584, 592, 594], "said": 61, "high": [61, 64, 65, 93, 94, 110, 131, 652, 654, 656], "level": [61, 107, 110, 118, 127, 128, 131, 132, 133, 145], "optim": [61, 125, 129, 131, 133, 144, 221, 515, 518, 520, 522, 523, 524, 626, 627, 628, 629, 708, 746, 747, 748, 750], "trainer": [61, 143, 145, 708], "statu": 61, "quo": 61, "kera": 61, "dopamin": 61, "ignit": 61, "catalyst": 61, "lightn": 61, "fastai": 61, "haiku": [61, 133], "flax": [61, 133, 145], "trax": [61, 133], "objax": [61, 133], "idea": [61, 144], "fulli": [61, 121, 122, 126, 128, 129, 130, 131, 132, 133, 145, 729, 739, 740], "offer": [61, 132], "containerwithactiv": [62, 66, 67], "dict_in": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "queue": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 131, 221, 230, 231, 447, 496, 501], "queue_load_s": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "container_combine_method": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "list_join": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "queue_timeout": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 447], "print_limit": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "key_length_limit": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "print_ind": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "print_line_spac": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "ivyh": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "default_key_color": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "green": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 754, 755], "keyword_color_dict": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "rebuild_child_contain": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "types_to_iteratively_nest": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "alphabetical_kei": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "containerbas": [62, 63, 64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 122], "__getitem__": [64, 65, 122], "queri": [64, 65, 122, 123, 130, 221, 254, 264, 531, 542, 543, 729, 740], "slice": [64, 65, 447, 471, 472, 474, 630, 639], "chain": [64, 65, 121, 122, 132, 133, 145, 626, 627, 628, 630, 643, 751, 752], "element": [64, 65, 114, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 174, 175, 182, 183, 221, 244, 248, 252, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 332, 335, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 440, 441, 443, 444, 446, 447, 453, 454, 457, 458, 461, 462, 469, 481, 510, 511, 531, 539, 544, 546, 549, 552, 554, 561, 564, 581, 582, 584, 595, 597, 601, 603, 607, 609, 610, 611, 613, 652, 653, 659, 662, 663, 664, 665, 666, 667, 668, 669, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 729, 737], "represent": [64, 65, 66, 67, 68, 144, 166, 186, 190, 191, 204, 207, 221, 237, 238, 271, 272, 274, 281, 299, 301, 308, 310, 314, 316, 393, 395, 398, 400, 447, 451, 504, 509], "dictionari": [64, 65, 66, 67, 68, 131, 145, 221, 264], "around": [64, 65, 66, 67, 68, 109, 118, 121, 126, 130, 145], "sequenc": [64, 65, 66, 67, 68, 115, 123, 144, 221, 230, 231, 447, 454, 491, 581, 610, 614, 616, 652, 654, 676, 680, 682, 729, 738, 743, 744, 751, 752], "multiprocess": [64, 65, 66, 67, 68, 131, 145, 221, 230, 447], "asynchron": [64, 65, 66, 67, 68], "wait": [64, 65, 66, 67, 68, 109], "size": [64, 65, 66, 67, 68, 130, 131, 167, 176, 177, 221, 263, 264, 265, 447, 497, 503, 531, 543, 544, 548, 555, 559, 561, 564, 568, 581, 592, 594, 607, 609, 610, 611, 613, 652, 653, 655, 656, 659, 660, 662, 701, 702, 704, 705, 707, 729, 730, 731], "dimens": [64, 65, 66, 67, 68, 115, 128, 131, 156, 161, 167, 182, 183, 221, 252, 447, 465, 466, 467, 470, 478, 494, 513, 531, 532, 533, 534, 535, 536, 537, 538, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 560, 561, 563, 564, 565, 567, 568, 569, 571, 575, 577, 578, 580, 581, 586, 588, 592, 594, 595, 597, 598, 600, 601, 603, 604, 606, 607, 609, 610, 611, 613, 614, 616, 626, 627, 628, 629, 652, 658, 659, 660, 661, 662, 664, 665, 666, 668, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740], "combin": [64, 65, 66, 67, 68, 109, 115, 117, 118, 121, 122, 133, 544, 546], "arriv": [64, 65, 66, 67, 68], "timeout": [64, 65, 66, 67, 68, 221, 230, 231, 447, 496, 501], "limit": [64, 65, 66, 67, 68, 109, 115, 117, 128, 131, 133, 145, 186, 204, 207, 447, 457, 458, 581, 582, 584], "maximum": [64, 65, 66, 67, 68, 115, 128, 131, 133, 221, 245, 249, 253, 265, 271, 447, 457, 458, 470, 515, 522, 581, 582, 584, 630, 642, 659, 660, 676, 680, 682, 686, 688, 708], "length": [64, 65, 66, 67, 68, 131, 167, 168, 178, 544, 564, 565, 581, 604, 606], "whitespac": [64, 65, 66, 67, 68], "indent": [64, 65, 66, 67, 68, 131], "extra": [64, 65, 66, 67, 68, 115, 120, 121, 128, 515, 519], "newlin": [64, 65, 66, 67, 68, 114], "handl": [64, 65, 66, 67, 68, 112, 117, 118, 120, 122, 123, 124, 125, 126, 132, 145, 164, 165, 221, 237, 238, 239, 240, 241, 255, 259, 260, 267, 270, 515, 518, 520, 522, 523, 524, 745, 746, 747, 748, 749, 750], "result": [64, 65, 66, 67, 68, 113, 114, 115, 117, 121, 122, 123, 125, 126, 131, 145, 156, 159, 167, 168, 186, 212, 221, 230, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 444, 446, 447, 458, 462, 469, 471, 497, 498, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 548, 555, 564, 569, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 592, 594, 595, 597, 598, 600, 601, 603, 607, 609, 611, 613, 614, 616, 617, 619, 630, 643, 648, 649, 651, 652, 654, 659, 660, 661, 664, 665, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 708], "color": [64, 65, 66, 67, 68, 754, 755], "termin": [64, 65, 66, 67, 68, 108, 109, 111, 122, 128, 131], "map": [64, 65, 66, 67, 68, 117, 118, 122, 126, 131, 144, 145, 221, 230, 630, 637, 638, 642, 643, 729, 740], "termcolor": [64, 65, 66, 67, 68], "rebuild": [64, 65, 66, 67, 68], "found": [64, 65, 66, 67, 68, 108, 109, 114, 121, 122, 221, 255], "constructor": [64, 65, 66, 67, 68, 123, 124, 130, 447, 452, 751, 752], "param": [64, 65, 66, 67, 68, 77, 78, 128, 133, 447, 451, 471, 472, 474], "kept": [64, 65, 66, 67, 68, 109, 125, 626, 627, 628], "structur": [64, 65, 66, 67, 68, 111, 113, 118, 121, 122, 131, 132, 447, 459, 630, 643], "alphabet": [64, 65, 66, 67, 68], "preserv": [64, 65, 66, 67, 68, 133, 145, 515, 526, 581, 595, 597], "__setitem__": [64, 65, 121, 122, 130], "val": [64, 65, 125, 130, 447, 483, 484, 485, 499, 500], "after": [64, 65, 115, 122, 123, 127, 186, 216, 271, 429, 431, 515, 518, 519, 520, 522, 523, 524, 648, 649, 651, 745, 746, 747, 748, 749, 750], "updat": [64, 65, 108, 109, 110, 111, 112, 115, 116, 120, 121, 122, 123, 126, 128, 130, 131, 133, 145, 221, 230, 447, 485, 497, 498, 515, 517, 518, 520, 522, 523, 524, 531, 541, 626, 627, 628, 630, 637, 638, 646, 647, 718, 719, 745, 746, 747, 748, 749, 750], "all_fals": [64, 65], "assert_is_bool": [64, 65], "key_chain": [64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 332, 334, 422, 424, 582, 585, 630, 643], "to_appli": [64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 332, 334, 422, 424, 582, 585, 630, 643], "prune_unappli": [64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 79, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 332, 334, 422, 424, 582, 585, 630, 643], "map_sequ": [64, 65, 66, 67, 71, 72, 75, 76, 77, 78, 79, 80, 87, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 332, 334, 422, 424, 582, 585], "entri": [64, 65, 167, 176, 177, 581, 610, 630, 643], "boolean": [64, 65, 122, 167, 174, 186, 192, 208, 220, 221, 256, 268, 271, 299, 301, 302, 304, 308, 310, 314, 316, 384, 386, 387, 389, 390, 392, 393, 395, 447, 448, 450, 453, 454, 480, 481, 482, 486, 487, 488, 489, 490, 507, 514, 515, 521, 626, 627, 628, 630, 640, 676, 686, 688], "evalu": [64, 65, 122, 271, 336, 339, 341, 369, 371, 372, 374, 375, 377, 378, 380, 401, 403, 419, 421, 432, 434, 630, 631, 640, 641, 701, 702, 704, 705, 707], "assert": [64, 65, 130, 131, 447, 455], "skip": [64, 65, 111, 117, 630, 643], "prune": [64, 65, 630, 643, 644, 645], "all_key_chain": [64, 65], "include_empti": [64, 65], "all_tru": [64, 65, 122, 131], "arrays_as_list": [64, 65], "intermedi": [64, 65], "as_arrai": [64, 65, 447, 478, 503], "as_bool": [64, 65], "as_on": [64, 65], "ones": [64, 65, 66, 67, 117, 128, 130, 131, 167, 172, 181, 271, 317, 319, 447, 494, 708], "sub": [64, 65, 109, 110, 112, 117, 122, 130, 131, 132, 221, 246, 247, 250, 251, 252, 253, 544, 548, 581, 610, 626, 627, 628, 629, 708], "fill": [64, 65, 167, 170, 174, 175, 180, 181, 184, 185, 652, 654], "as_random_uniform": [64, 65], "low": [64, 65, 93, 94, 128, 652, 654, 656], "uniform": [64, 65, 132, 652, 653, 654, 656, 720, 722, 723, 726, 727], "lower": [64, 65, 109, 115, 128, 145, 167, 172, 182, 271, 396, 544, 545, 652, 656], "boundari": [64, 65, 652, 656], "output": [64, 65, 108, 112, 113, 114, 115, 117, 118, 121, 122, 124, 125, 126, 128, 130, 132, 133, 145, 156, 159, 167, 168, 170, 171, 172, 174, 175, 178, 180, 181, 184, 185, 221, 230, 231, 265, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 336, 338, 339, 341, 342, 354, 356, 357, 359, 360, 362, 363, 365, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 447, 456, 458, 462, 469, 471, 515, 519, 531, 533, 535, 537, 539, 541, 542, 543, 544, 567, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 592, 594, 595, 597, 598, 600, 601, 603, 607, 609, 611, 613, 614, 616, 617, 619, 620, 622, 630, 643, 648, 649, 651, 652, 654, 655, 656, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707, 708, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740], "interv": [64, 65, 128, 133, 167, 168, 176, 177, 544, 568, 581, 582, 584, 614, 616, 652, 654, 656, 701, 702, 704, 705, 707], "upper": [64, 65, 167, 172, 183, 544, 545, 561, 652, 656], "as_vari": [64, 65], "as_zero": [64, 65], "assert_contains_sub_contain": [64, 65], "sub_cont": [64, 65], "partial": [64, 65, 109, 741, 742], "except": [64, 65, 114, 121, 125, 130, 145, 186, 194, 447, 455, 464, 485, 512, 544, 560, 581, 586, 588, 614, 616, 659, 662, 701, 702, 704, 705, 707], "diff": [64, 65, 122, 131], "screen": [64, 65, 131], "assert_contains_sub_structur": [64, 65], "check_shap": [64, 65], "static": [64, 65, 71, 72, 75, 76, 77, 78, 79, 80, 87, 88, 89, 90, 93, 94, 99, 100, 105, 106, 110, 114, 115, 118, 145, 164, 165, 582, 585], "assert_ident": [64, 65], "check_typ": [64, 65], "same_arrai": [64, 65, 131], "arrays_equ": [64, 65, 66, 67, 447], "datatyp": [64, 65, 167, 169, 179, 186, 198, 209, 210, 211], "exact": [64, 65, 109, 128, 664, 665], "assert_identical_structur": [64, 65], "at_key_chain": [64, 65], "ignore_key_error": [64, 65], "ignore_non": [64, 65], "at_kei": [64, 65], "ignor": [64, 65, 115, 145, 167, 178, 630, 641, 745, 749], "substr": [64, 65], "access": [64, 65, 109, 111, 123], "clip_min": [64, 65], "clip_max": [64, 65], "minimum": [64, 65, 128, 133, 221, 271, 272, 274, 447, 476, 477, 499, 500, 505, 506, 581, 582, 584, 659, 661, 676, 680, 682, 686, 688, 708], "config": [64, 65, 131, 630, 643], "right": [64, 65, 107, 108, 109, 112, 115, 131, 271, 305, 307, 311, 313, 544, 564], "duplic": [64, 65, 114, 119, 120, 130, 132], "compar": [64, 65, 117, 131, 447, 448, 450, 453, 454, 664, 665, 666, 668, 669, 670, 672, 673, 675], "configur": [64, 65, 108, 109, 111, 123, 221, 264, 630, 643], "container_rightmost": [64, 65], "common_key_chain": [64, 65, 122], "across": [64, 65, 110, 115, 117, 118, 122, 123, 126, 221, 230, 231, 242, 243, 245, 246, 247, 248, 249, 253, 263, 264, 447, 453, 454, 630, 636, 659, 661], "properti": [64, 65, 115, 117, 118, 122, 130, 131, 132, 221, 233, 741, 742, 745, 746, 747, 748, 750], "contains_sub_contain": [64, 65], "match": [64, 65, 122, 186, 192, 271, 413, 415, 447, 491], "contains_sub_structur": [64, 65], "copi": [64, 65, 111, 114, 119, 123, 128, 130, 131, 144, 145, 167, 169, 173, 186, 192, 221, 266, 447, 460, 510, 511, 581, 604, 606, 630, 632, 669, 673, 675], "create_if_abs": [64, 65], "inplac": [64, 65, 79, 80, 112, 115, 120, 121, 126, 130, 132, 447, 455, 482, 485, 486, 507, 515, 518, 520, 522, 523, 524, 718, 719, 745, 746, 747, 748, 749, 750], "correspond": [64, 65, 66, 67, 109, 114, 115, 116, 118, 121, 122, 123, 126, 186, 193, 271, 293, 295, 410, 412, 544, 546, 549, 563, 581, 586, 588, 607, 609, 652, 653, 659, 660, 661, 664, 665, 666, 668, 676, 689, 691, 692, 694, 695, 698, 700], "alreadi": [64, 65, 108, 109, 119, 122, 126, 130, 145, 221, 271, 317, 319, 342, 398, 400, 416, 418, 444, 446, 544, 559, 708], "noth": [64, 65, 109], "cutoff_at_depth": [64, 65], "depth_cutoff": [64, 65], "summari": [64, 65, 109, 186, 199, 200, 201, 213, 214, 215, 221, 234, 235, 447, 459, 463, 479, 515, 525, 530], "cutoff_at_height": [64, 65], "height_cutoff": [64, 65], "deep_copi": [64, 65, 131], "intern": [64, 65, 114, 121, 122, 124, 125, 221, 515, 529, 630, 631, 640, 641, 720, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 751, 752], "dev": [64, 65, 66, 68, 108, 118, 124, 128, 130, 132, 221, 230, 255], "belong": [64, 65, 132], "dev_clon": [64, 65, 221], "clone": [64, 65, 109, 111, 221, 242, 243, 244, 245], "dev_dist": [64, 65, 221], "distribut": [64, 65, 110, 124, 145, 221, 242, 246, 247, 248, 249, 531, 539, 571, 572, 574, 575, 577, 578, 580, 652, 653, 654, 655, 656, 729, 737, 741, 742], "along": [64, 65, 113, 125, 167, 176, 177, 221, 246, 247, 248, 249, 250, 251, 252, 253, 265, 447, 461, 462, 471, 513, 544, 555, 567, 568, 569, 571, 575, 577, 578, 580, 581, 586, 588, 595, 597, 601, 603, 607, 609, 610, 614, 616, 620, 622, 626, 627, 628, 629, 652, 658, 659, 660, 661, 669, 670, 672, 673, 675, 676, 677, 679, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 702, 704, 705, 707], "split": [64, 65, 107, 109, 127, 128, 145, 221, 230, 246, 247, 248, 249, 263, 264, 265, 447, 491, 581, 708], "dev_str": [64, 65], "mode": [64, 65, 108, 115, 122, 145, 164, 165, 221, 250, 251, 252, 253, 265, 271, 281, 398, 400, 544, 561], "diff_kei": [64, 65], "detect_key_diff": [64, 65], "detect_value_diff": [64, 65], "detect_shape_diff": [64, 65], "thei": [64, 65, 110, 112, 113, 115, 118, 120, 122, 123, 124, 125, 130, 131, 132, 133, 145, 186, 211, 626, 627, 628, 652, 653, 708, 751, 752], "treat": [64, 65, 129, 133, 164, 165], "detect": [64, 65, 126, 131, 132, 630, 631, 641], "without": [64, 65, 109, 113, 118, 121, 122, 124, 126, 128, 130, 131, 132, 144, 145, 447, 496, 501, 581, 604, 606, 630, 632, 664, 665, 666, 668], "flag": [64, 65, 109, 125, 130, 221, 240, 515, 521], "container0": [64, 65], "einops_rearrang": [64, 65, 447], "axes_length": [64, 65, 447, 465, 466, 467], "rearrang": [64, 65, 447, 465, 467], "addit": [64, 65, 108, 109, 113, 114, 117, 122, 123, 130, 131, 133, 221, 266, 271, 281, 447, 465, 466, 467, 648, 649, 651, 729, 739], "einops_reduc": [64, 65, 447], "reduct": [64, 65, 123, 130, 447, 466, 497, 498, 701, 702, 704, 705, 707, 708], "reduc": [64, 65, 130, 221, 265, 447, 466, 544, 561, 659, 660, 661, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "One": [64, 65, 123, 128, 130, 131, 447, 466, 581, 604, 606, 652, 654], "callabl": [64, 65, 122, 128, 146, 147, 148, 149, 150, 151, 152, 153, 154, 164, 165, 186, 205, 206, 221, 265, 447, 451, 456, 464, 466, 626, 627, 628, 629, 630, 636, 640, 641, 642], "einops_repeat": [64, 65, 447], "find_sub_contain": [64, 65], "sub_cont_to_find": [64, 65], "exsit": [64, 65], "find_sub_structur": [64, 65], "sub_struc_to_find": [64, 65], "flatten_key_chain": [64, 65, 131, 741, 742], "__": [64, 65, 115, 131], "above_height": [64, 65, 131], "below_depth": [64, 65, 131], "format_key_chain": [64, 65], "format_fn": [64, 65], "format": [64, 65, 111, 114, 123, 124, 128, 130, 131, 186, 202, 221, 241, 676, 677, 679, 697, 708], "string": [64, 65, 119, 123, 124, 128, 131, 186, 190, 191, 202, 208, 220, 221, 237, 238, 239, 240, 254, 260, 266, 267, 270, 447, 463], "from_disk_as_hdf5": [64, 65, 131], "h5_obj_or_filepath": [64, 65], "slice_obj": [64, 65], "load": [64, 65, 145], "disk": [64, 65, 131], "h5py": [64, 65], "file": [64, 65, 108, 109, 111, 113, 114, 118, 119, 121, 122, 128, 131, 447, 502, 741, 742], "hdf5": [64, 65, 131, 741, 742], "filepath": [64, 65, 109], "h5": [64, 65], "from_disk_as_json": [64, 65, 131], "json_filepath": [64, 65], "json": [64, 65, 131], "were": [64, 65, 109, 113, 117, 122], "abl": [64, 65, 108, 109, 118, 123, 125, 130, 133], "dure": [64, 65, 118, 122, 123, 124, 125, 145, 164, 165, 221, 266, 447, 512, 515, 517, 518, 522, 544, 552, 554, 626, 627, 628, 629, 676, 692, 694, 698, 700, 741, 742, 745, 746, 747, 749], "from_disk_as_pickl": [64, 65, 131], "pickle_filepath": [64, 65], "pickl": [64, 65, 122, 131], "from_flat_list": [64, 65], "flat_list": [64, 65], "hierarchi": [64, 65, 131], "flat": [64, 65, 447, 497, 581, 601, 603], "popul": [64, 65, 123, 124, 128, 652, 653, 676, 692, 694, 698, 700], "from_numpi": [64, 65, 131], "gather": [64, 65, 447, 472, 474], "accord": [64, 65, 108, 111, 118, 123, 186, 195, 197, 204, 271, 281, 311, 313, 398, 400, 447, 471, 497, 498, 544, 568, 581, 589, 591, 623, 625, 676, 692, 694, 698, 700], "index": [64, 65, 111, 118, 122, 130, 166, 167, 172, 178, 221, 262, 447, 451, 471, 472, 474, 581, 614, 616, 630, 633, 634, 637, 638, 639, 644, 646, 659, 660, 661, 662, 664, 665, 666, 669, 670, 672, 711, 713], "h5_file_s": [64, 65], "content": [64, 65, 110, 111, 125, 128, 131], "batch": [64, 65, 118, 122, 131, 221, 263, 264, 447, 470, 531, 540, 544, 569, 626, 627, 628, 629, 648, 649, 651, 743, 744], "handle_inplac": [64, 65], "prime": [64, 65], "overwritten": [64, 65, 119, 121], "has_kei": [64, 65], "query_kei": [64, 65], "somewher": [64, 65], "has_key_chain": [64, 65], "has_nan": [64, 65, 447], "include_inf": [64, 65, 447, 480, 514], "leafwis": [64, 65], "nan": [64, 65, 113, 114, 166, 186, 192, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 317, 319, 320, 322, 323, 325, 336, 338, 339, 341, 342, 354, 356, 360, 362, 369, 371, 372, 374, 378, 380, 381, 383, 398, 400, 410, 412, 413, 415, 416, 418, 422, 425, 426, 428, 429, 431, 438, 444, 446, 447, 480, 514, 531, 543, 664, 665, 666, 668, 676, 680, 682, 683, 685, 686, 688, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "well": [64, 65, 117, 125, 132, 133, 144, 447, 480, 544, 563], "inf": [64, 65, 166, 447, 480, 514, 544, 569], "wise": [64, 65, 128, 133, 156, 157, 158, 159, 160, 161, 162, 163, 271, 272, 274, 275, 281, 283, 284, 286, 290, 293, 295, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 326, 328, 329, 331, 332, 335, 338, 344, 345, 347, 348, 350, 351, 353, 363, 365, 366, 368, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 404, 406, 410, 412, 413, 415, 435, 437, 447, 469, 581, 582, 584], "identical_array_shap": [64, 65], "exclus": [64, 65, 118, 122, 133, 167, 168, 447, 461, 487, 488, 490, 515, 521, 652, 654], "trace": [64, 65, 66, 67, 128, 145, 447, 487, 488, 490, 544], "identical_config": [64, 65], "identical_structur": [64, 65], "if_exist": [64, 65], "inplace_upd": [64, 65, 125, 447, 718, 719], "key_chains_contain": [64, 65], "sub_str": [64, 65], "join": [64, 65, 581, 586, 588, 614, 616, 708], "list_stack": [64, 65, 131], "dim": [64, 65, 123, 447, 494, 729, 740], "func": [64, 65, 122, 164, 165, 221, 265, 447, 456, 515, 519, 630, 643], "map_cont": [64, 65], "include_self": [64, 65], "possibi": [64, 65], "place": [64, 65, 109, 112, 113, 114, 115, 117, 118, 122, 124, 126, 133, 167, 168, 169, 170, 171, 172, 174, 175, 179, 180, 181, 184, 185, 186, 195, 197, 221, 266, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 323, 342, 416, 418, 429, 431, 432, 434, 438, 447, 471, 483, 484, 485, 531, 534, 543, 544, 547, 581, 592, 594, 595, 597, 607, 609, 648, 649, 651, 664, 665, 666, 669, 670, 672, 676, 680, 682, 701, 702, 704, 745, 746, 747, 748, 749, 750], "matrix_norm": [64, 65, 544], "ord": [64, 65, 544, 555, 569], "matrix": [64, 65, 167, 178, 182, 183, 447, 448, 450, 457, 531, 540, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 560, 561, 563, 564, 565, 567, 570, 729, 739], "p": [64, 65, 77, 78, 108, 109, 167, 178, 447, 457, 458, 531, 539, 544, 555, 569, 729, 737], "integ": [64, 65, 122, 123, 130, 167, 168, 174, 186, 207, 210, 212, 271, 272, 274, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 328, 342, 344, 345, 347, 393, 395, 410, 412, 413, 415, 416, 418, 444, 446, 544, 556, 568, 569, 581, 610, 652, 654, 657, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "flatten": [64, 65, 447, 470, 544, 559, 569, 581, 601, 603, 607, 609, 659, 660, 661, 664, 665, 666, 668], "left": [64, 65, 108, 109, 115, 123, 271, 305, 307, 544, 549, 555, 564, 659, 660, 708], "broadcast": [64, 65, 113, 114, 115, 122, 123, 156, 159, 186, 193, 194, 221, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 336, 338, 339, 341, 342, 344, 345, 347, 350, 351, 353, 354, 356, 357, 359, 360, 362, 363, 365, 366, 368, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 396, 397, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 447, 458, 469, 544, 552, 554, 555, 557, 560, 563, 568, 569, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 592, 594, 595, 597, 598, 600, 601, 603, 607, 609, 611, 613, 614, 616, 617, 619, 652, 654, 659, 660, 661, 669, 673, 675, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "correctli": [64, 65, 108, 117, 122, 123, 126, 132, 145, 544, 555, 659, 660], "max_depth": [64, 65, 221, 225, 228, 235, 245, 249, 253, 447, 479, 630, 642], "multi_map": [64, 65, 122], "map_nest": [64, 65, 75, 76, 85, 86, 89, 90], "leftmost": [64, 65, 630, 643], "multi_map_in_static_method": [64, 65, 122], "fn_name": [64, 65], "num_arrai": [64, 65], "overwrite_at_key_chain": [64, 65], "overwrit": [64, 65, 125, 128, 221, 265], "target_dict": [64, 65], "return_dict": [64, 65], "prune_empti": [64, 65], "keep_non": [64, 65], "empti": [64, 65, 66, 67, 121, 123, 124, 167, 168, 676, 692, 694, 695, 701, 702, 704, 705, 707], "prune_key_chain": [64, 65], "key1": [64, 65, 132], "key2": [64, 65], "key3": [64, 65], "prune_key_from_key_chain": [64, 65], "absolut": [64, 65, 107, 271, 272, 274, 544, 562], "certain": [64, 65, 108, 145, 167, 168, 176, 177], "decid": [64, 65, 108, 630, 641], "remov": [64, 65, 109, 110, 111, 114, 117, 118, 123, 125, 133, 544, 548, 552, 554, 567, 581, 611, 613, 626, 627, 628], "prune_kei": [64, 65], "prune_keys_from_key_chain": [64, 65], "remove_key_length_limit": [64, 65], "remove_print_limit": [64, 65], "reshape_lik": [64, 65], "leading_shap": [64, 65], "return_cont": [64, 65], "restructur": [64, 65], "keep_orig": [64, 65], "transpos": [64, 65, 130, 133, 221, 252, 531, 533, 535, 537, 544, 558, 560, 708, 729, 731, 733, 735], "old": [64, 65, 108, 125], "keep": [64, 65, 108, 109, 116, 122, 129, 131, 133, 447, 513], "start": [64, 65, 107, 108, 109, 110, 111, 112, 114, 115, 123, 127, 128, 130, 131, 132, 144, 145, 167, 168, 176, 177, 221, 236], "restructure_key_chain": [64, 65], "keychain_map": [64, 65], "set_at_key_chain": [64, 65], "set_at_kei": [64, 65], "set_framework": [64, 65, 128, 130, 131, 133], "set_ivy_backend": [64, 65], "ivy_backend": [64, 65], "attribut": [64, 65, 114, 122, 123, 129, 130, 131, 132, 186, 204, 205, 206, 207, 221, 261], "show": [64, 65, 108, 109, 115, 125, 144, 145, 708], "show_sub_contain": [64, 65], "sub_cont_or_keychain": [64, 65], "shuffl": [64, 65, 652, 708], "seed_valu": [64, 65, 652, 657], "align": [64, 65, 108, 128, 130, 708, 714], "seed": [64, 65, 66, 67, 652, 708], "shuffle_h5_fil": [64, 65], "dataset": [64, 65, 131, 143, 708], "size_ordered_arrai": [64, 65], "keychain": [64, 65], "smallest": [64, 65, 186, 204, 207, 271, 317, 319], "largest": [64, 65, 144, 186, 204, 207, 544, 564], "slice_kei": [64, 65], "key_slic": [64, 65], "all_depth": [64, 65], "slice_via_kei": [64, 65], "sort_by_kei": [64, 65], "num_or_size_split": [64, 65, 128, 581, 610], "with_remaind": [64, 65, 581, 610], "constitu": [64, 65, 133], "dimension": [64, 65, 167, 168, 172, 178, 544, 546, 547, 552, 554, 557, 559, 560, 568, 569, 581, 610, 659, 660, 661, 662, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "evenli": [64, 65, 167, 168, 176, 177, 581, 610], "store": [64, 65, 114, 119, 121, 122, 128, 130, 131, 132, 447, 470, 515, 529, 544, 567, 581, 610, 741, 742], "stop_gradi": [64, 65, 66, 67, 79, 80, 132, 221, 265, 515, 518, 520, 522, 523, 524, 626, 627, 628, 629, 708, 745, 746, 747, 748, 749, 750], "preserve_typ": [64, 65, 515, 526], "stop": [64, 65, 128, 145, 167, 168, 176, 177, 221, 236, 265, 515, 518, 520, 522, 523, 524, 526, 626, 627, 628, 629, 745, 746, 747, 748, 749, 750], "alwai": [64, 65, 109, 110, 113, 114, 118, 119, 121, 122, 125, 126, 128, 130, 145, 186, 192, 271, 281, 398, 400, 447, 485, 515, 521, 526], "structural_diff": [64, 65], "to_devic": [64, 65, 221, 240], "move": [64, 65, 109, 113, 221, 266], "cuda": [64, 65, 128, 131, 145, 167, 176, 177, 221, 230, 237, 262, 447, 471, 472, 474, 494, 497, 498, 652, 653, 654, 656, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752], "cpu": [64, 65, 109, 124, 145, 167, 176, 177, 221, 240, 241, 243, 257, 260, 262, 266, 267, 269, 270, 447, 471, 472, 474, 494, 497, 498, 652, 653, 654, 655, 656, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752], "target": [64, 65, 112, 127, 131, 132, 133, 221, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 708], "to_dict": [64, 65], "to_disk_as_hdf5": [64, 65, 131], "starting_index": [64, 65], "max_batch_s": [64, 65], "read": [64, 65, 111, 708], "r": [64, 65, 108, 447, 454, 513, 544, 561, 570], "w": [64, 65, 79, 80, 128, 131, 132, 447, 454, 515, 517, 518, 520, 522, 523, 524, 531, 532, 533, 534, 535, 536, 537, 538], "later": [64, 65, 447, 456], "append": [64, 65, 111, 117, 128, 131, 271, 305, 307, 544, 548, 552, 554], "to_disk_as_json": [64, 65, 131], "to_disk_as_pickl": [64, 65, 131], "to_flat_list": [64, 65], "to_iter": [64, 65, 122], "leaf_keys_onli": [64, 65], "to_iterator_kei": [64, 65], "to_iterator_valu": [64, 65], "to_json": [64, 65], "to_list": [64, 65, 447, 708], "to_multi_dev": [64, 65], "multidevcontain": [64, 65, 66], "distributedarrai": [64, 65], "to_numpi": [64, 65, 131, 447, 708], "update_backend": [64, 65], "to_raw": [64, 65], "raw": [64, 65, 114], "trim_kei": [64, 65], "max_length": [64, 65], "try_kc": [64, 65], "tri": [64, 65], "self": [64, 65, 121, 122, 128, 130, 131, 132, 133, 195, 196, 221, 272, 273, 276, 277, 278, 279, 282, 283, 284, 285, 287, 288, 291, 292, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 321, 322, 324, 325, 327, 328, 330, 331, 332, 333, 334, 337, 338, 339, 340, 343, 344, 345, 346, 349, 350, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 398, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 422, 423, 424, 426, 427, 429, 430, 432, 433, 435, 436, 439, 440, 442, 443, 444, 445, 448, 449, 472, 473, 552, 553, 572, 573, 575, 576, 578, 579, 582, 583, 586, 587, 589, 590, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 611, 612, 614, 615, 617, 618, 620, 621, 623, 624, 649, 650, 670, 671, 673, 674, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 696, 697, 698, 699, 702, 703, 705, 706, 708, 745, 749], "arbitrari": [64, 65, 117, 118, 122, 125, 126, 132, 145, 167, 178, 186, 193, 212, 221, 250, 251, 253], "concatten": [64, 65, 221, 250, 251, 252, 253, 265], "unstack": [64, 65, 128, 131, 447, 708], "dim_siz": [64, 65, 221], "update_config": [64, 65], "vector_norm": [64, 65, 544], "global_norm": [64, 65, 77, 78], "vector": [64, 65, 144, 167, 178, 447, 458, 531, 540, 544, 546, 549, 552, 554, 559, 564, 565, 568, 569, 570, 729, 739], "with_default_key_color": [64, 65], "with_entries_as_list": [64, 65], "with_ivy_backend": [64, 65], "with_key_length_limit": [64, 65, 131], "with_print_ind": [64, 65, 131], "with_print_limit": [64, 65, 131], "with_print_line_spac": [64, 65], "containerwithcr": [66, 67, 69], "containerwithdatatyp": [66, 67, 71], "containerwithdevic": [66, 67, 73], "containerwithelementwis": [66, 67, 75, 122], "containerwithgener": [66, 67, 77], "containerwithgradi": [66, 67, 79], "containerwithimag": [66, 67, 81], "containerwithlay": [66, 67, 83], "containerwithlinearalgebra": [66, 67, 85], "containerwithloss": [66, 67, 87], "containerwithmanipul": [66, 67, 89, 110], "containerwithnorm": [66, 67, 91], "containerwithrandom": [66, 67, 93], "containerwithsearch": [66, 67, 95], "containerwithset": [66, 67, 97], "containerwithsort": [66, 67, 99], "containerwithstatist": [66, 67, 101], "containerwithutil": [66, 67, 103], "__add__": [66, 67, 114, 115, 121, 122, 126, 130], "special": [66, 67, 110, 113, 114, 115, 121, 126, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 314, 316, 317, 319, 320, 322, 323, 325, 336, 338, 339, 341, 342, 369, 371, 372, 374, 378, 380, 381, 383, 398, 400, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 438, 444, 446, 676, 680, 682, 683, 685, 686, 688, 692, 694, 695, 698, 700], "11": [66, 67, 75, 76, 93, 94, 115, 122, 271, 281, 299, 301, 416, 418, 447, 461, 471, 472, 474, 544, 548, 559, 571, 578, 580, 581, 595, 597, 601, 603, 652, 654, 659, 663, 664, 665, 676, 677, 679, 697], "__radd__": [66, 67, 114, 115], "revers": [66, 67, 110, 114, 115, 133, 145, 447, 464, 581, 595, 597], "adam_step": [66, 67, 515], "arang": [66, 67, 123, 167, 176, 177, 676, 677, 679, 697, 708], "arg_info": [66, 67, 447], "arg_nam": [66, 67, 447], "argmax": [66, 67, 659, 708], "argmin": [66, 67, 659, 708], "array_equ": [66, 67, 447], "as_ivy_dev": [66, 67, 130, 221], "as_ivy_dtyp": [66, 67, 186], "as_native_dev": [66, 67, 221], "as_native_dtyp": [66, 67, 186], "asarrai": [66, 67, 125, 167, 531, 532, 664, 666], "assert_supports_inplac": [66, 67, 447], "astyp": [66, 67, 123, 125, 186], "broadcast_arrai": [66, 67, 186], "broadcast_to": [66, 67, 123, 186], "cache_fn": [66, 67, 118, 447], "choleski": [66, 67, 544], "clear_mem_on_dev": [66, 67, 221], "clip_matrix_norm": [66, 67, 447], "closest_valid_dtyp": [66, 67, 186], "container_typ": [66, 67, 447], "conv1d": [66, 67, 531, 729], "conv1d_transpos": [66, 67, 531], "conv2d": [66, 67, 531, 708, 729], "conv2d_transpos": [66, 67, 531], "conv3d": [66, 67, 531, 729], "conv3d_transpos": [66, 67, 531], "copy_arrai": [66, 67, 447], "cross": [66, 67, 544, 571, 572, 574, 575, 577, 578, 580, 708], "cumprod": [66, 67, 133, 447], "cumsum": [66, 67, 447, 708], "current_backend_str": [66, 67, 447], "default_devic": [66, 67, 124, 128, 221, 259, 262, 269], "default_dtyp": [66, 67, 118, 123, 186], "default_float_dtyp": [66, 67, 123, 186], "default_int_dtyp": [66, 67, 123, 186], "depthwise_conv2d": [66, 67, 531, 708], "det": [66, 67, 544], "dev_clone_arrai": [66, 67, 221], "dev_clone_it": [66, 67, 221], "dev_clone_nest": [66, 67, 221], "dev_dist_arrai": [66, 67, 221], "dev_dist_it": [66, 67, 221], "dev_dist_nest": [66, 67, 221], "dev_unifi": [66, 67, 221], "dev_unify_arrai": [66, 67, 221], "dev_unify_it": [66, 67, 221], "dev_unify_nest": [66, 67, 221], "dev_util": [66, 67, 124, 221], "diagon": [66, 67, 167, 172, 182, 183, 544, 567], "dropout": [66, 67, 131, 531, 729, 740], "dtype_bit": [66, 67, 186], "eigh": [66, 67, 544], "eigvalsh": [66, 67, 544], "empty_lik": [66, 67, 167], "execute_with_gradi": [66, 67, 122, 131, 132, 133, 145, 515, 708], "ey": [66, 67, 133, 167, 531, 534, 538], "finfo": [66, 67, 186], "floormod": [66, 67, 447, 708], "fourier_encod": [66, 67, 447], "from_dlpack": [66, 67, 167], "full_lik": [66, 67, 167], "function_supported_dtyp": [66, 67, 186], "function_unsupported_dtyp": [66, 67, 186], "gelu": [66, 67, 156, 715], "get_all_arrays_in_memori": [66, 67, 447], "get_all_ivy_arrays_on_dev": [66, 67, 124, 221], "get_min_bas": [66, 67, 447], "get_min_denomin": [66, 67, 447], "get_num_dim": [66, 67, 447, 708], "get_referrers_recurs": [66, 67, 447], "gpu_is_avail": [66, 67, 221], "handle_nest": [66, 67, 118, 122, 146], "handle_out_argu": [66, 67, 120, 123, 124, 125, 126, 146], "iinfo": [66, 67, 186], "indices_wher": [66, 67, 447, 708], "infer_devic": [66, 67, 123, 124, 126, 146], "infer_dtyp": [66, 67, 123, 124, 126, 146], "inplace_arrays_support": [66, 67, 447], "inplace_decr": [66, 67, 447], "inplace_incr": [66, 67, 447], "inplace_variables_support": [66, 67, 447], "inputs_to_native_arrai": [66, 67, 121, 146], "inv": [66, 67, 130, 544, 708], "invalid_dtyp": [66, 67, 186], "is_float_dtyp": [66, 67, 186], "is_int_dtyp": [66, 67, 186, 447, 511], "is_ivy_contain": [66, 67, 447], "leaky_relu": [66, 67, 156, 708], "linear": [66, 67, 114, 128, 131, 132, 133, 156, 157, 158, 159, 447, 470, 531, 539, 563, 708, 729, 730, 731, 732, 733, 734, 735, 736], "linspac": [66, 67, 128, 167, 168, 708], "logspac": [66, 67, 128, 167], "lstm_updat": [66, 67, 128, 531], "match_kwarg": [66, 67, 447], "matrix_pow": [66, 67, 544], "matrix_rank": [66, 67, 544], "matrix_transpos": [66, 67, 130, 544], "meshgrid": [66, 67, 167], "multi_head_attent": [66, 67, 122, 125, 531], "multinomi": [66, 67, 652], "nonzero": [66, 67, 271, 281, 398, 400, 659], "num_arrays_in_memori": [66, 67, 447], "num_cpu_cor": [66, 67, 124, 221], "num_gpu": [66, 67, 117, 124, 221], "num_ivy_arrays_on_dev": [66, 67, 221], "one_hot": [66, 67, 133, 447, 708], "ones_lik": [66, 67, 133, 167, 708], "outer": [66, 67, 544, 626, 627, 628, 629], "outputs_to_ivy_arrai": [66, 67, 121, 123, 124, 126, 146], "percent_used_mem_on_dev": [66, 67, 221], "pinv": [66, 67, 544, 708], "print_all_arrays_in_memori": [66, 67, 447], "print_all_ivy_arrays_on_dev": [66, 67, 221], "promote_typ": [66, 67, 186], "qr": [66, 67, 544], "randint": [66, 67, 93, 94, 652, 708], "random_norm": [66, 67, 531, 534, 537, 538, 544, 564, 652, 664, 665], "result_typ": [66, 67, 123, 186], "scaled_dot_product_attent": [66, 67, 531], "scatter_flat": [66, 67, 447], "scatter_nd": [66, 67, 130, 447, 708], "set_default_devic": [66, 67, 124, 221, 269], "set_default_dtyp": [66, 67, 118, 123, 186], "set_default_float_dtyp": [66, 67, 123, 186], "set_default_int_dtyp": [66, 67, 123, 186], "set_min_bas": [66, 67, 447], "set_min_denomin": [66, 67, 447], "set_queue_timeout": [66, 67, 447], "set_split_factor": [66, 67, 221], "set_tmp_dir": [66, 67, 447], "set_with_grad": [66, 67, 515], "shape_to_tupl": [66, 67, 123, 447], "sigmoid": [66, 67, 128, 131, 132, 156, 708], "slogdet": [66, 67, 544], "softplu": [66, 67, 156, 708], "solv": [66, 67, 129, 144, 544], "split_factor": [66, 67, 221, 230], "split_func_cal": [66, 67, 221], "stable_divid": [66, 67, 118, 447], "stable_pow": [66, 67, 447], "static_ab": [66, 67], "static_aco": [66, 67], "static_acosh": [66, 67], "static_adam_step": [66, 67], "static_al": [66, 67], "static_ani": [66, 67], "static_arang": [66, 67], "static_arg_info": [66, 67], "static_arg_nam": [66, 67], "static_argmax": [66, 67], "static_argmin": [66, 67], "static_arrai": [66, 67], "static_array_equ": [66, 67], "static_arrays_equ": [66, 67], "static_as_ivy_dev": [66, 67], "static_as_ivy_dtyp": [66, 67], "static_as_native_dev": [66, 67], "static_as_native_dtyp": [66, 67], "static_asarrai": [66, 67], "static_asin": [66, 67], "static_asinh": [66, 67], "static_assert_supports_inplac": [66, 67], "static_astyp": [66, 67], "static_atan": [66, 67], "static_atan2": [66, 67], "static_atanh": [66, 67], "static_bitwise_and": [66, 67], "static_bitwise_invert": [66, 67], "static_bitwise_left_shift": [66, 67], "static_bitwise_or": [66, 67], "static_bitwise_right_shift": [66, 67], "static_bitwise_xor": [66, 67], "static_broadcast_arrai": [66, 67], "static_broadcast_to": [66, 67], "static_cache_fn": [66, 67], "static_ceil": [66, 67], "static_choleski": [66, 67], "static_clear_mem_on_dev": [66, 67], "static_clip_matrix_norm": [66, 67], "static_clip_vector_norm": [66, 67], "static_closest_valid_dtyp": [66, 67], "static_concat": [66, 67], "static_constant_pad": [66, 67], "static_container_typ": [66, 67], "static_conv1d": [66, 67], "static_conv1d_transpos": [66, 67], "static_conv2d": [66, 67], "static_conv2d_transpos": [66, 67], "static_conv3d": [66, 67], "static_conv3d_transpos": [66, 67], "static_copy_arrai": [66, 67], "static_co": [66, 67], "static_cosh": [66, 67], "static_cross": [66, 67], "static_cumprod": [66, 67], "static_cumsum": [66, 67], "static_current_backend": [66, 67], "static_current_backend_str": [66, 67], "static_default": [66, 67], "static_default_devic": [66, 67], "static_default_dtyp": [66, 67], "static_default_float_dtyp": [66, 67], "static_default_int_dtyp": [66, 67], "static_depthwise_conv2d": [66, 67], "static_det": [66, 67], "static_dev": [66, 67], "static_dev_clon": [66, 67], "static_dev_clone_arrai": [66, 67], "static_dev_clone_it": [66, 67], "static_dev_clone_nest": [66, 67], "static_dev_dist": [66, 67], "static_dev_dist_arrai": [66, 67], "static_dev_dist_it": [66, 67], "static_dev_dist_nest": [66, 67], "static_dev_unifi": [66, 67], "static_dev_unify_arrai": [66, 67], "static_dev_unify_it": [66, 67], "static_dev_unify_nest": [66, 67], "static_dev_util": [66, 67], "static_diagon": [66, 67], "static_dropout": [66, 67], "static_dtyp": [66, 67], "static_dtype_bit": [66, 67], "static_eigh": [66, 67], "static_eigvalsh": [66, 67], "static_einops_rearrang": [66, 67], "static_einops_reduc": [66, 67], "static_einops_repeat": [66, 67], "static_einsum": [66, 67], "static_empti": [66, 67], "static_empty_lik": [66, 67], "static_equ": [66, 67], "static_erf": [66, 67], "static_execute_with_gradi": [66, 67], "static_exist": [66, 67], "static_exp": [66, 67], "static_expand_dim": [66, 67], "static_expm1": [66, 67], "static_ey": [66, 67], "static_finfo": [66, 67], "static_flip": [66, 67], "static_floor": [66, 67], "static_floor_divid": [66, 67], "static_floormod": [66, 67], "static_fourier_encod": [66, 67], "static_from_dlpack": [66, 67], "static_ful": [66, 67], "static_full_lik": [66, 67], "static_function_supported_dtyp": [66, 67], "static_function_unsupported_dtyp": [66, 67], "static_gath": [66, 67], "static_gelu": [66, 67], "static_get_all_arrays_in_memori": [66, 67], "static_get_all_ivy_arrays_on_dev": [66, 67], "static_get_min_bas": [66, 67], "static_get_min_denomin": [66, 67], "static_get_num_dim": [66, 67], "static_get_referrers_recurs": [66, 67], "static_gpu_is_avail": [66, 67], "static_great": [66, 67], "static_greater_equ": [66, 67], "static_handle_nest": [66, 67], "static_handle_out_argu": [66, 67], "static_has_nan": [66, 67], "static_iinfo": [66, 67], "static_indices_wher": [66, 67], "static_infer_devic": [66, 67], "static_infer_dtyp": [66, 67], "static_inplace_arrays_support": [66, 67], "static_inplace_decr": [66, 67], "static_inplace_incr": [66, 67], "static_inplace_upd": [66, 67], "static_inplace_variables_support": [66, 67], "static_inputs_to_native_arrai": [66, 67], "static_inv": [66, 67], "static_invalid_dtyp": [66, 67], "static_is_arrai": [66, 67], "static_is_float_dtyp": [66, 67], "static_is_int_dtyp": [66, 67], "static_is_ivy_arrai": [66, 67], "static_is_ivy_contain": [66, 67], "static_is_native_arrai": [66, 67], "static_is_vari": [66, 67], "static_isfinit": [66, 67], "static_isinf": [66, 67], "static_isnan": [66, 67], "static_layer_norm": [66, 67], "static_leaky_relu": [66, 67], "static_less": [66, 67], "static_less_equ": [66, 67], "static_linear": [66, 67], "static_linspac": [66, 67], "static_log": [66, 67], "static_log10": [66, 67], "static_log1p": [66, 67], "static_log2": [66, 67], "static_logaddexp": [66, 67], "static_logical_and": [66, 67], "static_logical_not": [66, 67], "static_logical_or": [66, 67], "static_logical_xor": [66, 67], "static_logspac": [66, 67], "static_lstm_upd": [66, 67], "static_match_kwarg": [66, 67], "static_matmul": [66, 67], "static_matrix_norm": [66, 67], "static_matrix_pow": [66, 67], "static_matrix_rank": [66, 67], "static_matrix_transpos": [66, 67], "static_max": [66, 67], "static_maximum": [66, 67], "static_mean": [66, 67], "static_meshgrid": [66, 67], "static_min": [66, 67], "static_minimum": [66, 67], "static_multi_head_attent": [66, 67], "static_multinomi": [66, 67], "static_multiprocess": [66, 67], "static_native_arrai": [66, 67], "static_neg": [66, 67], "static_nonzero": [66, 67], "static_not_equ": [66, 67], "static_num_arrays_in_memori": [66, 67], "static_num_cpu_cor": [66, 67], "static_num_gpu": [66, 67], "static_num_ivy_arrays_on_dev": [66, 67], "static_one_hot": [66, 67], "static_on": [66, 67], "static_ones_lik": [66, 67], "static_out": [66, 67], "static_outputs_to_ivy_arrai": [66, 67], "static_percent_used_mem_on_dev": [66, 67], "static_permute_dim": [66, 67], "static_pinv": [66, 67], "static_posit": [66, 67], "static_pow": [66, 67], "static_print_all_arrays_in_memori": [66, 67], "static_print_all_ivy_arrays_on_dev": [66, 67], "static_prod": [66, 67], "static_promote_typ": [66, 67], "static_qr": [66, 67], "static_queue_timeout": [66, 67], "static_random_norm": [66, 67], "static_relu": [66, 67], "static_remaind": [66, 67], "static_repeat": [66, 67], "static_reshap": [66, 67], "static_result_typ": [66, 67], "static_round": [66, 67], "static_scaled_dot_product_attent": [66, 67], "static_scatter_flat": [66, 67], "static_scatter_nd": [66, 67], "static_se": [66, 67], "static_set_default_devic": [66, 67], "static_set_default_dtyp": [66, 67], "static_set_default_float_dtyp": [66, 67], "static_set_default_int_dtyp": [66, 67], "static_set_min_bas": [66, 67], "static_set_min_denomin": [66, 67], "static_set_queue_timeout": [66, 67], "static_set_split_factor": [66, 67], "static_set_tmp_dir": [66, 67], "static_set_with_grad": [66, 67], "static_shap": [66, 67], "static_shape_to_tupl": [66, 67], "static_shuffl": [66, 67], "static_sigmoid": [66, 67], "static_sign": [66, 67], "static_sin": [66, 67], "static_sinh": [66, 67], "static_slogdet": [66, 67], "static_softmax": [66, 67], "static_softplu": [66, 67], "static_solv": [66, 67], "static_split": [66, 67], "static_split_factor": [66, 67], "static_split_func_cal": [66, 67], "static_sqrt": [66, 67], "static_squar": [66, 67], "static_squeez": [66, 67], "static_stable_divid": [66, 67], "static_stable_pow": [66, 67], "static_stack": [66, 67], "static_std": [66, 67], "static_stop_gradi": [66, 67], "static_sum": [66, 67], "static_supports_inplac": [66, 67], "static_svd": [66, 67], "static_svdv": [66, 67], "static_swapax": [66, 67], "static_tanh": [66, 67], "static_tensordot": [66, 67], "static_til": [66, 67], "static_tmp_dir": [66, 67], "static_to_devic": [66, 67], "static_to_list": [66, 67], "static_to_native_arrays_and_back": [66, 67], "static_to_numpi": [66, 67], "static_to_scalar": [66, 67], "static_total_mem_on_dev": [66, 67], "static_tpu_is_avail": [66, 67], "static_trac": [66, 67], "static_tril": [66, 67], "static_triu": [66, 67], "static_trunc": [66, 67], "static_try_else_non": [66, 67], "static_type_promote_arrai": [66, 67], "static_unique_al": [66, 67], "static_unique_count": [66, 67], "static_unique_invers": [66, 67], "static_unique_valu": [66, 67], "static_unset_default_devic": [66, 67], "static_unset_default_dtyp": [66, 67], "static_unset_default_float_dtyp": [66, 67], "static_unset_default_int_dtyp": [66, 67], "static_unset_with_grad": [66, 67], "static_unstack": [66, 67], "static_used_mem_on_dev": [66, 67], "static_valid_dtyp": [66, 67], "static_value_is_nan": [66, 67], "static_var": [66, 67], "static_vari": [66, 67], "static_variable_data": [66, 67], "static_vecdot": [66, 67], "static_vector_norm": [66, 67], "static_vector_to_skew_symmetric_matrix": [66, 67], "static_wher": [66, 67], "static_with_grad": [66, 67], "static_zero_pad": [66, 67], "static_zero": [66, 67], "static_zeros_lik": [66, 67], "supports_inplac": [66, 67, 447], "svd": [66, 67, 544, 708], "svdval": [66, 67, 544], "tensordot": [66, 67, 544], "tmp_dir": [66, 67, 447], "to_native_arrays_and_back": [66, 67, 120, 126, 146], "to_scalar": [66, 67, 447], "total_mem_on_dev": [66, 67, 124, 221], "tpu_is_avail": [66, 67, 221], "tril": [66, 67, 167], "triu": [66, 67, 167], "try_else_non": [66, 67, 447], "type_promote_arrai": [66, 67, 186], "unique_al": [66, 67, 664], "unique_count": [66, 67, 664], "unique_invers": [66, 67, 664], "unique_valu": [66, 67, 664], "unset_default_devic": [66, 67, 221], "unset_default_dtyp": [66, 67, 186], "unset_default_float_dtyp": [66, 67, 186], "unset_default_int_dtyp": [66, 67, 186], "unset_with_grad": [66, 67, 515], "used_mem_on_dev": [66, 67, 221], "valid_dtyp": [66, 67, 186], "value_is_nan": [66, 67, 447], "variable_data": [66, 67, 515], "vecdot": [66, 67, 544], "vector_to_skew_symmetric_matrix": [66, 67, 544, 708], "with_grad": [66, 67, 515, 525], "zeros_lik": [66, 67, 167, 581, 582, 584, 708], "at_dev": [66, 68, 221, 234, 235], "int32": [71, 72, 123, 186, 195, 197, 205, 447, 510, 581, 592, 594, 676, 689, 691, 695], "int64": [71, 72, 123, 186, 195, 197, 205, 271, 311, 313, 659, 660, 661, 676, 689, 691, 695], "static_can_cast": [71, 72], "from_": [71, 72, 186, 195, 197], "static_add": [75, 76, 114, 115, 122], "static_divid": [75, 76, 122], "static_multipli": [75, 76, 122], "static_subtract": [75, 76, 122], "static_tan": [75, 76, 115, 122], "143": [75, 76, 115, 271, 438], "16": [75, 76, 93, 94, 109, 115, 131, 271, 438, 531, 537, 544, 548, 559, 659, 663, 676, 677, 679, 697], "38": [75, 76, 115, 271, 438], "static_all_equ": [77, 78], "clip_vector_norm": [77, 78, 447], "max_norm": [77, 78, 447, 457, 458], "static_gather_nd": [77, 78], "adam_upd": [79, 80, 132, 515], "dcdw": [79, 80, 515, 517, 518, 520, 522, 523], "lr": [79, 80, 131, 132, 515, 518, 520, 522, 523, 524, 745, 746, 747, 748, 749, 750], "mw_tm1": [79, 80, 515, 518, 522], "vw_tm1": [79, 80, 515, 518, 522], "beta1": [79, 80, 132, 515, 517, 518, 522, 745, 746, 747], "beta2": [79, 80, 132, 515, 517, 518, 522, 745, 746, 747], "999": [79, 80, 132, 515, 517, 518, 522, 745, 746, 747], "gradient_descent_upd": [79, 80, 515, 626, 627, 628, 629, 708], "lamb_upd": [79, 80, 515], "max_trust_ratio": [79, 80, 515, 522, 745, 747], "decay_lambda": [79, 80, 515, 522, 523, 745, 747, 748], "lars_upd": [79, 80, 515], "optimizer_upd": [79, 80, 515], "effective_grad": [79, 80, 515, 524], "static_adam_upd": [79, 80], "static_gradient_descent_upd": [79, 80], "static_lamb_upd": [79, 80], "static_lars_upd": [79, 80], "static_optimizer_upd": [79, 80], "static_binary_cross_entropi": [87, 88], "static_cross_entropi": [87, 88], "static_sparse_cross_entropi": [87, 88], "static_clip": [89, 90, 582], "static_rol": [89, 90, 115, 122, 582, 585], "random_uniform": [93, 94, 124, 132, 652, 708], "static_randint": [93, 94], "20": [93, 94, 130, 271, 314, 316, 336, 416, 418, 429, 431, 544, 548, 559, 566, 652, 654, 659, 662, 663, 676, 677, 679, 697], "15": [93, 94, 108, 115, 271, 299, 301, 416, 418, 531, 534, 544, 548, 559, 566, 581, 607, 609, 648, 649, 651, 652, 654, 659, 662, 664, 665, 676, 677, 679, 697], "12": [93, 94, 108, 115, 122, 271, 299, 301, 314, 316, 323, 416, 418, 447, 461, 477, 544, 548, 559, 566, 581, 595, 597, 601, 603, 607, 609, 648, 649, 651, 652, 654, 659, 663, 664, 665, 676, 677, 679, 697], "40": [93, 94, 271, 323, 429, 431, 544, 559, 676, 677, 679, 697], "gpu": [93, 94, 109, 124, 130, 145, 221, 240, 243, 256, 258, 262, 264, 269], "87": [93, 94], "62": [93, 94], "52": [93, 94, 544, 559, 664, 665, 676, 677, 679, 697], "95": [93, 94], "37": [93, 94, 271, 438, 648, 649, 651], "42": [93, 94, 133, 156, 162, 544, 559, 652, 657, 676, 677, 679, 697], "14": [93, 94, 111, 115, 122, 271, 314, 316, 531, 543, 544, 548, 559, 664, 665, 676, 677, 679, 697], "13": [93, 94, 115, 122, 271, 299, 301, 314, 316, 323, 429, 431, 447, 461, 531, 543, 544, 548, 559, 648, 649, 651, 659, 663, 664, 665, 676, 677, 679, 697], "static_random_uniform": [93, 94], "static_argsort": [99, 100], "static_sort": [99, 100], "add_ivy_container_instance_method": 105, "containerexampl": [105, 106], "strongli": [107, 108, 708, 714], "welcom": [107, 108, 109, 708, 714], "skill": 107, "vetern": 107, "beginn": 107, "aspect": [107, 131, 708], "guid": [107, 108, 109, 117, 708], "through": [107, 109, 110, 112, 115, 118, 119, 122, 127, 128, 130, 131, 132, 133, 144, 271, 293, 295], "journei": [107, 708, 714], "inclusvi": 107, "big": [107, 145], "team": [107, 108, 109], "board": 107, "contributor": [107, 108, 109, 127, 708], "section": [107, 109, 110, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 664, 665, 666, 668], "below": [107, 108, 110, 111, 112, 113, 115, 118, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 144, 167, 178, 182, 183, 271, 299, 301, 314, 316, 323, 416, 418, 544, 547, 548, 567, 581, 592, 594, 595, 597, 664, 665, 666, 669, 670, 672, 708], "best": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 447, 491], "go": [107, 108, 109, 110, 112, 113, 115, 122, 127, 131, 145, 630, 641], "finish": [107, 108, 112, 708], "dive": [107, 109, 110, 127, 130, 131, 145, 708], "environ": [107, 109, 111, 144], "basic": [107, 110, 111], "fork": [107, 108, 447, 492], "doc": [107, 110, 114, 126, 128, 131, 132, 708], "document": [107, 109, 129, 131, 133], "local": [107, 108, 111, 118], "task": [107, 109, 144, 626, 627, 628, 629, 708], "help": [107, 108, 115, 119, 121, 122, 130, 131, 132, 143, 447, 451, 676, 695, 708], "video": [107, 109, 114, 115, 126], "realli": [108, 122, 145], "contribut": [108, 109, 110, 128, 714], "toward": [108, 128, 581, 607, 609, 708, 714], "page": [108, 109, 129, 133, 143, 708, 714], "explain": [108, 109, 110, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 708, 714], "main": [108, 111, 120, 122, 167, 172, 182, 183, 544, 548, 567], "prefer": [108, 122], "git": [108, 109], "submodul": [108, 109, 110, 111, 116, 117, 118, 124, 127, 128, 132, 708, 743, 744, 751, 752], "com": 108, "unifyai": [108, 111], "http": [108, 114, 186, 195, 197, 271, 284, 286, 314, 316, 317, 319, 323, 342, 429, 431, 432, 434, 515, 517, 518, 581, 592, 594, 607, 609, 664, 665, 666, 669, 670, 672, 676, 680, 682], "gh": 108, "your_fold": 108, "id": [108, 121, 122, 221, 240, 741, 742], "cours": [108, 109, 115, 131, 145], "whatev": [108, 145], "integr": [108, 117, 186, 192], "familiar": [108, 110], "sure": [108, 110, 116], "elig": 108, "free": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 144, 708], "student": 108, "licenc": 108, "peopl": [108, 109, 112], "seem": [108, 132, 145], "miss": [108, 115, 117, 121, 122, 745, 749], "explicit": [108, 111, 122, 123, 125, 128, 145], "remind": 108, "channel": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 447, 470, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739], "pace": 108, "suggest": [108, 109, 113], "latest": [108, 110, 111, 114, 145, 186, 195, 197, 271, 284, 286, 314, 316, 317, 319, 323, 342, 429, 431, 432, 434, 581, 592, 594, 607, 609, 664, 665, 666, 669, 670, 672, 676, 680, 682, 729, 738], "packag": [108, 111, 145], "ensur": [108, 109, 117, 121, 123, 126, 447, 485], "pypi": [108, 110, 145], "person": [108, 109], "experi": [108, 129, 131, 145], "avoid": [108, 109, 117, 119, 120, 122, 130, 221, 271, 339, 341], "pip": [108, 144, 708], "instal": [108, 111, 144, 708], "abil": [108, 129, 145], "perhap": [108, 130, 131, 132, 145], "track": [108, 109, 221, 630, 642, 741, 742], "run": [108, 111, 116, 117, 119, 126, 128, 129, 130, 131, 132, 133, 144, 145, 221, 230, 515, 517, 518, 522, 626, 627, 628, 629, 729, 740, 741, 742], "command": [108, 111, 708], "ivy_dev": [108, 109, 111], "name": [108, 109, 111, 114, 117, 128, 130, 131, 133, 164, 165, 447, 451, 544, 549, 561, 564, 664, 665, 666], "setup": 108, "click": [108, 109, 114, 708], "icon": [108, 109], "side": [108, 109], "choos": [108, 109, 133, 221, 266, 271, 387, 389, 390, 392, 659, 663, 664, 665, 666, 668, 676, 680, 682, 683, 685, 686, 688], "panel": 108, "select": [108, 109, 117, 128, 130, 133, 145], "drop": [108, 145], "down": [108, 130], "path": [108, 111], "manual": [108, 109, 117, 132, 630, 631, 640, 641], "builtin": [108, 111, 130, 132], "requir": [108, 111, 113, 114, 115, 117, 120, 121, 123, 124, 126, 130, 145, 164, 165, 271, 429, 431, 544, 549, 581, 614, 616, 718, 719], "cmd": [108, 111], "directori": [108, 109, 111, 447, 502], "folder": [108, 109, 111, 113, 116, 117, 118], "abov": [108, 109, 111, 114, 115, 118, 119, 121, 122, 125, 126, 130, 131, 132, 133, 167, 178, 182, 183, 186, 195, 197, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 323, 342, 398, 400, 416, 418, 429, 431, 432, 434, 438, 447, 471, 531, 534, 543, 544, 547, 548, 549, 567, 581, 592, 594, 595, 597, 607, 609, 648, 649, 651, 652, 654, 664, 665, 666, 669, 670, 672, 676, 680, 682, 689, 691, 692, 694, 695, 701, 702, 704], "m": [108, 109, 111, 112, 128, 167, 178, 182, 183, 447, 454, 544, 545, 547, 548, 549, 550, 551, 552, 554, 557, 558, 559, 560, 561, 563, 564, 565, 567, 652, 655, 656], "python3": [108, 111], "script": [108, 109, 111, 115, 128, 145], "bat": [108, 109, 111], "OR": [108, 109, 111, 271, 308, 310, 390, 392, 701, 705, 707], "bin": [108, 109, 111], "mac": [108, 109, 111], "linux": [108, 109, 111], "virtualenv": 108, "os": 108, "note": [108, 109, 113, 114, 115, 122, 271, 413, 415, 544, 549, 564, 581, 614, 616, 664, 666, 676, 683, 685], "tick": [108, 109], "To": [108, 115, 118, 122, 131, 132, 133, 708], "ivy_test": [108, 109], "test_array_api": [108, 109, 116, 117], "cd": [108, 109, 111], "txt": 108, "visual": [108, 145], "jetbrain": 108, "remot": 108, "mitig": 108, "potenti": [108, 127, 271, 339, 341], "conflict": [108, 109, 131], "yet": [108, 110, 122], "particular": [108, 109, 113, 125, 271, 272, 274], "system": [108, 145, 544, 563], "instruct": [108, 110], "desktop": 108, "wsl": 108, "powershel": 108, "admin": 108, "visit": 108, "link": 108, "profession": 108, "execut": [108, 111, 122, 125, 128, 130, 133, 145, 447, 512], "deploy": 108, "top": [108, 109, 117, 131, 132, 708], "press": [108, 131, 708], "ok": 108, "caus": [108, 109, 115, 117, 122, 125, 145], "earlier": [108, 109], "might": [108, 109, 113, 117, 120, 128, 130, 131, 447, 464], "necessari": [108, 115, 119, 122, 125], "virtualis": 108, "detail": [108, 109, 110, 113, 116, 117, 118, 119, 120, 122, 126, 131, 132, 167, 173, 664, 665, 666, 668], "sudo": 108, "apt": 108, "ca": 108, "certif": 108, "curl": 108, "gnupg": 108, "lsb": 108, "mkdir": 108, "keyr": 108, "fssl": 108, "download": [108, 117], "gpg": 108, "dearmor": 108, "o": [108, 128, 447, 454], "echo": 108, "deb": 108, "arch": 108, "dpkg": 108, "architectur": [108, 133, 145], "lsb_releas": 108, "cs": 108, "tee": 108, "null": 108, "ce": 108, "cli": 108, "containerd": 108, "io": 108, "compos": [108, 122, 145], "plugin": 108, "systemctl": 108, "permiss": 108, "relat": [108, 109, 144, 221], "post": [108, 133, 648, 649, 651, 708, 714], "It": [108, 109, 111, 112, 113, 114, 115, 119, 121, 122, 125, 128, 130, 131, 132, 156, 159, 221, 266, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 317, 319, 320, 322, 323, 325, 336, 338, 339, 341, 342, 354, 356, 357, 359, 360, 362, 363, 365, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 395, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 435, 437, 438, 447, 458, 469, 571, 572, 574, 575, 577, 578, 580, 581, 582, 584, 592, 594, 595, 597, 598, 600, 601, 603, 607, 609, 611, 613, 614, 616, 617, 619, 652, 654, 659, 660, 669, 670, 672, 673, 675, 701, 702, 704, 705, 707], "headach": 108, "arm": 108, "m1": 108, "instead": [108, 109, 110, 114, 115, 117, 118, 122, 125, 126, 128, 130, 131, 145], "featur": [108, 113, 126, 131, 708], "vm": 108, "azur": 108, "cloud": [108, 144], "defin": [108, 110, 113, 114, 123, 126, 130, 132, 145, 271, 398, 400, 413, 415, 447, 494, 544, 546, 549, 563, 652, 654, 676, 680, 682, 683, 685, 686, 688], "dockerfil": [108, 111], "longer": [108, 123, 125], "worri": 108, "platform": 108, "agnost": [108, 121, 126, 128, 130, 133, 145, 708], "usual": 108, "studio": 108, "favourit": 108, "extens": [108, 109, 114, 167, 178, 186, 195, 197, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 323, 342, 416, 418, 429, 431, 432, 434, 438, 544, 547, 581, 592, 594, 595, 597, 607, 609, 664, 665, 666, 669, 670, 672, 676, 680, 682, 701, 702, 704], "theme": 108, "too": [108, 109, 145, 271, 281, 398, 400], "done": [108, 109, 115, 117, 131], "unsupport": [108, 123, 186, 205, 206], "slow": 108, "ipad": 108, "long": [108, 109, 115, 531, 541], "browser": 108, "cool": [108, 113], "requisit": 108, "head": [108, 122, 531, 542, 708, 729, 740], "pane": [108, 109], "readi": [108, 110], "begin": [108, 630, 631, 641], "outlin": [108, 109, 110, 112, 114, 117, 118, 122, 125, 130], "dropdown": 108, "tab": [108, 131, 708], "master": [108, 109, 122], "vs": 108, "view": [108, 109, 167, 173, 531, 534, 538], "built": [108, 129, 167, 168, 221, 729, 740, 741, 742], "bottom": 108, "box": 108, "patient": 108, "upto": 108, "minut": 108, "launch": 108, "That": [108, 109, 130, 131, 132, 271, 413, 415], "refer": [108, 109, 117, 118, 123, 126, 145, 167, 172, 271, 339, 341, 375, 377, 515, 517, 518, 544, 568, 570, 676, 692, 694, 698, 700, 701, 702, 704, 705, 707, 729, 739], "approach": [108, 109, 117, 118, 122, 130, 131, 145], "colour": 108, "applic": [108, 123, 124, 132, 531, 542, 543, 630, 636, 642], "good": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132], "chanc": 108, "vscode": 108, "explor": [108, 129, 133, 144], "troubleshoot": 108, "sometim": [108, 109], "ever": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "64": [108, 131, 132, 271, 429, 431, 432, 434, 531, 537, 538, 544, 559, 676, 677, 679, 697, 708, 729, 740], "bit": [108, 115, 118, 122, 130, 186, 203, 204, 207, 271, 302, 304, 305, 307, 311, 313, 676, 689, 691, 695], "usr": 108, "more": [108, 109, 110, 112, 113, 115, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 145, 167, 168, 186, 193, 271, 339, 341, 544, 552, 554, 581, 595, 597, 664, 665, 666, 668, 708], "nutshel": [108, 126], "hook": 108, "lint": 108, "fix": [108, 109], "fail": [108, 110, 116, 117, 128, 130], "attempt": [108, 145], "succe": 108, "problemat": 108, "proce": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "modifi": [108, 109, 114, 118, 123, 124, 128], "properli": [108, 112], "enter": [108, 109, 121, 123, 124, 126, 221], "unsur": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "feel": [108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 708], "server": [109, 708], "context": [109, 115, 122, 123, 124, 221, 447, 492, 531, 542, 729, 740], "suitabl": [109, 113, 122], "quick": [109, 112, 132], "tendenc": 109, "land": 109, "end": [109, 122, 125, 127, 144, 145, 167, 168, 271, 293, 295, 708, 714], "world": 109, "come": [109, 110, 132, 143, 708, 714], "fly": 109, "hard": [109, 130], "receiv": [109, 117, 123, 124, 221, 230, 231, 447, 452, 491, 729, 739], "respons": [109, 111], "internship": 109, "comment": 109, "trigger": 109, "unansw": 109, "label": [109, 128, 129, 133, 571, 572, 574, 575, 577, 578, 580], "respond": 109, "someon": [109, 145], "els": [109, 110, 113, 118, 119, 125, 128, 130, 132, 133, 145, 447, 455, 464, 468, 630, 640], "strive": [109, 145], "repli": 109, "newli": [109, 125, 164, 165, 186, 192, 447, 456], "bug": [109, 117], "serv": [109, 117, 118, 121, 122, 126, 127, 708], "suspect": 109, "behaviour": [109, 114, 117, 121, 122, 125, 126, 130], "observ": 109, "confid": 109, "wrong": 109, "someth": [109, 113, 131, 132, 145], "bet": 109, "act": [109, 115, 145], "placehold": [109, 121, 126, 630, 642], "mark": [109, 117], "ii": [109, 676, 677, 679, 697], "iii": 109, "titl": [109, 708], "issue_numb": 109, "delet": [109, 111], "No": [109, 128], "progress": [109, 122, 129, 133], "pr": 109, "soon": [109, 122, 143, 145, 708, 714], "solut": [109, 117, 122, 544, 563], "review": [109, 113], "merg": 109, "everi": [109, 110, 111, 115, 116, 117, 118, 119, 120, 122, 125, 126, 128, 130, 132, 167, 174, 175, 447, 448, 450], "dai": 109, "close": [109, 114, 271, 339, 341, 416, 418, 544, 564], "likewis": [109, 114, 118, 122, 123, 126, 131], "freed": 109, "purpos": [109, 111, 115, 117, 118, 120, 121, 122, 126, 127, 130, 271, 339, 341, 708], "remain": [109, 115, 145, 271, 281, 398, 400, 413, 415, 581, 604, 606, 630, 636], "short": [109, 132, 531, 541], "basi": [109, 116, 131], "situat": [109, 133], "alloc": [109, 145, 167, 182, 183, 186, 192, 221], "upon": [109, 115, 117, 125, 145], "period": 109, "prevent": [109, 125, 130, 515, 517, 518, 522, 676, 695, 745, 746, 747], "unabl": 109, "obvious": 109, "never": [109, 122], "reflect": [109, 121], "qualiti": 109, "hypothet": 109, "frustrat": 109, "delai": 109, "busi": 109, "fine": [109, 130, 133], "becaus": [109, 114, 117, 118, 119, 121, 123, 124, 125, 126, 128, 132, 133, 145], "inact": 109, "me": 109, "unfairli": 109, "definit": [109, 118, 123, 130, 544, 545, 546], "investig": 109, "Then": [109, 111, 130, 145], "practic": [109, 117], "separ": [109, 117, 121, 128, 130, 131], "branch": [109, 122, 145, 164, 165, 271, 293, 295], "role": [109, 129], "date": 109, "upstream": [109, 116], "complic": [109, 128], "root": [109, 111, 131, 271, 429, 431, 652, 653, 655, 656], "merge_with_upstream": 109, "sh": 109, "name_of_your_branch": 109, "resolv": [109, 676, 689, 691, 695], "push": [109, 116], "both": [109, 114, 115, 118, 122, 124, 125, 126, 128, 130, 131, 132, 133, 144, 145, 186, 195, 197, 211, 271, 281, 284, 286, 317, 319, 342, 410, 412, 429, 431, 432, 434, 438, 447, 471, 531, 534, 543, 544, 546, 552, 554, 568, 581, 607, 609, 648, 649, 651, 676, 680, 682, 701, 702, 704], "abort": 109, "tediou": 109, "resolut": 109, "stash": 109, "reinstat": 109, "fetch": 109, "uncommit": 109, "unstag": 109, "untrack": 109, "comprehens": 109, "explan": [109, 114, 122, 126, 130], "atlassian": 109, "tutori": 109, "quit": [109, 110, 114, 118, 120, 121], "logic": [109, 120, 121, 123, 124, 130, 221, 257, 271, 384, 386, 387, 389, 390, 392, 701, 702, 704, 705, 707, 708], "blame": 109, "revis": 109, "author": [109, 708], "eg": 109, "past": 109, "l": [109, 112, 544, 545, 549, 552, 554, 567], "grep": 109, "v": [109, 128, 131, 132, 133, 531, 543, 708, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 749, 751, 752], "commit_id": 109, "handi": 109, "histori": 109, "toggl": 109, "vertic": 109, "highlight": [109, 115], "previou": [109, 117, 126, 133, 145, 515, 518, 522], "inform": [109, 186, 204, 207, 447, 451, 515, 526], "whenev": [109, 130, 131], "tag": 109, "think": [109, 115], "interact": [109, 708], "gain": [109, 127, 132, 720], "yourself": [109, 110, 144], "simpler": [109, 130], "cannot": [109, 119, 123, 133], "least": [109, 115, 118, 121, 544, 552, 554], "final": [109, 114, 115, 118, 121, 123, 125, 128, 130, 131, 167, 176, 177, 447, 470, 729, 740], "tickbox": 109, "corner": 109, "span": 109, "intent": [109, 125], "larg": [109, 131, 271, 281, 398, 400], "discourag": 109, "philosophi": 109, "increment": [109, 447, 484], "frequent": [109, 110], "valuabl": 109, "infrequ": 109, "earli": [109, 708], "wast": 109, "spot": [109, 118], "mistak": 109, "propos": 109, "mountain": 109, "advoc": [109, 145], "individu": [109, 110, 118], "per": [109, 131, 221, 531, 532, 533, 534, 535, 536, 537, 538, 729, 730, 731, 732, 733, 734, 735, 736], "style": [109, 659, 662], "ve": [109, 127, 130, 652, 653, 708], "actual": [109, 112, 118, 125, 127, 130, 132, 145], "aim": [109, 127], "part": [109, 113, 116, 117, 118, 128, 129, 133, 144, 145, 167, 182, 183, 515, 518, 520, 522, 523, 524, 741, 742], "subsect": 109, "session": [109, 708], "block": [109, 118, 127, 129, 133, 145, 221, 708], "smaller": [109, 128, 133, 581, 582, 584, 607, 609, 676, 689, 691, 695], "edit": 109, "beauti": 109, "particularli": [109, 131, 145], "concern": [109, 112, 115, 122, 125, 127], "effici": [109, 117, 118, 122, 125, 126, 128, 131, 145], "difficult": [109, 117, 145, 664, 665, 666, 668], "undo": 109, "stress": 109, "frequenc": [109, 447, 470], "pycharm": 109, "pytest": [109, 117], "button": 109, "declar": 109, "insid": [109, 111, 113, 123], "exec": 109, "rm": 109, "rf": 109, "cp": 109, "ivy_contain": 109, "bash": [109, 111], "test_ivi": [109, 117], "test_funct": 109, "test_cor": 109, "test_imag": 109, "test_random_crop": 109, "header": 109, "q": [109, 145, 531, 543, 544, 549, 561], "array_api_test": 109, "test_creation_funct": 109, "test_arang": 109, "window": [109, 111, 531, 532, 533, 534, 535, 536, 537, 538, 729, 730, 731, 732, 733, 734, 735, 736], "variou": [109, 114, 120, 126, 144], "wherebi": [110, 122, 630, 642], "broad": 110, "todo": [110, 117], "commit": [110, 117], "NOT": [110, 271, 387, 389], "resourc": 110, "hypothesi": 110, "cover": [110, 114, 115, 118, 120, 127], "lambda": [110, 128, 131, 745, 748, 750], "direct": [110, 132, 133, 144, 669, 673, 675], "bind": [110, 122], "aforement": 110, "categori": [110, 113, 121, 122, 123, 127, 708], "parent": [110, 130], "hint": [110, 113, 114, 118, 121, 125, 126, 167, 178, 186, 195, 197, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 323, 342, 416, 418, 429, 431, 432, 434, 438, 447, 471, 531, 534, 543, 544, 547, 581, 592, 594, 595, 597, 607, 609, 648, 649, 651, 664, 665, 666, 669, 670, 672, 676, 680, 682, 701, 702, 704], "its": [110, 111, 114, 186, 193, 221, 265, 544, 552, 554, 581, 592, 594, 604, 606, 607, 609, 617, 619], "thorough": [110, 114, 117, 126], "transpil": [110, 127, 129, 708, 714], "builder": [111, 143, 145, 708], "maco": 111, "ubuntu": 111, "uid": 111, "make_docs_without_dock": 111, "rel": [111, 515, 518, 520, 522, 523, 524, 544, 548, 557, 560, 567, 581, 595, 597, 607, 609, 669, 670, 672, 673, 675, 708], "synchron": 111, "rest": [111, 129, 133], "remove_doc": 111, "_": [111, 114, 122, 125, 130, 131, 186, 195, 197, 271, 284, 286, 314, 316, 317, 319, 323, 342, 429, 431, 432, 434, 515, 517, 518, 544, 570, 581, 592, 594, 607, 609, 664, 665, 666, 669, 670, 672, 676, 680, 682], "privat": [111, 745, 749], "fulfil": [111, 127, 708], "autogenerated_sourc": 111, "png": [111, 131], "_imag": 111, "lastli": 111, "rst": 111, "partial_sourc": 111, "conf": 111, "create_rst_fil": 111, "filter": [111, 531, 532, 533, 534, 535, 536, 537, 538, 729, 730, 731, 732, 733, 734, 735, 736], "repres": [111, 130, 167, 178, 186, 203, 271, 277, 278, 280, 281, 287, 289, 292, 296, 298, 322, 323, 325, 398, 400, 426, 428, 440, 443, 531, 540, 544, 562, 563], "overal": [111, 114, 122, 123, 124, 133], "markup": 111, "extract": [111, 113], "get_functions_and_class": 111, "doctr": 111, "readm": [111, 145], "module_nam": 111, "copy_readme_to_rst": 111, "tabl": 111, "toc": 111, "tree": 111, "append_toctree_to_rst": 111, "create_index_rst": 111, "\u03c0": [111, 271, 275, 284, 286, 290, 293, 295], "namespac": [111, 113, 123, 128, 133], "who": [112, 127, 145], "mainli": [112, 129, 131], "under": [112, 114, 115, 116, 117, 118, 122, 127, 128, 131, 133], "hood": [112, 115, 117, 118, 122, 127, 128, 131, 133], "weed": [112, 127], "behind": [112, 127, 129, 515, 518, 520, 522, 523, 524], "navig": 112, "tour": 112, "primari": [112, 117, 119, 125, 145], "composit": [112, 117, 119, 121, 122, 125, 128, 132, 133, 145], "nestabl": [112, 114, 115, 117, 125, 186, 195, 197, 271, 281, 284, 286, 317, 319, 342, 429, 431, 432, 434, 438, 447, 471, 531, 534, 543, 581, 607, 609, 648, 649, 651, 676, 680, 682, 701, 702, 704], "dynam": [112, 123, 124, 125, 128, 164, 165], "runtim": [112, 117, 221], "h": [112, 122, 531, 534, 535, 536, 537, 538], "j": [112, 447, 453, 454, 544, 567, 676, 677, 679, 697], "k": [112, 128, 167, 172, 182, 183, 447, 453, 531, 543, 544, 552, 554, 561, 563, 564, 565, 567, 652, 655, 656, 659, 662], "borrow": 112, "n": [112, 167, 178, 182, 183, 447, 454, 531, 539, 544, 548, 552, 554, 556, 557, 558, 559, 560, 561, 564, 565, 567, 568, 569, 570, 581, 589, 591, 592, 594, 598, 600, 614, 616, 623, 625, 652, 655, 656, 659, 662, 676, 683, 685, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "taken": [113, 133, 544, 548], "constant": [113, 118, 132, 133, 145, 221, 230, 231, 581, 589, 591, 630, 636, 648, 649, 651, 720, 721, 725, 728, 741, 742, 743, 744], "compil": [113, 122, 127, 129, 145, 708, 741, 742, 745, 746, 747, 748, 749, 750], "meta": [113, 121, 627, 628, 629], "overlap": 113, "sever": [113, 145, 544, 551], "judgement": 113, "locat": [113, 117, 119, 124, 652, 653], "some_namespac": 113, "some_backend": 113, "another_backend": 113, "break": [113, 126, 130, 145, 708], "anyth": [113, 708], "refactor": 113, "ongo": 113, "subfold": [113, 117], "via": [113, 122, 123, 124, 125, 128, 130, 131, 144, 630, 631, 640, 641], "file_nam": 113, "my_func": [113, 115], "int": [113, 115, 118, 122, 123, 124, 125, 126, 133, 156, 161, 164, 165, 167, 170, 172, 174, 175, 176, 177, 180, 182, 183, 184, 186, 194, 201, 203, 204, 207, 210, 221, 243, 246, 247, 248, 249, 257, 258, 259, 265, 266, 271, 299, 301, 302, 304, 305, 307, 308, 310, 311, 313, 314, 316, 447, 451, 461, 462, 465, 466, 467, 470, 471, 478, 494, 497, 498, 503, 504, 513, 515, 517, 518, 522, 531, 532, 534, 536, 537, 538, 544, 546, 548, 566, 567, 568, 569, 571, 575, 577, 578, 580, 581, 586, 588, 589, 591, 592, 594, 595, 597, 598, 600, 601, 603, 607, 609, 610, 611, 613, 614, 616, 617, 619, 620, 622, 623, 625, 626, 627, 628, 629, 630, 642, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 669, 670, 672, 673, 675, 676, 680, 682, 683, 685, 686, 688, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "nativedtyp": [113, 123, 124, 126, 167, 168, 169, 170, 171, 172, 174, 175, 179, 180, 181, 184, 185, 186, 191, 192, 200, 201, 202, 211, 676, 695], "nativedevic": [113, 123, 124, 126, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 184, 185, 221, 238, 239, 240, 254, 260, 262, 264, 266, 267, 270, 447, 494, 652, 653, 654, 655, 656], "my": 113, "numer": [113, 132, 167, 178, 186, 192, 271, 272, 274, 281, 317, 319, 326, 328, 339, 341, 342, 344, 345, 347, 354, 356, 357, 359, 360, 362, 363, 365, 387, 389, 390, 392, 398, 400, 401, 403, 404, 406, 410, 412, 413, 415, 419, 421, 432, 434, 435, 437, 444, 446, 447, 476, 477, 499, 500, 505, 506, 544, 546, 552, 554, 559, 564, 566, 567, 568, 652, 658, 659, 660, 661, 676, 680, 682, 689, 691, 695, 720], "cooler": 113, "produc": [113, 221, 230, 231, 531, 543], "something_cool": 113, "category_nam": [114, 118, 123, 124, 126], "contrast": [114, 126], "backend_nam": [114, 118, 119, 120, 123, 124, 126], "account": 114, "instanti": 114, "firstli": [114, 115, 118, 121, 123, 125, 131], "templat": [114, 708], "spec": [114, 115], "api_specif": [114, 186, 195, 197, 271, 284, 286, 314, 316, 317, 319, 323, 342, 429, 431, 432, 434, 581, 592, 594, 607, 609, 664, 665, 666, 669, 670, 672, 676, 680, 682], "array_api": 114, "preview": 114, "render": 114, "incorrectli": 114, "onlin": [114, 708], "approxim": [114, 156, 157, 271, 275, 277, 278, 280, 284, 286, 287, 289, 290, 293, 295, 320, 322, 323, 325, 336, 339, 341, 369, 371, 372, 374, 375, 377, 378, 380, 410, 412, 422, 425, 426, 428, 438, 544, 557, 560], "tangent": [114, 156, 163, 271, 290, 292, 293, 295, 296, 298, 438, 440, 441, 443], "domain": [114, 271, 275, 277, 278, 280, 284, 286, 287, 289, 290, 293, 295, 320, 322, 323, 325, 336, 339, 341, 369, 371, 372, 374, 378, 380, 422, 425, 426, 428, 429, 431, 438], "infin": [114, 166, 186, 192, 271, 272, 274, 277, 278, 280, 281, 283, 287, 289, 290, 293, 295, 317, 319, 320, 322, 323, 325, 328, 336, 338, 339, 341, 342, 344, 345, 347, 354, 356, 357, 359, 369, 371, 372, 374, 378, 380, 381, 383, 398, 400, 410, 412, 413, 415, 416, 418, 422, 425, 426, 428, 429, 431, 438, 444, 446, 544, 569, 676, 680, 682, 686, 688, 701, 702, 704, 705, 707], "codomain": [114, 271, 275, 277, 278, 280, 284, 286, 287, 289, 290, 293, 295, 320, 322, 323, 325, 336, 339, 341, 369, 371, 372, 374, 378, 380, 422, 425, 426, 428, 429, 431, 438], "x_i": [114, 271, 272, 274, 275, 277, 278, 280, 284, 286, 287, 289, 290, 302, 304, 317, 319, 320, 322, 323, 325, 336, 339, 341, 342, 354, 356, 357, 359, 360, 362, 369, 371, 372, 374, 378, 380, 387, 389, 401, 403, 416, 418, 419, 421, 422, 425, 426, 428, 429, 431, 432, 434, 438, 444, 446, 664, 665, 666, 668, 676, 680, 682, 683, 685, 686, 688, 692, 694, 695, 698, 700], "assum": [114, 119, 123, 130, 131, 145, 167, 178, 186, 195, 197, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 320, 323, 342, 416, 418, 422, 425, 429, 431, 432, 434, 438, 447, 471, 531, 534, 543, 544, 547, 581, 592, 594, 595, 597, 607, 609, 648, 649, 651, 664, 665, 666, 669, 670, 672, 676, 680, 682, 701, 702, 704], "express": [114, 128, 133, 271, 275, 284, 286, 290, 293, 295, 320, 422, 425, 438], "radian": [114, 271, 275, 284, 286, 290, 293, 295, 320, 422, 425, 438], "float": [114, 118, 122, 123, 125, 126, 130, 132, 156, 158, 166, 167, 168, 170, 172, 174, 175, 176, 177, 180, 184, 186, 192, 200, 204, 209, 212, 221, 254, 260, 264, 267, 270, 271, 272, 274, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 314, 316, 317, 319, 320, 322, 323, 325, 326, 328, 329, 331, 336, 338, 339, 341, 342, 344, 345, 347, 348, 350, 351, 353, 363, 365, 366, 368, 369, 371, 372, 374, 378, 380, 381, 383, 398, 400, 401, 403, 404, 406, 407, 409, 410, 412, 413, 415, 416, 418, 422, 425, 426, 428, 429, 431, 435, 437, 438, 440, 443, 444, 446, 447, 457, 458, 470, 476, 477, 499, 500, 505, 506, 515, 517, 518, 520, 522, 523, 524, 531, 534, 538, 543, 544, 545, 547, 549, 550, 551, 557, 560, 561, 563, 564, 569, 571, 572, 574, 575, 577, 578, 580, 626, 627, 628, 629, 648, 649, 651, 652, 655, 656, 664, 665, 666, 668, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700], "operand": [114, 271, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 293, 295, 314, 316, 317, 319, 320, 322, 323, 325, 336, 338, 339, 341, 342, 369, 371, 372, 374, 378, 380, 381, 383, 398, 400, 410, 412, 413, 415, 416, 418, 422, 425, 426, 428, 429, 431, 438, 444, 446, 676, 677, 679, 680, 682, 686, 688, 695, 697], "whose": [114, 167, 182, 183, 271, 277, 278, 280, 287, 289, 292, 296, 298, 320, 322, 323, 325, 410, 412, 422, 425, 426, 428, 438, 440, 443, 447, 456, 544, 545, 547, 548, 549, 550, 551, 557, 558, 559, 560, 561, 563, 564, 565, 567, 581, 595, 597, 607, 609, 664, 665, 666, 676, 677, 679, 697], "ref": [114, 271, 311, 313, 363, 365, 398, 400, 404, 406, 413, 415, 435, 437, 581, 614, 616], "promot": [114, 118, 123, 186, 192, 195, 197, 211, 212, 216, 271, 275, 277, 278, 280, 281, 283, 284, 286, 287, 289, 290, 292, 296, 298, 299, 301, 305, 307, 308, 310, 311, 313, 314, 316, 320, 322, 323, 325, 326, 336, 338, 339, 341, 369, 371, 372, 374, 378, 380, 381, 383, 393, 395, 398, 400, 410, 412, 413, 415, 422, 425, 426, 428, 429, 431, 438, 440, 443, 544, 545, 546, 551, 552, 554, 557, 559, 560, 563, 568, 569, 581, 614, 616, 676, 683, 685], "But": [114, 122, 133], "needless": 114, "info": [114, 708], "subset": [114, 117, 126, 128], "extend": [114, 117, 119, 126], "renam": 114, "conform": [114, 167, 178, 186, 195, 197, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 323, 339, 341, 342, 416, 418, 429, 431, 432, 434, 438, 544, 547, 581, 592, 594, 595, 597, 607, 609, 664, 665, 666, 669, 670, 672, 676, 680, 682, 701, 702, 704], "org": [114, 186, 195, 197, 271, 284, 286, 314, 316, 317, 319, 323, 342, 429, 431, 432, 434, 515, 517, 518, 581, 592, 594, 607, 609, 664, 665, 666, 669, 670, 672, 676, 680, 682], "elementwise_funct": [114, 271, 284, 286, 314, 316, 317, 319, 323, 342, 429, 431, 432, 434, 581, 607, 609, 664, 665, 666, 669, 670, 672, 676, 680, 682], "descript": [114, 122, 167, 178, 186, 195, 197, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 323, 342, 416, 418, 429, 431, 432, 434, 438, 447, 471, 531, 534, 543, 544, 547, 569, 581, 592, 594, 595, 597, 607, 609, 648, 649, 651, 664, 665, 666, 669, 670, 672, 676, 680, 682, 701, 702, 704], "simplic": [114, 132, 144, 167, 178, 186, 195, 197, 271, 281, 284, 286, 299, 301, 314, 316, 317, 319, 323, 342, 416, 418, 429, 431, 432, 434, 438, 447, 471, 531, 534, 543, 544, 547, 581, 592, 594, 595, 597, 607, 609, 648, 649, 651, 664, 665, 666, 669, 670, 672, 676, 680, 682], "judgment": 114, "beyond": [114, 581, 607, 609], "text": 114, "func_nam": [114, 115, 118], "pure": [114, 130, 133, 145], "themselv": [114, 118, 122, 123, 124, 132, 630, 631], "operator_nam": 114, "succinct": 114, "contstructor": 114, "though": [114, 118, 123, 131, 145], "forward": [114, 133, 144, 145, 741, 742, 745, 749], "_forward": [114, 128, 131, 132, 708], "former": 114, "trainabl": [114, 129, 131, 132, 515, 521, 718, 719, 741, 742, 751], "explicitli": [114, 118, 119, 121, 122, 125, 128, 145, 544, 549, 729, 738, 740, 741, 742], "latter": [114, 119], "implicit": [114, 122, 128], "docst": 114, "eight": 115, "static_": 115, "op_nam": 115, "__r": 115, "four": [115, 118, 123, 126, 131], "__sub__": [115, 121, 122, 126, 130], "__mul__": [115, 121, 122, 126, 130], "__truediv__": [115, 121, 122], "respect": [115, 121, 122, 123, 126, 167, 178, 271, 272, 274, 281, 283, 293, 295, 299, 301, 305, 307, 308, 310, 311, 313, 314, 316, 326, 328, 329, 331, 338, 344, 345, 347, 348, 350, 351, 353, 363, 365, 366, 368, 381, 383, 384, 386, 390, 392, 393, 395, 398, 400, 404, 406, 413, 415, 435, 437, 515, 517, 518, 519, 520, 522, 523, 524, 544, 561, 626, 627, 628, 629], "recap": [115, 122, 132], "independ": [115, 116, 120, 122, 128, 133, 544, 546, 563, 652, 653], "combinatorili": 115, "variat": [115, 117], "grid": [115, 117, 144, 167, 178], "vari": [115, 117, 122, 130, 664, 665, 666, 668], "simplest": 115, "small": [115, 118, 128, 132, 145, 271, 398, 400, 544, 557, 560, 648, 649, 651, 743, 744], "unus": [115, 125, 164, 165], "18": [115, 122, 271, 314, 316, 544, 548, 559, 676, 677, 679, 697], "excess": [115, 119, 130], "showcas": [115, 144], "demonstr": [115, 130], "replic": [115, 123], "meant": 115, "imaginari": 115, "some_flag": 115, "another_flag": 115, "54": [115, 271, 320, 323, 429, 431, 531, 543, 544, 559, 652, 655, 676, 677, 679, 697], "jointli": 115, "three": [115, 122, 127, 167, 178, 708], "x0": [115, 447, 453], "procedur": 115, "sens": [115, 122, 130], "5574077": 115, "1850398": 115, "5463025": 115, "8422884": 115, "91601413": 115, "9647598": 115, "3738229": 115, "1597457": 115, "0963247": 115, "9955841": 115, "3278579": 115, "multi": [115, 122, 127, 145, 531, 542, 544, 546, 708, 714, 729, 740], "seper": [115, 447, 470], "pars": [115, 145], "satisfi": [115, 544, 570], "far": [115, 124, 129, 130, 630, 631, 641], "asid": [115, 144], "irrelev": [115, 123], "increasingli": 115, "complex": [115, 131, 132, 133, 145, 544, 549, 564], "rule": [115, 117, 118, 121, 122, 123, 186, 192, 195, 197, 212, 271, 292, 296, 298, 311, 313, 326, 398, 400, 413, 415, 440, 443, 544, 545, 546, 559, 563], "count": [115, 131, 221, 259, 544, 568, 581, 595, 597, 664, 665, 666, 701, 702, 704, 705, 707], "14254655": 115, "1578213": 115, "380515": 115, "17": [115, 122, 156, 158, 544, 548, 652, 655], "trivial": 115, "By": [115, 118, 122, 125, 132, 133, 447, 461, 462, 544, 568, 581, 601, 603, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "non": [115, 122, 123, 128, 164, 165, 186, 192, 208, 271, 387, 389, 390, 392, 531, 534, 544, 547, 557, 564, 566, 568, 569, 659, 660, 661, 662, 676, 680, 682, 683, 685, 686, 688, 689, 691, 698, 700, 701, 702, 704, 705, 707, 741, 742, 745, 749], "dictat": [115, 121, 125, 126], "exlud": 115, "unit": [116, 117, 145, 156, 157, 158, 159, 221], "thoroughli": [116, 117], "ci": [116, 117, 145], "failur": 116, "On": [117, 129, 133], "fixtur": 117, "consum": [117, 122, 126, 221], "300": [117, 271, 416, 418], "hit": [117, 128], "permit": [117, 121, 126], "action": 117, "eleg": 117, "intellig": 117, "sampl": [117, 531, 539, 652, 653, 655, 656, 676, 692, 694, 698, 700, 729, 737], "rang": [117, 131, 132, 133, 167, 168, 176, 177, 664, 665, 676, 689, 691, 695, 708], "cach": [117, 118, 221, 239, 447, 456], "unexplor": 117, "known": 117, "repeatedli": [117, 122, 630, 639], "upload": 117, "artifact": 117, "parametr": 117, "strategi": 117, "statement": [117, 145], "plai": [117, 133], "helper": [117, 131], "verifi": [117, 123, 124, 130, 708, 714], "truth": [117, 271, 329, 331, 348, 350, 351, 353, 363, 365, 366, 368, 404, 406], "opt": [117, 119, 125, 130], "defer": [117, 118, 121, 122, 123, 124, 125], "suffic": [117, 120], "catch": [117, 447, 464], "systemat": 117, "safeguard": 117, "inabl": 117, "fact": [117, 131], "categor": [118, 124], "mutual": [118, 122], "constitut": [118, 128, 676, 692, 694, 698, 700], "venn": 118, "diagram": 118, "light": [118, 145], "wherea": [118, 121, 123, 124, 126, 133], "hand": [118, 145], "log_pr": [118, 122, 125], "array_arg": 118, "typic": 118, "whatsoev": [118, 122], "commonli": [118, 676, 692, 694, 698, 700], "outsid": [118, 124, 128, 130, 133, 581, 582, 584, 614, 616], "denomin": [118, 145, 447, 469, 477, 500, 505, 506, 648, 649, 651, 743, 744], "divis": [118, 271, 311, 313, 326, 328, 344, 345, 347, 413, 415, 447, 469, 477, 500, 505, 506, 515, 517, 518, 522, 745, 746, 747], "piec": [118, 120, 121, 128], "deal": [118, 145], "concurr": [118, 122], "weight": [118, 122, 132, 133, 515, 517, 518, 520, 522, 523, 524, 531, 540, 541, 543, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 745, 747, 748], "modif": 118, "decor": [118, 120, 122, 123, 124, 125], "group": [118, 122], "briefli": [118, 131], "cast": [118, 123, 186, 192, 195, 197, 581, 586, 588, 676, 689, 691, 695, 708], "get_all_arrays_on_dev": 118, "nested_map": [118, 630], "index_nest": [118, 630], "implicit_backend": 119, "unless": [119, 124, 125, 145, 271, 398, 400, 447, 494], "__dict__": [119, 128, 130], "ivy_original_dict": [119, 128], "unmodifi": [119, 123], "moment": [119, 145, 515, 517, 518, 522, 745, 746, 747], "fallback": 119, "freedom": [119, 676, 692, 694, 698, 700], "recommend": [119, 271, 387, 389, 390, 392, 413, 415, 676, 683, 685], "achiev": [120, 131, 133], "wrapper": [120, 121, 122, 123, 125, 126, 130], "topic": [120, 130], "tf": [121, 123, 124, 125, 126, 128, 133, 145, 708], "_data": [121, 130], "organiz": [121, 122], "inherit": [121, 122, 130], "bear": [121, 122, 123], "mind": [121, 122], "necessarili": [121, 122], "although": [121, 122], "underpin": [121, 122, 128], "programmat": [121, 122], "backup": [121, 122], "accident": [121, 122], "readabl": [121, 122, 126, 130, 131], "absent": [121, 122], "perk": [121, 122], "auto": [121, 122, 131], "throw": [121, 130], "imposs": 121, "coupl": [121, 122, 130, 132], "anywai": 121, "secondli": [121, 123], "easier": 121, "five": [122, 131], "decis": [122, 128, 130], "displai": [122, 131], "arbitrarili": [122, 131], "__repr__": 122, "control": [122, 123, 125, 130, 131, 144], "__getattr__": 122, "underli": [122, 271, 299, 301, 308, 310, 314, 316, 393, 395], "__setattr__": 122, "__contains__": 122, "__getstate__": 122, "__setstate__": 122, "unpickl": 122, "expand": [122, 447, 470, 581, 592, 594], "children": 122, "shallowest": 122, "deepest": 122, "67": [122, 271, 314, 316, 323], "22": [122, 271, 314, 316, 544, 548, 559, 659, 663, 676, 677, 679, 697], "25": [122, 271, 429, 431, 432, 434, 544, 548, 551, 571, 575, 577, 648, 649, 651, 676, 677, 679, 697], "retain_grad": [122, 515, 519], "dy": [122, 515, 519], "dx": [122, 515, 519], "technic": [122, 125, 126, 145], "autograd": [122, 145], "grad": [122, 131, 132, 133, 708, 745, 749], "redund": 122, "num_head": [122, 531, 542, 729, 740], "mask": [122, 531, 542, 543], "to_q_fn": [122, 531, 542], "to_kv_fn": [122, 531, 542], "to_out_fn": [122, 125, 531, 542], "to_q_v": [122, 531, 542], "to_kv_v": [122, 531, 542], "to_out_v": [122, 531, 542], "measur": [122, 531, 542, 729, 740], "dot": [122, 531, 542, 543, 544, 566, 568, 729, 740], "product": [122, 271, 398, 400, 447, 461, 531, 542, 543, 544, 546, 552, 554, 559, 566, 568, 676, 677, 679, 689, 691, 697, 729, 740], "implicitli": 122, "intuit": [122, 131, 132], "debug": [122, 131], "chronolog": 122, "had": [122, 125], "sequenti": [122, 132], "flow": [122, 144], "implic": 122, "slightli": [122, 128, 132], "eager": [122, 145], "int8": [123, 186, 205], "int16": [123, 186, 195, 197, 205, 676, 689, 691, 695], "uint8": [123, 186, 195, 197, 205], "uint16": [123, 186, 206, 676, 689, 691, 695], "uint32": [123, 186, 206, 676, 689, 691, 695], "uint64": [123, 186, 206, 676, 689, 691, 695], "bfloat16": [123, 186, 205], "float16": [123, 186, 206], "all_dtyp": 123, "all_numeric_dtyp": 123, "all_int_dtyp": 123, "all_float_dtyp": 123, "fall": [123, 127, 708, 741, 742, 745, 749], "valid": [123, 128, 186, 198, 531, 532, 533, 534, 535, 536, 537, 538, 581, 614, 616, 701, 702, 704, 705, 707, 729, 730, 731, 732, 733, 734, 735, 736], "invalid": [123, 544, 568, 701, 702, 704, 705, 707], "thirdli": 123, "native_float32": 123, "importantli": [123, 130, 133, 144], "varieti": [123, 124], "conveni": [123, 124, 126, 129, 131, 132], "arguabl": [123, 124], "compound": 123, "overflow": [123, 271, 281, 676, 695], "arr": [123, 124, 648, 649, 651], "scalar": [123, 128, 133, 145, 167, 175, 447, 494, 511, 514, 544, 569], "settabl": [123, 124], "jnp": [123, 124, 125, 126, 133, 708], "jaxarrai": [123, 124, 125, 126], "mx": [123, 124, 125, 708], "nd": [123, 124, 125, 128, 133, 708], "deleg": 123, "fill_valu": [123, 167, 174, 175, 271, 331, 350, 351, 353], "as_n": [123, 186, 199, 200, 201, 202, 221, 240, 241, 262], "idx": [124, 130, 447, 451], "tpu": [124, 221, 243, 268], "aliv": [124, 221, 255, 259, 261, 447, 475, 493, 495], "amount": [124, 221, 267, 571, 572, 574, 575, 577, 578, 580], "memori": [124, 125, 143, 145, 221, 239, 260, 265, 267, 270, 531, 541, 708], "dual": 124, "thrown": [124, 145, 447, 485], "rare": [124, 145], "program": 125, "strictli": 125, "ration": 125, "speak": 125, "subtli": 125, "ensure_in_backend": [125, 447, 485], "x_nativ": 125, "val_n": 125, "is_ivy_arrai": [125, 130, 447], "is_vari": [125, 515], "assign": [125, 130], "elif": 125, "irrespect": [125, 130, 186, 192], "inclus": [125, 167, 168, 652, 654], "omit": [125, 126, 664, 665, 666, 668], "unspecifi": [125, 271, 410, 412, 413, 415, 544, 549, 581, 614, 616], "predominantli": [125, 144], "math": [125, 133, 708], "presenc": 125, "altern": [125, 131], "_wrap_fn": 125, "maxim": [125, 128], "inner": [125, 130, 544, 549, 552, 554, 626, 627, 628, 629], "third": [125, 145, 544, 564, 664, 665], "addition": [125, 126], "leverag": 125, "equival": [125, 131, 133, 167, 168, 271, 311, 313, 387, 389, 390, 392, 413, 415, 544, 557, 560, 563, 569], "input_arrai": 125, "adress": 126, "revisit": [126, 133], "dedic": [126, 130, 132, 515, 529, 718, 719], "__div__": 126, "dicat": 126, "futher": 126, "absenc": 126, "pep": 126, "484": 126, "annot": 126, "brittl": 126, "intend": [126, 676, 695], "freeli": 126, "inde": [126, 145], "flexibl": 126, "original_typ": 126, "cumbersom": 126, "sound": 127, "higher": [127, 128, 133, 145, 515, 518, 520, 522, 523, 524], "overview": [127, 144], "handler": [127, 129, 133, 708], "fledg": [128, 129], "syntact": [128, 133], "clip_by_valu": [128, 133], "clamp": [128, 133], "behavior": [128, 145, 271, 410, 412, 413, 415, 664, 665, 666, 668], "fit": [128, 581, 601, 603], "construct": [128, 129, 132, 133, 581, 620, 622, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752], "num": [128, 167, 176, 177], "power_seq": 128, "okai": 128, "bound": 128, "resid": [128, 132], "edg": [128, 133, 581, 582, 584, 589, 591, 623, 625, 708], "larger": [128, 133, 186, 204, 581, 582, 584, 607, 609, 676, 692, 694, 698, 700], "ml_framework": [128, 133, 167, 168], "current_framework": [128, 133], "furthermor": 128, "concaten": [128, 131, 221, 250, 447, 470, 581, 586, 588, 708], "framework_handl": 128, "face": 128, "verbos": [128, 708, 755], "cprint": [128, 754], "framework_stack": 128, "_determine_framework_from_arg": 128, "valueerror": [128, 581, 611, 613], "get_framework": 128, "neither": [128, 271, 281, 398, 400], "illustr": [128, 144], "un": [128, 186, 208], "nn": [128, 133, 167, 178, 708], "init_h": [128, 531, 541], "init_c": [128, 531, 541], "kernel": [128, 145, 531, 541], "recurrent_kernel": [128, 531, 541], "bia": [128, 132, 531, 540, 541, 729, 730, 731, 732, 733, 734, 735, 736, 739], "recurrent_bia": [128, 531, 541], "x_shape": 128, "batch_shap": [128, 130, 133, 447, 494, 531, 541, 542, 543, 544, 570, 652, 653, 729, 738], "timestep": [128, 531, 541, 729, 738], "input_channel": [128, 132, 729, 730, 731, 732, 733, 734, 735, 738, 739], "x_flat": 128, "wi": 128, "wi_x": 128, "wii_x": 128, "wif_x": 128, "wig_x": 128, "wio_x": 128, "recurr": [128, 531, 541], "wh": 128, "lstm": [128, 531, 541, 729], "ht": 128, "ct": 128, "hts_list": 128, "unrol": [128, 131, 531, 541], "wii_xt": 128, "wif_xt": 128, "wig_xt": 128, "wio_xt": 128, "zip": 128, "htm1": 128, "ctm1": 128, "wh_htm1": 128, "whi_htm1": 128, "whf_htm1": 128, "whg_htm1": 128, "who_htm1": 128, "ft": 128, "gt": 128, "ot": 128, "offici": 128, "reliabl": 128, "sacrific": 128, "hear": 128, "virtu": 128, "pure_ivi": 128, "reduce_mean": [128, 131, 132, 133, 708], "reduce_sum": [128, 708], "reduce_var": 128, "compile_graph": [128, 133], "pure_torch": 128, "cat": [128, 133], "backbon": [128, 131], "_layer": 128, "super": [128, 131, 132, 133], "clean": [128, 129, 131], "random_unifrom": 128, "unclean": 128, "wx": 128, "temp": 128, "torchscript": 128, "fn": [128, 130, 146, 147, 148, 149, 150, 151, 152, 153, 154, 186, 205, 206, 221, 230, 231, 447, 451, 512, 630, 631, 636, 637, 638, 640, 641, 642, 711, 713], "example_input": [128, 164, 165], "static_argnum": [128, 164, 165], "static_argnam": [128, 164, 165], "jit": [128, 145], "frontend": 129, "primit": [129, 145], "describ": [129, 133, 676, 677, 679, 689, 691, 692, 694, 695, 697], "hierarch": [129, 131, 132], "straight": [130, 708], "arraywithlinalg": 130, "arraywithlog": 130, "arraywithmath": 130, "arraywithmeta": 130, "arraywithreduct": 130, "is_native_arrai": [130, 447], "_shape": 130, "_size": 130, "functool": 130, "mul": 130, "len": [130, 133, 167, 178], "_dtype": 130, "_devic": 130, "_dev_str": 130, "_pre_repr": 130, "_post_repr": 130, "ndim": [130, 544, 561, 564], "mt": 130, "answer": [130, 145], "consol": 130, "typeerror": 130, "immut": 130, "behav": 130, "claim": 130, "truli": 130, "_native_wrapp": 130, "attributeerror": 130, "genuin": 130, "some_method": 130, "similarli": [130, 167, 178], "rewritten": 130, "__pow__": 130, "strang": 130, "power": [130, 131, 132, 271, 311, 313, 336, 410, 412, 447, 476, 499, 506, 544, 556, 720], "enforc": 130, "notic": 130, "appear": [130, 581, 592, 594], "invers": [130, 144, 271, 275, 277, 278, 280, 284, 286, 287, 289, 290, 292, 293, 295, 296, 298, 322, 325, 440, 443, 544, 551, 560], "_wrap_method": 130, "func_wrapp": [130, 146, 147, 148, 149, 150, 151, 152, 153, 154], "__name__": 130, "non_wrapped_method": 130, "_method_wrap": 130, "native_arg": 130, "native_kwarg": 130, "inner_fn": 130, "whist": 130, "unwrap": 130, "transit": 130, "needlessli": 130, "randn": 130, "_unwrap_method": 130, "method_wrap": 130, "compartment": 130, "public": [130, 447, 459], "newshap": [130, 581, 604, 606], "new_shap": 130, "tidi": 130, "shorter": 130, "crystal": 130, "41": [130, 271, 314, 316, 429, 431, 544, 545, 676, 695], "enough": [130, 131, 132], "ton": 131, "ado": [131, 132], "incred": [131, 145], "hash": 131, "soup": 131, "walk": [131, 132], "dct": 131, "cnt": 131, "combo": [131, 708, 714], "hold": [131, 447, 497, 498], "1000": [131, 271, 429, 431], "uda": 131, "3333": 131, "6667": 131, "178": 131, "new_weight": 131, "0600": 131, "3100": 131, "2400": 131, "6900": 131, "delimit": 131, "autocomplet": 131, "midwai": 131, "agent": 131, "total_spe": 131, "total_height": 131, "total_width": 131, "ag": 131, "tot": 131, "total_": 131, "total_h": 131, "batch_siz": [131, 531, 532, 533, 534, 535, 536, 537, 538, 652, 653], "dir": 131, "adam": [131, 132, 133, 515, 517, 518, 522, 708, 745, 747], "cnt0": 131, "cnt1": 131, "diff_0": 131, "diff_1": 131, "config0": 131, "config1": 131, "Not": [131, 132, 145, 166], "decod": 131, "l0": 131, "l1": [131, 544, 569], "depth": [131, 132, 133, 144, 221, 245, 249, 253, 447, 479, 494, 630, 642, 741, 742], "clearer": 131, "truncat": 131, "decoder__l0": 131, "decoder__l1": 131, "encoder__l0": 131, "encoder__l1": 131, "height": 131, "l0__b": 131, "l0__w": 131, "l1__b": 131, "l1__w": 131, "printabl": 131, "obviou": 131, "foresight": 131, "untidili": 131, "update_ag": 131, "normalize_img": 131, "img": 131, "img_max": 131, "reduce_max": [131, 708], "img_min": 131, "reduce_min": [131, 708], "img_rang": 131, "agent_posit": 131, "agent_veloc": 131, "agent_cam_front_rgb": 131, "agent_cam_front_depth": 131, "agent_cam_rear_rgb": 131, "agent_cam_rear_depth": 131, "agent_cam_lidar": 131, "normal": [131, 581, 614, 616, 648, 649, 651, 652, 655, 743, 744], "cleaner": 131, "camera": 131, "front_rgb": 131, "front_depth": 131, "rear_rgb": 131, "rear_depth": 131, "lidar": 131, "rgb": 131, "rear": 131, "veloc": 131, "cam": 131, "cam_max": 131, "cam_min": 131, "cam_rang": 131, "Of": 131, "ideal": 131, "perman": 131, "afterward": 131, "thread": 131, "incorpor": 131, "pretti": 131, "straightforward": 131, "dataload": [131, 143, 708], "_cnt": 131, "img_": 131, "_dataset_s": 131, "_batch_siz": 131, "_count": [131, 132], "__next__": 131, "filenam": 131, "img_fnam": 131, "fname": 131, "loaded_img": 131, "cv2": 131, "imread": 131, "loader": [131, 145], "32": [131, 156, 158, 271, 314, 316, 531, 534, 537, 544, 559, 659, 663, 676, 677, 679, 697], "batch_slic": 131, "model": [131, 132, 708], "mymodel": [131, 708], "linear0": [131, 132, 708], "linear1": [131, 132, 708], "x_in": [131, 132, 133, 708], "001": [131, 132, 648, 649, 651], "loss_fn": [131, 132, 133, 708], "0145": 131, "grad_fn": 131, "addbackward0": 131, "_create_vari": 132, "output_channel": [132, 729, 730, 731, 732, 733, 734, 735, 738, 739], "with_bia": [132, 729, 739], "_input_channel": 132, "_output_channel": 132, "_w_shape": 132, "_b_shape": 132, "_with_bia": 132, "8979": 132, "3198": 132, "0196": 132, "3126": 132, "3717": 132, "9687": 132, "6958": 132, "5122": 132, "3902": 132, "8800": 132, "5613": 132, "1982": 132, "nightmar": 132, "overcom": 132, "fc": 132, "9563": 132, "impact": 132, "v0": 132, "v1": 132, "6440": 132, "key0": 132, "1823": 132, "8075": 132, "linear3": 132, "v2": 132, "2346": 132, "counter": 132, "hidden": [132, 531, 541, 729, 738], "fed": [132, 221, 265], "1300": 132, "decoupl": 132, "scheme": 132, "weight_initi": [132, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739], "glorotuniform": [132, 720, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739], "bias_initi": [132, 729, 730, 731, 732, 733, 734, 735, 736, 739], "_w_init": 132, "_b_init": 132, "create_vari": [132, 720], "var_shap": [132, 720], "fan_out": [132, 720], "fan_in": [132, 720], "fan_mod": [132, 720], "fan_sum": 132, "slight": 132, "misnom": 132, "saw": 132, "vanilla": [132, 626, 628], "descent": [132, 515, 520, 745, 750], "lar": [132, 515, 522, 523, 745], "lamb": [132, 515, 522, 745], "compile_on_next_step": [132, 741, 742, 745, 746, 747, 748, 749, 750], "_beta1": 132, "_beta2": 132, "_epsilon": 132, "_mw": 132, "_vw": 132, "_first_pass": 132, "_should_compil": 132, "_step": [132, 745, 749], "new_v": 132, "_lr": 132, "isinst": [132, 133, 447, 509], "_inplac": 132, "_stop_gradi": 132, "set_stat": [132, 745, 746, 747, 748, 749, 750], "mw": [132, 515, 517, 518], "vw": [132, 515, 517, 518], "pre": [133, 145, 221], "captur": 133, "sparse_funct": 133, "num_class": [133, 652, 653], "num_dim": 133, "new_axi": 133, "_linear": 133, "to_backend": 133, "jax_graph": 133, "learnabl": [133, 648, 649, 651, 743, 744], "to_ivy_modul": [133, 718], "thinli": 133, "whilst": 133, "to_haiku_modul": 133, "hk": 133, "loss_fn_t": 133, "transform": [133, 144, 531, 539, 540], "without_apply_rng": 133, "rng": 133, "prngkei": 133, "init": 133, "update_rul": 133, "01": [133, 271, 416, 418], "tree_multimap": 133, "mechan": [143, 145, 708], "vision": [143, 708], "robot": [143, 708], "focus": 144, "field": [144, 544, 549, 561, 564, 664, 665, 666], "perfect": 144, "3d": [144, 729, 734, 735], "differenti": 144, "demo": [144, 708], "orient": 144, "pose": 144, "euler": [144, 166], "quaternion": 144, "rotat": 144, "matric": [144, 167, 178, 182, 183, 531, 540, 544, 545, 547, 548, 549, 550, 551, 556, 557, 558, 560, 561, 563, 564, 565, 567], "angl": [144, 271, 293, 295, 323, 426, 428], "ivy_mech": 144, "target_facing_rotation_matrix": 144, "polar_to_cartesian_coord": 144, "ordin": [144, 544, 563], "warp": 144, "optic": 144, "voxel": 144, "ivy_vis": 144, "coords_to_voxel_grid": 144, "render_pixel_coord": 144, "neural": [144, 531, 708, 715, 729], "radianc": 144, "nerf": 144, "trajectori": 144, "motion": 144, "plan": [144, 708], "mobil": 144, "ivy_robot": 144, "sample_spline_path": 144, "rigidmobil": 144, "sample_bodi": 144, "drone": 144, "sample_link": 144, "openai": 144, "swimmer": 144, "cumul": [144, 447, 461, 462], "reward": 144, "supervis": 144, "reinforc": 144, "door": [144, 145], "intersect": 144, "cartpol": 144, "mountain_car": 144, "pendulum": 144, "reacher": 144, "polici": 144, "condit": [144, 164, 165, 630, 640, 641, 659, 663], "learnt": 144, "ture": 144, "ntm": 144, "egospher": 144, "spatial": 144, "esm": 144, "ivy_memori": 144, "egocentr": 144, "room": 144, "inspir": 144, "doubt": 145, "grate": 145, "put": 145, "probe": 145, "undergo": 145, "remark": 145, "surpris": 145, "backward": [145, 271, 413, 415, 544, 568, 701, 702, 704, 705, 707], "lock": 145, "contunu": 145, "minor": 145, "xla": 145, "buffer": 145, "kind": [145, 186, 204, 207, 271, 410, 412, 676, 689, 691, 695], "gold": 145, "dex": 145, "phase": 145, "lax": 145, "scan": 145, "tricki": 145, "predictor": 145, "tight": 145, "driver": 145, "schedul": 145, "algorithm": [145, 531, 532, 533, 534, 535, 536, 537, 538, 729, 730, 731, 732, 733, 734, 735, 736], "dispatch": 145, "Will": 145, "ast": 145, "dynamic": 145, "cond": 145, "jacobian": 145, "checkpoint": 145, "autodiff": 145, "shine": 145, "merci": 145, "superset": 145, "cluster": 145, "compet": 145, "paradigm": 145, "parallelis": [145, 221, 230, 231], "spmd": 145, "mixtur": 145, "expert": 145, "sophist": 145, "depart": 145, "routin": 145, "hundr": 145, "thousand": 145, "deepli": [145, 630, 632], "broadli": 145, "heavili": 145, "supplementari": 145, "Is": 145, "reusabl": 145, "fanci": 145, "fusion": 145, "lose": 145, "vmap": 145, "pmap": 145, "overhead": 145, "ineffici": 145, "eventu": 145, "supplement": 145, "backdoor": 145, "callback": 145, "record": 145, "metric": 145, "somewhat": 145, "outsourc": 145, "inputs_to_ivy_arrai": 146, "gaussian": [156, 157], "leaki": [156, 157, 158], "alpha": [156, 158], "rectifi": [156, 158, 159], "slope": [156, 158], "39": [156, 158, 271, 336, 544, 559, 676, 677, 679, 697], "85": [156, 158, 271, 314, 316], "48": [156, 158, 271, 429, 431, 544, 559, 676, 677, 679, 697], "88": [156, 158, 271, 314, 316, 544, 559, 676, 677, 679, 697], "269": [156, 160], "731": [156, 160], "881": [156, 160], "214": [156, 160], "978": [156, 160], "891": [156, 160], "422": [156, 161], "155": [156, 161], "0768": [156, 161], "231": [156, 161], "693": [156, 161, 571, 578, 580], "49": [156, 161, 271, 429, 431, 676, 677, 679, 697], "147": [156, 161], "363": [156, 161], "3461": [156, 162], "6491": [156, 162], "535": [156, 162], "hyperbol": [156, 163, 271, 277, 278, 280, 287, 289, 292, 296, 298, 322, 323, 325, 426, 428, 440, 441, 443], "55": [156, 163, 531, 537, 544, 559, 676, 677, 679, 697], "501": [156, 163], "762": [156, 163], "964": [156, 163], "faster": [164, 165], "invoc": [164, 165], "718281828459045": 166, "newaxi": 166, "alia": 166, "pi": 166, "141592653589793": 166, "mathemat": [166, 271, 281, 293, 295, 339, 341, 398, 400, 544, 569], "half": [167, 168, 652, 654, 656], "chosen": [167, 168, 271, 293, 295, 659, 663], "distanc": [167, 168], "adjac": [167, 168], "interpret": [167, 169, 179], "uniniti": [167, 170, 171], "n_row": [167, 172], "n_col": [167, 172], "elsewher": [167, 172, 659, 663], "row": [167, 172, 544, 563, 564, 652, 653, 659, 662], "column": [167, 172, 544, 549, 561, 563, 564], "__dlpack__": [167, 173, 221, 266], "interchang": [167, 173, 581, 617, 619], "endpoint": [167, 176], "xy": [167, 178], "coordin": [167, 178, 271, 293, 295], "cartesian": [167, 178], "ij": [167, 178, 676, 677, 679, 697], "rank": [167, 178, 447, 513, 544, 546, 557, 561, 563, 567, 568, 569, 581, 589, 591, 592, 594, 614, 616, 623, 625, 659, 662, 701, 702, 704, 705, 707], "ni": [167, 178], "xi": [167, 178], "n1": [167, 178], "n2": [167, 178], "n3": [167, 178], "accordingli": [167, 178, 271, 339, 341, 544, 569, 659, 661, 664, 665, 666, 668, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "xv": [167, 178], "yv": [167, 178], "triangular": [167, 182, 183, 544, 545, 561], "innermost": [167, 182, 183, 544, 545, 547, 548, 549, 550, 551, 557, 558, 560, 561, 563, 564, 565, 567], "mxn": [167, 182, 183, 544, 548, 557, 558, 560, 561, 565, 567], "defaultdtyp": [186, 187], "defaultfloatdtyp": [186, 188], "float_dtyp": [186, 200, 214], "defaultintdtyp": [186, 189], "dtype_in": [186, 190, 191, 203, 208, 209, 210, 220], "incompat": [186, 194], "occur": [186, 195, 197, 659, 660, 661, 664, 665, 666, 668], "data_type_funct": [186, 195, 197], "closest": [186, 198, 271, 317, 319, 328, 342, 344, 345, 347, 416, 418, 444, 446], "floatdtyp": [186, 200], "int_dtyp": [186, 201, 215], "intdtyp": [186, 201], "followng": [186, 204], "occupi": [186, 204, 207, 447, 497, 498], "ep": [186, 204, 544, 557, 560], "smallest_norm": [186, 204], "precis": [186, 204, 271, 398, 400, 429, 431], "encapsul": [186, 207], "type1": [186, 211], "type2": [186, 211], "arrays_and_dtyp": [186, 212], "ret1": [186, 216], "ret2": [186, 216], "noinspect": [187, 188, 189, 222, 516], "pyshadowingnam": [187, 188, 189, 222, 516], "array_method": [195, 196, 272, 273, 276, 277, 278, 279, 282, 283, 284, 285, 287, 288, 291, 292, 293, 294, 296, 297, 299, 300, 302, 303, 305, 306, 308, 309, 311, 312, 314, 315, 317, 318, 321, 322, 324, 325, 327, 328, 330, 331, 332, 333, 337, 338, 339, 340, 343, 344, 345, 346, 349, 350, 351, 352, 354, 355, 357, 358, 360, 361, 363, 364, 366, 367, 369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 385, 387, 388, 390, 391, 393, 394, 398, 399, 401, 402, 404, 405, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 422, 423, 426, 427, 429, 430, 432, 433, 435, 436, 439, 440, 442, 443, 444, 445, 448, 449, 472, 473, 552, 553, 572, 573, 575, 576, 578, 579, 582, 583, 586, 587, 589, 590, 592, 593, 595, 596, 598, 599, 601, 602, 604, 605, 607, 608, 611, 612, 614, 615, 617, 618, 620, 621, 623, 624, 649, 650, 670, 671, 673, 674, 677, 678, 680, 681, 683, 684, 686, 687, 689, 690, 692, 693, 696, 697, 698, 699, 702, 703, 705, 706], "defaultdevic": [221, 222], "__enter__": 221, "_dev": 221, "initialis": 221, "devcloneditem": [221, 243], "multidevitem": [221, 223, 226], "devclonedit": 221, "multidevit": [221, 224, 227, 230, 231, 235], "devclonednest": 221, "multidevnest": [221, 225, 228], "devdistitem": 221, "devdistit": 221, "devdistnest": 221, "devmanag": [221, 229], "dev_mapp": 221, "da_dim_s": 221, "safety_factor": 221, "min_dev_dim_s": 221, "max_dev_dim_step_ratio": 221, "min_unit_dev_tune_step": 221, "min_sf_tune_step": 221, "starting_split_factor": 221, "max_split_factor_step_s": 221, "tune_dev_alloc": 221, "tune_dev_split": 221, "mapper": [221, 230, 231], "receivess": 221, "ratio": [221, 515, 522, 745, 747], "safe": [221, 230], "oom": 221, "tune": 221, "da_tune_step": 221, "ds_tune_step": 221, "to_clon": 221, "to_distribut": 221, "multidevic": [221, 230], "parallel": [221, 230, 231], "mutlidevic": [221, 230], "repeated_config_check": 221, "tune_step": 221, "devmapp": [221, 231], "ret_fn": [221, 230, 231], "queue_class": [221, 230, 231], "worker_class": [221, 230, 231], "worker": [221, 230, 231], "used_dev": [221, 230], "sf": [221, 230], "devmappermultiproc": 221, "multidev": [221, 232, 233, 234, 253], "profil": 221, "save_dir": [221, 236], "deviceic": [221, 242], "spread": [221, 253], "139740789224448": [221, 255], "physic": [221, 257], "x3": [221, 259], "x4": [221, 259], "process_specif": [221, 260, 270], "percentag": [221, 260], "ram": [221, 260, 267, 270], "alon": [221, 260, 270], "attr_onli": [221, 261], "chunk": [221, 263, 264, 265], "max_chunk_s": [221, 265], "chunk_siz": [221, 265], "input_ax": [221, 265], "output_ax": [221, 265], "feed": [221, 265], "fist": [221, 265], "stream": [221, 266], "caveat": [221, 266], "portabl": [221, 266, 708], "gb": [221, 267, 270], "reset": [221, 269], "magnitud": [271, 272, 274, 281, 398, 400, 544, 564, 565], "princip": [271, 275, 284, 286, 290], "cosin": [271, 275, 277, 278, 280, 320, 322, 323, 325], "x1_i": [271, 281, 283, 293, 295, 299, 301, 305, 307, 308, 310, 311, 313, 314, 316, 326, 328, 329, 331, 338, 344, 345, 347, 348, 350, 351, 353, 363, 365, 366, 368, 381, 383, 384, 386, 390, 392, 393, 395, 398, 400, 404, 406, 410, 412, 413, 415, 435, 437], "x2_i": [271, 281, 283, 293, 295, 299, 301, 305, 307, 308, 310, 311, 313, 314, 316, 326, 328, 329, 331, 338, 344, 345, 347, 348, 350, 351, 353, 363, 365, 366, 368, 381, 383, 384, 386, 390, 392, 393, 395, 398, 400, 404, 406, 410, 412, 413, 415, 435, 437], "finit": [271, 281, 293, 295, 354, 356, 398, 400, 410, 412, 413, 415], "nor": [271, 281, 398, 400], "nearest": [271, 281, 398, 400, 416, 418], "2019": [271, 281, 339, 341, 398, 400], "commut": [271, 281], "sine": [271, 284, 286, 287, 289, 422, 425, 426, 428], "57": [271, 284, 286, 314, 316, 323], "524": [271, 284, 286], "644": [271, 284, 286], "201": [271, 284, 286, 416, 418], "305": [271, 284, 286], "412": [271, 284, 286], "quotient": [271, 293, 295], "notat": [271, 293, 295, 676, 677, 679, 697], "denot": [271, 293, 295], "pair": [271, 293, 295, 531, 543, 544, 546], "quadrant": [271, 293, 295], "3\u03c0": [271, 293, 295], "549": [271, 292, 296, 298, 440, 443], "bitwis": [271, 299, 301, 308, 310, 314, 316, 393, 395], "AND": [271, 299, 301, 384, 386, 701, 702, 704], "binari": [271, 299, 301, 308, 310, 314, 316, 393, 395, 571, 572, 574], "invert": [271, 302, 304], "arithmet": [271, 311, 313, 676, 683, 685], "propag": [271, 311, 313, 676, 680, 682, 683, 685, 686, 688, 692, 694, 695, 698, 700], "thu": [271, 311, 313, 410, 412, 413, 415, 544, 549], "lh": [271, 311, 313], "rh": [271, 311, 313], "xor": [271, 314, 316, 393, 395], "78": [271, 314, 316, 544, 559, 676, 677, 679, 697], "91": [271, 314, 316, 544, 559, 676, 677, 679, 697], "23": [271, 314, 316, 531, 537, 544, 548, 659, 663], "66": [271, 314, 316, 544, 559, 676, 677, 679, 697], "77": [271, 314, 316, 544, 559, 676, 677, 679, 697], "79": [271, 314, 316], "89": [271, 314, 316, 544, 566, 676, 695], "98": [271, 314, 316, 544, 559, 659, 663, 676, 677, 679, 697], "26": [271, 314, 316, 531, 538, 544, 548, 559, 566, 676, 677, 679, 697], "21": [271, 314, 316, 447, 461, 544, 548, 559, 571, 578, 580, 676, 677, 679, 697], "34": [271, 314, 316, 429, 431], "24": [271, 314, 316, 429, 431, 447, 461, 544, 548, 559, 676, 677, 679, 697], "51": [271, 314, 316], "27": [271, 314, 316, 323, 429, 431, 531, 543, 544, 559, 676, 677, 679, 697], "74": [271, 314, 316], "59": [271, 314, 316], "416": [271, 320], "76": [271, 323, 544, 566, 676, 677, 679, 697], "122": [271, 323], "368": [271, 323], "670": [271, 323], "202": [271, 323, 416, 418], "548": [271, 323], "1490": [271, 323], "dividend": [271, 326, 413, 415], "divisor": [271, 326, 413, 415, 515, 517, 518, 522, 676, 692, 694, 698, 700, 745, 746, 747], "gauss": [271, 332, 335], "exponenti": [271, 283, 332, 335, 336, 338, 381, 383, 410, 412], "logarithm": [271, 283, 336, 338, 369, 371, 372, 374, 375, 377, 378, 380, 381, 383, 544, 562], "72": [271, 336, 544, 559, 676, 677, 679, 697], "accur": [271, 339, 341], "fdlibm": [271, 339, 341], "compliant": [271, 339, 341, 387, 389, 390, 392, 676, 680, 682, 683, 685, 686, 688], "greatest": [271, 328, 342, 344, 345, 347], "out_i": [271, 354, 356, 357, 359, 360, 362], "threshold": [271, 396, 397], "exce": [271, 397], "y_i": [271, 401, 403], "expon": [271, 410, 412, 447, 506], "versu": [271, 410, 412], "odd": [271, 410, 412], "modulu": [271, 413, 415], "primarili": [271, 413, 415], "5654": [271, 416, 418], "034": [271, 416, 418], "433": [271, 416, 418], "343": [271, 416, 418], "44": [271, 416, 418, 429, 431, 432, 434, 544, 559, 659, 663, 676, 677, 679, 697], "30": [271, 416, 418, 544, 559, 676, 677, 679, 697, 720, 726], "81": [271, 416, 418, 432, 434, 676, 677, 679, 697], "527": [271, 416, 418], "301": [271, 416, 418], "indistinguish": [271, 429, 431], "infinit": [271, 429, 431], "83": [271, 429, 431], "32455532": [271, 429, 431], "89897949": [271, 429, 431], "50": [271, 429, 431, 544, 559, 659, 662, 676, 677, 679, 697], "31": [271, 429, 431], "169": [271, 429, 431], "63": [271, 429, 431, 544, 545, 559, 676, 677, 679, 697], "47": [271, 429, 431], "73": [271, 429, 431, 544, 545, 648, 649, 651], "93": [271, 429, 431], "35": [271, 429, 431, 531, 543, 544, 546, 659, 663, 676, 677, 679, 697], "09": [271, 432, 434, 531, 543], "61": [271, 432, 434, 571, 572, 574], "546": [271, 438], "842": [271, 438], "916": [271, 438, 571, 572, 574], "96": [271, 438, 544, 559, 676, 677, 679, 697], "996": [271, 438], "328": [271, 438], "decim": [271, 444, 446], "container_method": [332, 334, 422, 424, 582, 585], "inspect": [447, 451, 712, 713], "downscal": [447, 457, 458], "60": [447, 461, 544, 559, 676, 677, 679, 697], "default_v": [447, 464], "catch_except": [447, 464], "rev": [447, 464], "with_cal": [447, 464], "arrang": [447, 465], "123": [447, 468], "mod": [447, 469], "max_freq": [447, 470], "num_band": [447, 470], "pad": [447, 470, 531, 532, 533, 534, 535, 536, 537, 538, 581, 589, 591, 623, 625, 729, 730, 731, 732, 733, 734, 735, 736], "fourier": [447, 470], "band": [447, 470], "linearli": [447, 470, 544, 563], "oppos": [447, 470], "geometr": [447, 470], "seen_set": [447, 479], "local_set": [447, 479], "decrement": [447, 483], "is_arrai": 447, "allow_dupl": [447, 491], "forkserv": [447, 492], "spawn": [447, 492], "hot": [447, 494], "scatter": [447, 494, 497, 498], "overrid": [447, 494], "tmp_dr": [447, 502], "temporari": [447, 502], "min_denomin": [447, 505], "stabil": [447, 505, 506, 669, 670, 672, 673, 675], "_min_denomin": [447, 505], "min_bas": [447, 506], "_min_bas": [447, 506, 648, 649, 651, 743, 744], "100000023841858": [447, 509], "200000047683716": [447, 509], "299999952316284": [447, 509], "400000095367432": [447, 509], "599999904632568": [447, 509], "101": [447, 510], "unpack": [447, 513], "gradienttrack": [515, 516], "delta": [515, 517], "cost": [515, 517, 518, 520, 522, 523, 524, 626, 627, 628, 629], "ws": [515, 517, 518, 520, 522, 523, 524], "en": [515, 517, 518], "wikipedia": [515, 517, 518], "wiki": [515, 517, 518], "stochastic_gradient_desc": [515, 517, 518], "dc": [515, 517, 518, 520, 522, 523, 524], "dw": [515, 517, 518, 520, 522, 523, 524], "averag": [515, 517, 518, 522, 626, 627, 628], "forget": [515, 517, 518, 522, 745, 746, 747], "rate": [515, 518, 520, 522, 523, 524, 626, 627, 628, 629, 729, 740, 745, 746, 747, 748, 749, 750], "ws_new": [515, 518, 520, 522, 523, 524], "retain": [515, 519], "trust": [515, 522, 745, 747], "decai": [515, 522, 523, 745, 747, 748], "layerwis": [515, 523, 745, 748], "stride": [531, 532, 533, 534, 535, 536, 537, 538, 729, 730, 731, 732, 733, 734, 735, 736], "data_format": [531, 532, 533, 534, 535, 536, 537, 538, 729, 730, 731, 732, 733, 734, 735, 736], "nwc": [531, 532, 533, 729, 730, 731], "dilat": [531, 532, 533, 534, 535, 536, 537, 538, 729, 730, 731, 732, 733, 734, 735, 736], "convolut": [531, 532, 533, 534, 535, 536, 537, 538, 729, 730, 731, 732, 733, 734, 735, 736], "d_in": [531, 532, 533, 534, 535, 536, 537], "fw": [531, 532, 533, 534, 535, 536, 537, 538], "d_out": [531, 532, 533, 534, 535, 536, 537], "slide": [531, 532, 533, 534, 535, 536, 537, 538, 729, 730, 731, 732, 733, 734, 735, 736], "ncw": [531, 532, 533, 729, 730, 731], "wio": [531, 532], "output_shap": [531, 533, 535, 537, 729, 731, 733, 735], "nhwc": [531, 534, 535, 538, 729, 732, 733, 736], "fh": [531, 534, 535, 536, 537, 538], "nchw": [531, 534, 535, 538, 729, 732, 733, 736], "hwio": [531, 534], "unequ": [531, 534], "28": [531, 534, 537, 538, 544, 559, 676, 677, 679, 697], "unsqueez": [531, 534, 538], "ndhwc": [531, 536, 537, 729, 734, 735], "volum": [531, 536], "fd": [531, 536, 537], "ncdhw": [531, 536, 537, 729, 734, 735], "dhwio": [531, 536], "256": [531, 537], "258": [531, 537], "128": [531, 537, 544, 559], "depthwis": [531, 538, 729, 736], "333": [531, 538], "inp": [531, 538], "prob": [531, 539, 652, 653, 729, 737], "randomli": [531, 539, 729, 737], "bernoulli": [531, 539], "out_featur": [531, 539, 540], "incom": [531, 540], "outer_batch_shap": [531, 540], "inner_batch_shap": [531, 540], "in_featur": [531, 540], "cell": [531, 541, 729, 738], "num_queri": [531, 542, 543], "x_feat_dim": [531, 542], "num_kei": [531, 542, 543], "cont_feat_dim": [531, 542], "numhead": [531, 542], "feat_dim": [531, 542, 543], "out_feat_dim": [531, 542], "score": [531, 543], "04": [531, 543], "03": [531, 543, 648, 649, 651], "08": [531, 543], "decomposit": [544, 545, 561, 564], "symmetr": [544, 545, 549, 550, 570], "u": [544, 545, 564], "577": [544, 545], "707": [544, 545], "vif": [544, 546], "92": [544, 547], "293": [544, 547], "46997": [544, 547], "axis2": [544, 548], "eigendecomposit": [544, 549], "qlq\u1d40": [544, 549], "orthogon": [544, 549], "eig": [544, 549], "namedtupl": [544, 549, 561, 564, 664, 665, 666], "eigenvalu": [544, 549, 550], "eigenvector": [544, 549], "75": [544, 551, 559], "prepend": [544, 552, 554], "fro": [544, 555], "rtol": [544, 557, 560], "singular": [544, 557, 560, 564, 565], "toler": [544, 557, 560], "largest_singular_valu": [544, 557, 560], "array_lik": [544, 559], "33": [544, 559, 648, 649, 651, 676, 677, 679, 697], "36": [544, 559, 676, 677, 679, 697], "45": [544, 559, 581, 610, 648, 649, 651, 676, 677, 679, 697], "65": [544, 559, 676, 677, 679, 697], "84": [544, 559, 676, 677, 679, 697], "105": [544, 559, 571, 572, 574], "112": [544, 559, 676, 677, 679, 697], "104": [544, 559, 676, 677, 679, 697], "120": [544, 559], "moor": [544, 560], "penros": [544, 560], "pseudo": [544, 560], "orthonorm": [544, 561, 564], "2d": [544, 562, 729, 732, 733, 736], "logdet": [544, 562], "coeffici": [544, 563], "full_matric": [544, 564], "usvh": [544, 564], "vh": [544, 564], "hermitian": [544, 564], "et": [544, 564], "cetera": [544, 564], "adjoint": [544, 564], "reconstruct": [544, 564, 664, 665, 667], "reconstructed_x": [544, 564], "contract": [544, 566, 676, 677, 679, 697], "doubl": [544, 566], "singleton": [544, 569, 581, 611, 613, 659, 661, 676, 680, 682, 683, 685, 686, 688, 689, 691, 692, 694, 695, 698, 700, 701, 702, 704, 705, 707], "liter": [544, 569], "manhattan": [544, 569], "l2": [544, 569], "euclidean": [544, 569], "mathbf": [544, 570], "mathbb": [544, 570], "skew": [544, 570], "entropi": [571, 572, 574, 575, 577, 578, 580], "predict": [571, 572, 574, 575, 577, 578, 580], "smooth": [571, 572, 574, 575, 577, 578, 580], "223": [571, 572, 574], "357": [571, 572, 574, 578, 580], "511": [571, 572, 574], "discret": [571, 575, 577], "3862944": [571, 575, 577], "35667497": [571, 575, 577], "spars": [571, 578, 580], "logit": [571, 578, 580], "793291": [571, 578, 580], "512926": [571, 578, 580], "before_1": [581, 589, 591, 623, 625], "after_1": [581, 589, 591, 623, 625], "before_n": [581, 589, 591, 623, 625], "after_n": [581, 589, 591, 623, 625], "insert": [581, 592, 594, 630, 635, 659, 660], "manipulation_funct": [581, 592, 594], "reorder": [581, 595, 597], "permut": [581, 598, 600, 617, 619], "repetit": [581, 601, 603, 620, 622], "restor": [581, 607, 609], "classivi": [581, 610], "famili": [581, 614, 616], "intxx": [581, 614, 616], "floatxx": [581, 614, 616], "fomaml_step": 626, "inner_cost_fn": [626, 627, 628], "outer_cost_fn": [626, 627, 628], "inner_grad_step": [626, 627, 628, 629], "inner_learning_r": [626, 627, 628, 629], "inner_optimization_step": [626, 627, 628, 629], "inner_batch_fn": [626, 627, 628], "outer_batch_fn": [626, 627, 628], "average_across_step": [626, 627, 628], "inner_v": [626, 627, 628], "keep_inner_v": [626, 627, 628], "outer_v": [626, 627, 628], "keep_outer_v": [626, 627, 628], "return_inner_v": [626, 627, 628, 629], "num_task": [626, 627, 628, 629], "maml": [626, 627, 628], "recev": [626, 627, 628], "0x7f27a77ce4c0": [626, 627, 628, 629], "maml_step": 626, "rece": [626, 628], "reptile_step": 626, "cost_fn": [626, 629], "reptil": [626, 629], "receivng": [626, 629], "all_nested_indic": 630, "include_nest": [630, 631], "_index": [630, 631, 641], "_base": [630, 631, 640, 641], "copy_nest": 630, "to_mut": [630, 632, 642], "mutabl": [630, 632, 642], "insert_into_nest_at_index": 630, "insert_into_nest_at_indic": 630, "map_nest_at_index": 630, "map_nest_at_indic": 630, "multi_index_nest": 630, "nested_ani": 630, "check_nest": [630, 640, 641], "conditon": [630, 640, 641], "nested_indices_wher": 630, "stop_after_n_found": [630, 641], "_depth": [630, 642], "_tuple_check_fn": [630, 642], "_list_check_fn": [630, 642], "_dict_check_fn": [630, 642], "nested_multi_map": 630, "nest0": [630, 643], "ivy_arrai": [630, 643], "funciton": [630, 643], "prune_nest_at_index": 630, "prune_nest_at_indic": 630, "set_nest_at_index": 630, "set_nest_at_indic": 630, "mini": [648, 649, 651, 743, 744], "gamma": [648, 649, 651], "beta": [648, 649, 651], "0976": [648, 649, 651], "3452": [648, 649, 651], "2740": [648, 649, 651], "1047": [648, 649, 651], "5886": [648, 649, 651], "2732": [648, 649, 651], "7696": [648, 649, 651], "7024": [648, 649, 651], "2518": [648, 649, 651], "58": [648, 649, 651, 664, 665], "283": [648, 649, 651], "585": [648, 649, 651], "909": [648, 649, 651], "628": [648, 649, 651], "997": [648, 649, 651], "225": [648, 649, 651], "425": [648, 649, 651], "norm_idx": [648, 649, 651], "228": [648, 649, 651], "0285": [648, 649, 651], "199": [648, 649, 651], "204": [648, 649, 651], "population_s": [652, 653], "num_sampl": [652, 653], "draw": [652, 653, 655, 656], "unnorm": [652, 653], "drawn": [652, 653, 654, 655, 656], "home": [652, 653, 655, 656], "uniformli": [652, 654, 656], "highest": [652, 654], "parameter": [652, 655, 656], "6444774682897879": [652, 655], "811": [652, 655], "508": [652, 655], "564": [652, 655], "7268672": [652, 655], "968": [652, 655], "175": [652, 655, 664, 665], "064": [652, 655], "40935726": [652, 655], "556": [652, 655], "26431865": [652, 656], "475": [652, 656], "878": [652, 656], "861": [652, 656], "89150229": [652, 656], "89629126": [652, 656], "94198485": [652, 656], "91405606": [652, 656], "72848724": [652, 656], "7550739": [652, 656], "624": [652, 656], "00109": [652, 656], "occurr": [659, 660, 661, 664, 665], "yield": [659, 663], "43": [659, 663], "x_j": [664, 665, 666, 668], "impli": [664, 665, 666, 668], "inverse_indic": [664, 665, 667], "aggreg": [664, 665], "fourth": [664, 665], "607": [664, 665], "735": [664, 665], "667": [664, 665], "381": [664, 665], "857": [664, 665], "0396": [664, 665], "166": [664, 665], "828": [664, 665], "144": [664, 665], "40501155": [664, 665], "77361575": [664, 665], "97776199": [664, 665], "36831157": [664, 665], "89148434": [664, 665], "9512272": [664, 665], "67542176": [664, 665], "41985657": [664, 665], "23478023": [664, 665], "1141": [664, 665], "8101": [664, 665], "9298": [664, 665], "8460": [664, 665], "2119": [664, 665], "3519": [664, 665], "6252": [664, 665], "4033": [664, 665], "7443": [664, 665], "2577": [664, 665], "3707": [664, 665], "0545": [664, 665], "3238": [664, 665], "5944": [664, 665], "0775": [664, 665], "4327": [664, 665], "176": [664, 665], "889": [664, 665], "763": [664, 665], "071": [664, 665], "262": [664, 665], "456": [664, 665], "114": [664, 665], "349": [664, 665], "615": [664, 665], "594": [664, 665], "335": [664, 665], "212": [664, 665], "457": [664, 665], "827": [664, 665], "209": [664, 665], "ascend": [669, 670, 672], "einstein": [676, 677, 679, 697], "summat": [676, 677, 679, 697], "seq": [676, 677, 679, 697], "jk": [676, 677, 679, 697], "ik": [676, 677, 679, 697], "126": [676, 677, 679, 697], "510": [676, 677, 679, 697], "99": [676, 677, 679, 697], "108": [676, 677, 679, 697], "117": [676, 677, 679, 697], "sentinel": [676, 680, 682, 686, 688], "unsign": [676, 689, 691, 695], "degre": [676, 692, 694, 698, 700], "bessel": [676, 692, 694, 698, 700], "8164966": [676, 692, 694], "varianc": [676, 698, 700], "unbias": [676, 698, 700], "simplicit": [701, 702, 704], "autom": 708, "grow": 708, "ai": 708, "got": 708, "colab": 708, "sharp": 708, "weekli": 708, "event": 708, "immedi": 708, "favorit": 708, "jax_concat": 708, "tf_concat": 708, "np_concat": 708, "mx_concat": 708, "torch_concat": 708, "prompt": 708, "get_devic": 708, "reduce_prod": 708, "gradient_imag": 708, "linalg": 708, "bilinear_resampl": 708, "stack_imag": 708, "neural_net": 708, "ecosystem": [708, 714], "popular": [708, 714], "acceler": 708, "articl": 708, "lenton2021ivi": 708, "inter": 708, "lenton": 708, "daniel": 708, "pardo": 708, "fabio": 708, "falck": 708, "fabian": 708, "jame": 708, "stephen": 708, "clark": 708, "ronald": 708, "journal": 708, "arxiv": 708, "preprint": 708, "2102": 708, "02886": 708, "2021": 708, "add_array_spec": 711, "fn_array_spec": 711, "geglu": 715, "native_modul": [718, 719], "native_module_class": [718, 719], "firstlayersiren": 720, "kaimingnorm": [720, 724], "negative_slop": 720, "Ones": 720, "siren": 720, "w0": [720, 726], "filter_s": [729, 730, 731], "1d": [729, 730, 731], "conv1dtranspos": 729, "filter_shap": [729, 732, 733, 734, 735, 736], "conv2dtranspos": 729, "conv3dtranspos": 729, "depthwiseconv2d": 729, "num_channel": [729, 736], "bernoul": [729, 737], "num_lay": [729, 738], "return_sequ": [729, 738], "return_st": [729, 738], "get_initial_st": [729, 738], "dens": [729, 739], "multiheadattent": 729, "query_dim": [729, 740], "head_dim": [729, 740], "dropout_r": [729, 740], "context_dim": [729, 740], "with_to_q_fn": [729, 740], "with_to_kv_fn": [729, 740], "with_to_out_fn": [729, 740], "build_mod": [729, 740, 741, 742], "on_init": [729, 740, 741, 742], "__call__": [729, 740, 741, 742], "store_var": [741, 742], "arg_stateful_idx": [741, 742], "kwarg_stateful_idx": [741, 742], "fallback_to_non_compil": [741, 742, 745, 749], "with_partial_v": [741, 742], "initialz": [741, 742], "from_cal": [741, 742], "check_submod_ret": [741, 742], "get_mod_kei": [741, 742], "top_mod": [741, 742], "mod_depth": [741, 742], "mod_height": [741, 742], "mod_with_top_mod_key_chain": [741, 742], "save_weight": [741, 742], "weights_path": [741, 742], "show_mod_in_top_mod": [741, 742], "upper_depth": [741, 742], "lower_depth": [741, 742], "show_structur": [741, 742], "show_v_in_top_v": [741, 742], "sub_mod": [741, 742], "show_v": [741, 742], "track_submod_call_ord": [741, 742], "track_submod_ret": [741, 742], "v_with_top_v_key_chain": [741, 742], "layernorm": 743, "normalized_shap": [743, 744], "elementwise_affin": [743, 744], "trail": [743, 744], "affin": [743, 744], "0001": [745, 746, 747], "init_on_first_step": [745, 749], "ignore_miss": [745, 749], "overriden": [745, 749], "sgd": 745, "stochast": [745, 750], "sub_modul": [751, 752]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "conversions"], [7, 0, 0, "-", "creation"], [9, 0, 0, "-", "data_type"], [11, 0, 0, "-", "device"], [13, 0, 0, "-", "elementwise"], [15, 0, 0, "-", "general"], [17, 0, 0, "-", "gradients"], [19, 0, 0, "-", "image"], [21, 0, 0, "-", "layers"], [23, 0, 0, "-", "linear_algebra"], [25, 0, 0, "-", "losses"], [27, 0, 0, "-", "manipulation"], [29, 0, 0, "-", "norms"], [31, 0, 0, "-", "random"], [33, 0, 0, "-", "searching"], [35, 0, 0, "-", "set"], [37, 0, 0, "-", "sorting"], [39, 0, 0, "-", "statistical"], [41, 0, 0, "-", "utility"], [43, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[273, 2, 1, "", "abs"], [278, 2, 1, "", "acos"], [325, 2, 1, "", "acosh"], [381, 2, 1, "", "add"], [703, 2, 1, "", "all"], [449, 2, 1, "", "all_equal"], [706, 2, 1, "", "any"], [671, 2, 1, "", "argsort"], [285, 2, 1, "", "asin"], [288, 2, 1, "", "asinh"], [296, 2, 1, "", "atan"], [294, 2, 1, "", "atan2"], [443, 2, 1, "", "atanh"], [573, 2, 1, "", "binary_cross_entropy"], [300, 2, 1, "", "bitwise_and"], [303, 2, 1, "", "bitwise_invert"], [306, 2, 1, "", "bitwise_left_shift"], [309, 2, 1, "", "bitwise_or"], [312, 2, 1, "", "bitwise_right_shift"], [315, 2, 1, "", "bitwise_xor"], [196, 2, 1, "", "can_cast"], [318, 2, 1, "", "ceil"], [583, 2, 1, "", "clip"], [587, 2, 1, "", "concat"], [590, 2, 1, "", "constant_pad"], [325, 2, 1, "", "cos"], [324, 2, 1, "", "cosh"], [576, 2, 1, "", "cross_entropy"], [345, 2, 1, "", "divide"], [697, 2, 1, "", "einsum"], [351, 2, 1, "", "equal"], [333, 2, 1, "", "erf"], [381, 2, 1, "", "exp"], [593, 2, 1, "", "expand_dims"], [340, 2, 1, "", "expm1"], [596, 2, 1, "", "flip"], [345, 2, 1, "", "floor"], [346, 2, 1, "", "floor_divide"], [473, 2, 1, "", "gather_nd"], [351, 2, 1, "", "greater"], [352, 2, 1, "", "greater_equal"], [355, 2, 1, "", "isfinite"], [358, 2, 1, "", "isinf"], [361, 2, 1, "", "isnan"], [650, 2, 1, "", "layer_norm"], [364, 2, 1, "", "less"], [367, 2, 1, "", "less_equal"], [370, 2, 1, "", "log"], [373, 2, 1, "", "log10"], [376, 2, 1, "", "log1p"], [379, 2, 1, "", "log2"], [382, 2, 1, "", "logaddexp"], [385, 2, 1, "", "logical_and"], [388, 2, 1, "", "logical_not"], [391, 2, 1, "", "logical_or"], [394, 2, 1, "", "logical_xor"], [553, 2, 1, "", "matmul"], [681, 2, 1, "", "max"], [684, 2, 1, "", "mean"], [687, 2, 1, "", "min"], [399, 2, 1, "", "multiply"], [402, 2, 1, "", "negative"], [405, 2, 1, "", "not_equal"], [599, 2, 1, "", "permute_dims"], [408, 2, 1, "", "positive"], [411, 2, 1, "", "pow"], [690, 2, 1, "", "prod"], [414, 2, 1, "", "remainder"], [602, 2, 1, "", "repeat"], [605, 2, 1, "", "reshape"], [608, 2, 1, "", "roll"], [417, 2, 1, "", "round"], [420, 2, 1, "", "sign"], [423, 2, 1, "", "sin"], [427, 2, 1, "", "sinh"], [674, 2, 1, "", "sort"], [579, 2, 1, "", "sparse_cross_entropy"], [430, 2, 1, "", "sqrt"], [433, 2, 1, "", "square"], [612, 2, 1, "", "squeeze"], [615, 2, 1, "", "stack"], [693, 2, 1, "", "std"], [436, 2, 1, "", "subtract"], [696, 2, 1, "", "sum"], [618, 2, 1, "", "swapaxes"], [443, 2, 1, "", "tan"], [442, 2, 1, "", "tanh"], [621, 2, 1, "", "tile"], [445, 2, 1, "", "trunc"], [699, 2, 1, "", "var"], [624, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[3, 2, 1, "", "args_to_ivy"], [4, 2, 1, "", "args_to_native"], [5, 2, 1, "", "to_ivy"], [6, 2, 1, "", "to_native"]], "ivy.array.creation": [[8, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_type": [[10, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[10, 3, 1, "", "can_cast"]], "ivy.array.device": [[12, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[14, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[14, 3, 1, "", "abs"], [14, 3, 1, "", "acos"], [14, 3, 1, "", "acosh"], [14, 3, 1, "", "add"], [14, 3, 1, "", "asin"], [14, 3, 1, "", "asinh"], [14, 3, 1, "", "atan"], [14, 3, 1, "", "atan2"], [14, 3, 1, "", "atanh"], [14, 3, 1, "", "bitwise_and"], [14, 3, 1, "", "bitwise_invert"], [14, 3, 1, "", "bitwise_left_shift"], [14, 3, 1, "", "bitwise_or"], [14, 3, 1, "", "bitwise_right_shift"], [14, 3, 1, "", "bitwise_xor"], [14, 3, 1, "", "ceil"], [14, 3, 1, "", "cos"], [14, 3, 1, "", "cosh"], [14, 3, 1, "", "divide"], [14, 3, 1, "", "equal"], [14, 3, 1, "", "erf"], [14, 3, 1, "", "exp"], [14, 3, 1, "", "expm1"], [14, 3, 1, "", "floor"], [14, 3, 1, "", "floor_divide"], [14, 3, 1, "", "greater"], [14, 3, 1, "", "greater_equal"], [14, 3, 1, "", "isfinite"], [14, 3, 1, "", "isinf"], [14, 3, 1, "", "isnan"], [14, 3, 1, "", "less"], [14, 3, 1, "", "less_equal"], [14, 3, 1, "", "log"], [14, 3, 1, "", "log10"], [14, 3, 1, "", "log1p"], [14, 3, 1, "", "log2"], [14, 3, 1, "", "logaddexp"], [14, 3, 1, "", "logical_and"], [14, 3, 1, "", "logical_not"], [14, 3, 1, "", "logical_or"], [14, 3, 1, "", "logical_xor"], [14, 3, 1, "", "multiply"], [14, 3, 1, "", "negative"], [14, 3, 1, "", "not_equal"], [14, 3, 1, "", "positive"], [14, 3, 1, "", "pow"], [14, 3, 1, "", "remainder"], [14, 3, 1, "", "round"], [14, 3, 1, "", "sign"], [14, 3, 1, "", "sin"], [14, 3, 1, "", "sinh"], [14, 3, 1, "", "sqrt"], [14, 3, 1, "", "square"], [14, 3, 1, "", "subtract"], [14, 3, 1, "", "tan"], [14, 3, 1, "", "tanh"], [14, 3, 1, "", "trunc"]], "ivy.array.general": [[16, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[16, 3, 1, "", "all_equal"], [16, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[18, 1, 1, "", "ArrayWithGradients"]], "ivy.array.image": [[20, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[22, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[24, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[24, 3, 1, "", "matmul"]], "ivy.array.losses": [[26, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[26, 3, 1, "", "binary_cross_entropy"], [26, 3, 1, "", "cross_entropy"], [26, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[28, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[28, 3, 1, "", "clip"], [28, 3, 1, "", "concat"], [28, 3, 1, "", "constant_pad"], [28, 3, 1, "", "expand_dims"], [28, 3, 1, "", "flip"], [28, 3, 1, "", "permute_dims"], [28, 3, 1, "", "repeat"], [28, 3, 1, "", "reshape"], [28, 3, 1, "", "roll"], [28, 3, 1, "", "squeeze"], [28, 3, 1, "", "stack"], [28, 3, 1, "", "swapaxes"], [28, 3, 1, "", "tile"], [28, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[30, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[30, 3, 1, "", "layer_norm"]], "ivy.array.random": [[32, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[34, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[36, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[38, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[38, 3, 1, "", "argsort"], [38, 3, 1, "", "sort"]], "ivy.array.statistical": [[40, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[40, 3, 1, "", "einsum"], [40, 3, 1, "", "max"], [40, 3, 1, "", "mean"], [40, 3, 1, "", "min"], [40, 3, 1, "", "prod"], [40, 3, 1, "", "std"], [40, 3, 1, "", "sum"], [40, 3, 1, "", "var"]], "ivy.array.utility": [[42, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[42, 3, 1, "", "all"], [42, 3, 1, "", "any"]], "ivy.array.wrapping": [[44, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[45, 0, 0, "-", "backend_handler"], [146, 0, 0, "-", "func_wrapper"], [711, 0, 0, "-", "inspection"], [754, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[45, 1, 1, "", "ContextManager"], [47, 2, 1, "", "choose_random_backend"], [48, 2, 1, "", "clear_backend_stack"], [49, 2, 1, "", "current_backend"], [50, 2, 1, "", "get_backend"], [51, 2, 1, "", "set_backend"], [52, 2, 1, "", "try_import_ivy_jax"], [53, 2, 1, "", "try_import_ivy_mxnet"], [54, 2, 1, "", "try_import_ivy_numpy"], [55, 2, 1, "", "try_import_ivy_tf"], [56, 2, 1, "", "try_import_ivy_torch"], [57, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[45, 3, 1, "", "__init__"]], "ivy.container": [[62, 0, 0, "-", "activations"], [64, 0, 0, "-", "base"], [66, 0, 0, "-", "container"], [69, 0, 0, "-", "creation"], [71, 0, 0, "-", "data_type"], [73, 0, 0, "-", "device"], [75, 0, 0, "-", "elementwise"], [77, 0, 0, "-", "general"], [79, 0, 0, "-", "gradients"], [81, 0, 0, "-", "image"], [83, 0, 0, "-", "layers"], [85, 0, 0, "-", "linear_algebra"], [87, 0, 0, "-", "losses"], [89, 0, 0, "-", "manipulation"], [91, 0, 0, "-", "norms"], [93, 0, 0, "-", "random"], [95, 0, 0, "-", "searching"], [97, 0, 0, "-", "set"], [99, 0, 0, "-", "sorting"], [101, 0, 0, "-", "statistical"], [103, 0, 0, "-", "utility"], [105, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[63, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[65, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[65, 3, 1, "", "__getitem__"], [65, 3, 1, "", "__init__"], [65, 3, 1, "", "__setitem__"], [65, 3, 1, "", "all_false"], [65, 3, 1, "", "all_key_chains"], [65, 3, 1, "", "all_true"], [65, 3, 1, "", "arrays_as_lists"], [65, 3, 1, "", "as_arrays"], [65, 3, 1, "", "as_bools"], [65, 3, 1, "", "as_ones"], [65, 3, 1, "", "as_random_uniform"], [65, 3, 1, "", "as_variables"], [65, 3, 1, "", "as_zeros"], [65, 3, 1, "", "assert_contains_sub_container"], [65, 3, 1, "", "assert_contains_sub_structure"], [65, 3, 1, "", "assert_identical"], [65, 3, 1, "", "assert_identical_structure"], [65, 3, 1, "", "at_key_chain"], [65, 3, 1, "", "at_key_chains"], [65, 3, 1, "", "at_keys"], [65, 3, 1, "", "clip"], [65, 3, 1, "", "combine"], [65, 3, 1, "", "common_key_chains"], [65, 4, 1, "", "config"], [65, 3, 1, "", "contains_sub_container"], [65, 3, 1, "", "contains_sub_structure"], [65, 3, 1, "", "copy"], [65, 3, 1, "", "create_if_absent"], [65, 3, 1, "", "cutoff_at_depth"], [65, 3, 1, "", "cutoff_at_height"], [65, 3, 1, "", "deep_copy"], [65, 4, 1, "", "dev"], [65, 3, 1, "", "dev_clone"], [65, 3, 1, "", "dev_dist"], [65, 4, 1, "", "dev_str"], [65, 3, 1, "", "diff"], [65, 3, 1, "", "dtype"], [65, 3, 1, "", "einops_rearrange"], [65, 3, 1, "", "einops_reduce"], [65, 3, 1, "", "einops_repeat"], [65, 3, 1, "", "find_sub_container"], [65, 3, 1, "", "find_sub_structure"], [65, 3, 1, "", "flatten_key_chain"], [65, 3, 1, "", "flatten_key_chains"], [65, 3, 1, "", "format_key_chains"], [65, 3, 1, "", "from_disk_as_hdf5"], [65, 3, 1, "", "from_disk_as_json"], [65, 3, 1, "", "from_disk_as_pickled"], [65, 3, 1, "", "from_flat_list"], [65, 3, 1, "", "from_numpy"], [65, 3, 1, "", "gather"], [65, 3, 1, "", "gather_nd"], [65, 3, 1, "", "h5_file_size"], [65, 3, 1, "", "handle_inplace"], [65, 3, 1, "", "has_key"], [65, 3, 1, "", "has_key_chain"], [65, 3, 1, "", "has_nans"], [65, 3, 1, "", "identical"], [65, 3, 1, "", "identical_array_shapes"], [65, 3, 1, "", "identical_configs"], [65, 3, 1, "", "identical_structure"], [65, 3, 1, "", "if_exists"], [65, 3, 1, "", "inplace_update"], [65, 4, 1, "", "ivy"], [65, 3, 1, "", "key_chains_containing"], [65, 3, 1, "", "list_join"], [65, 3, 1, "", "list_stack"], [65, 3, 1, "", "map"], [65, 3, 1, "", "map_conts"], [65, 3, 1, "", "matrix_norm"], [65, 4, 1, "", "max_depth"], [65, 3, 1, "", "maximum"], [65, 3, 1, "", "minimum"], [65, 3, 1, "", "multi_map"], [65, 3, 1, "", "multi_map_in_static_method"], [65, 3, 1, "", "num_arrays"], [65, 3, 1, "", "overwrite_at_key_chain"], [65, 3, 1, "", "overwrite_at_key_chains"], [65, 3, 1, "", "prune_empty"], [65, 3, 1, "", "prune_key_chain"], [65, 3, 1, "", "prune_key_chains"], [65, 3, 1, "", "prune_key_from_key_chains"], [65, 3, 1, "", "prune_keys"], [65, 3, 1, "", "prune_keys_from_key_chains"], [65, 3, 1, "", "reduce"], [65, 3, 1, "", "remove_key_length_limit"], [65, 3, 1, "", "remove_print_limit"], [65, 3, 1, "", "reshape_like"], [65, 3, 1, "", "restructure"], [65, 3, 1, "", "restructure_key_chains"], [65, 3, 1, "", "set_at_key_chain"], [65, 3, 1, "", "set_at_key_chains"], [65, 3, 1, "", "set_at_keys"], [65, 3, 1, "", "set_framework"], [65, 3, 1, "", "set_ivy_backend"], [65, 4, 1, "", "shape"], [65, 4, 1, "", "shapes"], [65, 3, 1, "", "show"], [65, 3, 1, "", "show_sub_container"], [65, 3, 1, "", "shuffle"], [65, 3, 1, "", "shuffle_h5_file"], [65, 3, 1, "", "size_ordered_arrays"], [65, 3, 1, "", "slice_keys"], [65, 3, 1, "", "slice_via_key"], [65, 3, 1, "", "sort_by_key"], [65, 3, 1, "", "split"], [65, 3, 1, "", "stop_gradients"], [65, 3, 1, "", "structural_diff"], [65, 3, 1, "", "to_device"], [65, 3, 1, "", "to_dict"], [65, 3, 1, "", "to_disk_as_hdf5"], [65, 3, 1, "", "to_disk_as_json"], [65, 3, 1, "", "to_disk_as_pickled"], [65, 3, 1, "", "to_flat_list"], [65, 3, 1, "", "to_iterator"], [65, 3, 1, "", "to_iterator_keys"], [65, 3, 1, "", "to_iterator_values"], [65, 3, 1, "", "to_ivy"], [65, 3, 1, "", "to_jsonable"], [65, 3, 1, "", "to_list"], [65, 3, 1, "", "to_multi_dev"], [65, 3, 1, "", "to_native"], [65, 3, 1, "", "to_numpy"], [65, 3, 1, "", "to_raw"], [65, 3, 1, "", "trim_key"], [65, 3, 1, "", "try_kc"], [65, 3, 1, "", "unify"], [65, 3, 1, "", "unstack"], [65, 3, 1, "", "update_config"], [65, 3, 1, "", "vector_norm"], [65, 3, 1, "", "with_default_key_color"], [65, 3, 1, "", "with_entries_as_lists"], [65, 3, 1, "", "with_ivy_backend"], [65, 3, 1, "", "with_key_length_limit"], [65, 3, 1, "", "with_print_indent"], [65, 3, 1, "", "with_print_limit"], [65, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[67, 1, 1, "", "Container"], [68, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[67, 3, 1, "", "__add__"], [67, 3, 1, "", "__init__"], [67, 3, 1, "", "__radd__"], [67, 3, 1, "", "adam_step"], [67, 3, 1, "", "arange"], [67, 3, 1, "", "arg_info"], [67, 3, 1, "", "arg_names"], [67, 3, 1, "", "argmax"], [67, 3, 1, "", "argmin"], [67, 3, 1, "", "array"], [67, 3, 1, "", "array_equal"], [67, 3, 1, "", "arrays_equal"], [67, 3, 1, "", "as_ivy_dev"], [67, 3, 1, "", "as_ivy_dtype"], [67, 3, 1, "", "as_native_dev"], [67, 3, 1, "", "as_native_dtype"], [67, 3, 1, "", "asarray"], [67, 3, 1, "", "assert_supports_inplace"], [67, 3, 1, "", "astype"], [67, 3, 1, "", "broadcast_arrays"], [67, 3, 1, "", "broadcast_to"], [67, 3, 1, "", "cache_fn"], [67, 3, 1, "", "cholesky"], [67, 3, 1, "", "clear_mem_on_dev"], [67, 3, 1, "", "clip_matrix_norm"], [67, 3, 1, "", "closest_valid_dtype"], [67, 3, 1, "", "container_types"], [67, 3, 1, "", "conv1d"], [67, 3, 1, "", "conv1d_transpose"], [67, 3, 1, "", "conv2d"], [67, 3, 1, "", "conv2d_transpose"], [67, 3, 1, "", "conv3d"], [67, 3, 1, "", "conv3d_transpose"], [67, 3, 1, "", "copy_array"], [67, 3, 1, "", "cross"], [67, 3, 1, "", "cumprod"], [67, 3, 1, "", "cumsum"], [67, 3, 1, "", "current_backend"], [67, 3, 1, "", "current_backend_str"], [67, 3, 1, "", "default"], [67, 3, 1, "", "default_device"], [67, 3, 1, "", "default_dtype"], [67, 3, 1, "", "default_float_dtype"], [67, 3, 1, "", "default_int_dtype"], [67, 3, 1, "", "depthwise_conv2d"], [67, 3, 1, "", "det"], [67, 3, 1, "", "dev_clone_array"], [67, 3, 1, "", "dev_clone_iter"], [67, 3, 1, "", "dev_clone_nest"], [67, 3, 1, "", "dev_dist_array"], [67, 3, 1, "", "dev_dist_iter"], [67, 3, 1, "", "dev_dist_nest"], [67, 3, 1, "", "dev_unify"], [67, 3, 1, "", "dev_unify_array"], [67, 3, 1, "", "dev_unify_iter"], [67, 3, 1, "", "dev_unify_nest"], [67, 3, 1, "", "dev_util"], [67, 3, 1, "", "diagonal"], [67, 3, 1, "", "dropout"], [67, 3, 1, "", "dtype_bits"], [67, 3, 1, "", "eigh"], [67, 3, 1, "", "eigvalsh"], [67, 3, 1, "", "empty"], [67, 3, 1, "", "empty_like"], [67, 3, 1, "", "execute_with_gradients"], [67, 3, 1, "", "exists"], [67, 3, 1, "", "eye"], [67, 3, 1, "", "finfo"], [67, 3, 1, "", "floormod"], [67, 3, 1, "", "fourier_encode"], [67, 3, 1, "", "from_dlpack"], [67, 3, 1, "", "full"], [67, 3, 1, "", "full_like"], [67, 3, 1, "", "function_supported_dtypes"], [67, 3, 1, "", "function_unsupported_dtypes"], [67, 3, 1, "", "gelu"], [67, 3, 1, "", "get_all_arrays_in_memory"], [67, 3, 1, "", "get_all_ivy_arrays_on_dev"], [67, 3, 1, "", "get_min_base"], [67, 3, 1, "", "get_min_denominator"], [67, 3, 1, "", "get_num_dims"], [67, 3, 1, "", "get_referrers_recursive"], [67, 3, 1, "", "gpu_is_available"], [67, 3, 1, "", "handle_nestable"], [67, 3, 1, "", "handle_out_argument"], [67, 3, 1, "", "iinfo"], [67, 3, 1, "", "indices_where"], [67, 3, 1, "", "infer_device"], [67, 3, 1, "", "infer_dtype"], [67, 3, 1, "", "inplace_arrays_supported"], [67, 3, 1, "", "inplace_decrement"], [67, 3, 1, "", "inplace_increment"], [67, 3, 1, "", "inplace_variables_supported"], [67, 3, 1, "", "inputs_to_native_arrays"], [67, 3, 1, "", "inv"], [67, 3, 1, "", "invalid_dtype"], [67, 3, 1, "", "is_float_dtype"], [67, 3, 1, "", "is_int_dtype"], [67, 3, 1, "", "is_ivy_container"], [67, 3, 1, "", "leaky_relu"], [67, 3, 1, "", "linear"], [67, 3, 1, "", "linspace"], [67, 3, 1, "", "logspace"], [67, 3, 1, "", "lstm_update"], [67, 3, 1, "", "match_kwargs"], [67, 3, 1, "", "matrix_power"], [67, 3, 1, "", "matrix_rank"], [67, 3, 1, "", "matrix_transpose"], [67, 3, 1, "", "meshgrid"], [67, 3, 1, "", "multi_head_attention"], [67, 3, 1, "", "multinomial"], [67, 3, 1, "", "multiprocessing"], [67, 3, 1, "", "native_array"], [67, 3, 1, "", "nonzero"], [67, 3, 1, "", "num_arrays_in_memory"], [67, 3, 1, "", "num_cpu_cores"], [67, 3, 1, "", "num_gpus"], [67, 3, 1, "", "num_ivy_arrays_on_dev"], [67, 3, 1, "", "one_hot"], [67, 3, 1, "", "ones"], [67, 3, 1, "", "ones_like"], [67, 3, 1, "", "outer"], [67, 3, 1, "", "outputs_to_ivy_arrays"], [67, 3, 1, "", "percent_used_mem_on_dev"], [67, 3, 1, "", "pinv"], [67, 3, 1, "", "print_all_arrays_in_memory"], [67, 3, 1, "", "print_all_ivy_arrays_on_dev"], [67, 3, 1, "", "promote_types"], [67, 3, 1, "", "qr"], [67, 3, 1, "", "queue_timeout"], [67, 3, 1, "", "randint"], [67, 3, 1, "", "random_normal"], [67, 3, 1, "", "relu"], [67, 3, 1, "", "result_type"], [67, 3, 1, "", "scaled_dot_product_attention"], [67, 3, 1, "", "scatter_flat"], [67, 3, 1, "", "scatter_nd"], [67, 3, 1, "", "seed"], [67, 3, 1, "", "set_default_device"], [67, 3, 1, "", "set_default_dtype"], [67, 3, 1, "", "set_default_float_dtype"], [67, 3, 1, "", "set_default_int_dtype"], [67, 3, 1, "", "set_min_base"], [67, 3, 1, "", "set_min_denominator"], [67, 3, 1, "", "set_queue_timeout"], [67, 3, 1, "", "set_split_factor"], [67, 3, 1, "", "set_tmp_dir"], [67, 3, 1, "", "set_with_grads"], [67, 3, 1, "", "shape_to_tuple"], [67, 3, 1, "", "sigmoid"], [67, 3, 1, "", "slogdet"], [67, 3, 1, "", "softmax"], [67, 3, 1, "", "softplus"], [67, 3, 1, "", "solve"], [67, 3, 1, "", "split_factor"], [67, 3, 1, "", "split_func_call"], [67, 3, 1, "", "stable_divide"], [67, 3, 1, "", "stable_pow"], [67, 3, 1, "", "static_abs"], [67, 3, 1, "", "static_acos"], [67, 3, 1, "", "static_acosh"], [67, 3, 1, "", "static_adam_step"], [67, 3, 1, "", "static_all"], [67, 3, 1, "", "static_any"], [67, 3, 1, "", "static_arange"], [67, 3, 1, "", "static_arg_info"], [67, 3, 1, "", "static_arg_names"], [67, 3, 1, "", "static_argmax"], [67, 3, 1, "", "static_argmin"], [67, 3, 1, "", "static_array"], [67, 3, 1, "", "static_array_equal"], [67, 3, 1, "", "static_arrays_equal"], [67, 3, 1, "", "static_as_ivy_dev"], [67, 3, 1, "", "static_as_ivy_dtype"], [67, 3, 1, "", "static_as_native_dev"], [67, 3, 1, "", "static_as_native_dtype"], [67, 3, 1, "", "static_asarray"], [67, 3, 1, "", "static_asin"], [67, 3, 1, "", "static_asinh"], [67, 3, 1, "", "static_assert_supports_inplace"], [67, 3, 1, "", "static_astype"], [67, 3, 1, "", "static_atan"], [67, 3, 1, "", "static_atan2"], [67, 3, 1, "", "static_atanh"], [67, 3, 1, "", "static_bitwise_and"], [67, 3, 1, "", "static_bitwise_invert"], [67, 3, 1, "", "static_bitwise_left_shift"], [67, 3, 1, "", "static_bitwise_or"], [67, 3, 1, "", "static_bitwise_right_shift"], [67, 3, 1, "", "static_bitwise_xor"], [67, 3, 1, "", "static_broadcast_arrays"], [67, 3, 1, "", "static_broadcast_to"], [67, 3, 1, "", "static_cache_fn"], [67, 3, 1, "", "static_ceil"], [67, 3, 1, "", "static_cholesky"], [67, 3, 1, "", "static_clear_mem_on_dev"], [67, 3, 1, "", "static_clip_matrix_norm"], [67, 3, 1, "", "static_clip_vector_norm"], [67, 3, 1, "", "static_closest_valid_dtype"], [67, 3, 1, "", "static_concat"], [67, 3, 1, "", "static_constant_pad"], [67, 3, 1, "", "static_container_types"], [67, 3, 1, "", "static_conv1d"], [67, 3, 1, "", "static_conv1d_transpose"], [67, 3, 1, "", "static_conv2d"], [67, 3, 1, "", "static_conv2d_transpose"], [67, 3, 1, "", "static_conv3d"], [67, 3, 1, "", "static_conv3d_transpose"], [67, 3, 1, "", "static_copy_array"], [67, 3, 1, "", "static_cos"], [67, 3, 1, "", "static_cosh"], [67, 3, 1, "", "static_cross"], [67, 3, 1, "", "static_cumprod"], [67, 3, 1, "", "static_cumsum"], [67, 3, 1, "", "static_current_backend"], [67, 3, 1, "", "static_current_backend_str"], [67, 3, 1, "", "static_default"], [67, 3, 1, "", "static_default_device"], [67, 3, 1, "", "static_default_dtype"], [67, 3, 1, "", "static_default_float_dtype"], [67, 3, 1, "", "static_default_int_dtype"], [67, 3, 1, "", "static_depthwise_conv2d"], [67, 3, 1, "", "static_det"], [67, 3, 1, "", "static_dev"], [67, 3, 1, "", "static_dev_clone"], [67, 3, 1, "", "static_dev_clone_array"], [67, 3, 1, "", "static_dev_clone_iter"], [67, 3, 1, "", "static_dev_clone_nest"], [67, 3, 1, "", "static_dev_dist"], [67, 3, 1, "", "static_dev_dist_array"], [67, 3, 1, "", "static_dev_dist_iter"], [67, 3, 1, "", "static_dev_dist_nest"], [67, 3, 1, "", "static_dev_unify"], [67, 3, 1, "", "static_dev_unify_array"], [67, 3, 1, "", "static_dev_unify_iter"], [67, 3, 1, "", "static_dev_unify_nest"], [67, 3, 1, "", "static_dev_util"], [67, 3, 1, "", "static_diagonal"], [67, 3, 1, "", "static_dropout"], [67, 3, 1, "", "static_dtype"], [67, 3, 1, "", "static_dtype_bits"], [67, 3, 1, "", "static_eigh"], [67, 3, 1, "", "static_eigvalsh"], [67, 3, 1, "", "static_einops_rearrange"], [67, 3, 1, "", "static_einops_reduce"], [67, 3, 1, "", "static_einops_repeat"], [67, 3, 1, "", "static_einsum"], [67, 3, 1, "", "static_empty"], [67, 3, 1, "", "static_empty_like"], [67, 3, 1, "", "static_equal"], [67, 3, 1, "", "static_erf"], [67, 3, 1, "", "static_execute_with_gradients"], [67, 3, 1, "", "static_exists"], [67, 3, 1, "", "static_exp"], [67, 3, 1, "", "static_expand_dims"], [67, 3, 1, "", "static_expm1"], [67, 3, 1, "", "static_eye"], [67, 3, 1, "", "static_finfo"], [67, 3, 1, "", "static_flip"], [67, 3, 1, "", "static_floor"], [67, 3, 1, "", "static_floor_divide"], [67, 3, 1, "", "static_floormod"], [67, 3, 1, "", "static_fourier_encode"], [67, 3, 1, "", "static_from_dlpack"], [67, 3, 1, "", "static_full"], [67, 3, 1, "", "static_full_like"], [67, 3, 1, "", "static_function_supported_dtypes"], [67, 3, 1, "", "static_function_unsupported_dtypes"], [67, 3, 1, "", "static_gather"], [67, 3, 1, "", "static_gelu"], [67, 3, 1, "", "static_get_all_arrays_in_memory"], [67, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [67, 3, 1, "", "static_get_min_base"], [67, 3, 1, "", "static_get_min_denominator"], [67, 3, 1, "", "static_get_num_dims"], [67, 3, 1, "", "static_get_referrers_recursive"], [67, 3, 1, "", "static_gpu_is_available"], [67, 3, 1, "", "static_greater"], [67, 3, 1, "", "static_greater_equal"], [67, 3, 1, "", "static_handle_nestable"], [67, 3, 1, "", "static_handle_out_argument"], [67, 3, 1, "", "static_has_nans"], [67, 3, 1, "", "static_iinfo"], [67, 3, 1, "", "static_indices_where"], [67, 3, 1, "", "static_infer_device"], [67, 3, 1, "", "static_infer_dtype"], [67, 3, 1, "", "static_inplace_arrays_supported"], [67, 3, 1, "", "static_inplace_decrement"], [67, 3, 1, "", "static_inplace_increment"], [67, 3, 1, "", "static_inplace_update"], [67, 3, 1, "", "static_inplace_variables_supported"], [67, 3, 1, "", "static_inputs_to_native_arrays"], [67, 3, 1, "", "static_inv"], [67, 3, 1, "", "static_invalid_dtype"], [67, 3, 1, "", "static_is_array"], [67, 3, 1, "", "static_is_float_dtype"], [67, 3, 1, "", "static_is_int_dtype"], [67, 3, 1, "", "static_is_ivy_array"], [67, 3, 1, "", "static_is_ivy_container"], [67, 3, 1, "", "static_is_native_array"], [67, 3, 1, "", "static_is_variable"], [67, 3, 1, "", "static_isfinite"], [67, 3, 1, "", "static_isinf"], [67, 3, 1, "", "static_isnan"], [67, 3, 1, "", "static_layer_norm"], [67, 3, 1, "", "static_leaky_relu"], [67, 3, 1, "", "static_less"], [67, 3, 1, "", "static_less_equal"], [67, 3, 1, "", "static_linear"], [67, 3, 1, "", "static_linspace"], [67, 3, 1, "", "static_log"], [67, 3, 1, "", "static_log10"], [67, 3, 1, "", "static_log1p"], [67, 3, 1, "", "static_log2"], [67, 3, 1, "", "static_logaddexp"], [67, 3, 1, "", "static_logical_and"], [67, 3, 1, "", "static_logical_not"], [67, 3, 1, "", "static_logical_or"], [67, 3, 1, "", "static_logical_xor"], [67, 3, 1, "", "static_logspace"], [67, 3, 1, "", "static_lstm_update"], [67, 3, 1, "", "static_match_kwargs"], [67, 3, 1, "", "static_matmul"], [67, 3, 1, "", "static_matrix_norm"], [67, 3, 1, "", "static_matrix_power"], [67, 3, 1, "", "static_matrix_rank"], [67, 3, 1, "", "static_matrix_transpose"], [67, 3, 1, "", "static_max"], [67, 3, 1, "", "static_maximum"], [67, 3, 1, "", "static_mean"], [67, 3, 1, "", "static_meshgrid"], [67, 3, 1, "", "static_min"], [67, 3, 1, "", "static_minimum"], [67, 3, 1, "", "static_multi_head_attention"], [67, 3, 1, "", "static_multinomial"], [67, 3, 1, "", "static_multiprocessing"], [67, 3, 1, "", "static_native_array"], [67, 3, 1, "", "static_negative"], [67, 3, 1, "", "static_nonzero"], [67, 3, 1, "", "static_not_equal"], [67, 3, 1, "", "static_num_arrays_in_memory"], [67, 3, 1, "", "static_num_cpu_cores"], [67, 3, 1, "", "static_num_gpus"], [67, 3, 1, "", "static_num_ivy_arrays_on_dev"], [67, 3, 1, "", "static_one_hot"], [67, 3, 1, "", "static_ones"], [67, 3, 1, "", "static_ones_like"], [67, 3, 1, "", "static_outer"], [67, 3, 1, "", "static_outputs_to_ivy_arrays"], [67, 3, 1, "", "static_percent_used_mem_on_dev"], [67, 3, 1, "", "static_permute_dims"], [67, 3, 1, "", "static_pinv"], [67, 3, 1, "", "static_positive"], [67, 3, 1, "", "static_pow"], [67, 3, 1, "", "static_print_all_arrays_in_memory"], [67, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [67, 3, 1, "", "static_prod"], [67, 3, 1, "", "static_promote_types"], [67, 3, 1, "", "static_qr"], [67, 3, 1, "", "static_queue_timeout"], [67, 3, 1, "", "static_random_normal"], [67, 3, 1, "", "static_relu"], [67, 3, 1, "", "static_remainder"], [67, 3, 1, "", "static_repeat"], [67, 3, 1, "", "static_reshape"], [67, 3, 1, "", "static_result_type"], [67, 3, 1, "", "static_round"], [67, 3, 1, "", "static_scaled_dot_product_attention"], [67, 3, 1, "", "static_scatter_flat"], [67, 3, 1, "", "static_scatter_nd"], [67, 3, 1, "", "static_seed"], [67, 3, 1, "", "static_set_default_device"], [67, 3, 1, "", "static_set_default_dtype"], [67, 3, 1, "", "static_set_default_float_dtype"], [67, 3, 1, "", "static_set_default_int_dtype"], [67, 3, 1, "", "static_set_min_base"], [67, 3, 1, "", "static_set_min_denominator"], [67, 3, 1, "", "static_set_queue_timeout"], [67, 3, 1, "", "static_set_split_factor"], [67, 3, 1, "", "static_set_tmp_dir"], [67, 3, 1, "", "static_set_with_grads"], [67, 3, 1, "", "static_shape"], [67, 3, 1, "", "static_shape_to_tuple"], [67, 3, 1, "", "static_shuffle"], [67, 3, 1, "", "static_sigmoid"], [67, 3, 1, "", "static_sign"], [67, 3, 1, "", "static_sin"], [67, 3, 1, "", "static_sinh"], [67, 3, 1, "", "static_slogdet"], [67, 3, 1, "", "static_softmax"], [67, 3, 1, "", "static_softplus"], [67, 3, 1, "", "static_solve"], [67, 3, 1, "", "static_split"], [67, 3, 1, "", "static_split_factor"], [67, 3, 1, "", "static_split_func_call"], [67, 3, 1, "", "static_sqrt"], [67, 3, 1, "", "static_square"], [67, 3, 1, "", "static_squeeze"], [67, 3, 1, "", "static_stable_divide"], [67, 3, 1, "", "static_stable_pow"], [67, 3, 1, "", "static_stack"], [67, 3, 1, "", "static_std"], [67, 3, 1, "", "static_stop_gradient"], [67, 3, 1, "", "static_sum"], [67, 3, 1, "", "static_supports_inplace"], [67, 3, 1, "", "static_svd"], [67, 3, 1, "", "static_svdvals"], [67, 3, 1, "", "static_swapaxes"], [67, 3, 1, "", "static_tanh"], [67, 3, 1, "", "static_tensordot"], [67, 3, 1, "", "static_tile"], [67, 3, 1, "", "static_tmp_dir"], [67, 3, 1, "", "static_to_device"], [67, 3, 1, "", "static_to_list"], [67, 3, 1, "", "static_to_native_arrays_and_back"], [67, 3, 1, "", "static_to_numpy"], [67, 3, 1, "", "static_to_scalar"], [67, 3, 1, "", "static_total_mem_on_dev"], [67, 3, 1, "", "static_tpu_is_available"], [67, 3, 1, "", "static_trace"], [67, 3, 1, "", "static_tril"], [67, 3, 1, "", "static_triu"], [67, 3, 1, "", "static_trunc"], [67, 3, 1, "", "static_try_else_none"], [67, 3, 1, "", "static_type_promote_arrays"], [67, 3, 1, "", "static_unique_all"], [67, 3, 1, "", "static_unique_counts"], [67, 3, 1, "", "static_unique_inverse"], [67, 3, 1, "", "static_unique_values"], [67, 3, 1, "", "static_unset_default_device"], [67, 3, 1, "", "static_unset_default_dtype"], [67, 3, 1, "", "static_unset_default_float_dtype"], [67, 3, 1, "", "static_unset_default_int_dtype"], [67, 3, 1, "", "static_unset_with_grads"], [67, 3, 1, "", "static_unstack"], [67, 3, 1, "", "static_used_mem_on_dev"], [67, 3, 1, "", "static_valid_dtype"], [67, 3, 1, "", "static_value_is_nan"], [67, 3, 1, "", "static_var"], [67, 3, 1, "", "static_variable"], [67, 3, 1, "", "static_variable_data"], [67, 3, 1, "", "static_vecdot"], [67, 3, 1, "", "static_vector_norm"], [67, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [67, 3, 1, "", "static_where"], [67, 3, 1, "", "static_with_grads"], [67, 3, 1, "", "static_zero_pad"], [67, 3, 1, "", "static_zeros"], [67, 3, 1, "", "static_zeros_like"], [67, 3, 1, "", "stop_gradient"], [67, 3, 1, "", "supports_inplace"], [67, 3, 1, "", "svd"], [67, 3, 1, "", "svdvals"], [67, 3, 1, "", "tensordot"], [67, 3, 1, "", "tmp_dir"], [67, 3, 1, "", "to_native_arrays_and_back"], [67, 3, 1, "", "to_scalar"], [67, 3, 1, "", "total_mem_on_dev"], [67, 3, 1, "", "tpu_is_available"], [67, 3, 1, "", "trace"], [67, 3, 1, "", "tril"], [67, 3, 1, "", "triu"], [67, 3, 1, "", "try_else_none"], [67, 3, 1, "", "type_promote_arrays"], [67, 3, 1, "", "unique_all"], [67, 3, 1, "", "unique_counts"], [67, 3, 1, "", "unique_inverse"], [67, 3, 1, "", "unique_values"], [67, 3, 1, "", "unset_default_device"], [67, 3, 1, "", "unset_default_dtype"], [67, 3, 1, "", "unset_default_float_dtype"], [67, 3, 1, "", "unset_default_int_dtype"], [67, 3, 1, "", "unset_with_grads"], [67, 3, 1, "", "used_mem_on_dev"], [67, 3, 1, "", "valid_dtype"], [67, 3, 1, "", "value_is_nan"], [67, 3, 1, "", "variable"], [67, 3, 1, "", "variable_data"], [67, 3, 1, "", "vecdot"], [67, 3, 1, "", "vector_to_skew_symmetric_matrix"], [67, 3, 1, "", "where"], [67, 3, 1, "", "with_grads"], [67, 3, 1, "", "zeros"], [67, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[68, 3, 1, "", "__init__"], [68, 3, 1, "", "at_dev"], [68, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[334, 2, 1, "", "erf"], [424, 2, 1, "", "sin"], [585, 2, 1, "", "static_clip"]], "ivy.container.creation": [[70, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_type": [[72, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[72, 3, 1, "", "can_cast"], [72, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[74, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[76, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[76, 3, 1, "", "abs"], [76, 3, 1, "", "acos"], [76, 3, 1, "", "acosh"], [76, 3, 1, "", "add"], [76, 3, 1, "", "asin"], [76, 3, 1, "", "asinh"], [76, 3, 1, "", "atan"], [76, 3, 1, "", "atan2"], [76, 3, 1, "", "atanh"], [76, 3, 1, "", "bitwise_and"], [76, 3, 1, "", "bitwise_invert"], [76, 3, 1, "", "bitwise_left_shift"], [76, 3, 1, "", "bitwise_or"], [76, 3, 1, "", "bitwise_right_shift"], [76, 3, 1, "", "bitwise_xor"], [76, 3, 1, "", "ceil"], [76, 3, 1, "", "cos"], [76, 3, 1, "", "cosh"], [76, 3, 1, "", "divide"], [76, 3, 1, "", "equal"], [76, 3, 1, "", "erf"], [76, 3, 1, "", "exp"], [76, 3, 1, "", "expm1"], [76, 3, 1, "", "floor"], [76, 3, 1, "", "floor_divide"], [76, 3, 1, "", "greater"], [76, 3, 1, "", "greater_equal"], [76, 3, 1, "", "isfinite"], [76, 3, 1, "", "isinf"], [76, 3, 1, "", "isnan"], [76, 3, 1, "", "less"], [76, 3, 1, "", "less_equal"], [76, 3, 1, "", "log"], [76, 3, 1, "", "log10"], [76, 3, 1, "", "log1p"], [76, 3, 1, "", "log2"], [76, 3, 1, "", "logaddexp"], [76, 3, 1, "", "logical_and"], [76, 3, 1, "", "logical_not"], [76, 3, 1, "", "logical_or"], [76, 3, 1, "", "logical_xor"], [76, 3, 1, "", "multiply"], [76, 3, 1, "", "negative"], [76, 3, 1, "", "not_equal"], [76, 3, 1, "", "positive"], [76, 3, 1, "", "pow"], [76, 3, 1, "", "remainder"], [76, 3, 1, "", "round"], [76, 3, 1, "", "sign"], [76, 3, 1, "", "sin"], [76, 3, 1, "", "sinh"], [76, 3, 1, "", "sqrt"], [76, 3, 1, "", "square"], [76, 3, 1, "", "static_add"], [76, 3, 1, "", "static_divide"], [76, 3, 1, "", "static_multiply"], [76, 3, 1, "", "static_subtract"], [76, 3, 1, "", "static_tan"], [76, 3, 1, "", "subtract"], [76, 3, 1, "", "tan"], [76, 3, 1, "", "tanh"], [76, 3, 1, "", "trunc"]], "ivy.container.general": [[78, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[78, 3, 1, "", "all_equal"], [78, 3, 1, "", "clip_vector_norm"], [78, 3, 1, "", "gather_nd"], [78, 3, 1, "", "static_all_equal"], [78, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[80, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[80, 3, 1, "", "adam_update"], [80, 3, 1, "", "gradient_descent_update"], [80, 3, 1, "", "lamb_update"], [80, 3, 1, "", "lars_update"], [80, 3, 1, "", "optimizer_update"], [80, 3, 1, "", "static_adam_update"], [80, 3, 1, "", "static_gradient_descent_update"], [80, 3, 1, "", "static_lamb_update"], [80, 3, 1, "", "static_lars_update"], [80, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[82, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[84, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[86, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[86, 3, 1, "", "matmul"]], "ivy.container.losses": [[88, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[88, 3, 1, "", "binary_cross_entropy"], [88, 3, 1, "", "cross_entropy"], [88, 3, 1, "", "sparse_cross_entropy"], [88, 3, 1, "", "static_binary_cross_entropy"], [88, 3, 1, "", "static_cross_entropy"], [88, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[90, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[90, 3, 1, "", "clip"], [90, 3, 1, "", "concat"], [90, 3, 1, "", "constant_pad"], [90, 3, 1, "", "expand_dims"], [90, 3, 1, "", "flip"], [90, 3, 1, "", "permute_dims"], [90, 3, 1, "", "repeat"], [90, 3, 1, "", "reshape"], [90, 3, 1, "", "roll"], [90, 3, 1, "", "squeeze"], [90, 3, 1, "", "stack"], [90, 3, 1, "", "static_clip"], [90, 3, 1, "", "static_roll"], [90, 3, 1, "", "swapaxes"], [90, 3, 1, "", "tile"], [90, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[92, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[92, 3, 1, "", "layer_norm"]], "ivy.container.random": [[94, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[94, 3, 1, "", "random_uniform"], [94, 3, 1, "", "static_randint"], [94, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[96, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[98, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[100, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[100, 3, 1, "", "argsort"], [100, 3, 1, "", "sort"], [100, 3, 1, "", "static_argsort"], [100, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[102, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[102, 3, 1, "", "einsum"], [102, 3, 1, "", "max"], [102, 3, 1, "", "mean"], [102, 3, 1, "", "min"], [102, 3, 1, "", "prod"], [102, 3, 1, "", "std"], [102, 3, 1, "", "sum"], [102, 3, 1, "", "var"]], "ivy.container.utility": [[104, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[104, 3, 1, "", "all"], [104, 3, 1, "", "any"]], "ivy.container.wrapping": [[106, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[147, 2, 1, "", "handle_nestable"], [148, 2, 1, "", "handle_out_argument"], [149, 2, 1, "", "infer_device"], [150, 2, 1, "", "infer_dtype"], [151, 2, 1, "", "inputs_to_ivy_arrays"], [152, 2, 1, "", "inputs_to_native_arrays"], [153, 2, 1, "", "outputs_to_ivy_arrays"], [154, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[156, 0, 0, "-", "activations"], [164, 0, 0, "-", "compilation"], [166, 0, 0, "-", "constants"], [167, 0, 0, "-", "creation"], [186, 0, 0, "-", "data_type"], [221, 0, 0, "-", "device"], [271, 0, 0, "-", "elementwise"], [447, 0, 0, "-", "general"], [515, 0, 0, "-", "gradients"], [531, 0, 0, "-", "layers"], [544, 0, 0, "-", "linear_algebra"], [571, 0, 0, "-", "losses"], [581, 0, 0, "-", "manipulation"], [626, 0, 0, "-", "meta"], [630, 0, 0, "-", "nest"], [648, 0, 0, "-", "norms"], [652, 0, 0, "-", "random"], [659, 0, 0, "-", "searching"], [664, 0, 0, "-", "set"], [669, 0, 0, "-", "sorting"], [676, 0, 0, "-", "statistical"], [701, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[157, 2, 1, "", "gelu"], [158, 2, 1, "", "leaky_relu"], [159, 2, 1, "", "relu"], [160, 2, 1, "", "sigmoid"], [161, 2, 1, "", "softmax"], [162, 2, 1, "", "softplus"], [163, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[165, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[166, 5, 1, "", "e"], [166, 5, 1, "", "inf"], [166, 5, 1, "", "nan"], [166, 5, 1, "", "newaxis"], [166, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[168, 2, 1, "", "arange"], [167, 2, 1, "", "array"], [169, 2, 1, "", "asarray"], [170, 2, 1, "", "empty"], [171, 2, 1, "", "empty_like"], [172, 2, 1, "", "eye"], [173, 2, 1, "", "from_dlpack"], [174, 2, 1, "", "full"], [175, 2, 1, "", "full_like"], [176, 2, 1, "", "linspace"], [177, 2, 1, "", "logspace"], [178, 2, 1, "", "meshgrid"], [179, 2, 1, "", "native_array"], [180, 2, 1, "", "ones"], [181, 2, 1, "", "ones_like"], [182, 2, 1, "", "tril"], [183, 2, 1, "", "triu"], [184, 2, 1, "", "zeros"], [185, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[186, 1, 1, "", "DefaultDtype"], [186, 1, 1, "", "DefaultFloatDtype"], [186, 1, 1, "", "DefaultIntDtype"], [190, 2, 1, "", "as_ivy_dtype"], [191, 2, 1, "", "as_native_dtype"], [192, 2, 1, "", "astype"], [193, 2, 1, "", "broadcast_arrays"], [194, 2, 1, "", "broadcast_to"], [197, 2, 1, "", "can_cast"], [198, 2, 1, "", "closest_valid_dtype"], [199, 2, 1, "", "default_dtype"], [200, 2, 1, "", "default_float_dtype"], [201, 2, 1, "", "default_int_dtype"], [202, 2, 1, "", "dtype"], [203, 2, 1, "", "dtype_bits"], [204, 2, 1, "", "finfo"], [205, 2, 1, "", "function_supported_dtypes"], [206, 2, 1, "", "function_unsupported_dtypes"], [207, 2, 1, "", "iinfo"], [208, 2, 1, "", "invalid_dtype"], [209, 2, 1, "", "is_float_dtype"], [210, 2, 1, "", "is_int_dtype"], [211, 2, 1, "", "promote_types"], [212, 2, 1, "", "result_type"], [213, 2, 1, "", "set_default_dtype"], [214, 2, 1, "", "set_default_float_dtype"], [215, 2, 1, "", "set_default_int_dtype"], [216, 2, 1, "", "type_promote_arrays"], [217, 2, 1, "", "unset_default_dtype"], [218, 2, 1, "", "unset_default_float_dtype"], [219, 2, 1, "", "unset_default_int_dtype"], [220, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[186, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[221, 1, 1, "", "DefaultDevice"], [223, 1, 1, "", "DevClonedItem"], [224, 1, 1, "", "DevClonedIter"], [225, 1, 1, "", "DevClonedNest"], [226, 1, 1, "", "DevDistItem"], [227, 1, 1, "", "DevDistIter"], [228, 1, 1, "", "DevDistNest"], [221, 1, 1, "", "DevManager"], [230, 1, 1, "", "DevMapper"], [231, 1, 1, "", "DevMapperMultiProc"], [221, 1, 1, "", "MultiDev"], [233, 1, 1, "", "MultiDevItem"], [234, 1, 1, "", "MultiDevIter"], [235, 1, 1, "", "MultiDevNest"], [236, 1, 1, "", "Profiler"], [237, 2, 1, "", "as_ivy_dev"], [238, 2, 1, "", "as_native_dev"], [239, 2, 1, "", "clear_mem_on_dev"], [240, 2, 1, "", "default_device"], [241, 2, 1, "", "dev"], [242, 2, 1, "", "dev_clone"], [243, 2, 1, "", "dev_clone_array"], [244, 2, 1, "", "dev_clone_iter"], [245, 2, 1, "", "dev_clone_nest"], [246, 2, 1, "", "dev_dist"], [247, 2, 1, "", "dev_dist_array"], [248, 2, 1, "", "dev_dist_iter"], [249, 2, 1, "", "dev_dist_nest"], [250, 2, 1, "", "dev_unify"], [251, 2, 1, "", "dev_unify_array"], [252, 2, 1, "", "dev_unify_iter"], [253, 2, 1, "", "dev_unify_nest"], [254, 2, 1, "", "dev_util"], [255, 2, 1, "", "get_all_ivy_arrays_on_dev"], [256, 2, 1, "", "gpu_is_available"], [257, 2, 1, "", "num_cpu_cores"], [258, 2, 1, "", "num_gpus"], [259, 2, 1, "", "num_ivy_arrays_on_dev"], [260, 2, 1, "", "percent_used_mem_on_dev"], [261, 2, 1, "", "print_all_ivy_arrays_on_dev"], [262, 2, 1, "", "set_default_device"], [263, 2, 1, "", "set_split_factor"], [264, 2, 1, "", "split_factor"], [265, 2, 1, "", "split_func_call"], [266, 2, 1, "", "to_device"], [267, 2, 1, "", "total_mem_on_dev"], [268, 2, 1, "", "tpu_is_available"], [269, 2, 1, "", "unset_default_device"], [270, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[221, 3, 1, "", "__enter__"], [221, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[221, 3, 1, "", "__init__"], [221, 3, 1, "", "da_tune_step"], [221, 4, 1, "", "dim_size"], [221, 3, 1, "", "ds_tune_step"], [221, 3, 1, "", "map"], [221, 3, 1, "", "repeated_config_check"], [221, 4, 1, "", "tune_step"], [221, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[230, 3, 1, "", "__init__"], [230, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[231, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[221, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[233, 3, 1, "", "__init__"], [233, 3, 1, "", "items"], [233, 3, 1, "", "keys"], [233, 4, 1, "", "shape"], [233, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[234, 3, 1, "", "__init__"], [234, 3, 1, "", "at_dev"], [234, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[235, 3, 1, "", "__init__"], [235, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[236, 3, 1, "", "__init__"], [236, 3, 1, "", "start"], [236, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[274, 2, 1, "", "abs"], [275, 2, 1, "", "acos"], [325, 2, 1, "", "acosh"], [281, 2, 1, "", "add"], [286, 2, 1, "", "asin"], [289, 2, 1, "", "asinh"], [290, 2, 1, "", "atan"], [295, 2, 1, "", "atan2"], [443, 2, 1, "", "atanh"], [301, 2, 1, "", "bitwise_and"], [304, 2, 1, "", "bitwise_invert"], [307, 2, 1, "", "bitwise_left_shift"], [310, 2, 1, "", "bitwise_or"], [313, 2, 1, "", "bitwise_right_shift"], [316, 2, 1, "", "bitwise_xor"], [319, 2, 1, "", "ceil"], [320, 2, 1, "", "cos"], [323, 2, 1, "", "cosh"], [326, 2, 1, "", "divide"], [329, 2, 1, "", "equal"], [335, 2, 1, "", "erf"], [336, 2, 1, "", "exp"], [341, 2, 1, "", "expm1"], [342, 2, 1, "", "floor"], [347, 2, 1, "", "floor_divide"], [348, 2, 1, "", "greater"], [353, 2, 1, "", "greater_equal"], [356, 2, 1, "", "isfinite"], [359, 2, 1, "", "isinf"], [362, 2, 1, "", "isnan"], [365, 2, 1, "", "less"], [368, 2, 1, "", "less_equal"], [371, 2, 1, "", "log"], [374, 2, 1, "", "log10"], [377, 2, 1, "", "log1p"], [380, 2, 1, "", "log2"], [383, 2, 1, "", "logaddexp"], [386, 2, 1, "", "logical_and"], [389, 2, 1, "", "logical_not"], [392, 2, 1, "", "logical_or"], [395, 2, 1, "", "logical_xor"], [396, 2, 1, "", "maximum"], [397, 2, 1, "", "minimum"], [400, 2, 1, "", "multiply"], [403, 2, 1, "", "negative"], [406, 2, 1, "", "not_equal"], [409, 2, 1, "", "positive"], [412, 2, 1, "", "pow"], [415, 2, 1, "", "remainder"], [418, 2, 1, "", "round"], [421, 2, 1, "", "sign"], [425, 2, 1, "", "sin"], [428, 2, 1, "", "sinh"], [431, 2, 1, "", "sqrt"], [434, 2, 1, "", "square"], [437, 2, 1, "", "subtract"], [438, 2, 1, "", "tan"], [441, 2, 1, "", "tanh"], [446, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[450, 2, 1, "", "all_equal"], [451, 2, 1, "", "arg_info"], [452, 2, 1, "", "arg_names"], [453, 2, 1, "", "array_equal"], [454, 2, 1, "", "arrays_equal"], [455, 2, 1, "", "assert_supports_inplace"], [456, 2, 1, "", "cache_fn"], [457, 2, 1, "", "clip_matrix_norm"], [458, 2, 1, "", "clip_vector_norm"], [459, 2, 1, "", "container_types"], [460, 2, 1, "", "copy_array"], [461, 2, 1, "", "cumprod"], [462, 2, 1, "", "cumsum"], [463, 2, 1, "", "current_backend_str"], [464, 2, 1, "", "default"], [465, 2, 1, "", "einops_rearrange"], [466, 2, 1, "", "einops_reduce"], [467, 2, 1, "", "einops_repeat"], [468, 2, 1, "", "exists"], [469, 2, 1, "", "floormod"], [470, 2, 1, "", "fourier_encode"], [471, 2, 1, "", "gather"], [474, 2, 1, "", "gather_nd"], [475, 2, 1, "", "get_all_arrays_in_memory"], [476, 2, 1, "", "get_min_base"], [477, 2, 1, "", "get_min_denominator"], [478, 2, 1, "", "get_num_dims"], [479, 2, 1, "", "get_referrers_recursive"], [480, 2, 1, "", "has_nans"], [481, 2, 1, "", "indices_where"], [482, 2, 1, "", "inplace_arrays_supported"], [483, 2, 1, "", "inplace_decrement"], [484, 2, 1, "", "inplace_increment"], [485, 2, 1, "", "inplace_update"], [486, 2, 1, "", "inplace_variables_supported"], [487, 2, 1, "", "is_array"], [488, 2, 1, "", "is_ivy_array"], [489, 2, 1, "", "is_ivy_container"], [490, 2, 1, "", "is_native_array"], [491, 2, 1, "", "match_kwargs"], [492, 2, 1, "", "multiprocessing"], [493, 2, 1, "", "num_arrays_in_memory"], [494, 2, 1, "", "one_hot"], [495, 2, 1, "", "print_all_arrays_in_memory"], [496, 2, 1, "", "queue_timeout"], [497, 2, 1, "", "scatter_flat"], [498, 2, 1, "", "scatter_nd"], [499, 2, 1, "", "set_min_base"], [500, 2, 1, "", "set_min_denominator"], [501, 2, 1, "", "set_queue_timeout"], [502, 2, 1, "", "set_tmp_dir"], [503, 2, 1, "", "shape"], [504, 2, 1, "", "shape_to_tuple"], [505, 2, 1, "", "stable_divide"], [506, 2, 1, "", "stable_pow"], [507, 2, 1, "", "supports_inplace"], [508, 2, 1, "", "tmp_dir"], [509, 2, 1, "", "to_list"], [510, 2, 1, "", "to_numpy"], [511, 2, 1, "", "to_scalar"], [512, 2, 1, "", "try_else_none"], [513, 2, 1, "", "unstack"], [514, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[515, 1, 1, "", "GradientTracking"], [517, 2, 1, "", "adam_step"], [518, 2, 1, "", "adam_update"], [519, 2, 1, "", "execute_with_gradients"], [520, 2, 1, "", "gradient_descent_update"], [521, 2, 1, "", "is_variable"], [522, 2, 1, "", "lamb_update"], [523, 2, 1, "", "lars_update"], [524, 2, 1, "", "optimizer_update"], [525, 2, 1, "", "set_with_grads"], [526, 2, 1, "", "stop_gradient"], [527, 2, 1, "", "unset_with_grads"], [528, 2, 1, "", "variable"], [529, 2, 1, "", "variable_data"], [530, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[515, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[532, 2, 1, "", "conv1d"], [533, 2, 1, "", "conv1d_transpose"], [534, 2, 1, "", "conv2d"], [535, 2, 1, "", "conv2d_transpose"], [536, 2, 1, "", "conv3d"], [537, 2, 1, "", "conv3d_transpose"], [538, 2, 1, "", "depthwise_conv2d"], [539, 2, 1, "", "dropout"], [540, 2, 1, "", "linear"], [541, 2, 1, "", "lstm_update"], [542, 2, 1, "", "multi_head_attention"], [543, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[545, 2, 1, "", "cholesky"], [546, 2, 1, "", "cross"], [547, 2, 1, "", "det"], [548, 2, 1, "", "diagonal"], [549, 2, 1, "", "eigh"], [550, 2, 1, "", "eigvalsh"], [551, 2, 1, "", "inv"], [554, 2, 1, "", "matmul"], [555, 2, 1, "", "matrix_norm"], [556, 2, 1, "", "matrix_power"], [557, 2, 1, "", "matrix_rank"], [558, 2, 1, "", "matrix_transpose"], [559, 2, 1, "", "outer"], [560, 2, 1, "", "pinv"], [561, 2, 1, "", "qr"], [562, 2, 1, "", "slogdet"], [563, 2, 1, "", "solve"], [564, 2, 1, "", "svd"], [565, 2, 1, "", "svdvals"], [566, 2, 1, "", "tensordot"], [567, 2, 1, "", "trace"], [568, 2, 1, "", "vecdot"], [569, 2, 1, "", "vector_norm"], [570, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[574, 2, 1, "", "binary_cross_entropy"], [577, 2, 1, "", "cross_entropy"], [580, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[584, 2, 1, "", "clip"], [588, 2, 1, "", "concat"], [591, 2, 1, "", "constant_pad"], [594, 2, 1, "", "expand_dims"], [597, 2, 1, "", "flip"], [600, 2, 1, "", "permute_dims"], [603, 2, 1, "", "repeat"], [606, 2, 1, "", "reshape"], [609, 2, 1, "", "roll"], [610, 2, 1, "", "split"], [613, 2, 1, "", "squeeze"], [616, 2, 1, "", "stack"], [619, 2, 1, "", "swapaxes"], [622, 2, 1, "", "tile"], [625, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[627, 2, 1, "", "fomaml_step"], [628, 2, 1, "", "maml_step"], [629, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[631, 2, 1, "", "all_nested_indices"], [632, 2, 1, "", "copy_nest"], [633, 2, 1, "", "index_nest"], [634, 2, 1, "", "insert_into_nest_at_index"], [635, 2, 1, "", "insert_into_nest_at_indices"], [636, 2, 1, "", "map"], [637, 2, 1, "", "map_nest_at_index"], [638, 2, 1, "", "map_nest_at_indices"], [639, 2, 1, "", "multi_index_nest"], [640, 2, 1, "", "nested_any"], [641, 2, 1, "", "nested_indices_where"], [642, 2, 1, "", "nested_map"], [643, 2, 1, "", "nested_multi_map"], [644, 2, 1, "", "prune_nest_at_index"], [645, 2, 1, "", "prune_nest_at_indices"], [646, 2, 1, "", "set_nest_at_index"], [647, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[651, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[653, 2, 1, "", "multinomial"], [654, 2, 1, "", "randint"], [655, 2, 1, "", "random_normal"], [656, 2, 1, "", "random_uniform"], [657, 2, 1, "", "seed"], [658, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[660, 2, 1, "", "argmax"], [661, 2, 1, "", "argmin"], [662, 2, 1, "", "nonzero"], [663, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[665, 2, 1, "", "unique_all"], [666, 2, 1, "", "unique_counts"], [667, 2, 1, "", "unique_inverse"], [668, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[672, 2, 1, "", "argsort"], [675, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[697, 2, 1, "", "einsum"], [682, 2, 1, "", "max"], [685, 2, 1, "", "mean"], [688, 2, 1, "", "min"], [691, 2, 1, "", "prod"], [694, 2, 1, "", "std"], [695, 2, 1, "", "sum"], [700, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[704, 2, 1, "", "all"], [707, 2, 1, "", "any"]], "ivy.inspection": [[712, 2, 1, "", "add_array_specs"], [713, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[715, 0, 0, "-", "activations"], [718, 0, 0, "-", "converters"], [720, 0, 0, "-", "initializers"], [729, 0, 0, "-", "layers"], [741, 0, 0, "-", "module"], [743, 0, 0, "-", "norms"], [745, 0, 0, "-", "optimizers"], [751, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[716, 1, 1, "", "GEGLU"], [717, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[716, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[717, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[719, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[720, 1, 1, "", "Constant"], [722, 1, 1, "", "FirstLayerSiren"], [723, 1, 1, "", "GlorotUniform"], [720, 1, 1, "", "KaimingNormal"], [725, 1, 1, "", "Ones"], [726, 1, 1, "", "Siren"], [720, 1, 1, "", "Uniform"], [728, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[720, 3, 1, "", "__init__"], [720, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[722, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[723, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[720, 3, 1, "", "__init__"], [720, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[725, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[726, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[720, 3, 1, "", "__init__"], [720, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[728, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[730, 1, 1, "", "Conv1D"], [731, 1, 1, "", "Conv1DTranspose"], [732, 1, 1, "", "Conv2D"], [733, 1, 1, "", "Conv2DTranspose"], [734, 1, 1, "", "Conv3D"], [735, 1, 1, "", "Conv3DTranspose"], [736, 1, 1, "", "DepthwiseConv2D"], [737, 1, 1, "", "Dropout"], [738, 1, 1, "", "LSTM"], [739, 1, 1, "", "Linear"], [740, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[730, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[731, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[732, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[733, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[734, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[735, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[736, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[737, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[738, 3, 1, "", "__init__"], [738, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[739, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[740, 3, 1, "", "__init__"]], "ivy.stateful.module": [[742, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[742, 3, 1, "", "__init__"], [742, 3, 1, "", "build"], [742, 4, 1, "", "build_mode"], [742, 4, 1, "", "built"], [742, 3, 1, "", "check_submod_rets"], [742, 3, 1, "", "get_mod_key"], [742, 3, 1, "", "mod_depth"], [742, 3, 1, "", "mod_height"], [742, 3, 1, "", "mod_with_top_mod_key_chain"], [742, 3, 1, "", "save_weights"], [742, 3, 1, "", "show_mod_in_top_mod"], [742, 3, 1, "", "show_structure"], [742, 3, 1, "", "show_v_in_top_v"], [742, 3, 1, "", "sub_mods"], [742, 3, 1, "", "track_submod_call_order"], [742, 3, 1, "", "track_submod_rets"], [742, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[744, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[744, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[746, 1, 1, "", "Adam"], [747, 1, 1, "", "LAMB"], [748, 1, 1, "", "LARS"], [749, 1, 1, "", "Optimizer"], [750, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[746, 3, 1, "", "__init__"], [746, 3, 1, "", "set_state"], [746, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[747, 3, 1, "", "__init__"], [747, 3, 1, "", "set_state"], [747, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[748, 3, 1, "", "__init__"], [748, 3, 1, "", "set_state"], [748, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[749, 3, 1, "", "__init__"], [749, 3, 1, "", "set_state"], [749, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[750, 3, 1, "", "__init__"], [750, 3, 1, "", "set_state"], [750, 4, 1, "", "state"]], "ivy.stateful.sequential": [[752, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[752, 3, 1, "", "__init__"]], "ivy.verbosity": [[755, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 62, 156, 715], "arraywithactiv": 1, "convers": 2, "args_to_ivi": 3, "args_to_n": 4, "to_ivi": 5, "to_n": 6, "creation": [7, 69, 167], "arraywithcr": 8, "data": [9, 71, 117, 123, 131, 145, 186, 664, 665, 666, 668], "type": [9, 71, 118, 123, 145, 186], "arraywithdatatyp": 10, "devic": [11, 73, 124, 126, 221], "arraywithdevic": 12, "elementwis": [13, 75, 271], "arraywithelementwis": 14, "gener": [15, 77, 117, 447], "arraywithgener": 16, "gradient": [17, 79, 515], "arraywithgradi": 18, "imag": [19, 81], "arraywithimag": 20, "layer": [21, 83, 531, 729], "arraywithlay": 22, "linear": [23, 85, 540, 544, 739], "algebra": [23, 85, 544], "arraywithlinearalgebra": 24, "loss": [25, 87, 571], "arraywithloss": 26, "manipul": [27, 89, 581], "arraywithmanipul": 28, "norm": [29, 91, 648, 743], "arraywithnorm": 30, "random": [31, 93, 652], "arraywithrandom": 32, "search": [33, 95, 659], "arraywithsearch": 34, "set": [35, 97, 108, 119, 664], "arraywithset": 36, "sort": [37, 99, 669, 673, 674, 675], "arraywithsort": 38, "statist": [39, 101, 676], "arraywithstatist": 40, "util": [41, 103, 701], "arraywithutil": 42, "wrap": [43, 105, 120], "add_ivy_array_instance_method": 44, "backend": [45, 113, 119, 128, 145], "handler": [45, 128], "choose_random_backend": 47, "clear_backend_stack": 48, "current_backend": 49, "get_backend": 50, "set_backend": 51, "try_import_ivy_jax": 52, "try_import_ivy_mxnet": 53, "try_import_ivy_numpi": 54, "try_import_ivy_tf": 55, "try_import_ivy_torch": 56, "unset_backend": 57, "background": [58, 708], "ml": 59, "explos": 59, "standard": 60, "skeptic": 60, "complimentari": 60, "vs": [60, 145], "competit": 60, "do": 60, "work": [60, 111], "The": [60, 109, 130, 145], "arrai": [60, 116, 121, 126, 130, 196, 273, 276, 279, 282, 285, 288, 291, 294, 297, 300, 303, 306, 309, 312, 315, 318, 321, 324, 327, 330, 333, 337, 340, 343, 346, 349, 352, 355, 358, 361, 364, 367, 370, 373, 376, 379, 382, 385, 388, 391, 394, 399, 402, 405, 408, 411, 414, 417, 420, 423, 427, 430, 433, 436, 439, 442, 445, 449, 473, 553, 573, 576, 579, 583, 587, 590, 593, 596, 599, 602, 605, 608, 612, 615, 618, 621, 624, 650, 671, 674, 678, 681, 684, 687, 690, 693, 696, 699, 703, 706], "api": [60, 110, 113, 116, 122, 128, 130, 132, 133], "why": 61, "unifi": [61, 130], "No": [61, 108], "more": 61, "re": 61, "implement": 61, "infinit": 61, "shelf": 61, "life": 61, "containerwithactiv": 63, "base": 64, "containerbas": 65, "contain": [66, 67, 122, 131, 334, 424, 585], "multidevcontain": 68, "containerwithcr": 70, "containerwithdatatyp": 72, "containerwithdevic": 74, "containerwithelementwis": 76, "containerwithgener": 78, "containerwithgradi": 80, "containerwithimag": 82, "containerwithlay": 84, "containerwithlinearalgebra": 86, "containerwithloss": 88, "containerwithmanipul": 90, "containerwithnorm": 92, "containerwithrandom": 94, "containerwithsearch": 96, "containerwithset": 98, "containerwithsort": 100, "containerwithstatist": 102, "containerwithutil": 104, "add_ivy_container_instance_method": 106, "contribut": [107, 708], "up": 108, "clone": 108, "ivi": [108, 113, 115, 117, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144], "pycharm": 108, "virtual": 108, "environ": 108, "docker": [108, 109, 111], "us": [108, 111, 131], "miniconda": [108, 111], "venv": [108, 111], "interpret": 108, "window": 108, "maco": 108, "ubuntu": 108, "github": 108, "codespac": 108, "pre": 108, "commit": [108, 109], "basic": 109, "get": 109, "help": 109, "todo": 109, "list": 109, "issu": 109, "manag": 109, "your": 109, "fork": 109, "who": 109, "To": 109, "ask": 109, "With": 109, "command": 109, "line": 109, "browser": 109, "pull": 109, "request": 109, "small": 109, "often": 109, "run": 109, "test": [109, 116, 117], "local": 109, "open": 110, "task": 110, "function": [110, 118, 120, 122, 123, 124, 126, 128, 133, 145, 197, 274, 277, 280, 283, 286, 289, 292, 295, 298, 301, 304, 307, 310, 313, 316, 319, 322, 325, 328, 331, 335, 338, 341, 344, 347, 350, 353, 356, 359, 362, 365, 368, 371, 374, 377, 380, 383, 386, 389, 392, 395, 400, 403, 406, 409, 412, 415, 418, 421, 425, 428, 431, 434, 437, 440, 443, 446, 450, 474, 554, 574, 577, 580, 584, 588, 591, 594, 597, 600, 603, 606, 609, 613, 616, 619, 622, 625, 651, 672, 675, 679, 682, 685, 688, 691, 694, 697, 700, 704, 707], "format": 110, "frontend": [110, 133], "build": [111, 128], "doc": 111, "dockerless": 111, "document": 111, "pipelin": [111, 145], "make_doc": 111, "sh": 111, "entrypoint": 111, "_make_doc": 111, "generate_src_rst_fil": 111, "py": 111, "sphinx": 111, "correct_built_html_fil": 111, "remove_fil": 111, "deep": 112, "dive": 112, "navig": 113, "code": 113, "categor": 113, "submodul": 113, "design": [113, 127, 708], "docstr": [114, 115], "exampl": [115, 126], "tan": [115, 438, 439], "roll": [115, 607, 608, 609], "add": [115, 281, 282], "hypothesi": 117, "self": 117, "consist": 117, "explicit": 117, "test_array_funct": 117, "primari": 118, "composit": 118, "mix": 118, "standalon": 118, "nestabl": [118, 122, 126], "conveni": 118, "nativ": 121, "handl": 121, "instanc": [122, 130], "method": [122, 130, 131], "static": 122, "special": 122, "modul": [123, 124, 132, 741, 742], "argument": [123, 124, 125, 126], "other": [123, 124], "inplac": 125, "updat": 125, "out": [125, 126], "copi": 125, "dtype": [126, 202], "number": 126, "oper": [126, 130, 145], "integ": 126, "sequenc": 126, "block": 128, "framework": [128, 129], "graph": [128, 133], "compil": [128, 133, 164, 165], "class": 130, "monkei": 130, "patch": 130, "construct": 131, "represent": 131, "recurs": 131, "built": 131, "ins": 131, "access": 131, "save": 131, "load": 131, "comparison": 131, "custom": [131, 145], "case": 131, "compartment": 131, "configur": 131, "network": [131, 133], "weight": 131, "state": [132, 145], "initi": [132, 720], "optim": [132, 745, 749], "transpil": 133, "role": 133, "convert": [133, 718], "model": [133, 140, 145], "builder": 135, "ecosystem": 136, "gym": [137, 144], "mech": 138, "memori": [139, 144], "robot": [141, 144], "vision": [142, 144], "extens": [143, 708], "appli": 144, "librari": 144, "mechan": 144, "faq": 145, "mana": 145, "version": 145, "dynam": 145, "size": 145, "shape": [145, 503, 664, 665, 666, 668], "check": 145, "control": 145, "flow": 145, "auto": 145, "differenti": 145, "replica": 145, "parallel": 145, "support": 145, "altern": 145, "structur": 145, "func": 146, "wrapper": 146, "handle_nest": 147, "handle_out_argu": 148, "infer_devic": 149, "infer_dtyp": 150, "inputs_to_ivy_arrai": 151, "inputs_to_native_arrai": 152, "outputs_to_ivy_arrai": 153, "to_native_arrays_and_back": 154, "gelu": [157, 717], "leaky_relu": 158, "relu": 159, "sigmoid": 160, "softmax": 161, "softplu": 162, "tanh": [163, 441, 442], "constant": 166, "note": [167, 173], "arang": 168, "asarrai": 169, "empti": 170, "empty_lik": 171, "ey": 172, "from_dlpack": 173, "full": 174, "full_lik": 175, "linspac": 176, "logspac": 177, "meshgrid": 178, "native_arrai": 179, "ones": 180, "ones_lik": 181, "tril": 182, "triu": 183, "zero": [184, 728], "zeros_lik": 185, "as_ivy_dtyp": 190, "as_native_dtyp": 191, "astyp": 192, "broadcast_arrai": 193, "broadcast_to": 194, "can_cast": [195, 196, 197], "closest_valid_dtyp": 198, "default_dtyp": 199, "default_float_dtyp": 200, "default_int_dtyp": 201, "dtype_bit": 203, "finfo": 204, "function_supported_dtyp": 205, "function_unsupported_dtyp": 206, "iinfo": 207, "invalid_dtyp": 208, "is_float_dtyp": 209, "is_int_dtyp": 210, "promote_typ": 211, "result_typ": 212, "set_default_dtyp": 213, "set_default_float_dtyp": 214, "set_default_int_dtyp": 215, "type_promote_arrai": 216, "unset_default_dtyp": 217, "unset_default_float_dtyp": 218, "unset_default_int_dtyp": 219, "valid_dtyp": 220, "devcloneditem": 223, "devclonedit": 224, "devclonednest": 225, "devdistitem": 226, "devdistit": 227, "devdistnest": 228, "devmapp": 230, "devmappermultiproc": 231, "multidevitem": 233, "multidevit": 234, "multidevnest": 235, "profil": 236, "as_ivy_dev": 237, "as_native_dev": 238, "clear_mem_on_dev": 239, "default_devic": 240, "dev": 241, "dev_clon": 242, "dev_clone_arrai": 243, "dev_clone_it": 244, "dev_clone_nest": 245, "dev_dist": 246, "dev_dist_arrai": 247, "dev_dist_it": 248, "dev_dist_nest": 249, "dev_unifi": 250, "dev_unify_arrai": 251, "dev_unify_it": 252, "dev_unify_nest": 253, "dev_util": 254, "get_all_ivy_arrays_on_dev": 255, "gpu_is_avail": 256, "num_cpu_cor": 257, "num_gpu": 258, "num_ivy_arrays_on_dev": 259, "percent_used_mem_on_dev": 260, "print_all_ivy_arrays_on_dev": 261, "set_default_devic": 262, "set_split_factor": 263, "split_factor": 264, "split_func_cal": 265, "to_devic": 266, "total_mem_on_dev": 267, "tpu_is_avail": 268, "unset_default_devic": 269, "used_mem_on_dev": 270, "ab": [272, 273, 274], "aco": [275, 276], "acosh": [277, 278, 279, 280, 322, 325], "logaddexp": [283, 338, 381, 382, 383], "asin": [284, 285, 286], "asinh": [287, 288, 289], "atan": [290, 291], "atanh": [292, 296, 297, 298, 440, 443], "atan2": [293, 294, 295], "bitwise_and": [299, 300, 301], "bitwise_invert": [302, 303, 304], "bitwise_left_shift": [305, 306, 307], "bitwise_or": [308, 309, 310], "bitwise_right_shift": [311, 312, 313], "bitwise_xor": [314, 315, 316], "ceil": [317, 318, 319], "co": [320, 321], "cosh": [323, 324], "divid": [326, 327], "floor_divid": [328, 344, 345, 346, 347], "equal": [329, 330], "greater_equ": [331, 350, 351, 352, 353], "erf": [332, 333, 334, 335], "exp": [336, 337], "expm1": [339, 340, 341], "floor": [342, 343], "greater": [348, 349], "isfinit": [354, 355, 356], "isinf": [357, 358, 359], "isnan": [360, 361, 362], "less": [363, 364, 365], "less_equ": [366, 367, 368], "log": [369, 370, 371], "log10": [372, 373, 374], "log1p": [375, 376, 377], "log2": [378, 379, 380], "logical_and": [384, 385, 386], "logical_not": [387, 388, 389], "logical_or": [390, 391, 392], "logical_xor": [393, 394, 395], "maximum": 396, "minimum": 397, "multipli": [398, 399, 400], "neg": [401, 402, 403], "not_equ": [404, 405, 406], "posit": [407, 408, 409], "pow": [410, 411, 412], "remaind": [413, 414, 415], "round": [416, 417, 418], "sign": [419, 420, 421], "sin": [422, 423, 424, 425], "sinh": [426, 427, 428], "sqrt": [429, 430, 431], "squar": [432, 433, 434], "subtract": [435, 436, 437], "trunc": [444, 445, 446], "all_equ": [448, 449, 450], "arg_info": 451, "arg_nam": 452, "array_equ": 453, "arrays_equ": 454, "assert_supports_inplac": 455, "cache_fn": 456, "clip_matrix_norm": 457, "clip_vector_norm": 458, "container_typ": 459, "copy_arrai": 460, "cumprod": 461, "cumsum": 462, "current_backend_str": 463, "default": 464, "einops_rearrang": 465, "einops_reduc": 466, "einops_repeat": 467, "exist": 468, "floormod": 469, "fourier_encod": 470, "gather": 471, "gather_nd": [472, 473, 474], "get_all_arrays_in_memori": 475, "get_min_bas": 476, "get_min_denomin": 477, "get_num_dim": 478, "get_referrers_recurs": 479, "has_nan": 480, "indices_wher": 481, "inplace_arrays_support": 482, "inplace_decr": 483, "inplace_incr": 484, "inplace_upd": 485, "inplace_variables_support": 486, "is_arrai": 487, "is_ivy_arrai": 488, "is_ivy_contain": 489, "is_native_arrai": 490, "match_kwarg": 491, "multiprocess": 492, "num_arrays_in_memori": 493, "one_hot": 494, "print_all_arrays_in_memori": 495, "queue_timeout": 496, "scatter_flat": 497, "scatter_nd": 498, "set_min_bas": 499, "set_min_denomin": 500, "set_queue_timeout": 501, "set_tmp_dir": 502, "shape_to_tupl": 504, "stable_divid": 505, "stable_pow": 506, "supports_inplac": 507, "tmp_dir": 508, "to_list": 509, "to_numpi": 510, "to_scalar": 511, "try_else_non": 512, "unstack": 513, "value_is_nan": 514, "adam_step": 517, "adam_upd": 518, "execute_with_gradi": 519, "gradient_descent_upd": 520, "is_vari": 521, "lamb_upd": 522, "lars_upd": 523, "optimizer_upd": 524, "set_with_grad": 525, "stop_gradi": 526, "unset_with_grad": 527, "variabl": 528, "variable_data": 529, "with_grad": 530, "conv1d": [532, 730], "conv1d_transpos": 533, "conv2d": [534, 732], "conv2d_transpos": 535, "conv3d": [536, 734], "conv3d_transpos": 537, "depthwise_conv2d": 538, "dropout": [539, 737], "lstm_updat": 541, "multi_head_attent": 542, "scaled_dot_product_attent": 543, "choleski": 545, "cross": 546, "det": 547, "diagon": 548, "eigh": 549, "eigvalsh": 550, "inv": 551, "matmul": [552, 553, 554], "matrix_norm": 555, "matrix_pow": 556, "matrix_rank": 557, "matrix_transpos": 558, "outer": 559, "pinv": 560, "qr": 561, "slogdet": 562, "solv": 563, "svd": 564, "svdval": 565, "tensordot": 566, "trace": 567, "vecdot": 568, "vector_norm": 569, "vector_to_skew_symmetric_matrix": 570, "binary_cross_entropi": [572, 573, 574], "cross_entropi": [575, 576, 577], "sparse_cross_entropi": [578, 579, 580], "clip": [582, 583, 584], "static_clip": 585, "concat": [586, 587, 588], "constant_pad": [589, 590, 591], "expand_dim": [592, 593, 594], "flip": [595, 596, 597], "permute_dim": [598, 599, 600], "repeat": [601, 602, 603], "reshap": [604, 605, 606], "split": 610, "squeez": [611, 612, 613], "stack": [614, 615, 616], "swapax": [617, 618, 619], "tile": [620, 621, 622], "zero_pad": [623, 624, 625], "meta": 626, "fomaml_step": 627, "maml_step": 628, "reptile_step": 629, "nest": 630, "all_nested_indic": 631, "copy_nest": 632, "index_nest": 633, "insert_into_nest_at_index": 634, "insert_into_nest_at_indic": 635, "map": 636, "map_nest_at_index": 637, "map_nest_at_indic": 638, "multi_index_nest": 639, "nested_ani": 640, "nested_indices_wher": 641, "nested_map": 642, "nested_multi_map": 643, "prune_nest_at_index": 644, "prune_nest_at_indic": 645, "set_nest_at_index": 646, "set_nest_at_indic": 647, "layer_norm": [649, 650, 651], "multinomi": 653, "randint": 654, "random_norm": 655, "random_uniform": 656, "seed": 657, "shuffl": 658, "argmax": 660, "argmin": 661, "nonzero": 662, "where": 663, "depend": [664, 665, 666, 668], "output": [664, 665, 666, 668], "unique_al": 665, "unique_count": 666, "unique_invers": 667, "unique_valu": 668, "argsort": [670, 671, 672], "einsum": [677, 678, 679, 697], "max": [680, 681, 682], "mean": [683, 684, 685], "min": [686, 687, 688], "prod": [689, 690, 691], "std": [692, 693, 694], "sum": [695, 696], "var": [698, 699, 700], "all": [702, 703, 704], "ani": [705, 706, 707], "content": 708, "overview": 708, "quick": 708, "start": 708, "roadmap": [708, 714], "citat": 708, "inspect": 711, "add_array_spec": 712, "fn_array_spec": 713, "geglu": 716, "to_ivy_modul": 719, "firstlayersiren": 722, "glorotuniform": 723, "Ones": 725, "siren": 726, "conv1dtranspos": 731, "conv2dtranspos": 733, "conv3dtranspos": 735, "depthwiseconv2d": 736, "lstm": 738, "multiheadattent": 740, "layernorm": 744, "adam": 746, "lamb": 747, "lar": 748, "sgd": 750, "sequenti": [751, 752], "verbos": 754, "cprint": 755}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})