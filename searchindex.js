Search.setIndex({"docnames": ["backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "data_classes", "data_classes/array", "data_classes/array/activations", "data_classes/array/activations/ArrayWithActivations", "data_classes/array/conversions", "data_classes/array/conversions/args_to_ivy", "data_classes/array/conversions/args_to_native", "data_classes/array/conversions/to_ivy", "data_classes/array/conversions/to_native", "data_classes/array/creation", "data_classes/array/creation/ArrayWithCreation", "data_classes/array/data_type", "data_classes/array/data_type/ArrayWithDataTypes", "data_classes/array/device", "data_classes/array/device/ArrayWithDevice", "data_classes/array/elementwise", "data_classes/array/elementwise/ArrayWithElementwise", "data_classes/array/general", "data_classes/array/general/ArrayWithGeneral", "data_classes/array/gradients", "data_classes/array/gradients/ArrayWithGradients", "data_classes/array/image", "data_classes/array/image/ArrayWithImage", "data_classes/array/layers", "data_classes/array/layers/ArrayWithLayers", "data_classes/array/linear_algebra", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra", "data_classes/array/losses", "data_classes/array/losses/ArrayWithLosses", "data_classes/array/manipulation", "data_classes/array/manipulation/ArrayWithManipulation", "data_classes/array/norms", "data_classes/array/norms/ArrayWithNorms", "data_classes/array/random", "data_classes/array/random/ArrayWithRandom", "data_classes/array/searching", "data_classes/array/searching/ArrayWithSearching", "data_classes/array/set", "data_classes/array/set/ArrayWithSet", "data_classes/array/sorting", "data_classes/array/sorting/ArrayWithSorting", "data_classes/array/statistical", "data_classes/array/statistical/ArrayWithStatistical", "data_classes/array/utility", "data_classes/array/utility/ArrayWithUtility", "data_classes/array/wrapping", "data_classes/array/wrapping/add_ivy_array_instance_methods", "data_classes/container", "data_classes/container/activations", "data_classes/container/activations/ContainerWithActivations", "data_classes/container/base", "data_classes/container/base/ContainerBase", "data_classes/container/container", "data_classes/container/container/Container", "data_classes/container/container/MultiDevContainer", "data_classes/container/creation", "data_classes/container/creation/ContainerWithCreation", "data_classes/container/data_type", "data_classes/container/data_type/ContainerWithDataTypes", "data_classes/container/device", "data_classes/container/device/ContainerWithDevice", "data_classes/container/elementwise", "data_classes/container/elementwise/ContainerWithElementwise", "data_classes/container/general", "data_classes/container/general/ContainerWithGeneral", "data_classes/container/gradients", "data_classes/container/gradients/ContainerWithGradients", "data_classes/container/image", "data_classes/container/image/ContainerWithImage", "data_classes/container/layers", "data_classes/container/layers/ContainerWithLayers", "data_classes/container/linear_algebra", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra", "data_classes/container/losses", "data_classes/container/losses/ContainerWithLosses", "data_classes/container/manipulation", "data_classes/container/manipulation/ContainerWithManipulation", "data_classes/container/norms", "data_classes/container/norms/ContainerWithNorms", "data_classes/container/random", "data_classes/container/random/ContainerWithRandom", "data_classes/container/searching", "data_classes/container/searching/ContainerWithSearching", "data_classes/container/set", "data_classes/container/set/ContainerWithSet", "data_classes/container/sorting", "data_classes/container/sorting/ContainerWithSorting", "data_classes/container/statistical", "data_classes/container/statistical/ContainerWithStatistical", "data_classes/container/utility", "data_classes/container/utility/ContainerWithUtility", "data_classes/container/wrapping", "data_classes/container/wrapping/add_ivy_container_instance_methods", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_function_arguments", "deep_dive/11_docstrings", "deep_dive/12_docstring_examples", "deep_dive/13_array_api_tests", "deep_dive/14_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_formatting", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/softplus/softplus_array", "functional/ivy/activations/softplus/softplus_container", "functional/ivy/activations/softplus/softplus_functional", "functional/ivy/activations/softplus/static_softplus_container", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/arange/arange_functional", "functional/ivy/creation/arange/static_arange_container", "functional/ivy/creation/asarray", "functional/ivy/creation/asarray/asarray_array", "functional/ivy/creation/asarray/asarray_container", "functional/ivy/creation/asarray/asarray_functional", "functional/ivy/creation/asarray/static_asarray_container", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/empty_like/empty_like_array", "functional/ivy/creation/empty_like/empty_like_container", "functional/ivy/creation/empty_like/empty_like_functional", "functional/ivy/creation/empty_like/static_empty_like_container", "functional/ivy/creation/eye", "functional/ivy/creation/eye/eye_functional", "functional/ivy/creation/eye/static_eye_container", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/from_dlpack/from_dlpack_array", "functional/ivy/creation/from_dlpack/from_dlpack_container", "functional/ivy/creation/from_dlpack/from_dlpack_functional", "functional/ivy/creation/from_dlpack/static_from_dlpack_container", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/full_like/full_like_array", "functional/ivy/creation/full_like/full_like_container", "functional/ivy/creation/full_like/full_like_functional", "functional/ivy/creation/full_like/static_full_like_container", "functional/ivy/creation/linspace", "functional/ivy/creation/linspace/linspace_functional", "functional/ivy/creation/linspace/static_linspace_container", "functional/ivy/creation/logspace", "functional/ivy/creation/logspace/logspace_functional", "functional/ivy/creation/logspace/static_logspace_container", "functional/ivy/creation/meshgrid", "functional/ivy/creation/meshgrid/meshgrid_array", "functional/ivy/creation/meshgrid/meshgrid_container", "functional/ivy/creation/meshgrid/meshgrid_functional", "functional/ivy/creation/meshgrid/static_meshgrid_container", "functional/ivy/creation/native_array", "functional/ivy/creation/native_array/native_array_array", "functional/ivy/creation/native_array/native_array_container", "functional/ivy/creation/native_array/native_array_functional", "functional/ivy/creation/native_array/static_native_array_container", "functional/ivy/creation/ones", "functional/ivy/creation/ones/ones_functional", "functional/ivy/creation/ones/static_ones_container", "functional/ivy/creation/ones_like", "functional/ivy/creation/ones_like/ones_like_array", "functional/ivy/creation/ones_like/ones_like_container", "functional/ivy/creation/ones_like/ones_like_functional", "functional/ivy/creation/ones_like/static_ones_like_container", "functional/ivy/creation/tril", "functional/ivy/creation/tril/static_tril_container", "functional/ivy/creation/tril/tril_array", "functional/ivy/creation/tril/tril_container", "functional/ivy/creation/tril/tril_functional", "functional/ivy/creation/triu", "functional/ivy/creation/triu/static_triu_container", "functional/ivy/creation/triu/triu_array", "functional/ivy/creation/triu/triu_container", "functional/ivy/creation/triu/triu_functional", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros/static_zeros_container", "functional/ivy/creation/zeros/zeros_functional", "functional/ivy/creation/zeros_like", "functional/ivy/creation/zeros_like/static_zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_array", "functional/ivy/creation/zeros_like/zeros_like_container", "functional/ivy/creation/zeros_like/zeros_like_functional", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/astype/astype_array", "functional/ivy/data_type/astype/astype_container", "functional/ivy/data_type/astype/astype_functional", "functional/ivy/data_type/astype/static_astype_container", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_array", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/broadcast_to/broadcast_to_array", "functional/ivy/data_type/broadcast_to/broadcast_to_container", "functional/ivy/data_type/broadcast_to/broadcast_to_functional", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/can_cast/can_cast_array", "functional/ivy/data_type/can_cast/can_cast_container", "functional/ivy/data_type/can_cast/can_cast_functional", "functional/ivy/data_type/can_cast/static_can_cast_container", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype/dtype_array", "functional/ivy/data_type/dtype/dtype_container", "functional/ivy/data_type/dtype/dtype_functional", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/finfo/finfo_array", "functional/ivy/data_type/finfo/finfo_container", "functional/ivy/data_type/finfo/finfo_functional", "functional/ivy/data_type/finfo/static_finfo_container", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/iinfo/iinfo_array", "functional/ivy/data_type/iinfo/iinfo_container", "functional/ivy/data_type/iinfo/iinfo_functional", "functional/ivy/data_type/iinfo/static_iinfo_container", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_float_dtype/is_float_dtype_array", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/is_int_dtype/is_int_dtype_array", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/result_type/result_type_array", "functional/ivy/data_type/result_type/result_type_container", "functional/ivy/data_type/result_type/result_type_functional", "functional/ivy/data_type/result_type/static_result_type_container", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/abs/abs_array", "functional/ivy/elementwise/abs/abs_container", "functional/ivy/elementwise/abs/abs_functional", "functional/ivy/elementwise/abs/static_abs_container", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acos/acos_array", "functional/ivy/elementwise/acos/acos_container", "functional/ivy/elementwise/acos/acos_functional", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/acosh/acosh_array", "functional/ivy/elementwise/acosh/acosh_container", "functional/ivy/elementwise/acosh/acosh_functional", "functional/ivy/elementwise/add", "functional/ivy/elementwise/add/add_array", "functional/ivy/elementwise/add/add_container", "functional/ivy/elementwise/add/add_functional", "functional/ivy/elementwise/add/static_add_container", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_container", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/asinh/asinh_array", "functional/ivy/elementwise/asinh/asinh_container", "functional/ivy/elementwise/asinh/asinh_functional", "functional/ivy/elementwise/asinh/static_asinh_container", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan/atan_array", "functional/ivy/elementwise/atan/atan_container", "functional/ivy/elementwise/atan/atan_functional", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atan2/atan2_array", "functional/ivy/elementwise/atan2/atan2_container", "functional/ivy/elementwise/atan2/atan2_functional", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/atanh/atanh_array", "functional/ivy/elementwise/atanh/atanh_container", "functional/ivy/elementwise/atanh/atanh_functional", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_and/bitwise_and_array", "functional/ivy/elementwise/bitwise_and/bitwise_and_container", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_container", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/ceil/ceil_array", "functional/ivy/elementwise/ceil/ceil_container", "functional/ivy/elementwise/ceil/ceil_functional", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cos/cos_array", "functional/ivy/elementwise/cos/cos_container", "functional/ivy/elementwise/cos/cos_functional", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/cosh/cosh_array", "functional/ivy/elementwise/cosh/cosh_container", "functional/ivy/elementwise/cosh/cosh_functional", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/divide/divide_array", "functional/ivy/elementwise/divide/divide_container", "functional/ivy/elementwise/divide/divide_functional", "functional/ivy/elementwise/divide/static_divide_container", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/equal/equal_array", "functional/ivy/elementwise/equal/equal_container", "functional/ivy/elementwise/equal/equal_functional", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/exp/exp_array", "functional/ivy/elementwise/exp/exp_container", "functional/ivy/elementwise/exp/exp_functional", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/expm1/expm1_array", "functional/ivy/elementwise/expm1/expm1_container", "functional/ivy/elementwise/expm1/expm1_functional", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor/floor_array", "functional/ivy/elementwise/floor/floor_container", "functional/ivy/elementwise/floor/floor_functional", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/floor_divide/floor_divide_array", "functional/ivy/elementwise/floor_divide/floor_divide_container", "functional/ivy/elementwise/floor_divide/floor_divide_functional", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater/greater_array", "functional/ivy/elementwise/greater/greater_container", "functional/ivy/elementwise/greater/greater_functional", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/greater_equal/greater_equal_array", "functional/ivy/elementwise/greater_equal/greater_equal_container", "functional/ivy/elementwise/greater_equal/greater_equal_functional", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isfinite/isfinite_array", "functional/ivy/elementwise/isfinite/isfinite_container", "functional/ivy/elementwise/isfinite/isfinite_functional", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isinf/isinf_array", "functional/ivy/elementwise/isinf/isinf_container", "functional/ivy/elementwise/isinf/isinf_functional", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/isnan/isnan_array", "functional/ivy/elementwise/isnan/isnan_container", "functional/ivy/elementwise/isnan/isnan_functional", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less/less_array", "functional/ivy/elementwise/less/less_container", "functional/ivy/elementwise/less/less_functional", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/less_equal/less_equal_array", "functional/ivy/elementwise/less_equal/less_equal_container", "functional/ivy/elementwise/less_equal/less_equal_functional", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_container", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log10/log10_array", "functional/ivy/elementwise/log10/log10_container", "functional/ivy/elementwise/log10/log10_functional", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log1p/log1p_array", "functional/ivy/elementwise/log1p/log1p_container", "functional/ivy/elementwise/log1p/log1p_functional", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_container", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logaddexp/logaddexp_array", "functional/ivy/elementwise/logaddexp/logaddexp_container", "functional/ivy/elementwise/logaddexp/logaddexp_functional", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_and/logical_and_array", "functional/ivy/elementwise/logical_and/logical_and_container", "functional/ivy/elementwise/logical_and/logical_and_functional", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_not/logical_not_array", "functional/ivy/elementwise/logical_not/logical_not_container", "functional/ivy/elementwise/logical_not/logical_not_functional", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_container", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/logical_xor/logical_xor_array", "functional/ivy/elementwise/logical_xor/logical_xor_container", "functional/ivy/elementwise/logical_xor/logical_xor_functional", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/multiply/multiply_array", "functional/ivy/elementwise/multiply/multiply_container", "functional/ivy/elementwise/multiply/multiply_functional", "functional/ivy/elementwise/multiply/static_multiply_container", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/negative/negative_array", "functional/ivy/elementwise/negative/negative_container", "functional/ivy/elementwise/negative/negative_functional", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/not_equal/not_equal_array", "functional/ivy/elementwise/not_equal/not_equal_container", "functional/ivy/elementwise/not_equal/not_equal_functional", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/positive/positive_array", "functional/ivy/elementwise/positive/positive_container", "functional/ivy/elementwise/positive/positive_functional", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/pow/pow_array", "functional/ivy/elementwise/pow/pow_container", "functional/ivy/elementwise/pow/pow_functional", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/remainder/remainder_array", "functional/ivy/elementwise/remainder/remainder_container", "functional/ivy/elementwise/remainder/remainder_functional", "functional/ivy/elementwise/round", "functional/ivy/elementwise/round/round_array", "functional/ivy/elementwise/round/round_container", "functional/ivy/elementwise/round/round_functional", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sign/sign_array", "functional/ivy/elementwise/sign/sign_container", "functional/ivy/elementwise/sign/sign_functional", "functional/ivy/elementwise/sign/static_sign_container", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sinh/sinh_array", "functional/ivy/elementwise/sinh/sinh_container", "functional/ivy/elementwise/sinh/sinh_functional", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/sqrt/sqrt_array", "functional/ivy/elementwise/sqrt/sqrt_container", "functional/ivy/elementwise/sqrt/sqrt_functional", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_container", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/subtract/static_subtract_container", "functional/ivy/elementwise/subtract/subtract_array", "functional/ivy/elementwise/subtract/subtract_container", "functional/ivy/elementwise/subtract/subtract_functional", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tan/static_tan_container", "functional/ivy/elementwise/tan/tan_array", "functional/ivy/elementwise/tan/tan_container", "functional/ivy/elementwise/tan/tan_functional", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/tanh/static_tanh_container", "functional/ivy/elementwise/tanh/tanh_array", "functional/ivy/elementwise/tanh/tanh_container", "functional/ivy/elementwise/tanh/tanh_functional", "functional/ivy/elementwise/trunc", "functional/ivy/elementwise/trunc/trunc_array", "functional/ivy/elementwise/trunc/trunc_container", "functional/ivy/elementwise/trunc/trunc_functional", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/all_equal/all_equal_array", "functional/ivy/general/all_equal/all_equal_container", "functional/ivy/general/all_equal/all_equal_functional", "functional/ivy/general/all_equal/static_all_equal_container", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/gather_nd/gather_nd_array", "functional/ivy/general/gather_nd/gather_nd_container", "functional/ivy/general/gather_nd/gather_nd_functional", "functional/ivy/general/gather_nd/static_gather_nd_container", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_shape_array_mode", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_array_mode", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unset_shape_array_mode", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_step/adam_step_array", "functional/ivy/gradients/adam_step/adam_step_container", "functional/ivy/gradients/adam_step/adam_step_functional", "functional/ivy/gradients/adam_step/static_adam_step_container", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/adam_update/adam_update_container", "functional/ivy/gradients/adam_update/adam_update_functional", "functional/ivy/gradients/adam_update/static_adam_update_container", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/is_variable/is_variable_container", "functional/ivy/gradients/is_variable/is_variable_functional", "functional/ivy/gradients/is_variable/static_is_variable_container", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lamb_update/lamb_update_container", "functional/ivy/gradients/lamb_update/lamb_update_functional", "functional/ivy/gradients/lamb_update/static_lamb_update_container", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/lars_update/lars_update_container", "functional/ivy/gradients/lars_update/lars_update_functional", "functional/ivy/gradients/lars_update/static_lars_update_container", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/optimizer_update/optimizer_update_container", "functional/ivy/gradients/optimizer_update/optimizer_update_functional", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cholesky/cholesky_array", "functional/ivy/linear_algebra/cholesky/cholesky_container", "functional/ivy/linear_algebra/cholesky/cholesky_functional", "functional/ivy/linear_algebra/cholesky/static_cholesky_container", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/cross/cross_array", "functional/ivy/linear_algebra/cross/cross_functional", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/det/det_array", "functional/ivy/linear_algebra/det/det_functional", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/diagonal/diagonal_array", "functional/ivy/linear_algebra/diagonal/diagonal_functional", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigh/eigh_array", "functional/ivy/linear_algebra/eigh/eigh_functional", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/inv/inv_array", "functional/ivy/linear_algebra/inv/inv_functional", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matmul/matmul_array", "functional/ivy/linear_algebra/matmul/matmul_container", "functional/ivy/linear_algebra/matmul/matmul_functional", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/outer/outer_array", "functional/ivy/linear_algebra/outer/outer_functional", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/pinv/pinv_array", "functional/ivy/linear_algebra/pinv/pinv_functional", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/qr/qr_array", "functional/ivy/linear_algebra/qr/qr_functional", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/solve/solve_array", "functional/ivy/linear_algebra/solve/solve_functional", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svd/svd_array", "functional/ivy/linear_algebra/svd/svd_functional", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/svdvals/svdvals_array", "functional/ivy/linear_algebra/svdvals/svdvals_functional", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/tensordot/tensordot_array", "functional/ivy/linear_algebra/tensordot/tensordot_functional", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/trace/trace_array", "functional/ivy/linear_algebra/trace/trace_functional", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vecdot/vecdot_array", "functional/ivy/linear_algebra/vecdot/vecdot_functional", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_norm/vector_norm_array", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_container", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/cross_entropy/static_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_array", "functional/ivy/manipulation/clip/clip_container", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_container", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/constant_pad/constant_pad_array", "functional/ivy/manipulation/constant_pad/constant_pad_container", "functional/ivy/manipulation/constant_pad/constant_pad_functional", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/expand_dims/expand_dims_array", "functional/ivy/manipulation/expand_dims/expand_dims_container", "functional/ivy/manipulation/expand_dims/expand_dims_functional", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/flip/flip_array", "functional/ivy/manipulation/flip/flip_container", "functional/ivy/manipulation/flip/flip_functional", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/permute_dims/permute_dims_array", "functional/ivy/manipulation/permute_dims/permute_dims_container", "functional/ivy/manipulation/permute_dims/permute_dims_functional", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/repeat/repeat_array", "functional/ivy/manipulation/repeat/repeat_container", "functional/ivy/manipulation/repeat/repeat_functional", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_container", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/roll/roll_array", "functional/ivy/manipulation/roll/roll_container", "functional/ivy/manipulation/roll/roll_functional", "functional/ivy/manipulation/roll/static_roll_container", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/squeeze/squeeze_array", "functional/ivy/manipulation/squeeze/squeeze_container", "functional/ivy/manipulation/squeeze/squeeze_functional", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/stack/stack_array", "functional/ivy/manipulation/stack/stack_container", "functional/ivy/manipulation/stack/stack_functional", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/swapaxes/swapaxes_array", "functional/ivy/manipulation/swapaxes/swapaxes_container", "functional/ivy/manipulation/swapaxes/swapaxes_functional", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/tile/tile_array", "functional/ivy/manipulation/tile/tile_container", "functional/ivy/manipulation/tile/tile_functional", "functional/ivy/manipulation/zero_pad", "functional/ivy/manipulation/zero_pad/zero_pad_array", "functional/ivy/manipulation/zero_pad/zero_pad_container", "functional/ivy/manipulation/zero_pad/zero_pad_functional", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/norms/layer_norm/layer_norm_array", "functional/ivy/norms/layer_norm/layer_norm_container", "functional/ivy/norms/layer_norm/layer_norm_functional", "functional/ivy/norms/layer_norm/static_layer_norm_container", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/randint/randint_functional", "functional/ivy/random/randint/static_randint_container", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/random_uniform/random_uniform_container", "functional/ivy/random/random_uniform/random_uniform_functional", "functional/ivy/random/random_uniform/static_random_uniform_container", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_counts/static_unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_array", "functional/ivy/set/unique_counts/unique_counts_container", "functional/ivy/set/unique_counts/unique_counts_functional", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/argsort/argsort_array", "functional/ivy/sorting/argsort/argsort_container", "functional/ivy/sorting/argsort/argsort_functional", "functional/ivy/sorting/argsort/static_argsort_container", "functional/ivy/sorting/sort", "functional/ivy/sorting/sort/sort_array", "functional/ivy/sorting/sort/sort_container", "functional/ivy/sorting/sort/sort_functional", "functional/ivy/sorting/sort/static_sort_container", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/einsum/einsum_array", "functional/ivy/statistical/einsum/einsum_container", "functional/ivy/statistical/einsum/einsum_functional", "functional/ivy/statistical/max", "functional/ivy/statistical/max/max_array", "functional/ivy/statistical/max/max_container", "functional/ivy/statistical/max/max_functional", "functional/ivy/statistical/mean", "functional/ivy/statistical/mean/mean_array", "functional/ivy/statistical/mean/mean_container", "functional/ivy/statistical/mean/mean_functional", "functional/ivy/statistical/min", "functional/ivy/statistical/min/min_array", "functional/ivy/statistical/min/min_container", "functional/ivy/statistical/min/min_functional", "functional/ivy/statistical/prod", "functional/ivy/statistical/prod/prod_array", "functional/ivy/statistical/prod/prod_container", "functional/ivy/statistical/prod/prod_functional", "functional/ivy/statistical/std", "functional/ivy/statistical/std/std_array", "functional/ivy/statistical/std/std_container", "functional/ivy/statistical/std/std_functional", "functional/ivy/statistical/sum", "functional/ivy/statistical/sum/sum_array", "functional/ivy/statistical/sum/sum_container", "functional/ivy/statistical/sum/sum_functional", "functional/ivy/statistical/var", "functional/ivy/statistical/var/var_array", "functional/ivy/statistical/var/var_container", "functional/ivy/statistical/var/var_functional", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_container", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/all/static_all_container", "functional/ivy/utility/any", "functional/ivy/utility/any/any_array", "functional/ivy/utility/any/any_container", "functional/ivy/utility/any/any_functional", "functional/ivy/utility/any/static_any_container", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "data_classes.rst", "data_classes/array.rst", "data_classes/array/activations.rst", "data_classes/array/activations/ArrayWithActivations.rst", "data_classes/array/conversions.rst", "data_classes/array/conversions/args_to_ivy.rst", "data_classes/array/conversions/args_to_native.rst", "data_classes/array/conversions/to_ivy.rst", "data_classes/array/conversions/to_native.rst", "data_classes/array/creation.rst", "data_classes/array/creation/ArrayWithCreation.rst", "data_classes/array/data_type.rst", "data_classes/array/data_type/ArrayWithDataTypes.rst", "data_classes/array/device.rst", "data_classes/array/device/ArrayWithDevice.rst", "data_classes/array/elementwise.rst", "data_classes/array/elementwise/ArrayWithElementwise.rst", "data_classes/array/general.rst", "data_classes/array/general/ArrayWithGeneral.rst", "data_classes/array/gradients.rst", "data_classes/array/gradients/ArrayWithGradients.rst", "data_classes/array/image.rst", "data_classes/array/image/ArrayWithImage.rst", "data_classes/array/layers.rst", "data_classes/array/layers/ArrayWithLayers.rst", "data_classes/array/linear_algebra.rst", "data_classes/array/linear_algebra/ArrayWithLinearAlgebra.rst", "data_classes/array/losses.rst", "data_classes/array/losses/ArrayWithLosses.rst", "data_classes/array/manipulation.rst", "data_classes/array/manipulation/ArrayWithManipulation.rst", "data_classes/array/norms.rst", "data_classes/array/norms/ArrayWithNorms.rst", "data_classes/array/random.rst", "data_classes/array/random/ArrayWithRandom.rst", "data_classes/array/searching.rst", "data_classes/array/searching/ArrayWithSearching.rst", "data_classes/array/set.rst", "data_classes/array/set/ArrayWithSet.rst", "data_classes/array/sorting.rst", "data_classes/array/sorting/ArrayWithSorting.rst", "data_classes/array/statistical.rst", "data_classes/array/statistical/ArrayWithStatistical.rst", "data_classes/array/utility.rst", "data_classes/array/utility/ArrayWithUtility.rst", "data_classes/array/wrapping.rst", "data_classes/array/wrapping/add_ivy_array_instance_methods.rst", "data_classes/container.rst", "data_classes/container/activations.rst", "data_classes/container/activations/ContainerWithActivations.rst", "data_classes/container/base.rst", "data_classes/container/base/ContainerBase.rst", "data_classes/container/container.rst", "data_classes/container/container/Container.rst", "data_classes/container/container/MultiDevContainer.rst", "data_classes/container/creation.rst", "data_classes/container/creation/ContainerWithCreation.rst", "data_classes/container/data_type.rst", "data_classes/container/data_type/ContainerWithDataTypes.rst", "data_classes/container/device.rst", "data_classes/container/device/ContainerWithDevice.rst", "data_classes/container/elementwise.rst", "data_classes/container/elementwise/ContainerWithElementwise.rst", "data_classes/container/general.rst", "data_classes/container/general/ContainerWithGeneral.rst", "data_classes/container/gradients.rst", "data_classes/container/gradients/ContainerWithGradients.rst", "data_classes/container/image.rst", "data_classes/container/image/ContainerWithImage.rst", "data_classes/container/layers.rst", "data_classes/container/layers/ContainerWithLayers.rst", "data_classes/container/linear_algebra.rst", "data_classes/container/linear_algebra/ContainerWithLinearAlgebra.rst", "data_classes/container/losses.rst", "data_classes/container/losses/ContainerWithLosses.rst", "data_classes/container/manipulation.rst", "data_classes/container/manipulation/ContainerWithManipulation.rst", "data_classes/container/norms.rst", "data_classes/container/norms/ContainerWithNorms.rst", "data_classes/container/random.rst", "data_classes/container/random/ContainerWithRandom.rst", "data_classes/container/searching.rst", "data_classes/container/searching/ContainerWithSearching.rst", "data_classes/container/set.rst", "data_classes/container/set/ContainerWithSet.rst", "data_classes/container/sorting.rst", "data_classes/container/sorting/ContainerWithSorting.rst", "data_classes/container/statistical.rst", "data_classes/container/statistical/ContainerWithStatistical.rst", "data_classes/container/utility.rst", "data_classes/container/utility/ContainerWithUtility.rst", "data_classes/container/wrapping.rst", "data_classes/container/wrapping/add_ivy_container_instance_methods.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_function_arguments.rst", "deep_dive/11_docstrings.rst", "deep_dive/12_docstring_examples.rst", "deep_dive/13_array_api_tests.rst", "deep_dive/14_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_formatting.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/softplus/softplus_array.rst", "functional/ivy/activations/softplus/softplus_container.rst", "functional/ivy/activations/softplus/softplus_functional.rst", "functional/ivy/activations/softplus/static_softplus_container.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/arange/arange_functional.rst", "functional/ivy/creation/arange/static_arange_container.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/asarray/asarray_array.rst", "functional/ivy/creation/asarray/asarray_container.rst", "functional/ivy/creation/asarray/asarray_functional.rst", "functional/ivy/creation/asarray/static_asarray_container.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/empty_like/empty_like_array.rst", "functional/ivy/creation/empty_like/empty_like_container.rst", "functional/ivy/creation/empty_like/empty_like_functional.rst", "functional/ivy/creation/empty_like/static_empty_like_container.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/eye/eye_functional.rst", "functional/ivy/creation/eye/static_eye_container.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/from_dlpack/from_dlpack_array.rst", "functional/ivy/creation/from_dlpack/from_dlpack_container.rst", "functional/ivy/creation/from_dlpack/from_dlpack_functional.rst", "functional/ivy/creation/from_dlpack/static_from_dlpack_container.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/full_like/full_like_array.rst", "functional/ivy/creation/full_like/full_like_container.rst", "functional/ivy/creation/full_like/full_like_functional.rst", "functional/ivy/creation/full_like/static_full_like_container.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/linspace/linspace_functional.rst", "functional/ivy/creation/linspace/static_linspace_container.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/logspace/logspace_functional.rst", "functional/ivy/creation/logspace/static_logspace_container.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/meshgrid/meshgrid_array.rst", "functional/ivy/creation/meshgrid/meshgrid_container.rst", "functional/ivy/creation/meshgrid/meshgrid_functional.rst", "functional/ivy/creation/meshgrid/static_meshgrid_container.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/native_array/native_array_array.rst", "functional/ivy/creation/native_array/native_array_container.rst", "functional/ivy/creation/native_array/native_array_functional.rst", "functional/ivy/creation/native_array/static_native_array_container.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones/ones_functional.rst", "functional/ivy/creation/ones/static_ones_container.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/ones_like/ones_like_array.rst", "functional/ivy/creation/ones_like/ones_like_container.rst", "functional/ivy/creation/ones_like/ones_like_functional.rst", "functional/ivy/creation/ones_like/static_ones_like_container.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/tril/static_tril_container.rst", "functional/ivy/creation/tril/tril_array.rst", "functional/ivy/creation/tril/tril_container.rst", "functional/ivy/creation/tril/tril_functional.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/triu/static_triu_container.rst", "functional/ivy/creation/triu/triu_array.rst", "functional/ivy/creation/triu/triu_container.rst", "functional/ivy/creation/triu/triu_functional.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros/static_zeros_container.rst", "functional/ivy/creation/zeros/zeros_functional.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/creation/zeros_like/static_zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_array.rst", "functional/ivy/creation/zeros_like/zeros_like_container.rst", "functional/ivy/creation/zeros_like/zeros_like_functional.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/astype/astype_array.rst", "functional/ivy/data_type/astype/astype_container.rst", "functional/ivy/data_type/astype/astype_functional.rst", "functional/ivy/data_type/astype/static_astype_container.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_array.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_arrays/broadcast_arrays_functional.rst", "functional/ivy/data_type/broadcast_arrays/static_broadcast_arrays_container.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_array.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_container.rst", "functional/ivy/data_type/broadcast_to/broadcast_to_functional.rst", "functional/ivy/data_type/broadcast_to/static_broadcast_to_container.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/can_cast/can_cast_array.rst", "functional/ivy/data_type/can_cast/can_cast_container.rst", "functional/ivy/data_type/can_cast/can_cast_functional.rst", "functional/ivy/data_type/can_cast/static_can_cast_container.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype/dtype_array.rst", "functional/ivy/data_type/dtype/dtype_container.rst", "functional/ivy/data_type/dtype/dtype_functional.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/finfo/finfo_array.rst", "functional/ivy/data_type/finfo/finfo_container.rst", "functional/ivy/data_type/finfo/finfo_functional.rst", "functional/ivy/data_type/finfo/static_finfo_container.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/iinfo/iinfo_array.rst", "functional/ivy/data_type/iinfo/iinfo_container.rst", "functional/ivy/data_type/iinfo/iinfo_functional.rst", "functional/ivy/data_type/iinfo/static_iinfo_container.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_array.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_container.rst", "functional/ivy/data_type/is_float_dtype/is_float_dtype_functional.rst", "functional/ivy/data_type/is_float_dtype/static_is_float_dtype_container.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_array.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_container.rst", "functional/ivy/data_type/is_int_dtype/is_int_dtype_functional.rst", "functional/ivy/data_type/is_int_dtype/static_is_int_dtype_container.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/result_type/result_type_array.rst", "functional/ivy/data_type/result_type/result_type_container.rst", "functional/ivy/data_type/result_type/result_type_functional.rst", "functional/ivy/data_type/result_type/static_result_type_container.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/abs/abs_array.rst", "functional/ivy/elementwise/abs/abs_container.rst", "functional/ivy/elementwise/abs/abs_functional.rst", "functional/ivy/elementwise/abs/static_abs_container.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acos/acos_array.rst", "functional/ivy/elementwise/acos/acos_container.rst", "functional/ivy/elementwise/acos/acos_functional.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/acosh/acosh_array.rst", "functional/ivy/elementwise/acosh/acosh_container.rst", "functional/ivy/elementwise/acosh/acosh_functional.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/add/add_array.rst", "functional/ivy/elementwise/add/add_container.rst", "functional/ivy/elementwise/add/add_functional.rst", "functional/ivy/elementwise/add/static_add_container.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_container.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/asinh/asinh_array.rst", "functional/ivy/elementwise/asinh/asinh_container.rst", "functional/ivy/elementwise/asinh/asinh_functional.rst", "functional/ivy/elementwise/asinh/static_asinh_container.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan/atan_array.rst", "functional/ivy/elementwise/atan/atan_container.rst", "functional/ivy/elementwise/atan/atan_functional.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atan2/atan2_array.rst", "functional/ivy/elementwise/atan2/atan2_container.rst", "functional/ivy/elementwise/atan2/atan2_functional.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/atanh/atanh_array.rst", "functional/ivy/elementwise/atanh/atanh_container.rst", "functional/ivy/elementwise/atanh/atanh_functional.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_array.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_container.rst", "functional/ivy/elementwise/bitwise_and/bitwise_and_functional.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_array.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_container.rst", "functional/ivy/elementwise/bitwise_invert/bitwise_invert_functional.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_container.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_container.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_array.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_container.rst", "functional/ivy/elementwise/bitwise_right_shift/bitwise_right_shift_functional.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_container.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/ceil/ceil_array.rst", "functional/ivy/elementwise/ceil/ceil_container.rst", "functional/ivy/elementwise/ceil/ceil_functional.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cos/cos_array.rst", "functional/ivy/elementwise/cos/cos_container.rst", "functional/ivy/elementwise/cos/cos_functional.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/cosh/cosh_array.rst", "functional/ivy/elementwise/cosh/cosh_container.rst", "functional/ivy/elementwise/cosh/cosh_functional.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/divide/divide_array.rst", "functional/ivy/elementwise/divide/divide_container.rst", "functional/ivy/elementwise/divide/divide_functional.rst", "functional/ivy/elementwise/divide/static_divide_container.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/equal/equal_array.rst", "functional/ivy/elementwise/equal/equal_container.rst", "functional/ivy/elementwise/equal/equal_functional.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/exp/exp_array.rst", "functional/ivy/elementwise/exp/exp_container.rst", "functional/ivy/elementwise/exp/exp_functional.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/expm1/expm1_array.rst", "functional/ivy/elementwise/expm1/expm1_container.rst", "functional/ivy/elementwise/expm1/expm1_functional.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor/floor_array.rst", "functional/ivy/elementwise/floor/floor_container.rst", "functional/ivy/elementwise/floor/floor_functional.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/floor_divide/floor_divide_array.rst", "functional/ivy/elementwise/floor_divide/floor_divide_container.rst", "functional/ivy/elementwise/floor_divide/floor_divide_functional.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater/greater_array.rst", "functional/ivy/elementwise/greater/greater_container.rst", "functional/ivy/elementwise/greater/greater_functional.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/greater_equal/greater_equal_array.rst", "functional/ivy/elementwise/greater_equal/greater_equal_container.rst", "functional/ivy/elementwise/greater_equal/greater_equal_functional.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isfinite/isfinite_array.rst", "functional/ivy/elementwise/isfinite/isfinite_container.rst", "functional/ivy/elementwise/isfinite/isfinite_functional.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isinf/isinf_array.rst", "functional/ivy/elementwise/isinf/isinf_container.rst", "functional/ivy/elementwise/isinf/isinf_functional.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/isnan/isnan_array.rst", "functional/ivy/elementwise/isnan/isnan_container.rst", "functional/ivy/elementwise/isnan/isnan_functional.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less/less_array.rst", "functional/ivy/elementwise/less/less_container.rst", "functional/ivy/elementwise/less/less_functional.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/less_equal/less_equal_array.rst", "functional/ivy/elementwise/less_equal/less_equal_container.rst", "functional/ivy/elementwise/less_equal/less_equal_functional.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_container.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log10/log10_array.rst", "functional/ivy/elementwise/log10/log10_container.rst", "functional/ivy/elementwise/log10/log10_functional.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log1p/log1p_array.rst", "functional/ivy/elementwise/log1p/log1p_container.rst", "functional/ivy/elementwise/log1p/log1p_functional.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_container.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logaddexp/logaddexp_array.rst", "functional/ivy/elementwise/logaddexp/logaddexp_container.rst", "functional/ivy/elementwise/logaddexp/logaddexp_functional.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_and/logical_and_array.rst", "functional/ivy/elementwise/logical_and/logical_and_container.rst", "functional/ivy/elementwise/logical_and/logical_and_functional.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_not/logical_not_array.rst", "functional/ivy/elementwise/logical_not/logical_not_container.rst", "functional/ivy/elementwise/logical_not/logical_not_functional.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_container.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/logical_xor/logical_xor_array.rst", "functional/ivy/elementwise/logical_xor/logical_xor_container.rst", "functional/ivy/elementwise/logical_xor/logical_xor_functional.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/multiply/multiply_array.rst", "functional/ivy/elementwise/multiply/multiply_container.rst", "functional/ivy/elementwise/multiply/multiply_functional.rst", "functional/ivy/elementwise/multiply/static_multiply_container.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/negative/negative_array.rst", "functional/ivy/elementwise/negative/negative_container.rst", "functional/ivy/elementwise/negative/negative_functional.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/not_equal/not_equal_array.rst", "functional/ivy/elementwise/not_equal/not_equal_container.rst", "functional/ivy/elementwise/not_equal/not_equal_functional.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/positive/positive_array.rst", "functional/ivy/elementwise/positive/positive_container.rst", "functional/ivy/elementwise/positive/positive_functional.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/pow/pow_array.rst", "functional/ivy/elementwise/pow/pow_container.rst", "functional/ivy/elementwise/pow/pow_functional.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/remainder/remainder_array.rst", "functional/ivy/elementwise/remainder/remainder_container.rst", "functional/ivy/elementwise/remainder/remainder_functional.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/round/round_array.rst", "functional/ivy/elementwise/round/round_container.rst", "functional/ivy/elementwise/round/round_functional.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sign/sign_array.rst", "functional/ivy/elementwise/sign/sign_container.rst", "functional/ivy/elementwise/sign/sign_functional.rst", "functional/ivy/elementwise/sign/static_sign_container.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sinh/sinh_array.rst", "functional/ivy/elementwise/sinh/sinh_container.rst", "functional/ivy/elementwise/sinh/sinh_functional.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/sqrt/sqrt_array.rst", "functional/ivy/elementwise/sqrt/sqrt_container.rst", "functional/ivy/elementwise/sqrt/sqrt_functional.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_container.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/subtract/static_subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_array.rst", "functional/ivy/elementwise/subtract/subtract_container.rst", "functional/ivy/elementwise/subtract/subtract_functional.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tan/static_tan_container.rst", "functional/ivy/elementwise/tan/tan_array.rst", "functional/ivy/elementwise/tan/tan_container.rst", "functional/ivy/elementwise/tan/tan_functional.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/tanh/static_tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_array.rst", "functional/ivy/elementwise/tanh/tanh_container.rst", "functional/ivy/elementwise/tanh/tanh_functional.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/elementwise/trunc/trunc_array.rst", "functional/ivy/elementwise/trunc/trunc_container.rst", "functional/ivy/elementwise/trunc/trunc_functional.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/all_equal/all_equal_array.rst", "functional/ivy/general/all_equal/all_equal_container.rst", "functional/ivy/general/all_equal/all_equal_functional.rst", "functional/ivy/general/all_equal/static_all_equal_container.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_container.rst", "functional/ivy/general/clip_vector_norm/clip_vector_norm_functional.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/gather_nd/gather_nd_array.rst", "functional/ivy/general/gather_nd/gather_nd_container.rst", "functional/ivy/general/gather_nd/gather_nd_functional.rst", "functional/ivy/general/gather_nd/static_gather_nd_container.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_shape_array_mode.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_array_mode.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unset_shape_array_mode.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_step/adam_step_array.rst", "functional/ivy/gradients/adam_step/adam_step_container.rst", "functional/ivy/gradients/adam_step/adam_step_functional.rst", "functional/ivy/gradients/adam_step/static_adam_step_container.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/adam_update/adam_update_container.rst", "functional/ivy/gradients/adam_update/adam_update_functional.rst", "functional/ivy/gradients/adam_update/static_adam_update_container.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_container.rst", "functional/ivy/gradients/gradient_descent_update/gradient_descent_update_functional.rst", "functional/ivy/gradients/gradient_descent_update/static_gradient_descent_update_container.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/is_variable/is_variable_container.rst", "functional/ivy/gradients/is_variable/is_variable_functional.rst", "functional/ivy/gradients/is_variable/static_is_variable_container.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lamb_update/lamb_update_container.rst", "functional/ivy/gradients/lamb_update/lamb_update_functional.rst", "functional/ivy/gradients/lamb_update/static_lamb_update_container.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/lars_update/lars_update_container.rst", "functional/ivy/gradients/lars_update/lars_update_functional.rst", "functional/ivy/gradients/lars_update/static_lars_update_container.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_container.rst", "functional/ivy/gradients/optimizer_update/optimizer_update_functional.rst", "functional/ivy/gradients/optimizer_update/static_optimizer_update_container.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cholesky/cholesky_array.rst", "functional/ivy/linear_algebra/cholesky/cholesky_container.rst", "functional/ivy/linear_algebra/cholesky/cholesky_functional.rst", "functional/ivy/linear_algebra/cholesky/static_cholesky_container.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/cross/cross_array.rst", "functional/ivy/linear_algebra/cross/cross_functional.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/det/det_array.rst", "functional/ivy/linear_algebra/det/det_functional.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/diagonal/diagonal_array.rst", "functional/ivy/linear_algebra/diagonal/diagonal_functional.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigh/eigh_array.rst", "functional/ivy/linear_algebra/eigh/eigh_functional.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_array.rst", "functional/ivy/linear_algebra/eigvalsh/eigvalsh_functional.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/inv/inv_array.rst", "functional/ivy/linear_algebra/inv/inv_functional.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matmul/matmul_array.rst", "functional/ivy/linear_algebra/matmul/matmul_container.rst", "functional/ivy/linear_algebra/matmul/matmul_functional.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_array.rst", "functional/ivy/linear_algebra/matrix_norm/matrix_norm_functional.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_array.rst", "functional/ivy/linear_algebra/matrix_rank/matrix_rank_functional.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_array.rst", "functional/ivy/linear_algebra/matrix_transpose/matrix_transpose_functional.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/outer/outer_array.rst", "functional/ivy/linear_algebra/outer/outer_functional.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/pinv/pinv_array.rst", "functional/ivy/linear_algebra/pinv/pinv_functional.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/qr/qr_array.rst", "functional/ivy/linear_algebra/qr/qr_functional.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/solve/solve_array.rst", "functional/ivy/linear_algebra/solve/solve_functional.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svd/svd_array.rst", "functional/ivy/linear_algebra/svd/svd_functional.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/svdvals/svdvals_array.rst", "functional/ivy/linear_algebra/svdvals/svdvals_functional.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/tensordot/tensordot_array.rst", "functional/ivy/linear_algebra/tensordot/tensordot_functional.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/trace/trace_array.rst", "functional/ivy/linear_algebra/trace/trace_functional.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vecdot/vecdot_array.rst", "functional/ivy/linear_algebra/vecdot/vecdot_functional.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_array.rst", "functional/ivy/linear_algebra/vector_norm/vector_norm_functional.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_array.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix/vector_to_skew_symmetric_matrix_functional.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_array.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_container.rst", "functional/ivy/losses/binary_cross_entropy/binary_cross_entropy_functional.rst", "functional/ivy/losses/binary_cross_entropy/static_binary_cross_entropy_container.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_container.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/cross_entropy/static_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_array.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_container.rst", "functional/ivy/losses/sparse_cross_entropy/sparse_cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy/static_sparse_cross_entropy_container.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_array.rst", "functional/ivy/manipulation/clip/clip_container.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_container.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/constant_pad/constant_pad_array.rst", "functional/ivy/manipulation/constant_pad/constant_pad_container.rst", "functional/ivy/manipulation/constant_pad/constant_pad_functional.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/expand_dims/expand_dims_array.rst", "functional/ivy/manipulation/expand_dims/expand_dims_container.rst", "functional/ivy/manipulation/expand_dims/expand_dims_functional.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/flip/flip_array.rst", "functional/ivy/manipulation/flip/flip_container.rst", "functional/ivy/manipulation/flip/flip_functional.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/permute_dims/permute_dims_array.rst", "functional/ivy/manipulation/permute_dims/permute_dims_container.rst", "functional/ivy/manipulation/permute_dims/permute_dims_functional.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/repeat/repeat_array.rst", "functional/ivy/manipulation/repeat/repeat_container.rst", "functional/ivy/manipulation/repeat/repeat_functional.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_container.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/roll/roll_array.rst", "functional/ivy/manipulation/roll/roll_container.rst", "functional/ivy/manipulation/roll/roll_functional.rst", "functional/ivy/manipulation/roll/static_roll_container.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/squeeze/squeeze_array.rst", "functional/ivy/manipulation/squeeze/squeeze_container.rst", "functional/ivy/manipulation/squeeze/squeeze_functional.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/stack/stack_array.rst", "functional/ivy/manipulation/stack/stack_container.rst", "functional/ivy/manipulation/stack/stack_functional.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/swapaxes/swapaxes_array.rst", "functional/ivy/manipulation/swapaxes/swapaxes_container.rst", "functional/ivy/manipulation/swapaxes/swapaxes_functional.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/tile/tile_array.rst", "functional/ivy/manipulation/tile/tile_container.rst", "functional/ivy/manipulation/tile/tile_functional.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/manipulation/zero_pad/zero_pad_array.rst", "functional/ivy/manipulation/zero_pad/zero_pad_container.rst", "functional/ivy/manipulation/zero_pad/zero_pad_functional.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/norms/layer_norm/layer_norm_array.rst", "functional/ivy/norms/layer_norm/layer_norm_container.rst", "functional/ivy/norms/layer_norm/layer_norm_functional.rst", "functional/ivy/norms/layer_norm/static_layer_norm_container.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/randint/randint_functional.rst", "functional/ivy/random/randint/static_randint_container.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/random_uniform/random_uniform_container.rst", "functional/ivy/random/random_uniform/random_uniform_functional.rst", "functional/ivy/random/random_uniform/static_random_uniform_container.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_counts/static_unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_array.rst", "functional/ivy/set/unique_counts/unique_counts_container.rst", "functional/ivy/set/unique_counts/unique_counts_functional.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/argsort/argsort_array.rst", "functional/ivy/sorting/argsort/argsort_container.rst", "functional/ivy/sorting/argsort/argsort_functional.rst", "functional/ivy/sorting/argsort/static_argsort_container.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/sorting/sort/sort_array.rst", "functional/ivy/sorting/sort/sort_container.rst", "functional/ivy/sorting/sort/sort_functional.rst", "functional/ivy/sorting/sort/static_sort_container.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/einsum/einsum_array.rst", "functional/ivy/statistical/einsum/einsum_container.rst", "functional/ivy/statistical/einsum/einsum_functional.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/max/max_array.rst", "functional/ivy/statistical/max/max_container.rst", "functional/ivy/statistical/max/max_functional.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/mean/mean_array.rst", "functional/ivy/statistical/mean/mean_container.rst", "functional/ivy/statistical/mean/mean_functional.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/min/min_array.rst", "functional/ivy/statistical/min/min_container.rst", "functional/ivy/statistical/min/min_functional.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/prod/prod_array.rst", "functional/ivy/statistical/prod/prod_container.rst", "functional/ivy/statistical/prod/prod_functional.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/std/std_array.rst", "functional/ivy/statistical/std/std_container.rst", "functional/ivy/statistical/std/std_functional.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/sum/sum_array.rst", "functional/ivy/statistical/sum/sum_container.rst", "functional/ivy/statistical/sum/sum_functional.rst", "functional/ivy/statistical/var.rst", "functional/ivy/statistical/var/var_array.rst", "functional/ivy/statistical/var/var_container.rst", "functional/ivy/statistical/var/var_functional.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_container.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/all/static_all_container.rst", "functional/ivy/utility/any.rst", "functional/ivy/utility/any/any_array.rst", "functional/ivy/utility/any/any_container.rst", "functional/ivy/utility/any/any_functional.rst", "functional/ivy/utility/any/static_any_container.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Data classes", "Array", "Activations", "ArrayWithActivations", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data type", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Container", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Creation", "ContainerWithCreation", "Data type", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Deep Dive", "Navigating the Code", "Function Arguments", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Formatting", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "ivy.Array.softplus", "ivy.Container.softplus", "ivy.softplus", "ivy.Container.static_softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "ivy.arange", "ivy.Container.static_arange", "asarray", "ivy.Array.asarray", "ivy.Container.asarray", "ivy.asarray", "ivy.Container.static_asarray", "empty", "empty_like", "ivy.Array.empty_like", "ivy.Container.empty_like", "ivy.empty_like", "ivy.Container.static_empty_like", "eye", "ivy.eye", "ivy.Container.static_eye", "from_dlpack", "ivy.Array.from_dlpack", "ivy.Container.from_dlpack", "ivy.from_dlpack", "ivy.Container.static_from_dlpack", "full", "full_like", "ivy.Array.full_like", "ivy.Container.full_like", "ivy.full_like", "ivy.Container.static_full_like", "linspace", "ivy.linspace", "ivy.Container.static_linspace", "logspace", "ivy.logspace", "ivy.Container.static_logspace", "meshgrid", "ivy.Array.meshgrid", "ivy.Container.meshgrid", "ivy.meshgrid", "ivy.Container.static_meshgrid", "native_array", "ivy.Array.native_array", "ivy.Container.native_array", "ivy.native_array", "ivy.Container.static_native_array", "ones", "ivy.ones", "ivy.Container.static_ones", "ones_like", "ivy.Array.ones_like", "ivy.Container.ones_like", "ivy.ones_like", "ivy.Container.static_ones_like", "tril", "ivy.Container.static_tril", "ivy.Array.tril", "ivy.Container.tril", "ivy.tril", "triu", "ivy.Container.static_triu", "ivy.Array.triu", "ivy.Container.triu", "ivy.triu", "zeros", "ivy.Container.static_zeros", "ivy.zeros", "zeros_like", "ivy.Container.static_zeros_like", "ivy.Array.zeros_like", "ivy.Container.zeros_like", "ivy.zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "ivy.Array.astype", "ivy.Container.astype", "ivy.astype", "ivy.Container.static_astype", "broadcast_arrays", "ivy.Array.broadcast_arrays", "ivy.Container.broadcast_arrays", "ivy.broadcast_arrays", "ivy.Container.static_broadcast_arrays", "broadcast_to", "ivy.Array.broadcast_to", "ivy.Container.broadcast_to", "ivy.broadcast_to", "ivy.Container.static_broadcast_to", "can_cast", "ivy.Array.can_cast", "ivy.Container.can_cast", "ivy.can_cast", "ivy.Container.static_can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "ivy.Array.dtype", "ivy.Container.dtype", "ivy.dtype", "dtype_bits", "finfo", "ivy.Array.finfo", "ivy.Container.finfo", "ivy.finfo", "ivy.Container.static_finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "ivy.Array.iinfo", "ivy.Container.iinfo", "ivy.iinfo", "ivy.Container.static_iinfo", "invalid_dtype", "is_float_dtype", "ivy.Array.is_float_dtype", "ivy.Container.is_float_dtype", "ivy.is_float_dtype", "ivy.Container.static_is_float_dtype", "is_int_dtype", "ivy.Array.is_int_dtype", "ivy.Container.is_int_dtype", "ivy.is_int_dtype", "ivy.Container.static_is_int_dtype", "promote_types", "result_type", "ivy.Array.result_type", "ivy.Container.result_type", "ivy.result_type", "ivy.Container.static_result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "ivy.Array.abs", "ivy.Container.abs", "ivy.abs", "ivy.Container.static_abs", "acos", "ivy.Array.acos", "ivy.Container.acos", "ivy.acos", "acosh", "ivy.Array.acosh", "ivy.Container.acosh", "ivy.acosh", "add", "ivy.Array.add", "ivy.Container.add", "ivy.add", "ivy.Container.static_add", "asin", "ivy.Array.asin", "ivy.Container.asin", "ivy.asin", "asinh", "ivy.Array.asinh", "ivy.Container.asinh", "ivy.asinh", "ivy.Container.static_asinh", "atan", "ivy.Array.atan", "ivy.Container.atan", "ivy.atan", "atan2", "ivy.Array.atan2", "ivy.Container.atan2", "ivy.atan2", "atanh", "ivy.Array.atanh", "ivy.Container.atanh", "ivy.atanh", "bitwise_and", "ivy.Array.bitwise_and", "ivy.Container.bitwise_and", "ivy.bitwise_and", "bitwise_invert", "ivy.Array.bitwise_invert", "ivy.Container.bitwise_invert", "ivy.bitwise_invert", "bitwise_left_shift", "ivy.Array.bitwise_left_shift", "ivy.Container.bitwise_left_shift", "ivy.bitwise_left_shift", "bitwise_or", "ivy.Array.bitwise_or", "ivy.Container.bitwise_or", "ivy.bitwise_or", "bitwise_right_shift", "ivy.Array.bitwise_right_shift", "ivy.Container.bitwise_right_shift", "ivy.bitwise_right_shift", "bitwise_xor", "ivy.Array.bitwise_xor", "ivy.Container.bitwise_xor", "ivy.bitwise_xor", "ceil", "ivy.Array.ceil", "ivy.Container.ceil", "ivy.ceil", "cos", "ivy.Array.cos", "ivy.Container.cos", "ivy.cos", "cosh", "ivy.Array.cosh", "ivy.Container.cosh", "ivy.cosh", "divide", "ivy.Array.divide", "ivy.Container.divide", "ivy.divide", "ivy.Container.static_divide", "equal", "ivy.Array.equal", "ivy.Container.equal", "ivy.equal", "erf", "ivy.Array.erf", "ivy.Container.erf", "ivy.erf", "exp", "ivy.Array.exp", "ivy.Container.exp", "ivy.exp", "expm1", "ivy.Array.expm1", "ivy.Container.expm1", "ivy.expm1", "floor", "ivy.Array.floor", "ivy.Container.floor", "ivy.floor", "floor_divide", "ivy.Array.floor_divide", "ivy.Container.floor_divide", "ivy.floor_divide", "greater", "ivy.Array.greater", "ivy.Container.greater", "ivy.greater", "greater_equal", "ivy.Array.greater_equal", "ivy.Container.greater_equal", "ivy.greater_equal", "isfinite", "ivy.Array.isfinite", "ivy.Container.isfinite", "ivy.isfinite", "isinf", "ivy.Array.isinf", "ivy.Container.isinf", "ivy.isinf", "isnan", "ivy.Array.isnan", "ivy.Container.isnan", "ivy.isnan", "less", "ivy.Array.less", "ivy.Container.less", "ivy.less", "less_equal", "ivy.Array.less_equal", "ivy.Container.less_equal", "ivy.less_equal", "log", "ivy.Array.log", "ivy.Container.log", "ivy.log", "log10", "ivy.Array.log10", "ivy.Container.log10", "ivy.log10", "log1p", "ivy.Array.log1p", "ivy.Container.log1p", "ivy.log1p", "log2", "ivy.Array.log2", "ivy.Container.log2", "ivy.log2", "logaddexp", "ivy.Array.logaddexp", "ivy.Container.logaddexp", "ivy.logaddexp", "logical_and", "ivy.Array.logical_and", "ivy.Container.logical_and", "ivy.logical_and", "logical_not", "ivy.Array.logical_not", "ivy.Container.logical_not", "ivy.logical_not", "logical_or", "ivy.Array.logical_or", "ivy.Container.logical_or", "ivy.logical_or", "logical_xor", "ivy.Array.logical_xor", "ivy.Container.logical_xor", "ivy.logical_xor", "maximum", "minimum", "multiply", "ivy.Array.multiply", "ivy.Container.multiply", "ivy.multiply", "ivy.Container.static_multiply", "negative", "ivy.Array.negative", "ivy.Container.negative", "ivy.negative", "not_equal", "ivy.Array.not_equal", "ivy.Container.not_equal", "ivy.not_equal", "positive", "ivy.Array.positive", "ivy.Container.positive", "ivy.positive", "pow", "ivy.Array.pow", "ivy.Container.pow", "ivy.pow", "remainder", "ivy.Array.remainder", "ivy.Container.remainder", "ivy.remainder", "round", "ivy.Array.round", "ivy.Container.round", "ivy.round", "sign", "ivy.Array.sign", "ivy.Container.sign", "ivy.sign", "ivy.Container.static_sign", "sin", "ivy.Array.sin", "ivy.Container.sin", "ivy.sin", "sinh", "ivy.Array.sinh", "ivy.Container.sinh", "ivy.sinh", "sqrt", "ivy.Array.sqrt", "ivy.Container.sqrt", "ivy.sqrt", "square", "ivy.Array.square", "ivy.Container.square", "ivy.square", "subtract", "ivy.Container.static_subtract", "ivy.Array.subtract", "ivy.Container.subtract", "ivy.subtract", "tan", "ivy.Container.static_tan", "ivy.Array.tan", "ivy.Container.tan", "ivy.tan", "tanh", "ivy.Container.static_tanh", "ivy.Array.tanh", "ivy.Container.tanh", "ivy.tanh", "trunc", "ivy.Array.trunc", "ivy.Container.trunc", "ivy.trunc", "General", "all_equal", "ivy.Array.all_equal", "ivy.Container.all_equal", "ivy.all_equal", "ivy.Container.static_all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "ivy.Container.clip_vector_norm", "ivy.clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "ivy.Array.gather_nd", "ivy.Container.gather_nd", "ivy.gather_nd", "ivy.Container.static_gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_shape_array_mode", "set_tmp_dir", "shape", "shape_array_mode", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unset_shape_array_mode", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "ivy.Array.adam_step", "ivy.Container.adam_step", "ivy.adam_step", "ivy.Container.static_adam_step", "adam_update", "ivy.Container.adam_update", "ivy.adam_update", "ivy.Container.static_adam_update", "execute_with_gradients", "gradient_descent_update", "ivy.Container.gradient_descent_update", "ivy.gradient_descent_update", "ivy.Container.static_gradient_descent_update", "is_variable", "ivy.Container.is_variable", "ivy.is_variable", "ivy.Container.static_is_variable", "lamb_update", "ivy.Container.lamb_update", "ivy.lamb_update", "ivy.Container.static_lamb_update", "lars_update", "ivy.Container.lars_update", "ivy.lars_update", "ivy.Container.static_lars_update", "optimizer_update", "ivy.Container.optimizer_update", "ivy.optimizer_update", "ivy.Container.static_optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "ivy.Array.cholesky", "ivy.Container.cholesky", "ivy.cholesky", "ivy.Container.static_cholesky", "cross", "ivy.Array.cross", "ivy.cross", "det", "ivy.Array.det", "ivy.det", "diagonal", "ivy.Array.diagonal", "ivy.diagonal", "eigh", "ivy.Array.eigh", "ivy.eigh", "eigvalsh", "ivy.Array.eigvalsh", "ivy.eigvalsh", "inv", "ivy.Array.inv", "ivy.inv", "matmul", "ivy.Array.matmul", "ivy.Container.matmul", "ivy.matmul", "matrix_norm", "ivy.Array.matrix_norm", "ivy.matrix_norm", "matrix_power", "matrix_rank", "ivy.Array.matrix_rank", "ivy.matrix_rank", "matrix_transpose", "ivy.Array.matrix_transpose", "ivy.matrix_transpose", "outer", "ivy.Array.outer", "ivy.outer", "pinv", "ivy.Array.pinv", "ivy.pinv", "qr", "ivy.Array.qr", "ivy.qr", "slogdet", "solve", "ivy.Array.solve", "ivy.solve", "svd", "ivy.Array.svd", "ivy.svd", "svdvals", "ivy.Array.svdvals", "ivy.svdvals", "tensordot", "ivy.Array.tensordot", "ivy.tensordot", "trace", "ivy.Array.trace", "ivy.trace", "vecdot", "ivy.Array.vecdot", "ivy.vecdot", "vector_norm", "ivy.Array.vector_norm", "ivy.vector_norm", "vector_to_skew_symmetric_matrix", "ivy.Array.vector_to_skew_symmetric_matrix", "ivy.vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "ivy.Array.binary_cross_entropy", "ivy.Container.binary_cross_entropy", "ivy.binary_cross_entropy", "ivy.Container.static_binary_cross_entropy", "cross_entropy", "ivy.Array.cross_entropy", "ivy.Container.cross_entropy", "ivy.cross_entropy", "ivy.Container.static_cross_entropy", "sparse_cross_entropy", "ivy.Array.sparse_cross_entropy", "ivy.Container.sparse_cross_entropy", "ivy.sparse_cross_entropy", "ivy.Container.static_sparse_cross_entropy", "Manipulation", "clip", "ivy.Array.clip", "ivy.Container.clip", "ivy.clip", "ivy.Container.static_clip", "concat", "ivy.Array.concat", "ivy.Container.concat", "ivy.concat", "constant_pad", "ivy.Array.constant_pad", "ivy.Container.constant_pad", "ivy.constant_pad", "expand_dims", "ivy.Array.expand_dims", "ivy.Container.expand_dims", "ivy.expand_dims", "flip", "ivy.Array.flip", "ivy.Container.flip", "ivy.flip", "permute_dims", "ivy.Array.permute_dims", "ivy.Container.permute_dims", "ivy.permute_dims", "repeat", "ivy.Array.repeat", "ivy.Container.repeat", "ivy.repeat", "reshape", "ivy.Array.reshape", "ivy.Container.reshape", "ivy.reshape", "roll", "ivy.Array.roll", "ivy.Container.roll", "ivy.roll", "ivy.Container.static_roll", "split", "squeeze", "ivy.Array.squeeze", "ivy.Container.squeeze", "ivy.squeeze", "stack", "ivy.Array.stack", "ivy.Container.stack", "ivy.stack", "swapaxes", "ivy.Array.swapaxes", "ivy.Container.swapaxes", "ivy.swapaxes", "tile", "ivy.Array.tile", "ivy.Container.tile", "ivy.tile", "zero_pad", "ivy.Array.zero_pad", "ivy.Container.zero_pad", "ivy.zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "ivy.Array.layer_norm", "ivy.Container.layer_norm", "ivy.layer_norm", "ivy.Container.static_layer_norm", "Random", "multinomial", "randint", "ivy.randint", "ivy.Container.static_randint", "random_normal", "random_uniform", "ivy.Container.random_uniform", "ivy.random_uniform", "ivy.Container.static_random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "ivy.Container.static_unique_counts", "ivy.Array.unique_counts", "ivy.Container.unique_counts", "ivy.unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "ivy.Array.argsort", "ivy.Container.argsort", "ivy.argsort", "ivy.Container.static_argsort", "sort", "ivy.Array.sort", "ivy.Container.sort", "ivy.sort", "ivy.Container.static_sort", "Statistical", "einsum", "ivy.Array.einsum", "ivy.Container.einsum", "ivy.einsum", "max", "ivy.Array.max", "ivy.Container.max", "ivy.max", "mean", "ivy.Array.mean", "ivy.Container.mean", "ivy.mean", "min", "ivy.Array.min", "ivy.Container.min", "ivy.min", "prod", "ivy.Array.prod", "ivy.Container.prod", "ivy.prod", "std", "ivy.Array.std", "ivy.Container.std", "ivy.std", "sum", "ivy.Array.sum", "ivy.Container.sum", "ivy.sum", "var", "ivy.Array.var", "ivy.Container.var", "ivy.var", "Utility", "all", "ivy.Array.all", "ivy.Container.all", "ivy.all", "ivy.Container.static_all", "any", "ivy.Array.any", "ivy.Container.any", "ivy.any", "ivy.Container.static_any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Framework classes", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 6, 12, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 121, 125, 126, 127, 128, 132, 133, 135, 136, 137, 147, 148, 149, 246, 288, 291, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 608, 615, 652, 658, 679, 685, 687, 689, 691, 721, 888, 890, 900, 924, 927, 993, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "ivi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 122, 123, 124, 126, 127, 128, 129, 130, 131, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 171, 172, 173, 174, 175, 176, 179, 184, 185, 190, 193, 198, 199, 204, 207, 210, 215, 220, 223, 228, 233, 238, 241, 246, 250, 251, 252, 257, 262, 267, 272, 273, 274, 275, 276, 280, 281, 286, 287, 288, 293, 294, 299, 304, 305, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 374, 378, 382, 387, 391, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 444, 449, 453, 457, 461, 465, 469, 473, 477, 481, 485, 489, 493, 497, 501, 505, 509, 513, 517, 521, 525, 529, 533, 537, 538, 539, 544, 548, 552, 556, 560, 564, 568, 573, 577, 581, 585, 589, 594, 599, 604, 608, 609, 614, 615, 616, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 692, 696, 697, 701, 705, 709, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 745, 748, 751, 754, 757, 760, 764, 767, 768, 771, 774, 777, 780, 783, 784, 787, 790, 793, 796, 799, 802, 805, 808, 809, 814, 819, 824, 825, 830, 834, 838, 842, 846, 850, 854, 858, 863, 864, 868, 872, 876, 880, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 917, 918, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 936, 937, 938, 939, 944, 949, 950, 954, 958, 962, 966, 970, 974, 978, 982, 983, 988, 993, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041], "backend_handl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 993], "contextmanag": [0, 1], "modul": [0, 4, 5, 16, 18, 21, 67, 68, 72, 73, 74, 75, 76, 113, 114, 121, 122, 123, 125, 129, 130, 132, 133, 135, 137, 148, 149, 608, 659, 912, 913, 917, 993, 1001, 1002, 1003, 1004, 1005, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1037, 1038], "sourc": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 125, 126, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041], "base": [0, 19, 24, 25, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 121, 124, 126, 132, 148, 175, 207, 208, 209, 246, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 368, 457, 460, 501, 504, 505, 508, 509, 512, 513, 516, 556, 559, 608, 643, 666, 675, 685, 929, 930, 931, 935, 937, 949, 950, 953, 1001, 1002, 1003, 1006, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "object": [0, 23, 69, 72, 73, 74, 75, 76, 121, 134, 137, 175, 193, 196, 246, 281, 284, 318, 363, 685, 888, 891, 893, 895, 896, 897, 902, 903, 904, 905, 912, 923, 1006, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1027, 1028], "__init__": [0, 1, 4, 5, 72, 73, 74, 75, 76, 116, 123, 127, 132, 134, 135, 136, 137, 246, 247, 248, 249, 318, 319, 326, 327, 328, 329, 330, 331, 332, 333, 685, 686, 912, 913, 917, 993, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "choose_random_backend": 0, "exclud": [0, 2, 119, 132, 175, 176, 177, 912, 918, 920], "none": [0, 2, 5, 12, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 119, 121, 122, 126, 127, 128, 129, 130, 132, 134, 136, 137, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 269, 271, 273, 274, 275, 276, 278, 281, 283, 284, 285, 288, 290, 291, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 317, 318, 327, 328, 336, 337, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 613, 614, 620, 621, 622, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 646, 648, 649, 653, 659, 661, 664, 665, 666, 667, 669, 674, 675, 681, 682, 685, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 894, 899, 900, 901, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 931, 932, 934, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 1004, 1005, 1006, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "clear_backend_stack": 0, "current_backend": [0, 74, 75, 116, 122], "arg": [0, 4, 21, 23, 26, 27, 28, 69, 72, 73, 132, 134, 136, 318, 327, 342, 346, 350, 362, 608, 665, 1004, 1005, 1027, 1028], "kwarg": [0, 4, 23, 26, 27, 28, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 132, 134, 136, 318, 327, 342, 346, 350, 608, 658, 1004, 1005, 1027, 1028], "return": [0, 4, 5, 12, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 317, 318, 327, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 669, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 711, 712, 713, 714, 715, 716, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 898, 899, 900, 901, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 998, 1004, 1005, 1015, 1024, 1025, 1031, 1035], "current": [0, 4, 5, 12, 16, 18, 19, 20, 21, 72, 73, 74, 75, 76, 122, 128, 132, 137, 148, 149, 246, 286, 287, 293, 317, 318, 327, 351, 352, 356, 358, 608, 642, 649, 653, 660, 662, 672, 685, 722, 888, 889, 898, 899, 993], "prioriti": [0, 4, 19, 72, 73, 129], "global_backend": [0, 4], "argument": [0, 4, 5, 14, 20, 26, 27, 28, 29, 30, 69, 72, 73, 74, 75, 76, 115, 116, 118, 119, 121, 122, 123, 125, 126, 130, 132, 134, 135, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 305, 308, 318, 327, 328, 342, 346, 350, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 465, 468, 537, 548, 551, 568, 571, 581, 584, 585, 588, 594, 598, 608, 614, 615, 619, 629, 636, 658, 665, 723, 726, 735, 736, 737, 740, 748, 750, 824, 858, 861, 888, 894, 906, 907, 910, 929, 931, 935, 949, 954, 957, 974, 977, 982, 983, 986, 996, 998, 1004, 1005, 1027, 1028], "s": [0, 4, 5, 6, 12, 15, 16, 17, 18, 19, 21, 26, 29, 30, 69, 72, 73, 115, 117, 118, 119, 121, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 174, 175, 210, 213, 228, 232, 233, 237, 246, 286, 287, 318, 337, 361, 368, 560, 563, 608, 617, 685, 692, 694, 697, 699, 705, 707, 713, 715, 736, 787, 789, 790, 792, 888, 894, 900, 949, 970, 973, 978, 981, 993, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038], "paramet": [0, 4, 5, 26, 27, 28, 29, 30, 67, 68, 72, 73, 74, 75, 76, 113, 114, 116, 118, 121, 134, 135, 148, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 250, 251, 252, 255, 257, 260, 262, 265, 267, 270, 272, 273, 274, 275, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 310, 311, 312, 313, 317, 318, 327, 328, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 609, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 664, 665, 666, 667, 668, 670, 671, 673, 674, 675, 676, 678, 679, 680, 681, 683, 684, 685, 687, 690, 692, 694, 696, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 935, 936, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 996, 998, 1004, 1005, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "from": [0, 4, 5, 6, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 67, 68, 69, 72, 73, 74, 75, 76, 113, 114, 115, 116, 117, 118, 119, 121, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 175, 176, 177, 179, 182, 185, 188, 193, 196, 198, 199, 202, 210, 213, 215, 218, 223, 226, 241, 245, 246, 267, 270, 305, 308, 318, 327, 328, 337, 352, 356, 361, 362, 368, 473, 476, 581, 584, 608, 629, 636, 637, 640, 678, 685, 692, 694, 705, 707, 723, 731, 734, 736, 748, 750, 787, 789, 799, 801, 824, 842, 845, 854, 857, 864, 867, 884, 885, 886, 887, 888, 890, 900, 901, 912, 913, 914, 915, 917, 918, 920, 924, 928, 929, 930, 936, 949, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993, 999, 1004, 1005, 1015, 1023, 1026, 1031, 1035], "which": [0, 4, 5, 14, 15, 16, 18, 19, 20, 21, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 148, 149, 160, 165, 172, 173, 174, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 272, 276, 279, 281, 284, 288, 291, 293, 317, 318, 327, 328, 338, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 358, 360, 361, 362, 368, 560, 563, 608, 614, 626, 627, 629, 636, 637, 640, 642, 648, 652, 660, 661, 662, 664, 665, 683, 685, 692, 694, 696, 697, 699, 705, 707, 709, 711, 713, 715, 718, 720, 721, 723, 734, 736, 742, 744, 748, 750, 764, 766, 784, 786, 787, 789, 799, 801, 802, 804, 808, 814, 817, 819, 822, 824, 830, 833, 842, 845, 850, 853, 858, 861, 863, 868, 871, 888, 893, 894, 895, 896, 901, 902, 903, 904, 905, 912, 913, 914, 915, 918, 920, 924, 925, 926, 927, 928, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993, 996, 998, 1004, 1005, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038], "try": [0, 4, 13, 15, 16, 18, 19, 20, 21, 72, 73, 125, 126, 130, 134, 149, 608, 681, 993], "infer": [0, 4, 115, 123, 127, 128, 132, 137, 172, 173, 175, 176, 177, 179, 182, 185, 188, 198, 199, 202, 215, 218, 223, 226, 241, 245, 368, 473, 476, 608, 645, 671, 824, 854, 857], "when": [0, 4, 14, 15, 18, 19, 20, 23, 69, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 137, 149, 246, 252, 255, 318, 368, 382, 385, 461, 464, 556, 559, 608, 619, 652, 675, 808, 809, 812, 814, 817, 819, 822, 888, 899, 924, 925, 926, 928, 949, 954, 957, 962, 965, 970, 973, 978, 981, 993, 1027, 1028], "global": [0, 4, 5, 6, 12, 72, 73, 74, 75, 76, 122, 123, 127, 128, 132, 246, 273, 274, 275, 318, 327, 328, 360, 361, 362, 608, 643, 644, 663, 666, 667, 668, 674, 675, 685, 722, 906, 907, 910, 1029, 1030], "set": [0, 4, 5, 6, 12, 14, 17, 19, 26, 29, 30, 60, 69, 72, 73, 106, 115, 116, 121, 122, 124, 125, 126, 127, 128, 129, 132, 134, 135, 318, 337, 347, 348, 359, 360, 361, 362, 368, 400, 403, 608, 609, 612, 666, 667, 668, 669, 670, 685, 692, 694, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 736, 742, 744, 764, 766, 768, 770, 777, 779, 784, 786, 888, 889, 898, 899, 900, 904, 905, 912, 922, 924, 925, 930, 931, 935, 936, 937, 938, 939, 942, 944, 947, 949, 970, 973, 978, 981, 1015, 1024, 1031, 1032, 1033, 1034, 1035, 1036], "ret": [0, 4, 5, 12, 26, 27, 28, 29, 30, 72, 73, 79, 80, 116, 118, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 250, 251, 252, 255, 257, 260, 262, 265, 267, 270, 272, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 317, 318, 327, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 609, 612, 614, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 664, 665, 671, 674, 675, 676, 678, 679, 680, 683, 684, 685, 687, 690, 692, 694, 696, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 898, 899, 900, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 923, 924, 925, 926, 927, 928, 929, 930, 931, 935, 936, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 996, 998, 1004, 1005, 1031, 1035], "exampl": [0, 4, 5, 6, 12, 16, 18, 19, 20, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 67, 68, 69, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 115, 116, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 160, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 238, 240, 241, 245, 246, 252, 255, 267, 268, 269, 270, 271, 286, 287, 317, 318, 337, 338, 340, 352, 353, 354, 355, 356, 359, 361, 363, 365, 366, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 404, 407, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 581, 584, 585, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 608, 609, 610, 611, 612, 613, 616, 617, 625, 626, 633, 636, 637, 638, 639, 640, 641, 644, 655, 669, 671, 672, 673, 678, 679, 680, 682, 685, 687, 688, 689, 690, 691, 722, 723, 724, 726, 728, 729, 730, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 750, 757, 759, 768, 770, 774, 776, 787, 789, 793, 795, 796, 798, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 838, 841, 842, 845, 850, 853, 854, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 871, 872, 875, 888, 891, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 939, 942, 949, 950, 953, 954, 957, 970, 973, 974, 977, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993], "If": [0, 4, 5, 6, 14, 17, 18, 19, 20, 21, 23, 26, 29, 30, 69, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 137, 149, 175, 176, 177, 184, 185, 188, 190, 191, 198, 199, 202, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 305, 308, 318, 337, 361, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 525, 528, 529, 532, 539, 542, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603, 604, 607, 608, 652, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 722, 736, 737, 740, 742, 744, 764, 766, 768, 770, 777, 779, 780, 782, 784, 786, 787, 789, 799, 801, 802, 804, 808, 809, 812, 814, 817, 819, 822, 824, 838, 841, 842, 845, 858, 861, 863, 864, 867, 868, 871, 884, 885, 886, 888, 900, 901, 912, 917, 918, 920, 924, 925, 926, 927, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993], "import": [0, 4, 15, 20, 67, 68, 113, 114, 116, 118, 119, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 137, 149, 318, 359, 993, 999], "numpi": [0, 4, 5, 6, 14, 15, 19, 20, 72, 73, 117, 121, 123, 127, 128, 129, 132, 134, 137, 608, 679, 949, 950, 953, 993], "np": [0, 4, 117, 121, 125, 127, 128, 129, 134, 135, 137, 993], "x": [0, 4, 12, 21, 26, 29, 30, 33, 34, 37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 116, 117, 118, 119, 121, 122, 123, 126, 129, 130, 132, 134, 135, 136, 137, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 175, 179, 182, 183, 185, 188, 189, 193, 196, 197, 199, 202, 203, 210, 213, 215, 218, 219, 223, 226, 227, 228, 229, 232, 233, 234, 237, 238, 240, 241, 242, 245, 246, 252, 255, 256, 262, 265, 266, 267, 268, 269, 270, 271, 276, 279, 318, 337, 338, 339, 340, 343, 344, 352, 356, 361, 363, 368, 369, 370, 371, 372, 373, 374, 377, 378, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 453, 456, 457, 460, 461, 464, 465, 466, 467, 468, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 525, 528, 537, 538, 544, 547, 552, 555, 564, 567, 568, 569, 570, 571, 572, 573, 576, 577, 580, 581, 584, 585, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 616, 617, 618, 620, 621, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 650, 651, 652, 654, 655, 656, 657, 661, 671, 673, 676, 678, 679, 680, 683, 684, 685, 696, 701, 703, 704, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 764, 766, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 787, 789, 790, 792, 793, 795, 796, 798, 802, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 875, 876, 879, 880, 883, 888, 889, 891, 894, 898, 899, 900, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 943, 944, 947, 948, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1015, 1026], "arrai": [0, 4, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 116, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 149, 150, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 174, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 212, 213, 214, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 259, 260, 261, 262, 265, 267, 269, 270, 271, 276, 279, 281, 284, 288, 291, 294, 297, 299, 302, 305, 308, 313, 318, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 358, 362, 363, 368, 369, 371, 372, 373, 374, 377, 378, 381, 382, 384, 385, 386, 387, 390, 391, 393, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 434, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 467, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 570, 571, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 595, 597, 598, 599, 600, 602, 603, 604, 607, 608, 609, 611, 612, 613, 616, 617, 618, 620, 621, 623, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 645, 647, 648, 649, 650, 651, 652, 654, 655, 657, 660, 661, 662, 664, 665, 669, 671, 673, 676, 678, 679, 680, 682, 683, 684, 685, 687, 689, 690, 691, 692, 694, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 860, 861, 862, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 884, 885, 886, 887, 888, 890, 891, 900, 901, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 985, 986, 987, 988, 990, 991, 992, 993, 996, 998, 1015, 1023, 1026], "2": [0, 4, 18, 19, 21, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 69, 72, 73, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 117, 119, 121, 123, 126, 131, 132, 134, 135, 136, 137, 149, 160, 162, 163, 164, 165, 171, 174, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 241, 245, 246, 252, 255, 267, 268, 269, 270, 271, 318, 337, 338, 340, 352, 354, 356, 363, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 393, 394, 395, 396, 399, 400, 403, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 513, 516, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 581, 584, 585, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 608, 609, 610, 611, 612, 616, 617, 620, 621, 623, 626, 633, 636, 637, 638, 639, 640, 641, 655, 671, 673, 678, 685, 687, 688, 689, 690, 691, 723, 726, 727, 728, 729, 730, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 749, 750, 757, 759, 760, 763, 764, 766, 768, 770, 774, 776, 777, 779, 780, 782, 787, 789, 793, 794, 795, 796, 798, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 838, 841, 842, 845, 850, 853, 854, 857, 858, 859, 860, 861, 862, 863, 864, 867, 872, 875, 888, 891, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 939, 942, 949, 950, 953, 954, 957, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993], "0": [0, 4, 19, 31, 32, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 63, 64, 65, 66, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 118, 119, 121, 132, 134, 135, 136, 137, 160, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 190, 191, 192, 204, 205, 207, 208, 209, 223, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 245, 246, 252, 255, 267, 269, 270, 271, 281, 284, 318, 320, 323, 327, 330, 334, 337, 338, 340, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 359, 361, 362, 366, 368, 369, 370, 372, 373, 374, 377, 378, 381, 382, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 416, 419, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 466, 467, 468, 477, 480, 497, 500, 501, 504, 505, 508, 513, 516, 537, 538, 539, 542, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 568, 569, 570, 571, 572, 573, 576, 577, 580, 581, 584, 585, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 616, 617, 620, 621, 623, 625, 626, 627, 633, 636, 637, 640, 641, 646, 655, 661, 664, 665, 671, 678, 679, 680, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 705, 706, 707, 708, 709, 710, 711, 712, 723, 724, 726, 728, 729, 730, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 749, 750, 757, 759, 787, 789, 793, 795, 796, 797, 798, 802, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 846, 849, 850, 853, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 875, 880, 882, 888, 891, 900, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 942, 949, 950, 953, 954, 957, 958, 961, 970, 971, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 1006, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038], "print": [0, 4, 5, 6, 12, 18, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 67, 68, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 119, 121, 126, 132, 134, 135, 136, 160, 162, 163, 164, 165, 166, 169, 171, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 238, 240, 241, 245, 246, 252, 255, 267, 268, 269, 270, 271, 286, 287, 317, 318, 338, 352, 353, 354, 355, 356, 358, 361, 365, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 404, 407, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 581, 584, 585, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 608, 609, 610, 611, 612, 613, 616, 617, 625, 626, 633, 636, 637, 638, 639, 640, 641, 644, 662, 671, 673, 678, 679, 680, 685, 687, 688, 690, 691, 722, 723, 724, 726, 728, 729, 730, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 750, 757, 759, 774, 776, 787, 789, 793, 795, 796, 798, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 838, 841, 842, 845, 850, 853, 854, 857, 858, 859, 860, 861, 862, 863, 864, 867, 872, 875, 888, 891, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 939, 942, 949, 950, 953, 954, 957, 970, 973, 974, 977, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993], "function": [0, 4, 5, 6, 14, 19, 21, 24, 25, 26, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 67, 68, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 115, 116, 118, 119, 120, 123, 125, 129, 130, 131, 133, 134, 135, 136, 147, 148, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 218, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 250, 251, 252, 255, 257, 260, 262, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 466, 467, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 569, 570, 571, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 696, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 998, 1001, 1002, 1003, 1031, 1034, 1036], "py": [0, 4, 5, 19, 116, 117, 118, 121, 122, 123, 127, 128, 130, 132, 134, 136, 137, 912, 913, 917], "noqa": [0, 4, 5, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 497, 500, 537, 548, 551, 564, 567, 568, 571, 581, 584, 585, 588, 594, 598, 599, 603, 736, 745, 747, 748, 750, 824, 838, 841, 842, 845, 858, 861, 949, 954, 957], "The": [0, 4, 5, 13, 14, 16, 17, 18, 20, 21, 23, 26, 27, 28, 29, 30, 69, 72, 73, 74, 75, 76, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 148, 160, 161, 162, 165, 171, 172, 173, 175, 176, 177, 193, 196, 207, 208, 228, 232, 233, 237, 246, 250, 251, 252, 255, 272, 280, 286, 287, 293, 294, 297, 299, 302, 304, 313, 317, 318, 327, 328, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603, 604, 607, 608, 614, 616, 619, 620, 628, 629, 635, 637, 640, 650, 651, 652, 654, 655, 656, 657, 659, 664, 665, 666, 667, 668, 673, 674, 675, 684, 685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 718, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 808, 809, 812, 814, 817, 819, 822, 824, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 863, 876, 879, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 910, 912, 913, 917, 924, 925, 926, 927, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993, 1004, 1005, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035], "set_backend": [0, 4, 5, 12, 122, 123, 124, 127, 246, 286, 287, 318, 359, 608, 671, 993], "ha": [0, 4, 5, 14, 15, 16, 19, 69, 72, 73, 118, 119, 121, 122, 123, 124, 127, 128, 130, 132, 134, 136, 137, 148, 149, 175, 210, 213, 318, 337, 368, 369, 372, 539, 542, 556, 559, 685, 722, 736, 760, 763, 783, 784, 786, 787, 789, 796, 798, 824, 838, 841, 864, 867, 929, 930, 931, 935, 937, 949, 958, 961, 966, 969, 970, 973, 974, 977, 978, 981], "over": [0, 4, 14, 16, 18, 67, 68, 69, 72, 73, 113, 114, 118, 119, 121, 123, 129, 134, 149, 736, 764, 766, 793, 795, 799, 801, 802, 804, 906, 907, 910, 912, 918, 920, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 1029, 1030], "ani": [0, 4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 65, 66, 67, 68, 72, 73, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 318, 363, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 449, 452, 465, 468, 477, 480, 497, 500, 537, 548, 551, 568, 571, 581, 584, 585, 588, 594, 598, 608, 609, 612, 629, 630, 631, 632, 633, 636, 647, 654, 655, 656, 657, 674, 675, 685, 696, 723, 726, 733, 735, 736, 737, 740, 748, 750, 824, 858, 861, 884, 885, 886, 887, 888, 891, 894, 898, 906, 907, 910, 912, 918, 920, 929, 931, 935, 949, 954, 957, 982, 983, 986, 992, 993], "pass": [0, 4, 20, 67, 68, 72, 73, 74, 75, 76, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 134, 149, 246, 272, 318, 327, 362, 368, 400, 403, 608, 619, 652, 685, 721, 884, 885, 886, 1004, 1005, 1027, 1028, 1031, 1035, 1037, 1038], "jax": [0, 4, 5, 6, 15, 16, 19, 20, 117, 121, 123, 127, 128, 129, 132, 134, 137, 149, 685, 701, 703, 929, 930, 931, 935, 937, 993], "get_backend": [0, 122, 123], "specifi": [0, 5, 69, 72, 73, 115, 117, 121, 122, 127, 128, 129, 132, 135, 136, 137, 175, 176, 177, 184, 198, 204, 205, 207, 208, 220, 221, 228, 232, 233, 237, 238, 240, 246, 252, 255, 262, 265, 318, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 356, 358, 361, 362, 363, 368, 560, 563, 608, 614, 626, 636, 637, 640, 647, 683, 736, 748, 750, 764, 766, 793, 795, 796, 798, 799, 801, 802, 804, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 842, 845, 858, 861, 864, 867, 868, 871, 880, 883, 888, 893, 895, 896, 902, 903, 904, 905, 924, 925, 926, 929, 930, 931, 935, 937, 938, 939, 942, 949, 950, 953, 966, 969, 974, 977, 982, 983, 986, 988, 991], "isn": [0, 5, 19, 135, 149], "t": [0, 5, 15, 16, 18, 19, 20, 21, 67, 68, 113, 114, 119, 121, 127, 132, 134, 135, 136, 137, 149, 608, 617, 723, 732, 733], "associ": [0, 5, 19, 121, 122, 124, 149, 368, 382, 385, 539, 542, 736, 768, 770, 777, 779, 805, 807], "option": [0, 5, 18, 19, 26, 27, 28, 29, 30, 67, 68, 72, 73, 74, 75, 113, 114, 116, 117, 118, 119, 121, 122, 126, 127, 128, 129, 130, 132, 137, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 272, 273, 274, 275, 293, 317, 318, 337, 361, 362, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 614, 620, 621, 623, 626, 627, 628, 630, 631, 632, 634, 636, 637, 640, 648, 659, 661, 664, 665, 674, 675, 685, 718, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 884, 885, 886, 887, 888, 889, 894, 899, 900, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 923, 924, 925, 926, 928, 929, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "str": [0, 5, 23, 26, 27, 28, 69, 72, 73, 127, 128, 130, 172, 173, 175, 210, 213, 246, 250, 272, 273, 274, 280, 281, 284, 288, 291, 293, 294, 297, 299, 302, 310, 311, 312, 317, 318, 334, 337, 338, 340, 343, 344, 345, 346, 362, 608, 614, 628, 630, 631, 632, 659, 664, 665, 723, 724, 725, 726, 727, 728, 729, 730, 736, 780, 782, 884, 885, 886, 887, 888, 894, 949, 950, 953], "we": [0, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 67, 68, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 136, 137, 148, 149, 685, 696, 993, 999], "want": [0, 5, 15, 17, 18, 19, 67, 68, 113, 114, 121, 135, 136, 137, 149], "retriev": [0, 5, 19, 608, 614], "i": [0, 5, 19, 21, 115, 121, 132, 135, 137, 175, 176, 177, 210, 213, 368, 369, 372, 400, 403, 416, 419, 424, 427, 432, 435, 465, 468, 469, 472, 481, 484, 537, 538, 544, 547, 556, 559, 560, 563, 608, 616, 617, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 736, 742, 744, 760, 763, 768, 770, 777, 779, 784, 786, 787, 789, 796, 798, 802, 804, 824, 868, 871, 888, 891, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 970, 973, 974, 977, 978, 981], "e": [0, 5, 15, 16, 17, 19, 21, 69, 115, 121, 126, 135, 149, 174, 175, 210, 213, 246, 251, 305, 308, 318, 334, 368, 369, 372, 400, 403, 416, 419, 424, 427, 432, 435, 457, 460, 465, 468, 469, 472, 481, 484, 501, 504, 509, 512, 537, 538, 544, 547, 556, 559, 560, 563, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 736, 742, 744, 760, 763, 768, 770, 777, 779, 784, 786, 787, 789, 802, 804, 824, 868, 871, 888, 891, 912, 917, 918, 920, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981], "one": [0, 5, 15, 16, 18, 19, 69, 72, 73, 83, 84, 85, 86, 93, 94, 97, 98, 99, 100, 101, 102, 117, 119, 121, 122, 125, 126, 127, 129, 130, 131, 134, 135, 137, 149, 175, 176, 177, 210, 213, 246, 257, 260, 267, 270, 318, 347, 348, 349, 350, 362, 368, 369, 373, 382, 386, 391, 395, 537, 568, 572, 608, 609, 611, 612, 613, 637, 641, 658, 661, 664, 665, 736, 737, 741, 760, 763, 764, 766, 774, 776, 780, 782, 799, 801, 802, 804, 824, 825, 829, 838, 841, 842, 845, 858, 861, 862, 864, 867, 906, 907, 909, 910, 911, 914, 916, 924, 925, 927, 929, 930, 931, 935, 936, 937, 949, 950, 953, 993], "default": [0, 5, 19, 23, 26, 27, 28, 29, 30, 67, 68, 69, 72, 73, 74, 75, 76, 113, 114, 117, 118, 119, 121, 122, 123, 126, 127, 128, 136, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 273, 274, 275, 276, 279, 318, 327, 328, 337, 338, 342, 343, 344, 345, 346, 347, 348, 349, 350, 357, 359, 360, 361, 362, 363, 366, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 609, 612, 614, 620, 621, 623, 626, 627, 630, 631, 632, 634, 635, 636, 637, 640, 645, 646, 647, 648, 649, 652, 653, 654, 655, 657, 658, 659, 661, 663, 664, 665, 668, 671, 674, 675, 683, 684, 685, 687, 690, 692, 694, 696, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 718, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 894, 898, 899, 900, 901, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 1004, 1005, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "torch": [0, 5, 12, 19, 116, 117, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 172, 173, 246, 286, 287, 318, 359, 608, 671, 824, 838, 841, 993], "tensorflow": [0, 5, 12, 15, 16, 19, 20, 117, 121, 127, 128, 129, 132, 137, 149, 993], "mxnet": [0, 5, 15, 20, 127, 128, 129, 132, 137, 993], "either": [0, 5, 12, 18, 19, 21, 69, 72, 73, 118, 119, 121, 122, 123, 126, 127, 128, 132, 134, 135, 149, 175, 193, 196, 368, 382, 385, 400, 403, 485, 488, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 560, 563, 568, 571, 573, 576, 594, 598, 608, 629, 654, 658, 659, 736, 760, 763, 884, 885, 886, 887, 949, 966, 969, 974, 977, 1015, 1026, 1027, 1028], "doesn": [0, 5, 18, 21, 119, 121, 127, 132, 149], "matter": [0, 5, 14, 119], "been": [0, 5, 19, 117, 118, 121, 122, 123, 126, 127, 128, 130, 132, 148, 149, 318, 337, 608, 630, 631, 632, 912, 913], "ivy_np": [0, 5, 121], "us": [0, 5, 12, 15, 16, 17, 19, 20, 23, 37, 38, 67, 68, 69, 72, 73, 74, 75, 76, 83, 84, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 148, 149, 160, 162, 163, 164, 165, 166, 169, 171, 174, 246, 280, 318, 327, 328, 353, 357, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 387, 390, 391, 392, 393, 408, 411, 428, 431, 440, 443, 477, 480, 497, 500, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 581, 584, 608, 636, 643, 644, 658, 664, 665, 666, 667, 674, 675, 685, 687, 690, 692, 694, 705, 707, 709, 711, 723, 729, 731, 732, 734, 735, 736, 745, 747, 748, 750, 764, 766, 808, 809, 812, 824, 838, 841, 842, 845, 850, 853, 858, 861, 872, 875, 884, 885, 886, 887, 888, 889, 891, 897, 898, 899, 901, 906, 907, 910, 924, 925, 926, 927, 929, 930, 949, 950, 953, 982, 983, 986, 993, 1015, 1023, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034], "ivy_jax": [0, 5], "subsequ": [0, 6, 18, 117, 119, 121, 122, 125, 129, 136], "call": [0, 6, 12, 15, 21, 23, 69, 74, 75, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 318, 362, 608, 663, 668, 681, 685, 696, 888, 889, 894, 898, 899, 1015, 1026, 1027, 1028, 1031, 1035], "nativ": [0, 6, 26, 28, 29, 30, 72, 73, 121, 127, 129, 134, 135, 175, 215, 218, 246, 250, 251, 272, 318, 334, 335, 336, 337, 338, 357, 364, 367, 608, 652, 654, 657, 1004, 1005], "native_arrai": [0, 6, 12, 31, 32, 39, 40, 77, 78, 85, 86, 121, 160, 162, 163, 164, 165, 166, 169, 171, 175, 210, 213, 241, 245, 246, 267, 270, 318, 340, 356, 368, 369, 372, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 465, 468, 477, 480, 497, 500, 538, 544, 547, 548, 551, 568, 571, 581, 584, 585, 588, 599, 603, 608, 609, 610, 611, 612, 613, 617, 625, 626, 633, 636, 637, 640, 673, 678, 679, 680, 685, 687, 690, 723, 726, 729, 730, 735, 736, 742, 744, 745, 747, 748, 750, 793, 795, 808, 809, 812, 819, 822, 824, 825, 828, 838, 841, 842, 845, 850, 853, 863, 872, 875, 912, 913, 924, 925, 926, 927, 928, 929, 930, 931, 935, 949, 950, 953, 954, 957, 982, 983, 986], "1": [0, 6, 12, 15, 16, 21, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 65, 66, 69, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 117, 119, 121, 122, 126, 129, 130, 131, 132, 134, 135, 136, 137, 149, 160, 162, 163, 164, 165, 171, 175, 176, 177, 178, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 241, 245, 246, 252, 255, 267, 268, 269, 270, 271, 281, 284, 318, 322, 325, 327, 332, 337, 338, 340, 342, 346, 350, 352, 355, 356, 363, 368, 369, 370, 371, 372, 374, 377, 378, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 400, 403, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 537, 538, 544, 547, 548, 551, 556, 559, 564, 567, 568, 569, 570, 571, 572, 573, 576, 581, 584, 585, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 608, 609, 610, 611, 612, 613, 616, 617, 625, 626, 633, 636, 637, 638, 639, 640, 641, 655, 661, 664, 665, 671, 673, 675, 678, 679, 680, 683, 685, 687, 688, 689, 690, 691, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 757, 759, 768, 770, 774, 776, 784, 786, 787, 789, 793, 795, 796, 798, 799, 800, 801, 802, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 871, 872, 875, 888, 891, 900, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 953, 954, 957, 970, 973, 974, 977, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038], "type": [0, 6, 12, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 124, 125, 126, 128, 129, 130, 132, 134, 135, 137, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 317, 318, 334, 335, 336, 337, 338, 340, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 616, 617, 619, 620, 621, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 650, 651, 652, 654, 655, 656, 657, 661, 664, 665, 666, 667, 669, 671, 672, 674, 675, 676, 678, 679, 680, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 695, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 711, 712, 713, 714, 715, 716, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 894, 898, 899, 900, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "ndarrai": [0, 6, 117, 125, 127, 128, 129, 134, 175, 179, 182, 215, 218, 608, 679], "Or": [0, 6, 135], "jaxlib": [0, 6, 18, 117, 127, 128, 134], "xla_extens": [0, 6, 117, 127, 128, 134], "devicearrai": [0, 6, 134], "try_import_ivy_jax": 0, "warn": [0, 7, 8, 9, 10, 11], "fals": [0, 7, 8, 9, 10, 11, 23, 26, 27, 28, 29, 30, 33, 34, 39, 40, 47, 48, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 126, 129, 130, 135, 136, 137, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 246, 252, 254, 255, 256, 257, 259, 261, 262, 264, 266, 267, 269, 270, 271, 276, 277, 278, 279, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 317, 318, 337, 338, 349, 353, 354, 357, 362, 365, 367, 368, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 411, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 497, 499, 500, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 528, 529, 531, 532, 533, 535, 539, 541, 543, 544, 546, 548, 550, 551, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 579, 581, 583, 585, 587, 589, 590, 592, 594, 595, 597, 599, 600, 602, 604, 606, 608, 609, 610, 611, 612, 613, 616, 617, 621, 622, 626, 629, 633, 635, 637, 639, 641, 645, 652, 654, 655, 657, 658, 669, 671, 672, 682, 683, 685, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 722, 736, 737, 738, 739, 740, 741, 760, 762, 764, 765, 766, 787, 789, 802, 803, 804, 809, 811, 813, 814, 816, 818, 819, 821, 823, 824, 825, 827, 829, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 863, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 885, 886, 887, 888, 889, 890, 894, 898, 899, 900, 901, 907, 909, 911, 912, 913, 918, 919, 921, 924, 925, 926, 928, 929, 930, 931, 932, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 1004, 1005, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036], "try_import_ivy_mxnet": 0, "try_import_ivy_numpi": 0, "try_import_ivy_tf": 0, "try_import_ivy_torch": 0, "unset_backend": [0, 123], "unset": [0, 12, 123, 132, 134], "adjust": [0, 12, 949, 970, 973, 978, 981], "dict": [0, 12, 26, 27, 28, 29, 30, 69, 72, 73, 74, 75, 76, 126, 130, 135, 136, 318, 327, 328, 337, 340, 343, 344, 345, 346, 608, 614, 630, 631, 632, 888, 890, 891, 894, 897, 900, 901], "previous": [0, 12, 18, 21, 121, 122, 132, 608, 619], "otherwis": [0, 12, 23, 26, 27, 28, 29, 30, 69, 72, 73, 117, 121, 125, 127, 128, 132, 134, 175, 176, 177, 246, 252, 255, 267, 270, 273, 274, 275, 318, 337, 368, 481, 484, 485, 488, 489, 492, 608, 618, 681, 685, 701, 703, 718, 736, 737, 740, 745, 747, 799, 801, 802, 804, 884, 885, 886, 888, 901, 924, 925, 926, 928, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "implement": [0, 12, 20, 23, 69, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 246, 252, 255, 305, 308, 318, 363, 368, 369, 372, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 539, 542, 556, 559, 560, 563, 573, 576, 577, 580, 594, 598, 599, 603, 736, 751, 753, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 949, 954, 957, 958, 961, 962, 965, 993], "wa": [0, 12, 15, 72, 73, 119, 132, 134, 608, 681, 888, 901, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "last": [0, 12, 16, 19, 69, 72, 73, 119, 121, 123, 130, 149, 160, 165, 318, 337, 685, 722, 723, 733, 736, 742, 744, 748, 750, 764, 766, 796, 798, 799, 801, 808, 814, 817, 819, 822, 824, 842, 845, 858, 861, 863, 868, 871, 938, 939, 942, 944, 947, 982, 983, 986, 988, 991, 1015, 1025], "henc": [0, 12, 121, 929, 930, 931, 935, 937], "here": [0, 12, 18, 19, 20, 116, 117, 119, 121, 126, 132, 133, 134, 135, 136, 137, 148, 149], "tensor": [0, 12, 14, 72, 73, 116, 117, 122, 123, 125, 127, 128, 129, 132, 134, 135, 136, 137, 149, 175, 204, 205, 207, 208, 246, 276, 279, 368, 408, 411, 537, 538, 608, 661, 664, 665, 723, 731, 733, 736, 793, 795, 824, 838, 841, 854, 857, 863, 912, 913, 924, 927, 993, 1015, 1023, 1025], "howev": [0, 12, 15, 18, 20, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 134, 135, 136, 137, 149], "befor": [0, 12, 18, 19, 20, 72, 73, 118, 121, 125, 127, 128, 129, 132, 135, 149, 318, 362, 368, 604, 607, 723, 734, 735, 884, 885, 886, 888, 900, 929, 930, 931, 935, 937, 949, 966, 969, 974, 977], "becom": [0, 12, 14, 16, 19, 119, 126, 132, 137, 149, 824, 825, 828], "swap": [0, 12, 824, 872, 875], "python": [0, 12, 13, 14, 15, 18, 19, 21, 121, 130, 132, 134, 135, 149, 175, 176, 177, 318, 357, 367, 368, 560, 563, 993, 999], "framework": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 25, 26, 27, 28, 29, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 71, 72, 73, 75, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 115, 117, 120, 122, 123, 124, 125, 128, 131, 134, 137, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 997, 998, 999, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1041], "op": [0, 12, 116, 132, 149], "eagertensor": [0, 12], "def": [1, 20, 116, 117, 119, 121, 122, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 247, 248, 249, 319, 326, 329, 686, 993, 1007, 1010, 1013], "support": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 25, 27, 28, 29, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 71, 72, 73, 75, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 137, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 997, 998, 999, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1041], "backend": [4, 5, 6, 12, 14, 19, 20, 26, 28, 30, 72, 73, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 133, 134, 137, 246, 286, 287, 293, 317, 318, 353, 355, 365, 608, 649, 652, 653, 659, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 721, 993, 999, 1004, 1005, 1031, 1032, 1033, 1034, 1035, 1036], "ml": [13, 15, 16, 17, 131, 132, 133, 135, 136, 137, 148, 993, 999], "explos": [13, 15, 993], "A": [13, 14, 15, 16, 21, 72, 73, 74, 75, 76, 115, 121, 122, 126, 127, 128, 132, 135, 149, 175, 190, 191, 215, 218, 318, 327, 328, 362, 368, 552, 555, 608, 644, 678, 736, 774, 776, 783, 784, 786, 787, 789, 824, 863, 868, 871, 888, 889, 891, 893, 895, 896, 897, 898, 899, 902, 903, 904, 905, 949, 950, 953, 982, 983, 986, 988, 991, 993, 1037, 1038], "huge": [13, 15, 135, 993], "number": [13, 14, 18, 72, 73, 74, 75, 76, 119, 121, 126, 128, 129, 132, 135, 137, 172, 173, 174, 175, 176, 177, 179, 182, 190, 191, 204, 205, 207, 208, 210, 213, 215, 218, 246, 257, 260, 280, 281, 284, 288, 291, 294, 297, 299, 302, 305, 308, 318, 354, 355, 356, 368, 382, 385, 400, 403, 432, 435, 465, 468, 469, 472, 537, 538, 539, 542, 556, 559, 560, 563, 564, 567, 568, 571, 604, 607, 608, 609, 612, 635, 644, 645, 660, 680, 684, 723, 734, 736, 748, 750, 751, 753, 768, 770, 783, 787, 789, 799, 801, 824, 825, 828, 834, 837, 846, 849, 850, 853, 858, 861, 863, 868, 871, 876, 879, 880, 883, 884, 885, 886, 887, 912, 913, 922, 924, 927, 929, 930, 931, 935, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026], "tool": [13, 16, 19, 133, 137, 148, 149, 993], "have": [13, 14, 15, 16, 18, 19, 20, 21, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 148, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 281, 284, 318, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 620, 621, 623, 626, 630, 631, 632, 634, 637, 640, 648, 661, 664, 665, 685, 701, 703, 718, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 923, 924, 925, 926, 927, 928, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993], "explod": [13, 14, 993], "onto": [13, 14, 318, 347, 348, 888, 894, 900, 993], "scene": [13, 14, 115, 131, 133, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 993], "b": [13, 16, 17, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 119, 122, 123, 126, 131, 132, 133, 135, 136, 137, 147, 175, 241, 245, 246, 267, 269, 270, 271, 318, 340, 368, 369, 371, 372, 373, 382, 384, 385, 386, 387, 390, 391, 393, 394, 395, 408, 411, 428, 431, 432, 434, 435, 440, 443, 465, 467, 468, 477, 480, 497, 500, 537, 544, 547, 548, 551, 564, 567, 568, 570, 571, 572, 581, 584, 585, 588, 594, 595, 597, 598, 599, 600, 602, 603, 608, 609, 611, 612, 613, 616, 617, 625, 626, 633, 636, 637, 639, 640, 641, 680, 685, 687, 689, 690, 691, 723, 726, 729, 730, 735, 736, 737, 739, 740, 741, 742, 744, 745, 747, 748, 750, 774, 776, 784, 786, 793, 795, 805, 807, 808, 809, 811, 812, 813, 814, 816, 818, 819, 821, 823, 824, 825, 827, 828, 829, 838, 841, 842, 845, 850, 853, 858, 860, 861, 862, 868, 871, 872, 875, 888, 891, 906, 907, 909, 910, 911, 912, 914, 916, 917, 918, 920, 924, 926, 927, 928, 929, 931, 932, 934, 935, 938, 939, 942, 949, 950, 953, 954, 957, 982, 983, 985, 986, 987, 988, 990, 992, 993, 999], "why": [13, 15, 19, 117, 126, 129, 134, 993], "unifi": [13, 15, 72, 73, 125, 132, 149, 318, 347, 348, 349, 350, 362, 993], "should": [13, 15, 18, 19, 20, 21, 23, 69, 72, 73, 74, 75, 76, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 172, 173, 175, 210, 213, 228, 232, 233, 237, 246, 262, 265, 318, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 465, 468, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 619, 652, 661, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 723, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 757, 759, 760, 763, 768, 770, 774, 776, 777, 779, 780, 782, 784, 786, 787, 789, 793, 795, 796, 798, 799, 801, 802, 804, 824, 854, 857, 912, 923, 924, 925, 926, 929, 930, 931, 935, 937, 949, 950, 953, 954, 957, 958, 961, 966, 969, 970, 973, 974, 977, 978, 981, 993], "them": [13, 14, 15, 16, 121, 123, 125, 126, 132, 134, 135, 136, 149, 993], "c": [13, 15, 16, 17, 83, 84, 101, 102, 115, 119, 122, 126, 131, 132, 133, 135, 149, 368, 548, 551, 568, 570, 571, 608, 616, 617, 625, 680, 685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 723, 729, 824, 868, 871, 888, 891, 914, 916, 924, 927, 949, 950, 953, 970, 973, 978, 981, 993, 999], "standard": [13, 23, 115, 116, 117, 118, 120, 121, 125, 129, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 281, 284, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 497, 500, 537, 548, 551, 564, 567, 568, 571, 581, 584, 585, 588, 594, 598, 599, 603, 736, 745, 747, 748, 750, 824, 838, 841, 842, 845, 858, 861, 906, 907, 910, 912, 917, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957, 970, 973, 978, 981, 982, 983, 986, 993, 999, 1029, 1030], "re": [13, 14, 15, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 137, 149, 318, 362, 608, 630, 736, 793, 795, 824, 858, 861, 924, 928, 993], "collabor": [13, 14, 15, 993], "consortium": [13, 15, 993, 999], "data": [13, 15, 72, 73, 74, 75, 76, 115, 116, 117, 118, 122, 124, 126, 128, 129, 134, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 250, 251, 252, 255, 262, 265, 267, 270, 272, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 313, 317, 318, 320, 321, 322, 323, 324, 325, 330, 331, 332, 334, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 539, 542, 548, 551, 556, 559, 560, 563, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 616, 617, 654, 655, 657, 676, 685, 701, 703, 721, 723, 732, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 784, 786, 787, 789, 793, 795, 796, 798, 799, 801, 802, 804, 824, 838, 841, 842, 845, 846, 849, 854, 857, 858, 861, 864, 867, 868, 871, 912, 923, 924, 925, 926, 927, 938, 939, 942, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993, 999, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "api": [13, 14, 18, 19, 115, 117, 118, 119, 121, 122, 124, 125, 127, 128, 129, 131, 133, 135, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 497, 500, 537, 548, 551, 564, 567, 568, 571, 581, 584, 585, 588, 594, 598, 599, 603, 736, 745, 747, 748, 750, 824, 838, 841, 842, 845, 858, 861, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957, 982, 983, 986, 993, 999], "open": [14, 15, 16, 17, 18, 21, 118, 148, 175, 176, 177, 912, 914, 915, 918, 920, 993], "project": [14, 15, 16, 18, 19, 21, 116, 121, 123, 134, 136, 148, 149, 912, 913, 917], "grown": 14, "consider": [14, 117, 119], "recent": [14, 15, 18, 19, 121], "year": [14, 16, 149, 993], "especi": [14, 18], "deep": [14, 17, 19, 20, 72, 73, 131, 135, 993], "learn": [14, 15, 18, 20, 115, 122, 131, 137, 148, 368, 473, 476, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 884, 885, 886, 887, 993, 1031, 1032, 1033, 1034, 1035, 1036], "can": [14, 15, 16, 17, 18, 19, 23, 69, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 148, 149, 175, 179, 182, 215, 218, 246, 267, 270, 318, 360, 361, 362, 736, 757, 759, 824, 854, 857, 912, 914, 915, 993, 999], "seen": [14, 15, 119, 121, 134, 135], "rapidli": 14, "increas": [14, 318, 342, 346, 350, 824, 834, 837, 880, 883, 888, 900], "github": [14, 19, 20, 118, 121], "repo": [14, 15, 16, 18, 19, 120, 132, 134, 135, 136, 137, 148, 993, 999], "contain": [14, 18, 19, 20, 21, 26, 29, 30, 39, 40, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 129, 131, 132, 133, 136, 137, 149, 160, 163, 164, 166, 169, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 257, 262, 267, 270, 276, 281, 288, 294, 299, 305, 318, 339, 340, 343, 352, 356, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 609, 610, 612, 614, 617, 620, 621, 623, 625, 626, 633, 636, 637, 640, 647, 656, 678, 679, 680, 685, 687, 690, 692, 697, 701, 705, 709, 713, 723, 726, 729, 730, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 834, 838, 841, 842, 845, 846, 849, 850, 853, 854, 858, 861, 863, 864, 868, 872, 875, 876, 880, 884, 885, 886, 887, 888, 901, 906, 907, 910, 912, 913, 914, 917, 918, 920, 924, 925, 926, 927, 928, 929, 930, 931, 935, 937, 938, 939, 942, 944, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1031, 1035, 1037, 1038], "term": [14, 19, 126, 723, 733, 1015, 1025], "time": [14, 15, 16, 18, 19, 20, 117, 121, 122, 126, 127, 132, 135, 137, 149, 685, 692, 694, 705, 707, 723, 733, 824, 876, 879, 884, 885, 886, 887, 924, 925, 926, 929, 930, 931, 935, 1015, 1026, 1027, 1028], "These": [14, 15, 16, 19, 117, 118, 119, 121, 122, 126, 127, 129, 132, 133, 135, 136, 137, 149, 736, 751, 753, 993, 999], "ar": [14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 69, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 150, 158, 175, 176, 177, 318, 327, 328, 352, 356, 358, 362, 368, 436, 439, 525, 528, 529, 532, 564, 567, 573, 576, 594, 598, 608, 609, 612, 616, 617, 618, 642, 648, 649, 653, 660, 662, 676, 685, 722, 723, 732, 736, 742, 744, 760, 763, 764, 766, 768, 770, 777, 779, 787, 789, 790, 792, 799, 801, 824, 825, 828, 842, 845, 858, 861, 888, 890, 894, 900, 912, 917, 918, 920, 924, 925, 926, 927, 929, 930, 993, 1037, 1038], "written": [14, 18, 116, 117, 118, 121, 125, 129, 132, 134, 137, 149], "mani": [14, 15, 16, 18, 19, 20, 72, 73, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 149, 824, 863], "differ": [14, 15, 16, 18, 19, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 121, 122, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 149, 246, 281, 284, 318, 339, 340, 343, 344, 368, 382, 385, 539, 542, 589, 593, 723, 732, 824, 868, 871, 949, 966, 969, 974, 977, 993], "while": [14, 15, 18, 19, 72, 73, 74, 75, 76, 119, 121, 123, 129, 130, 136, 137, 149, 368, 525, 528, 529, 532, 929, 930, 949, 958, 961], "thi": [14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 166, 167, 168, 170, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 218, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 267, 268, 269, 270, 271, 318, 342, 346, 350, 357, 362, 367, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 408, 411, 424, 427, 428, 431, 432, 433, 434, 435, 440, 443, 461, 464, 465, 466, 467, 468, 497, 500, 525, 528, 529, 532, 537, 548, 551, 560, 563, 564, 567, 568, 569, 570, 571, 572, 581, 584, 585, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 608, 609, 610, 611, 613, 635, 636, 637, 638, 639, 641, 652, 663, 668, 685, 687, 688, 689, 691, 692, 694, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 721, 722, 723, 726, 732, 735, 736, 737, 738, 739, 740, 741, 745, 747, 748, 750, 764, 766, 783, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 838, 841, 842, 845, 854, 857, 858, 859, 860, 861, 862, 868, 871, 888, 894, 900, 901, 906, 907, 908, 909, 910, 911, 914, 916, 924, 925, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 942, 949, 954, 957, 958, 961, 970, 973, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 999, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036], "wonder": [14, 16, 134], "thing": [14, 15, 16, 18, 19, 20, 121, 123, 134, 135], "research": [14, 148], "develop": [14, 15, 16, 17, 18, 19, 20, 148, 149, 993], "also": [14, 15, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 166, 167, 168, 170, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 267, 268, 269, 270, 271, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 408, 411, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 537, 548, 551, 564, 567, 568, 569, 570, 571, 572, 581, 584, 585, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 608, 609, 610, 611, 613, 636, 637, 638, 639, 641, 652, 685, 687, 688, 689, 691, 692, 694, 723, 726, 732, 735, 736, 737, 738, 739, 740, 741, 745, 747, 748, 750, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 838, 841, 842, 845, 858, 859, 860, 861, 862, 884, 885, 886, 887, 888, 889, 890, 898, 899, 900, 906, 907, 908, 909, 910, 911, 914, 916, 929, 930, 931, 932, 933, 934, 935, 938, 939, 942, 949, 954, 957, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 1015, 1025], "consid": [14, 15, 72, 73, 116, 122, 133, 134, 135, 368, 525, 528, 529, 532, 929, 930, 931, 935, 937], "speed": [14, 121], "evolv": 14, "sharabl": 14, "code": [14, 15, 16, 18, 19, 20, 21, 72, 73, 74, 75, 76, 87, 88, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 147, 149, 160, 162, 163, 164, 165, 166, 169, 171, 318, 340, 363, 368, 428, 431, 585, 588, 685, 687, 689, 690, 691, 722, 723, 729, 730, 929, 930, 931, 935, 938, 939, 942, 949, 950, 953, 993, 999], "significantli": 14, "hinder": [14, 117], "librari": [14, 15, 16, 132, 137, 147, 149, 318, 363, 368, 461, 464, 525, 528, 529, 532, 736, 751, 753, 929, 930, 931, 935, 937, 949, 954, 957, 958, 961, 962, 965, 993], "outdat": 14, "month": 14, "rigor": [14, 121], "maintain": [14, 19, 938, 939, 942, 944, 947], "against": [14, 72, 73, 121, 149, 246, 257, 260, 736, 760, 763, 764, 766, 768, 770, 777, 779, 924, 925], "newest": 14, "version": [14, 15, 16, 18, 118, 132, 134, 736, 751, 753, 993], "For": [14, 15, 16, 18, 19, 20, 21, 69, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 175, 176, 177, 210, 213, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603, 604, 607, 685, 701, 703, 721, 736, 787, 789, 796, 798, 824, 825, 828, 868, 871, 929, 930, 931, 935, 937, 949, 954, 957, 962, 965, 974, 977, 1004, 1005], "softwar": [14, 15, 18, 19], "pipelin": [14, 125, 137], "where": [14, 15, 16, 17, 18, 19, 20, 21, 72, 73, 74, 75, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 135, 136, 137, 149, 175, 198, 199, 202, 210, 213, 368, 400, 403, 457, 460, 509, 512, 539, 542, 556, 559, 608, 648, 652, 661, 685, 722, 736, 751, 753, 768, 770, 777, 779, 780, 782, 787, 789, 790, 792, 796, 798, 799, 801, 824, 825, 828, 834, 837, 838, 841, 846, 849, 868, 871, 880, 883, 888, 889, 899, 912, 913, 924, 927, 949, 970, 973, 978, 981, 982, 983, 986, 988, 991, 993], "rapid": [14, 15, 18], "prototyp": 14, "vital": [14, 137], "signific": [14, 15, 149], "bottleneck": 14, "As": [14, 19, 67, 68, 113, 114, 117, 121, 122, 125, 126, 127, 128, 129, 132, 134, 135, 136, 149, 929, 930, 931, 935, 937], "new": [14, 15, 16, 17, 18, 19, 20, 21, 23, 69, 72, 73, 79, 80, 115, 116, 118, 119, 121, 124, 126, 127, 129, 131, 134, 137, 148, 175, 184, 193, 196, 198, 199, 202, 220, 221, 223, 226, 238, 240, 241, 245, 246, 313, 368, 404, 407, 509, 512, 552, 555, 608, 630, 631, 632, 635, 636, 637, 640, 664, 665, 666, 667, 674, 675, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 824, 838, 841, 854, 857, 868, 871, 888, 893, 904, 905, 906, 907, 910, 993, 1004, 1005, 1015, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "futur": [14, 16, 18, 19, 134, 149, 736, 751, 753], "avail": [14, 18, 19, 72, 73, 118, 128, 149, 318, 337, 353, 354, 355, 365, 608, 631], "specif": [14, 20, 72, 73, 117, 121, 122, 125, 126, 127, 128, 129, 132, 133, 134, 136, 137, 148, 149, 246, 305, 308, 318, 360, 363, 368, 525, 528, 529, 532, 608, 630, 631, 632, 659, 736, 751, 753, 793, 795, 824, 868, 871, 884, 885, 886, 887, 912, 913, 949, 954, 957, 958, 961, 962, 965, 993, 996, 998, 999, 1027, 1028], "quickli": [14, 16, 18, 19, 135, 136], "obsolet": [14, 16], "user": [14, 15, 18, 19, 21, 115, 121, 123, 126, 129, 131, 149, 1015, 1026, 1027, 1028], "constantli": 14, "invent": 14, "wheel": 14, "our": [14, 15, 17, 18, 19, 67, 68, 113, 114, 119, 121, 126, 130, 131, 134, 135, 136, 137, 149, 993], "desir": [14, 72, 73, 246, 252, 255, 267, 270, 318, 363, 608, 648, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026], "provid": [14, 18, 19, 23, 69, 72, 73, 117, 118, 119, 121, 122, 125, 126, 127, 128, 129, 132, 136, 148, 149, 172, 173, 175, 210, 213, 246, 273, 274, 275, 293, 305, 308, 317, 318, 337, 608, 629, 661, 665, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 736, 799, 801, 824, 842, 845, 868, 871, 924, 925, 949, 970, 973, 978, 981, 982, 983, 986, 988, 991, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1031, 1032, 1033, 1034, 1035, 1036], "simultan": [14, 16], "all": [14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 65, 66, 67, 68, 69, 72, 73, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 148, 149, 150, 158, 172, 173, 175, 176, 177, 228, 232, 233, 237, 318, 327, 352, 358, 608, 609, 612, 616, 617, 642, 662, 679, 723, 733, 736, 784, 786, 793, 795, 802, 804, 824, 842, 845, 858, 861, 884, 885, 886, 887, 888, 889, 890, 899, 900, 901, 912, 913, 918, 920, 982, 987, 993, 996, 998], "modern": [14, 15], "simpl": [14, 18, 19, 116, 118, 119, 121, 122, 125, 126, 127, 128, 129, 132, 134, 136, 137, 149, 608, 633], "scalabl": [14, 132], "manner": [14, 26, 29, 30, 72, 73, 116, 118, 121, 128, 135, 148, 149, 888, 900], "must": [14, 16, 18, 19, 20, 72, 73, 74, 75, 76, 116, 117, 118, 119, 122, 125, 126, 127, 128, 132, 136, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 318, 347, 348, 349, 350, 362, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 620, 621, 623, 626, 630, 631, 632, 634, 637, 640, 648, 661, 664, 665, 685, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 1031, 1035], "determin": [14, 72, 73, 118, 122, 126, 127, 128, 246, 267, 270, 272, 280, 293, 294, 297, 299, 302, 317, 318, 353, 354, 355, 365, 368, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 481, 484, 485, 488, 489, 492, 501, 504, 505, 508, 513, 516, 517, 520, 533, 536, 539, 542, 556, 559, 560, 563, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603, 608, 609, 612, 616, 617, 647, 649, 653, 654, 655, 656, 657, 676, 684, 685, 701, 703, 723, 734, 736, 737, 740, 742, 744, 745, 747, 748, 750, 757, 759, 760, 763, 768, 770, 774, 776, 777, 779, 783, 784, 786, 796, 798, 799, 801, 802, 804, 884, 885, 886, 887, 929, 930, 931, 935, 937, 982, 983, 986, 988, 991], "exactli": [14, 16, 119, 126, 128, 993, 999], "common": [14, 20, 72, 73, 119, 122, 124, 126, 128, 130, 149], "ground": [14, 121], "li": 14, "between": [14, 72, 73, 74, 75, 76, 117, 119, 121, 122, 125, 126, 131, 133, 134, 135, 137, 148, 175, 176, 177, 246, 281, 284, 368, 400, 403, 556, 559, 808, 809, 812, 814, 817, 819, 822, 824, 838, 841, 868, 871, 888, 894, 912, 914, 915, 929, 930, 931, 935, 937, 993, 1031, 1033], "find": [14, 18, 19, 72, 73, 121, 132, 135, 929, 930, 931, 935, 937, 993], "exist": [14, 15, 18, 20, 21, 72, 73, 74, 75, 118, 119, 120, 121, 122, 123, 124, 129, 132, 149, 608, 629, 1031, 1035], "essenti": [14, 15, 20, 119, 122, 128], "order": [14, 18, 19, 21, 69, 72, 73, 74, 75, 76, 117, 118, 119, 123, 125, 126, 127, 128, 134, 135, 137, 149, 368, 400, 403, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 736, 751, 753, 764, 766, 787, 789, 790, 792, 802, 804, 824, 842, 845, 884, 885, 886, 924, 927, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 1037, 1038], "design": [14, 15, 115, 129, 132, 134, 149], "univers": 14, "abstract": [14, 23, 69, 126, 136, 149, 318, 333, 1031, 1035], "In": [14, 16, 18, 19, 69, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 318, 357, 363, 364, 367, 368, 382, 385, 539, 542, 560, 563, 608, 614, 652, 824, 854, 857, 912, 918, 920, 993], "search": [14, 18, 26, 29, 30, 58, 72, 73, 104, 116, 119, 121, 925, 926, 927, 928], "languag": [14, 16, 132], "first": [14, 15, 18, 19, 21, 69, 117, 119, 121, 122, 125, 126, 132, 134, 135, 137, 172, 173, 175, 204, 205, 207, 208, 246, 304, 313, 318, 337, 349, 368, 382, 385, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 449, 452, 469, 472, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 589, 593, 608, 616, 685, 696, 736, 742, 744, 748, 750, 751, 753, 760, 763, 774, 776, 780, 782, 787, 789, 793, 795, 799, 801, 824, 830, 833, 858, 861, 868, 871, 872, 875, 884, 885, 886, 887, 888, 889, 898, 899, 912, 923, 924, 925, 926, 929, 930, 931, 935, 1015, 1026, 1027, 1028, 1031, 1035], "see": [14, 17, 18, 19, 20, 23, 69, 117, 120, 122, 126, 128, 134, 135, 148, 149, 175, 176, 177, 193, 196, 204, 205, 207, 208, 246, 262, 265, 305, 308, 368, 382, 385, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 461, 464, 493, 496, 517, 520, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 589, 593, 736, 768, 770, 777, 779, 784, 786, 799, 801, 802, 804, 924, 926, 929, 930, 931, 935, 937, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993], "clear": [14, 15, 16, 19, 20, 69, 119, 127, 128, 132, 134, 318, 336], "front": [14, 131, 132, 135, 993, 999], "runner": 14, "look": [14, 18, 19, 21, 116, 117, 119, 121, 122, 123, 126, 127, 128, 132, 134, 136, 137, 993], "littl": [14, 134], "deeper": [14, 19, 115, 131, 318, 342, 346, 350, 888, 899, 900], "follow": [14, 15, 18, 19, 20, 21, 69, 72, 73, 116, 118, 119, 121, 123, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 149, 246, 288, 291, 318, 362, 368, 560, 563, 608, 650, 651, 652, 674, 675, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 723, 734, 735, 736, 780, 782, 802, 804, 888, 894, 900, 929, 930, 931, 935, 937, 993, 1015, 1025, 1031, 1035], "same": [14, 16, 18, 19, 21, 26, 27, 28, 72, 73, 116, 117, 119, 121, 122, 125, 126, 128, 129, 130, 132, 134, 136, 137, 175, 176, 177, 185, 188, 199, 202, 210, 213, 223, 226, 228, 232, 233, 237, 241, 245, 246, 252, 255, 257, 260, 262, 265, 318, 327, 328, 362, 368, 369, 372, 382, 385, 412, 415, 432, 435, 465, 468, 539, 542, 560, 563, 564, 567, 568, 571, 604, 607, 608, 634, 636, 637, 640, 661, 664, 665, 685, 701, 703, 718, 723, 724, 725, 726, 727, 728, 729, 730, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 771, 773, 777, 779, 780, 782, 784, 786, 787, 789, 796, 798, 799, 801, 824, 830, 833, 842, 845, 846, 849, 858, 861, 864, 867, 868, 871, 884, 885, 886, 888, 901, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 974, 977, 978, 981, 993, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "core": [14, 18, 20, 128, 132, 137, 318, 354, 993], "principl": 14, "oper": [14, 18, 20, 72, 73, 74, 75, 118, 119, 121, 122, 125, 126, 128, 129, 135, 136, 175, 204, 205, 207, 208, 246, 305, 308, 368, 382, 385, 424, 427, 428, 431, 477, 480, 544, 547, 548, 551, 560, 563, 585, 588, 608, 618, 630, 631, 632, 676, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 723, 724, 725, 726, 727, 728, 729, 730, 732], "expos": [14, 132, 136, 608, 624], "almost": [14, 19, 126, 133, 135], "ident": [14, 16, 72, 73, 122, 124, 126, 134, 135, 149, 318, 352, 888, 901, 993], "uniqu": [14, 121, 122, 126, 149, 318, 327, 328, 884, 885, 886, 887, 888, 894, 929, 930, 931, 935, 936, 937], "syntax": [14, 15, 130], "There": [14, 18, 19, 119, 122, 125, 126, 127, 130, 132, 135, 149], "onli": [14, 17, 18, 19, 72, 73, 116, 117, 119, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 147, 149, 318, 358, 368, 525, 528, 529, 532, 736, 760, 763, 780, 782, 824, 842, 845, 888, 889, 890, 898, 899, 924, 925, 926, 949, 958, 961, 993, 1031, 1032, 1033, 1034, 1035, 1036], "so": [14, 15, 18, 19, 24, 25, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 116, 117, 118, 119, 121, 124, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 149, 150, 158, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 594, 595, 596, 597, 599, 600, 601, 602, 609, 610, 611, 613, 637, 638, 639, 641, 687, 688, 689, 691, 737, 738, 739, 741, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 823, 825, 826, 827, 829, 858, 859, 860, 862, 888, 889, 899, 907, 908, 909, 911, 914, 916, 931, 932, 933, 934, 983, 984, 985, 987, 988, 989, 990, 992, 993], "wai": [14, 15, 18, 23, 121, 123, 129, 134, 135, 136, 137, 149], "manipul": [14, 52, 98, 116, 137, 148, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883], "unsurprisingli": [14, 119], "fundament": [14, 126, 132], "consist": [14, 72, 73, 125, 129, 318, 350, 736, 751, 753, 949, 950, 953, 1027, 1028], "each": [14, 15, 16, 19, 20, 72, 73, 74, 75, 76, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 137, 148, 149, 160, 163, 164, 166, 169, 175, 210, 213, 246, 257, 260, 318, 327, 328, 339, 340, 341, 342, 343, 344, 345, 349, 362, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 609, 612, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 723, 724, 725, 726, 727, 728, 729, 730, 731, 736, 737, 740, 742, 744, 745, 747, 751, 753, 760, 763, 768, 770, 771, 773, 777, 779, 784, 786, 787, 789, 824, 834, 837, 850, 853, 858, 861, 863, 868, 871, 876, 879, 880, 883, 888, 894, 901, 912, 913, 924, 927, 929, 930, 931, 935, 949, 950, 953, 993, 999, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "veri": [14, 15, 18, 19, 116, 117, 119, 121, 122, 126, 128, 129, 133, 135, 136, 137, 149, 993], "similar": [14, 116, 121, 126, 127, 128, 135, 149, 368, 560, 563, 723, 734, 1015, 1026], "convent": [14, 148, 736, 760, 763, 949, 950, 953], "those": [14, 18, 19, 20, 72, 73, 121, 126, 132, 137, 175, 176, 177, 685, 721, 736, 780, 782, 787, 789, 824, 825, 828], "introduc": [14, 126, 135, 824, 858, 861, 929, 930], "2006": 14, "layer": [14, 46, 92, 116, 118, 132, 133, 136, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 906, 907, 910, 993, 1006, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038], "therefor": [14, 19, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 132, 134, 136, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 465, 468, 537, 548, 551, 568, 571, 581, 584, 585, 588, 594, 598, 608, 636, 723, 726, 735, 736, 737, 740, 748, 750, 824, 858, 861, 906, 907, 910, 929, 931, 935, 949, 954, 957, 982, 983, 986], "present": [14, 19, 69, 72, 73, 117, 120, 126, 127, 128, 129, 132], "itself": [14, 18, 19, 117, 126, 129, 136, 148, 149, 608, 614, 888, 900], "cut": 14, "cloth": 14, "adher": [14, 15, 118, 120, 132, 137], "semant": [14, 132, 137, 368, 560, 563], "round": [14, 15, 16, 18, 19, 20, 21, 37, 38, 83, 84, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 368, 382, 385, 432, 435, 465, 468, 469, 472, 539, 542, 581, 584, 604, 607, 993], "up": [14, 15, 16, 17, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 148, 149], "hopefulli": [14, 15, 16, 18, 19, 20, 21, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148], "paint": [14, 132], "pictur": [14, 132], "how": [14, 16, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 148, 149, 993, 999, 1015, 1026, 1027, 1028], "pleas": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 993], "check": [14, 15, 16, 18, 19, 26, 27, 28, 29, 30, 72, 73, 121, 126, 131, 132, 134, 135, 136, 137, 148, 246, 272, 286, 287, 293, 294, 297, 299, 302, 317, 318, 357, 367, 608, 618, 633, 647, 654, 655, 656, 657, 676, 684, 685, 701, 703, 736, 751, 753, 888, 889, 898, 899, 900, 993], "out": [14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 108, 109, 110, 111, 112, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 148, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 255, 256, 262, 263, 264, 265, 266, 276, 278, 318, 363, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 620, 621, 622, 623, 625, 626, 627, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 648, 661, 664, 665, 685, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 928, 929, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1015, 1023], "discuss": [14, 15, 16, 17, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 993], "faq": [14, 15, 16, 132, 134, 135, 136, 137, 148], "reach": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 318, 342, 346, 350, 888, 900], "discord": [14, 15, 16, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 993], "you": [14, 15, 16, 17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 136, 137, 148, 149, 993, 999], "question": [14, 15, 16, 18, 19, 119, 121, 132, 134, 135, 136, 137, 148, 149, 993], "With": [15, 16, 18, 39, 40, 41, 42, 59, 60, 72, 73, 74, 75, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 119, 121, 132, 160, 162, 163, 164, 165, 166, 169, 171, 175, 210, 213, 241, 245, 246, 267, 270, 318, 340, 356, 368, 369, 372, 373, 382, 385, 386, 387, 390, 391, 394, 395, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 571, 572, 581, 584, 585, 588, 594, 595, 598, 599, 600, 603, 608, 609, 610, 611, 612, 613, 617, 625, 626, 633, 636, 637, 640, 641, 673, 678, 679, 680, 685, 687, 688, 690, 723, 726, 729, 730, 735, 736, 737, 740, 741, 742, 744, 745, 747, 748, 750, 764, 766, 793, 795, 808, 809, 812, 813, 814, 818, 819, 822, 823, 824, 825, 828, 829, 838, 841, 842, 845, 850, 853, 858, 861, 862, 863, 872, 875, 888, 891, 906, 907, 909, 910, 911, 912, 913, 914, 916, 917, 918, 920, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 939, 942, 949, 950, 953, 954, 957, 982, 983, 986], "central": 15, "goal": [15, 20], "being": [15, 16, 18, 19, 72, 73, 117, 119, 121, 124, 125, 126, 127, 128, 129, 130, 132, 135, 148, 149, 175, 176, 177, 608, 663, 668, 929, 936, 993], "would": [15, 18, 19, 21, 115, 117, 118, 119, 121, 123, 124, 125, 126, 129, 131, 132, 134, 136, 137, 149, 160, 165, 318, 363, 993], "entir": [15, 16, 19, 72, 73, 119, 120, 121, 125, 126, 129, 134, 135, 136, 137, 149, 318, 362, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 1015, 1024], "forgiven": 15, "rais": [15, 19, 69, 72, 73, 129, 130, 132, 134, 246, 262, 265, 368, 457, 460, 556, 559, 608, 618, 643, 652, 666, 675, 681, 685, 722, 736, 760, 763, 767, 799, 801, 824, 864, 867, 868, 871, 924, 927, 949, 954, 957, 962, 965, 982, 983, 986, 988, 991, 1027, 1028, 1031, 1035], "an": [15, 16, 18, 19, 20, 21, 23, 26, 29, 30, 67, 68, 69, 72, 73, 113, 114, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 148, 149, 160, 163, 164, 166, 169, 174, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 267, 270, 281, 284, 299, 302, 305, 308, 318, 340, 344, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 619, 620, 621, 623, 625, 634, 635, 636, 648, 652, 654, 655, 656, 657, 679, 680, 681, 685, 701, 703, 718, 720, 721, 722, 723, 726, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 767, 768, 770, 771, 773, 777, 779, 780, 782, 783, 784, 786, 787, 789, 796, 798, 799, 801, 802, 804, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 854, 857, 858, 861, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 888, 894, 906, 907, 910, 912, 914, 915, 923, 924, 927, 928, 929, 930, 931, 935, 936, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993, 1004, 1005, 1027, 1028, 1031, 1032, 1033, 1035], "eyebrow": 15, "somehow": 15, "pytorch": [15, 16, 20, 117, 122, 127, 128, 129, 132, 134, 137, 149, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 993, 1031, 1032, 1033, 1034, 1035, 1036], "other": [15, 18, 19, 72, 73, 74, 75, 116, 118, 119, 121, 122, 125, 126, 129, 130, 132, 134, 136, 137, 147, 148, 149, 172, 173, 175, 176, 177, 368, 461, 464, 608, 609, 612, 614, 685, 696, 912, 918, 920, 929, 936, 949, 970, 973, 978, 981, 993], "strong": [15, 149], "industri": 15, "back": [15, 125, 131, 132, 134, 149, 993, 999, 1027, 1028, 1031, 1035], "momentum": 15, "won": [15, 16, 19, 137], "ad": [15, 18, 19, 20, 113, 114, 116, 117, 118, 119, 121, 122, 124, 125, 126, 127, 129, 132, 136, 149, 608, 674, 675, 736, 751, 753, 824, 838, 841, 1037, 1038], "just": [15, 16, 18, 19, 118, 119, 121, 122, 129, 132, 134, 135, 149, 949, 950, 953, 1015, 1024], "make": [15, 16, 18, 19, 20, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 132, 134, 135, 137, 318], "problem": [15, 19, 125, 134], "even": [15, 16, 18, 19, 117, 118, 122, 127, 128, 134, 135, 136, 137, 149, 368, 556, 559, 564, 567], "wors": 15, "rather": [15, 72, 73, 116, 118, 121, 126, 137, 149, 175, 176, 177, 318, 362, 608, 654, 655, 657, 685, 701, 703], "funni": 15, "comic": 15, "strip": 15, "easi": [15, 18, 19, 122, 126], "feasibl": 15, "space": [15, 175, 176, 177, 204, 205, 207, 208, 608, 635, 685, 722], "case": [15, 18, 19, 20, 26, 29, 30, 69, 72, 73, 74, 75, 76, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 134, 136, 137, 149, 175, 210, 213, 318, 357, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 428, 431, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603, 604, 607, 608, 652, 664, 665, 736, 764, 766, 824, 854, 857, 888, 891, 897, 949, 954, 957, 958, 961, 962, 965, 970, 973, 974, 977, 978, 981, 1015, 1026, 1027, 1028, 1031, 1035], "unlik": [15, 119, 126, 318], "charger": 15, "charact": [15, 130], "encod": [15, 135, 608, 635], "instant": [15, 993], "messag": [15, 19, 130, 132, 134, 1040, 1041], "much": [15, 19, 116, 125, 126, 129, 132, 134, 135], "doe": [15, 19, 21, 23, 69, 72, 73, 115, 116, 117, 118, 119, 121, 122, 123, 127, 129, 132, 134, 135, 149, 368, 428, 431, 608, 652, 824, 863], "mandat": [15, 121, 129], "adopt": [15, 19, 125], "continu": [15, 16, 120, 121, 130, 149], "own": [15, 16, 18, 118, 121, 130, 132, 149], "signatur": [15, 23, 69, 116, 117, 118, 119, 121, 126, 127, 128, 129, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 581, 584, 585, 588, 736, 748, 750, 824, 838, 841, 858, 861, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957], "replac": [15, 19, 21, 72, 73, 119, 121, 124, 126, 127, 128, 132, 134, 137, 149, 608, 664, 665, 824, 825, 828, 912, 913], "your": [15, 16, 17, 18, 20, 21, 116, 118, 135, 136, 149, 993], "10": [15, 18, 21, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 121, 126, 132, 134, 135, 175, 198, 207, 208, 209, 318, 368, 408, 411, 412, 415, 440, 443, 477, 480, 497, 500, 505, 508, 581, 584, 608, 626, 636, 663, 668, 685, 705, 706, 707, 708, 723, 729, 736, 745, 747, 748, 750, 774, 776, 793, 795, 824, 842, 845, 850, 853, 863, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 924, 927, 929, 930, 949, 950, 953, 954, 957, 1031, 1033], "100": [15, 16, 101, 102, 121, 135, 136, 137, 149, 368, 581, 584, 914, 916, 993], "despit": [15, 126, 128], "distinct": [15, 118, 126, 129, 131, 929, 930, 931, 935, 937, 993], "still": [15, 72, 73, 118, 121, 127, 134, 136, 149, 993], "believ": [15, 19], "share": [15, 72, 73, 119, 121, 122, 123, 126, 132, 246, 313], "bring": [15, 121, 132, 133], "benefit": [15, 16, 18, 19, 125, 126, 129, 134, 135, 149], "unrel": [15, 19], "what": [15, 16, 19, 115, 117, 118, 119, 121, 124, 126, 130, 131, 132, 134, 135, 136, 137, 148, 149, 993], "again": [15, 16, 19, 116, 119, 121, 126, 129, 135, 137, 149], "contrari": 15, "bumpi": 15, "road": 15, "allud": [15, 135], "most": [15, 18, 19, 72, 73, 116, 117, 121, 122, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 149, 736, 751, 753], "technolog": 15, "sector": [15, 368, 378, 381, 391, 394, 404, 407], "full": [15, 16, 19, 74, 75, 117, 118, 121, 127, 132, 149, 175, 246, 281, 284, 368, 477, 480, 497, 500, 723, 729, 736, 780, 782, 784, 786, 787, 789], "success": 15, "reason": [15, 19, 116, 119, 122, 125, 126, 127, 129, 132, 134, 368, 560, 563], "build": [15, 17, 18, 122, 131, 133, 136, 137, 149, 929, 930, 931, 935, 937, 993, 1015, 1026, 1027, 1028], "custom": [15, 23, 69, 121, 136], "comput": [15, 16, 18, 72, 73, 121, 122, 126, 132, 135, 149, 318, 362, 368, 382, 385, 408, 411, 420, 423, 428, 431, 449, 452, 453, 456, 473, 476, 477, 480, 493, 496, 497, 500, 521, 524, 525, 528, 529, 532, 533, 536, 539, 542, 544, 547, 548, 551, 608, 620, 621, 623, 626, 627, 685, 687, 690, 692, 694, 696, 697, 699, 705, 707, 709, 711, 713, 715, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 734, 736, 737, 740, 742, 744, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 780, 782, 783, 784, 786, 787, 789, 799, 801, 802, 804, 808, 809, 812, 814, 817, 819, 822, 888, 894, 929, 930, 931, 935, 937, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981], "thank": [15, 135], "interoper": 15, "compon": [15, 132, 685, 722], "bio": [15, 18], "hardwar": [15, 18], "initi": [15, 19, 69, 72, 73, 74, 75, 76, 121, 123, 127, 128, 318, 723, 733, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1031, 1035], "pcie": 15, "interfac": [15, 137, 149], "motherboard": 15, "raid": 15, "storag": [15, 135], "virtual": [15, 19, 21], "bluetooth": 15, "wireless": 15, "exchang": 15, "btx": 15, "form": [15, 17, 26, 27, 28, 29, 30, 72, 73, 121, 122, 136, 137, 175, 179, 182, 215, 218, 228, 232, 233, 237, 608, 614, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 723, 736, 737, 740, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 768, 770, 771, 773, 777, 779, 780, 782, 784, 786, 787, 789, 790, 792, 796, 798, 888, 890, 900], "factor": [15, 318, 327, 360, 361, 362, 685, 687, 690, 692, 694, 705, 707, 709, 711, 723, 724, 725, 726, 727, 728, 729, 730, 736, 737, 740, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1031, 1032, 1033, 1034], "sata": 15, "connect": [15, 18, 136, 137, 1015, 1025, 1026], "host": [15, 149], "bu": 15, "adapt": [15, 685, 709, 711, 1031, 1034], "devic": [15, 19, 31, 32, 36, 72, 73, 77, 78, 82, 101, 102, 115, 116, 122, 124, 127, 134, 135, 149, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 237, 238, 239, 240, 241, 242, 243, 244, 245, 320, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 608, 636, 637, 640, 661, 664, 665, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 1004, 1005, 1006, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038], "html": [15, 21, 118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 581, 584, 585, 588, 736, 748, 750, 824, 838, 841, 858, 861, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957], "enabl": [15, 18, 19, 72, 73, 74, 75, 76, 121, 122, 125, 126, 129, 131, 132, 133, 135, 137, 149, 685, 722], "anyon": [15, 17, 149], "websit": 15, "tcp": 15, "ip": 15, "node": [15, 72, 73, 126, 888, 889, 898, 899], "commun": [15, 17, 19, 20, 149, 993, 999], "network": [15, 122, 126, 132, 136, 148, 723, 732, 993, 1001, 1015, 1027, 1028], "smtp": 15, "possibl": [15, 17, 18, 19, 20, 118, 119, 121, 126, 127, 129, 132, 135, 148, 149, 608, 658, 678, 949, 954, 957, 962, 965], "send": 15, "gmail": 15, "outlook": 15, "pop": [15, 69], "email": 15, "ieee": [15, 174, 246, 281, 284, 368, 382, 385, 461, 464, 539, 542, 560, 563, 581, 584], "754": [15, 174, 246, 281, 284, 368, 382, 385, 461, 464, 539, 542, 560, 563, 581, 584], "allow": [15, 121, 132, 149, 175, 204, 205, 207, 208, 608, 658, 1027, 1028], "calcul": [15, 72, 73, 74, 75, 76, 118, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 539, 542, 556, 559, 573, 576, 577, 580, 581, 584, 589, 593, 594, 598, 599, 603, 808, 809, 812, 814, 817, 819, 822, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981], "live": [15, 16], "depend": [15, 18, 19, 118, 121, 124, 126, 127, 132, 149, 246, 252, 255, 368, 369, 372, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 556, 559, 573, 576, 577, 580, 594, 598, 599, 603, 736, 751, 753, 780, 782, 784, 786, 787, 789, 924, 928, 938, 939, 942, 944, 947], "did": [15, 20, 137], "aris": [15, 149], "until": [15, 19, 130, 149, 993], "substanti": [15, 19, 121, 125], "innov": 15, "growth": 15, "usag": [15, 132, 318, 362], "relev": [15, 18, 20, 119, 126, 127, 135, 1031, 1032, 1033, 1034, 1035, 1036], "area": [15, 129, 147, 368, 378, 381, 391, 394, 404, 407, 993], "necess": 15, "parti": [15, 149], "could": [15, 16, 18, 19, 119, 121, 126, 127, 129, 132, 134, 135, 136, 929, 930, 931, 935, 937], "easili": [15, 19, 135, 136, 137, 149, 993], "engag": [15, 17, 18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "regard": [15, 126, 318], "effect": [15, 117, 118, 125, 126, 149, 175, 210, 213, 685, 713, 715, 949, 970, 973, 978, 981], "2015": 15, "sinc": [15, 18, 19, 121, 149], "alongsid": 15, "machin": [15, 18, 122, 148, 246, 281, 284, 288, 291, 368, 473, 476, 736, 768, 770, 777, 779], "given": [15, 16, 18, 19, 20, 21, 69, 72, 73, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 136, 137, 148, 175, 176, 177, 184, 204, 205, 207, 208, 318, 351, 357, 359, 360, 361, 362, 364, 367, 608, 626, 627, 637, 640, 664, 665, 669, 683, 685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 723, 724, 725, 726, 727, 728, 729, 730, 736, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 838, 841, 842, 845, 850, 853, 858, 861, 863, 876, 879, 888, 895, 896, 912, 914, 915, 917, 918, 920, 923, 938, 944, 947, 1004, 1005], "frame": [15, 148], "less": [15, 19, 37, 38, 72, 73, 83, 84, 117, 119, 126, 131, 132, 368, 374, 377, 378, 381, 387, 390, 400, 403, 432, 435, 501, 504, 505, 508, 513, 516, 556, 559, 560, 563, 568, 571, 581, 584, 736, 768, 770, 777, 779, 802, 804, 912, 918, 920, 949, 978, 981], "matur": [15, 149], "state": [15, 117, 118, 121, 131, 132, 133, 135, 148, 368, 539, 542, 608, 672, 682, 723, 733, 993, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "than": [15, 19, 72, 73, 116, 119, 121, 126, 129, 132, 135, 136, 137, 149, 175, 176, 177, 246, 281, 284, 318, 362, 368, 374, 377, 378, 381, 387, 390, 400, 403, 416, 419, 424, 427, 432, 435, 465, 468, 469, 472, 501, 504, 505, 508, 513, 516, 537, 556, 559, 560, 563, 568, 571, 581, 584, 604, 607, 608, 654, 655, 657, 685, 701, 703, 736, 742, 744, 760, 763, 768, 770, 777, 779, 802, 804, 824, 825, 828, 842, 845, 864, 867, 912, 918, 920, 929, 930, 931, 935, 937, 949, 966, 969, 970, 973, 974, 977, 978, 981], "preced": [15, 136], "mention": [15, 18, 19, 117, 119, 122, 129], "aros": 15, "70": [15, 736, 774, 776, 949, 950, 953], "80": [15, 736, 774, 776, 949, 950, 953], "90": [15, 101, 102, 368, 428, 431, 564, 567, 736, 774, 776, 914, 916, 949, 950, 953], "effort": [15, 17, 149], "stage": [15, 17, 19, 21, 115, 130, 993], "complet": [15, 19, 20, 72, 73, 125, 126, 134, 135, 736, 780, 782], "natur": [15, 119, 125, 126, 148, 368, 457, 460, 501, 504, 509, 512, 736, 783], "like": [15, 18, 19, 21, 69, 115, 116, 117, 118, 119, 121, 128, 129, 131, 132, 134, 135, 136, 137, 148, 149, 685, 701, 703, 912, 918, 920, 993], "certainli": 15, "mission": [15, 993], "creat": [15, 17, 18, 19, 21, 23, 69, 72, 73, 121, 127, 128, 129, 132, 133, 136, 147, 148, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 215, 218, 220, 221, 223, 226, 238, 240, 241, 245, 318, 327, 328, 608, 636, 637, 640, 661, 664, 665, 678, 685, 720, 912, 913, 914, 915, 918, 920, 993, 999, 1004, 1005, 1006, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "At": [15, 20], "process": [15, 16, 17, 18, 19, 21, 121, 122, 126, 132, 137, 318, 327, 328, 357, 367], "ourselv": 15, "lead": [15, 16, 72, 73, 74, 75, 76, 149, 736, 780, 782, 787, 789], "quansight": 15, "compani": 15, "made": [15, 19, 20, 126, 129, 132, 134], "organ": [15, 116, 122, 125, 126], "panda": 15, "scipi": 15, "conda": [15, 18, 21], "dask": [15, 929, 930, 931, 935, 937], "apach": 15, "onnx": 15, "scikit": 15, "jupyt": 15, "aw": 15, "cupi": 15, "net": [15, 16, 132, 137], "sympi": 15, "rai": [15, 368, 400, 403], "modin": 15, "spyder": 15, "includ": [15, 19, 20, 72, 73, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 148, 149, 175, 176, 177, 179, 182, 215, 218, 608, 647, 684, 736, 802, 804, 888, 889, 912, 918, 920, 924, 926, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 996, 998, 1015, 1025, 1026, 1029, 1030], "member": [15, 19], "googl": [15, 993], "octoml": 15, "einop": [15, 72, 73, 608, 630, 631, 632], "further": [15, 16, 19, 21, 119, 125, 131, 135, 136, 993], "sponsor": 15, "lg": 15, "electron": 15, "microsoft": 15, "d": [15, 16, 17, 18, 69, 101, 102, 115, 126, 135, 608, 617, 625, 723, 724, 725, 726, 727, 728, 729, 730, 736, 748, 750, 774, 776, 888, 891, 914, 916, 993, 999], "shaw": 15, "co": [15, 37, 38, 83, 84, 132, 148, 368, 608, 635, 993], "intel": 15, "togeth": [15, 72, 73, 125, 126, 130, 136, 137, 149, 1037, 1038], "major": [15, 121, 127, 128, 149, 924, 927], "involv": [15, 17, 21, 115, 127, 137, 246, 305, 308, 368, 382, 385, 539, 542, 993, 999], "anoth": [15, 18, 19, 72, 73, 121, 122, 126, 127, 134, 137, 175, 193, 196, 246, 257, 260, 267, 270], "promis": 15, "sign": [15, 18, 37, 38, 83, 84, 133, 137, 175, 176, 177, 368, 369, 372, 382, 385, 400, 403, 424, 427, 539, 542, 560, 563, 572, 736, 783, 929, 930, 931, 935, 937, 949, 966, 969, 974, 977], "pursuit": 15, "unif": [15, 17, 134, 993, 999], "clearli": [15, 20, 119, 121], "lot": [15, 16, 124, 134, 149], "thought": [15, 18, 19, 117], "care": [15, 19, 137], "attent": [15, 19, 125, 126, 723, 734, 735, 1015, 1026], "gone": [15, 131], "simplifi": [15, 132, 133, 134, 136], "compat": [15, 117, 149, 246, 262, 265, 368, 382, 385, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 469, 472, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 589, 593, 736, 768, 770, 777, 779, 784, 786, 793, 795, 799, 801, 802, 804, 824, 854, 857, 924, 926, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993], "excit": [15, 17, 115, 993], "complianc": 15, "hope": [15, 149], "due": [15, 18, 126, 129, 368, 539, 542], "suit": [15, 18, 115, 120, 121, 135, 148], "some": [15, 16, 18, 19, 20, 72, 73, 116, 117, 118, 119, 121, 122, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 148, 149, 368, 461, 464, 685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 721, 723, 731, 993, 1015, 1023], "motiv": [15, 134], "great": [15, 16, 121, 132, 134], "convinc": 15, "celebr": 15, "encourag": [15, 148, 149, 993, 999], "foundat": 15, "point": [16, 19, 117, 118, 119, 121, 125, 129, 132, 134, 135, 148, 174, 175, 176, 177, 184, 190, 191, 198, 220, 221, 238, 240, 246, 252, 255, 281, 284, 294, 297, 305, 308, 368, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603, 604, 607, 736, 737, 740, 745, 747, 751, 753, 754, 756, 757, 759, 768, 770, 777, 779, 780, 782, 784, 786, 787, 789, 802, 804, 929, 930, 931, 935, 937, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981], "mai": [16, 18, 19, 23, 69, 121, 126, 134, 136, 175, 176, 177, 193, 196, 318, 363, 368, 449, 452, 477, 480, 497, 500, 525, 528, 529, 532, 608, 629, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 949, 954, 957, 958, 961, 962, 965], "ask": [16, 132, 134, 149, 993], "perfectli": 16, "happi": [16, 18, 149], "abund": 16, "better": [16, 115, 130, 131, 134, 135, 136], "ll": [16, 17, 19, 119, 126, 129, 135], "give": [16, 18, 19, 115, 117, 118, 119, 123, 134, 824, 854, 857], "two": [16, 69, 74, 75, 118, 119, 121, 125, 126, 131, 135, 137, 175, 176, 177, 190, 191, 210, 213, 228, 232, 233, 237, 246, 304, 313, 368, 424, 427, 564, 567, 608, 616, 736, 737, 740, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 796, 798, 799, 801, 824, 872, 875, 929, 930, 931, 935, 936, 937, 993], "streamlin": 16, "workflow": [16, 19, 135, 147, 993], "save": [16, 72, 73, 121, 130, 149, 608, 670, 1027, 1028], "week": [16, 19, 20, 993], "let": [16, 118, 119, 121, 126, 127, 128, 132, 134, 135, 136, 137, 949, 958, 961, 970, 973, 974, 977, 978, 981, 993], "sai": [16, 18, 124, 134], "deepmind": 16, "releas": [16, 18, 20, 993], "awesom": 16, "paper": 16, "love": 16, "choic": [16, 18, 129, 135, 949, 970, 973, 978, 981], "perceiverio": 16, "happen": [16, 18, 19, 121, 135], "slew": 16, "rush": 16, "f": [16, 21, 69, 115, 121, 126, 130, 132, 135, 137, 368, 473, 476, 608, 649, 653, 888, 891], "g": [16, 115, 126, 149, 246, 251, 305, 308, 318, 334, 888, 891, 912, 917, 918, 920, 929, 930, 931, 935, 937, 949, 954, 957, 962, 965, 966, 969, 974, 977], "inevit": 16, "deviat": [16, 121, 906, 907, 910, 912, 917, 949, 970, 973, 1029, 1030], "origin": [16, 72, 73, 74, 75, 76, 123, 124, 127, 132, 134, 368, 400, 403, 736, 764, 766, 824, 854, 857, 858, 861], "often": [16, 121, 122, 130, 149], "erron": 16, "train": [16, 122, 126, 128, 135, 136, 137, 147, 148, 149, 685, 687, 690, 692, 694, 705, 707, 993], "poor": 16, "converg": 16, "perform": [16, 72, 73, 116, 117, 119, 121, 122, 123, 125, 126, 128, 129, 132, 135, 149, 160, 165, 175, 204, 205, 207, 208, 318, 608, 626, 630, 631, 632, 650, 651, 652, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 723, 731, 733, 736, 787, 789, 884, 885, 886, 887, 888, 895, 896, 982, 983, 986, 988, 991], "issu": [16, 17, 20, 121, 132, 134, 136, 149], "etc": [16, 18, 19, 20, 67, 68, 72, 73, 113, 114, 116, 117, 119, 121, 125, 126, 127, 132, 134, 135, 149, 175, 204, 205, 207, 208, 608, 636, 637, 640, 661, 664, 665, 912, 913, 914, 915, 918, 920, 929, 930, 931, 935, 937, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038], "publish": [16, 149], "manag": [16, 17, 129, 149, 318], "get": [16, 17, 18, 20, 69, 72, 73, 115, 121, 122, 127, 128, 129, 132, 133, 134, 135, 136, 246, 276, 279, 280, 281, 284, 288, 291, 318, 327, 328, 337, 338, 351, 352, 357, 361, 364, 367, 608, 615, 642, 643, 644, 663, 672, 993, 999, 1015, 1024], "work": [16, 18, 19, 20, 115, 121, 126, 127, 128, 131, 132, 133, 134, 136, 137, 993, 999], "repositori": [16, 18, 19, 21, 120, 130], "pull": [16, 17, 18, 21, 116, 149], "request": [16, 17, 116, 318, 354], "confus": [16, 129], "do": [16, 18, 19, 20, 72, 73, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 368, 560, 563, 608, 652, 685, 701, 703, 721, 888, 889, 898, 899, 900], "don": [16, 18, 19, 20, 67, 68, 113, 114, 121, 127, 136, 149], "expect": [16, 121, 149, 608, 615, 993], "codebas": [16, 17, 115, 116, 129, 131, 318, 360, 361, 993], "total": [16, 17, 19, 72, 73, 74, 75, 76, 119, 121, 128, 135, 136, 149, 318, 364, 924, 927, 949, 970, 973, 978, 981], "hour": 16, "spent": 16, "spin": 16, "off": [16, 131, 736, 748, 750, 796, 798], "test": [16, 18, 20, 115, 119, 130, 149, 368, 481, 484, 485, 488, 489, 492, 982, 983, 986, 988, 991], "error": [16, 18, 72, 73, 117, 121, 125, 128, 130, 134, 149, 160, 161, 318, 368, 453, 456, 949, 954, 957, 962, 965, 1027, 1028, 1031, 1035], "iter": [16, 26, 27, 28, 29, 30, 67, 68, 69, 72, 73, 74, 75, 76, 113, 114, 126, 132, 135, 172, 173, 318, 340, 341, 343, 344, 345, 346, 349, 362, 608, 609, 612, 824, 834, 837, 850, 853, 863, 876, 879, 880, 883, 888, 889, 890, 891, 894, 898, 899, 900], "address": [16, 19, 20, 125, 132], "sake": 16, "singl": [16, 19, 72, 73, 116, 117, 119, 121, 122, 124, 126, 129, 132, 135, 136, 137, 149, 318, 327, 328, 347, 348, 349, 350, 608, 680, 684, 912, 917, 918, 920, 929, 930], "multipl": [16, 19, 72, 73, 83, 84, 85, 86, 93, 94, 97, 98, 99, 100, 101, 102, 119, 122, 126, 149, 368, 382, 386, 537, 539, 542, 608, 609, 611, 612, 613, 637, 641, 658, 736, 737, 740, 741, 757, 759, 824, 825, 828, 829, 858, 861, 862, 863, 906, 907, 909, 910, 911, 914, 916, 924, 925, 926, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 1015, 1025], "line": [16, 18, 119, 121, 125, 130, 133, 134, 135, 136, 147, 993, 999], "convert": [16, 26, 27, 28, 29, 30, 72, 73, 121, 125, 132, 149, 150, 158, 175, 179, 182, 215, 218, 246, 250, 251, 318, 334, 335, 336, 337, 357, 364, 367, 608, 673, 679, 680, 736, 805, 807, 888, 890, 900, 901, 1005], "directli": [16, 19, 116, 117, 118, 121, 122, 125, 126, 127, 128, 129, 132, 134, 136, 137, 148, 149, 888, 900], "graph": [16, 122, 126, 133, 149, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 929, 930, 931, 935, 937, 1027, 1028], "guarante": [16, 125, 149, 929, 930], "turn": [16, 119, 121, 126], "4": [16, 21, 37, 38, 47, 48, 51, 52, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 119, 121, 123, 126, 132, 134, 135, 136, 137, 160, 162, 163, 165, 175, 199, 202, 210, 213, 223, 226, 241, 245, 246, 267, 269, 270, 271, 318, 340, 356, 368, 369, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 393, 394, 395, 400, 403, 408, 411, 428, 431, 432, 434, 435, 440, 443, 465, 467, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 570, 571, 581, 584, 585, 588, 594, 595, 597, 598, 599, 600, 602, 603, 608, 617, 626, 635, 636, 637, 639, 640, 641, 673, 678, 685, 687, 689, 690, 691, 723, 726, 727, 728, 730, 733, 735, 736, 737, 738, 740, 742, 744, 745, 747, 748, 750, 757, 759, 768, 770, 774, 776, 793, 795, 796, 798, 808, 819, 822, 824, 825, 826, 827, 828, 829, 830, 833, 838, 841, 842, 845, 850, 853, 854, 857, 858, 860, 861, 862, 863, 872, 875, 888, 891, 906, 907, 909, 910, 911, 912, 913, 914, 916, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 938, 939, 942, 949, 950, 953, 954, 957, 982, 983, 986, 993, 1031, 1032, 1033, 1034, 1036], "step": [16, 18, 19, 21, 41, 42, 72, 73, 77, 78, 87, 88, 119, 123, 125, 126, 127, 128, 132, 135, 136, 137, 148, 175, 176, 177, 178, 204, 205, 207, 208, 318, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 705, 706, 707, 708, 709, 711, 713, 715, 884, 885, 886, 887, 993, 1031, 1032, 1033, 1034, 1035, 1036], "take": [16, 17, 18, 19, 118, 119, 121, 126, 127, 128, 132, 134, 136, 137, 149, 368, 428, 431, 993, 999], "few": [16, 19, 20, 121, 122, 126, 127, 128, 129, 130, 133, 134, 135, 136, 147, 993, 999], "second": [16, 18, 119, 121, 129, 134, 246, 304, 313, 318, 349, 368, 382, 385, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 449, 452, 469, 472, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 589, 593, 608, 616, 663, 668, 685, 687, 690, 692, 694, 705, 707, 736, 742, 744, 748, 750, 751, 753, 760, 763, 774, 776, 780, 782, 787, 789, 793, 795, 799, 801, 824, 868, 871, 872, 875, 884, 886, 929, 930, 931, 935, 1031, 1032, 1033], "automat": [16, 18, 19, 115, 117, 122, 126, 131, 132, 133, 136, 137, 993], "convers": [16, 27, 28, 29, 30, 72, 73, 131, 133, 137, 148, 149, 993, 999], "everyon": [16, 17, 19, 149], "regardless": [16, 17, 72, 73, 134, 137, 172, 173], "wouldn": 16, "nice": [16, 121], "write": [16, 19, 20, 21, 72, 73, 115, 116, 118, 119, 122, 123, 129, 132, 134, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 318, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 620, 621, 623, 626, 627, 630, 631, 632, 634, 636, 637, 640, 648, 661, 664, 665, 685, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 923, 924, 928, 929, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "onc": [16, 18, 19, 121, 126, 127, 128, 132, 135, 149, 318, 362, 736, 757, 759, 787, 789, 912, 913], "know": [16, 19, 121, 929, 930, 931, 935, 937], "among": [16, 72, 73, 121], "frantic": 16, "port": 16, "lucid": 16, "honk": 16, "improv": [16, 19, 122, 132], "understand": [16, 18, 19, 20, 21, 115, 117, 118, 119, 120, 130, 131], "pattern": [16, 72, 73, 118, 127, 608, 630, 631, 632], "hasn": 16, "chang": [16, 18, 19, 20, 21, 24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 118, 120, 121, 126, 132, 136, 149, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 318, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 594, 595, 596, 597, 599, 600, 601, 602, 609, 610, 611, 613, 637, 638, 639, 641, 687, 688, 689, 691, 736, 737, 738, 739, 741, 742, 744, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 854, 857, 858, 859, 860, 862, 888, 890, 900, 907, 908, 909, 911, 914, 916, 931, 932, 933, 934, 983, 984, 985, 987, 988, 989, 990, 992, 993, 999], "now": [16, 18, 21, 72, 73, 116, 117, 121, 124, 126, 127, 130, 134, 135, 137, 148, 149, 175, 241, 245, 1015, 1026, 1027, 1028], "spend": 16, "torchvis": 16, "probabl": [16, 121, 723, 731, 912, 913, 1015, 1023], "sonnet": 16, "about": [16, 18, 19, 120, 121, 131, 132, 136, 137, 149, 246, 281, 284, 288, 291], "next": [16, 18, 19, 20, 21, 118, 119, 123, 124, 130, 134, 135, 246, 281, 284, 993, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036], "everyth": [16, 19, 20, 121, 133, 149], "zero": [16, 72, 73, 74, 75, 117, 119, 125, 126, 127, 128, 132, 135, 136, 160, 162, 163, 175, 184, 190, 191, 210, 213, 228, 232, 233, 237, 241, 245, 246, 252, 255, 368, 382, 385, 387, 390, 391, 394, 416, 419, 440, 443, 461, 464, 465, 468, 525, 528, 529, 532, 537, 538, 539, 542, 544, 547, 548, 551, 556, 559, 560, 563, 564, 567, 581, 584, 585, 588, 594, 598, 599, 603, 608, 626, 661, 664, 665, 685, 687, 690, 692, 694, 705, 707, 709, 711, 723, 731, 736, 737, 740, 745, 747, 760, 763, 768, 770, 777, 779, 799, 801, 802, 804, 824, 838, 841, 842, 845, 850, 853, 858, 861, 880, 883, 906, 907, 910, 912, 914, 915, 924, 925, 926, 927, 929, 930, 931, 935, 937, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993, 1006, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1031, 1032, 1033, 1034], "need": [16, 18, 19, 20, 21, 116, 118, 119, 120, 122, 125, 126, 129, 132, 134, 135, 148, 149, 608, 620, 621, 623, 824, 825, 828, 838, 841], "said": 16, "high": [16, 20, 72, 73, 101, 102, 135, 912, 914, 915, 916, 918, 919, 920, 921], "level": [16, 17, 20, 122, 131, 132, 135, 136, 137, 149], "optim": [16, 129, 133, 135, 137, 148, 318, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 884, 885, 886, 887, 993, 1032, 1033, 1034, 1036], "trainer": [16, 147, 149, 993], "statu": 16, "quo": 16, "kera": 16, "dopamin": 16, "ignit": 16, "catalyst": 16, "lightn": 16, "fastai": 16, "haiku": [16, 137], "flax": [16, 137, 149], "trax": [16, 137], "objax": [16, 137], "idea": [16, 130, 148], "fulli": [16, 117, 125, 126, 132, 133, 134, 135, 136, 137, 149, 1015, 1025, 1026], "offer": [16, 136], "strongli": [17, 18, 993, 999], "welcom": [17, 18, 19, 993, 999], "absolut": [17, 72, 73, 368, 369, 372, 736, 783], "skill": 17, "whether": [17, 18, 26, 27, 28, 29, 30, 72, 73, 74, 75, 76, 113, 114, 117, 127, 129, 160, 161, 172, 173, 246, 252, 255, 276, 279, 293, 294, 297, 299, 302, 317, 318, 337, 338, 349, 353, 354, 357, 358, 362, 365, 367, 368, 489, 492, 608, 609, 612, 616, 617, 626, 629, 633, 635, 645, 647, 649, 652, 653, 654, 655, 656, 657, 658, 669, 671, 676, 683, 684, 685, 692, 694, 696, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 718, 722, 723, 731, 736, 751, 753, 884, 885, 886, 887, 888, 889, 890, 894, 898, 899, 900, 901, 912, 913, 982, 983, 986, 988, 991, 1004, 1005, 1015, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "vetern": 17, "beginn": 17, "start": [17, 18, 19, 20, 21, 72, 73, 77, 78, 115, 118, 119, 127, 131, 132, 134, 135, 136, 148, 149, 175, 176, 177, 178, 204, 205, 206, 207, 208, 209, 318, 333], "aspect": [17, 135, 993], "guid": [17, 18, 19, 130, 993], "through": [17, 19, 20, 115, 119, 121, 122, 123, 126, 130, 131, 132, 134, 135, 136, 137, 148, 368, 400, 403, 888, 891], "journei": [17, 993, 999], "inclusvi": 17, "big": [17, 149], "team": [17, 18, 19], "board": 17, "contributor": [17, 18, 19, 131, 993], "split": [17, 19, 72, 73, 131, 132, 149, 318, 327, 343, 344, 345, 346, 360, 361, 362, 608, 658, 824, 993], "section": [17, 19, 20, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 136, 929, 930, 931, 935, 937], "below": [17, 18, 20, 21, 115, 116, 119, 121, 122, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 148, 175, 228, 232, 233, 237, 368, 408, 411, 428, 431, 440, 443, 564, 567, 599, 603, 736, 745, 747, 748, 750, 796, 798, 824, 838, 841, 842, 845, 929, 930, 938, 939, 942, 993], "best": [17, 18, 19, 20, 21, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 608, 658], "go": [17, 18, 19, 20, 115, 116, 119, 126, 131, 135, 149, 888, 899], "finish": [17, 18, 115, 993], "dive": [17, 19, 20, 131, 134, 135, 149, 993], "right": [17, 18, 19, 72, 73, 115, 119, 135, 368, 416, 419, 424, 427, 736, 787, 789], "environ": [17, 19, 21, 148], "basic": [17, 20, 21], "fork": [17, 18, 608, 659], "doc": [17, 20, 117, 118, 132, 135, 136, 993], "document": [17, 19, 121, 133, 135, 137], "local": [17, 18, 21, 122], "task": [17, 19, 148, 884, 885, 886, 887, 993], "help": [17, 18, 23, 69, 119, 121, 123, 125, 126, 134, 135, 136, 147, 608, 614, 949, 974, 977, 993], "video": [17, 19, 117, 118, 119, 121], "realli": [18, 126, 149], "contribut": [18, 19, 20, 132, 999], "toward": [18, 132, 824, 858, 861, 993, 999], "page": [18, 19, 133, 137, 147, 993, 999], "explain": [18, 19, 20, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 993, 999], "main": [18, 21, 124, 126, 175, 190, 191, 228, 232, 233, 237, 736, 748, 750, 796, 798], "prefer": [18, 126], "mode": [18, 47, 48, 72, 73, 119, 126, 149, 172, 173, 318, 347, 348, 349, 350, 362, 368, 382, 385, 539, 542, 608, 669, 682, 736, 780, 781, 782], "git": [18, 19, 121], "recurs": [18, 21, 26, 27, 28, 29, 30, 72, 73, 122, 126, 136, 149, 888, 889, 890, 898, 899, 900], "submodul": [18, 19, 20, 21, 120, 121, 122, 128, 131, 132, 136, 993, 1029, 1030, 1037, 1038], "com": 18, "unifyai": [18, 21], "http": [18, 118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 581, 584, 585, 588, 685, 687, 690, 692, 694, 736, 748, 750, 824, 838, 841, 858, 861, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957], "gh": 18, "your_fold": 18, "id": [18, 125, 126, 130, 318, 337, 1027, 1028], "cours": [18, 19, 119, 135, 149], "whatev": [18, 149], "integr": [18, 246, 252, 255], "familiar": [18, 20], "decid": [18, 72, 73, 888, 899], "sure": [18, 20, 120, 121], "elig": 18, "free": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 148, 993], "student": 18, "licenc": 18, "peopl": [18, 19, 115], "seem": [18, 136, 149], "miss": [18, 119, 121, 125, 126, 130, 1031, 1035], "add": [18, 19, 20, 37, 38, 67, 68, 72, 73, 74, 75, 83, 84, 85, 86, 113, 114, 115, 116, 117, 118, 121, 122, 123, 125, 126, 132, 134, 149, 368, 369, 372, 386, 537, 609, 613, 685, 722, 906, 907, 910, 993, 999, 1029, 1030], "explicit": [18, 21, 126, 127, 129, 132, 149], "remind": 18, "channel": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 608, 635, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025], "pace": 18, "updat": [18, 19, 20, 21, 69, 72, 73, 115, 117, 119, 120, 124, 125, 126, 127, 132, 134, 135, 137, 149, 318, 327, 608, 652, 664, 665, 685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 723, 733, 884, 885, 886, 888, 895, 896, 904, 905, 1004, 1005, 1031, 1032, 1033, 1034, 1035, 1036], "suggest": [18, 19, 116, 121], "latest": [18, 20, 21, 118, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 581, 584, 585, 588, 736, 748, 750, 824, 838, 841, 858, 861, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957, 1015, 1024], "packag": [18, 21, 130, 149], "ensur": [18, 19, 117, 121, 125, 127, 130, 608, 652], "align": [18, 72, 73, 132, 134, 993, 999], "accord": [18, 21, 72, 73, 122, 127, 246, 267, 270, 281, 284, 368, 382, 385, 424, 427, 539, 542, 608, 636, 664, 665, 736, 799, 801, 824, 834, 837, 880, 883, 949, 970, 973, 978, 981], "stabl": [18, 61, 62, 107, 108, 132, 149, 608, 643, 644, 666, 667, 674, 675, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948], "pypi": [18, 20, 149], "mayb": [18, 26, 29, 30, 132, 134], "person": [18, 19], "experi": [18, 133, 135, 149], "avoid": [18, 19, 121, 123, 124, 126, 130, 134, 318, 368, 461, 464], "pip": [18, 148, 993], "instal": [18, 21, 130, 148, 993], "abil": [18, 133, 149], "certain": [18, 72, 73, 121, 149, 175, 176, 177, 204, 205, 207, 208], "perhap": [18, 134, 135, 136, 149], "keep": [18, 19, 72, 73, 120, 121, 126, 133, 135, 137, 608, 683], "track": [18, 19, 318, 888, 900, 1027, 1028], "termin": [18, 19, 21, 72, 73, 74, 75, 76, 126, 132, 135], "run": [18, 21, 117, 120, 121, 123, 130, 132, 133, 134, 135, 136, 137, 148, 149, 318, 327, 685, 687, 690, 692, 694, 705, 707, 884, 885, 886, 887, 1015, 1026, 1027, 1028], "command": [18, 21, 993], "ivy_dev": [18, 19, 21], "name": [18, 19, 21, 23, 69, 118, 121, 130, 132, 134, 135, 137, 172, 173, 608, 614, 736, 751, 753, 780, 782, 787, 789, 929, 930, 931, 935], "3": [18, 21, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 51, 52, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 119, 121, 123, 126, 132, 134, 135, 136, 137, 160, 162, 163, 164, 165, 174, 175, 199, 202, 210, 213, 223, 226, 238, 240, 241, 245, 246, 267, 268, 269, 270, 271, 318, 337, 340, 356, 363, 368, 369, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 408, 411, 424, 427, 428, 431, 432, 434, 435, 440, 443, 457, 460, 465, 466, 467, 468, 473, 476, 477, 480, 493, 496, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 581, 584, 585, 588, 594, 595, 597, 598, 599, 600, 602, 603, 608, 609, 610, 611, 616, 617, 626, 633, 636, 637, 638, 639, 640, 641, 671, 673, 678, 680, 685, 687, 688, 689, 690, 691, 723, 724, 725, 726, 728, 729, 730, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 750, 757, 759, 768, 770, 774, 776, 787, 789, 793, 795, 796, 798, 805, 807, 808, 809, 811, 812, 813, 814, 816, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 838, 841, 842, 845, 850, 853, 854, 857, 858, 860, 861, 862, 863, 864, 867, 872, 875, 888, 891, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 938, 939, 942, 949, 950, 953, 954, 957, 974, 977, 982, 983, 986, 993], "8": [18, 21, 37, 38, 49, 50, 51, 52, 74, 75, 83, 84, 95, 96, 101, 102, 119, 121, 126, 131, 135, 160, 164, 175, 241, 245, 318, 340, 368, 382, 385, 386, 391, 394, 395, 408, 411, 432, 435, 440, 443, 477, 480, 497, 500, 537, 538, 564, 567, 568, 569, 570, 571, 572, 581, 584, 585, 588, 599, 603, 608, 617, 636, 685, 687, 690, 723, 730, 736, 742, 744, 745, 747, 748, 750, 774, 776, 793, 795, 808, 809, 810, 811, 812, 813, 814, 816, 818, 819, 820, 821, 823, 824, 825, 826, 828, 842, 845, 850, 853, 863, 912, 913, 914, 915, 916, 924, 928, 929, 930, 949, 950, 953, 993, 1015, 1026], "activ": [18, 19, 21, 25, 67, 68, 71, 113, 114, 116, 136, 161, 162, 163, 164, 165, 166, 169, 171, 993, 1002, 1003], "setup": 18, "click": [18, 19, 118, 993], "icon": [18, 19], "side": [18, 19], "choos": [18, 19, 137, 318, 363, 368, 525, 528, 529, 532, 924, 928, 929, 930, 931, 935, 937, 949, 954, 957, 958, 961, 962, 965], "left": [18, 19, 72, 73, 119, 127, 368, 416, 419, 736, 751, 753, 764, 766, 787, 789, 924, 925, 993], "panel": 18, "select": [18, 19, 121, 132, 134, 137, 149], "drop": [18, 149], "down": [18, 121, 134], "path": [18, 21], "manual": [18, 19, 121, 136, 888, 889, 898, 899], "builtin": [18, 21, 134, 136], "requir": [18, 21, 116, 117, 118, 119, 121, 124, 125, 127, 128, 134, 149, 172, 173, 368, 581, 584, 736, 751, 753, 824, 868, 871, 1004, 1005], "cmd": [18, 21], "directori": [18, 19, 21, 121, 608, 670], "folder": [18, 19, 21, 116, 120, 121, 122], "file": [18, 19, 21, 72, 73, 116, 118, 121, 122, 123, 125, 126, 130, 132, 135, 608, 670, 1027, 1028], "abov": [18, 19, 21, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 134, 135, 136, 137, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 539, 542, 548, 551, 564, 567, 568, 571, 581, 584, 585, 588, 594, 598, 599, 603, 608, 636, 723, 726, 735, 736, 737, 740, 745, 747, 748, 750, 751, 753, 796, 798, 824, 838, 841, 842, 845, 858, 861, 906, 907, 910, 912, 914, 915, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957, 966, 969, 970, 973, 974, 977, 982, 983, 986], "m": [18, 19, 21, 115, 132, 175, 210, 213, 228, 232, 233, 237, 608, 617, 736, 737, 740, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 784, 786, 787, 789, 790, 792, 796, 798, 912, 917, 918, 920], "python3": [18, 21], "script": [18, 19, 21, 119, 132, 149], "bat": [18, 19, 21], "OR": [18, 19, 21, 368, 420, 423, 529, 532, 982, 988, 991], "bin": [18, 19, 21], "mac": [18, 19, 21], "linux": [18, 19, 21], "virtualenv": 18, "found": [18, 19, 69, 72, 73, 74, 75, 76, 118, 125, 126, 130, 318, 352], "os": 18, "note": [18, 19, 116, 118, 119, 121, 126, 368, 560, 563, 736, 751, 753, 787, 789, 824, 868, 871, 929, 931, 935, 949, 958, 961], "tick": [18, 19], "abl": [18, 19, 72, 73, 122, 127, 129, 130, 134, 137], "To": [18, 119, 121, 122, 126, 130, 135, 136, 137, 993], "ivy_test": [18, 19], "test_array_api": [18, 19, 120, 121], "cd": [18, 19, 21], "r": [18, 72, 73, 608, 617, 683, 736, 780, 782, 805, 807], "txt": 18, "visual": [18, 130, 149], "jetbrain": 18, "remot": 18, "mitig": 18, "potenti": [18, 131, 368, 461, 464], "conflict": [18, 19, 135], "addit": [18, 19, 72, 73, 116, 118, 121, 126, 127, 134, 135, 137, 318, 363, 368, 382, 385, 608, 630, 631, 632, 906, 907, 910, 1015, 1025], "yet": [18, 20, 126], "particular": [18, 19, 116, 121, 129, 368, 369, 372], "system": [18, 149, 736, 784, 786], "instruct": [18, 20], "desktop": 18, "wsl": 18, "powershel": 18, "admin": 18, "visit": 18, "link": 18, "imag": [18, 21, 44, 90, 116, 132, 133, 135, 137, 148, 723, 724, 725, 726, 727, 729, 730, 993], "profession": 18, "execut": [18, 21, 126, 129, 132, 134, 137, 149, 608, 681], "deploy": 18, "top": [18, 19, 121, 135, 136, 993], "press": [18, 135, 993], "ok": 18, "correctli": [18, 72, 73, 117, 121, 126, 127, 130, 136, 149, 736, 764, 766, 924, 925], "caus": [18, 19, 119, 121, 126, 129, 130, 149], "earlier": [18, 19], "might": [18, 19, 116, 121, 124, 132, 134, 135, 608, 629], "necessari": [18, 119, 123, 126, 129], "virtualis": 18, "detail": [18, 19, 20, 116, 117, 120, 121, 122, 123, 124, 126, 135, 136, 175, 193, 196, 929, 930, 931, 935, 937], "sudo": 18, "apt": 18, "ca": 18, "certif": 18, "curl": 18, "gnupg": 18, "lsb": 18, "mkdir": 18, "p": [18, 19, 72, 73, 85, 86, 175, 210, 213, 608, 620, 621, 622, 623, 723, 731, 736, 764, 766, 802, 804, 1015, 1023], "keyr": 18, "fssl": 18, "download": [18, 121], "gpg": 18, "dearmor": 18, "o": [18, 115, 132, 608, 617], "echo": 18, "deb": 18, "arch": 18, "dpkg": 18, "architectur": [18, 137, 149], "lsb_releas": 18, "cs": 18, "tee": 18, "list": [18, 20, 21, 26, 27, 28, 29, 30, 31, 32, 33, 34, 67, 68, 69, 72, 73, 87, 88, 105, 106, 113, 114, 116, 117, 119, 121, 127, 128, 130, 132, 135, 136, 137, 149, 175, 176, 177, 179, 182, 210, 211, 213, 215, 218, 246, 257, 258, 260, 318, 327, 328, 337, 339, 340, 343, 344, 347, 348, 362, 608, 617, 673, 678, 683, 685, 687, 689, 691, 722, 723, 724, 725, 726, 727, 728, 729, 730, 736, 793, 795, 824, 830, 833, 842, 845, 863, 868, 871, 888, 889, 890, 891, 894, 899, 900, 906, 907, 910, 924, 927, 929, 931, 932, 934, 935, 993, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "dev": [18, 72, 73, 74, 76, 122, 128, 132, 134, 136, 318, 327, 352], "null": 18, "ce": 18, "cli": 18, "containerd": 18, "io": 18, "compos": [18, 121, 126, 149], "plugin": 18, "systemctl": 18, "permiss": 18, "relat": [18, 19, 121, 130, 148, 318], "post": [18, 137, 906, 907, 910, 993, 999], "It": [18, 19, 21, 23, 69, 115, 116, 118, 119, 121, 123, 125, 126, 129, 132, 134, 135, 136, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 318, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 620, 621, 623, 626, 630, 631, 632, 634, 637, 640, 648, 661, 664, 665, 685, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 923, 924, 925, 928, 929, 937, 938, 939, 942, 944, 947, 982, 983, 986, 988, 991], "headach": 18, "arm": [18, 19], "m1": 18, "instead": [18, 19, 20, 117, 118, 119, 121, 122, 126, 129, 132, 134, 135, 149], "featur": [18, 116, 117, 135, 993], "vm": 18, "azur": 18, "cloud": [18, 148], "mean": [18, 19, 63, 64, 72, 73, 109, 110, 113, 114, 115, 119, 121, 122, 126, 127, 128, 129, 132, 134, 135, 136, 137, 148, 149, 318, 347, 348, 349, 350, 362, 608, 631, 884, 885, 886, 887, 888, 894, 912, 917, 929, 930, 949, 993, 1006], "configur": [18, 19, 21, 72, 73, 127, 318, 361, 888, 901], "defin": [18, 20, 116, 117, 118, 121, 127, 134, 136, 149, 368, 539, 542, 560, 563, 608, 661, 736, 742, 744, 751, 753, 784, 786, 912, 914, 915, 949, 954, 957, 958, 961, 962, 965], "dockerfil": [18, 21], "longer": [18, 121, 127, 129], "worri": 18, "platform": 18, "agnost": [18, 117, 125, 132, 134, 137, 149, 993], "usual": [18, 121], "studio": 18, "favourit": 18, "extens": [18, 19, 118, 121, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 497, 500, 537, 548, 551, 564, 567, 568, 571, 581, 584, 585, 588, 594, 598, 599, 603, 736, 745, 747, 748, 750, 824, 838, 841, 842, 845, 858, 861, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957, 982, 983, 986], "theme": 18, "too": [18, 19, 130, 149, 368, 382, 385, 539, 542], "done": [18, 19, 119, 121, 130, 135], "unsupport": [18, 127, 130, 246, 286, 287], "old": [18, 72, 73, 129], "slow": 18, "ipad": 18, "long": [18, 19, 119, 723, 733], "browser": 18, "cool": [18, 116], "requisit": 18, "head": [18, 126, 723, 734, 993, 1015, 1026], "pane": [18, 19], "readi": [18, 20], "begin": [18, 888, 889, 899], "outlin": [18, 19, 20, 115, 118, 121, 122, 126, 129, 134], "green": [18, 19, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 1040, 1041], "dropdown": 18, "tab": [18, 135, 993], "master": [18, 19, 126], "vs": [18, 121], "view": [18, 19, 69, 175, 193, 196, 723, 726, 730], "log": [18, 19, 37, 38, 83, 84, 122, 126, 129, 132, 135, 175, 207, 208, 368, 509, 512, 517, 520, 736, 783, 993], "built": [18, 121, 133, 175, 176, 177, 318, 1015, 1026, 1027, 1028], "bottom": 18, "box": 18, "patient": 18, "upto": 18, "15": [18, 37, 38, 101, 102, 119, 121, 368, 408, 411, 564, 567, 568, 569, 723, 726, 736, 748, 750, 774, 776, 793, 795, 824, 858, 861, 912, 914, 915, 916, 924, 927, 929, 930, 949, 950, 953], "minut": 18, "launch": 18, "12": [18, 99, 100, 101, 102, 119, 121, 126, 368, 408, 411, 428, 431, 440, 443, 564, 567, 608, 626, 644, 685, 687, 690, 736, 748, 750, 774, 776, 793, 795, 824, 842, 845, 850, 853, 858, 861, 906, 907, 909, 910, 911, 912, 914, 915, 916, 924, 928, 929, 930, 949, 950, 953], "output": [18, 72, 73, 115, 116, 117, 118, 119, 121, 122, 125, 126, 128, 129, 132, 134, 136, 137, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 318, 327, 328, 362, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 619, 620, 621, 623, 626, 627, 630, 631, 632, 634, 636, 637, 640, 648, 661, 664, 665, 685, 696, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 888, 901, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 923, 924, 928, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026], "That": [18, 19, 121, 134, 135, 136, 368, 560, 563], "alreadi": [18, 19, 72, 73, 117, 123, 126, 134, 149, 318, 368, 432, 435, 465, 468, 539, 542, 564, 567, 604, 607, 736, 774, 776, 993], "refer": [18, 19, 117, 121, 122, 127, 149, 175, 190, 191, 368, 461, 464, 509, 512, 685, 687, 690, 692, 694, 736, 799, 801, 805, 807, 949, 970, 973, 978, 981, 982, 983, 986, 988, 991, 1015, 1025], "approach": [18, 19, 121, 122, 126, 134, 135, 149], "colour": 18, "applic": [18, 127, 128, 136, 723, 734, 735, 888, 894, 900], "good": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 136], "chanc": 18, "vscode": 18, "show": [18, 19, 72, 73, 119, 121, 129, 148, 149, 993], "explor": [18, 133, 137, 148], "troubleshoot": 18, "sometim": [18, 19, 121], "ever": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "64": [18, 121, 135, 136, 368, 581, 584, 585, 588, 723, 729, 730, 736, 774, 776, 949, 950, 953, 993, 1015, 1026], "bit": [18, 119, 121, 122, 126, 134, 246, 280, 281, 284, 288, 291, 368, 412, 415, 416, 419, 424, 427, 949, 966, 969, 974, 977], "usr": 18, "more": [18, 19, 20, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 149, 175, 176, 177, 246, 257, 260, 368, 461, 464, 736, 760, 763, 824, 842, 845, 929, 930, 931, 935, 937, 993], "nutshel": [18, 117], "hook": 18, "lint": 18, "accept": [18, 19, 26, 117, 118, 119, 121, 122, 125, 126, 128, 129, 134, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 525, 528, 529, 532, 537, 548, 551, 560, 563, 564, 567, 568, 571, 581, 584, 585, 588, 594, 598, 599, 603, 608, 636, 723, 726, 735, 736, 737, 740, 745, 747, 748, 750, 824, 838, 841, 842, 845, 858, 861, 906, 907, 910, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957, 958, 961, 982, 983, 986, 993], "fix": [18, 19], "fail": [18, 20, 120, 121, 130, 132, 134], "attempt": [18, 130, 149], "succe": 18, "problemat": 18, "appli": [18, 19, 20, 24, 25, 26, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 117, 118, 119, 121, 122, 124, 126, 127, 128, 129, 132, 134, 135, 136, 137, 147, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 246, 267, 268, 269, 271, 305, 308, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 594, 595, 596, 597, 599, 600, 601, 602, 608, 609, 610, 611, 613, 630, 631, 632, 637, 638, 639, 641, 685, 687, 688, 689, 691, 705, 707, 709, 711, 723, 732, 734, 735, 736, 737, 738, 739, 741, 768, 770, 777, 779, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 858, 859, 860, 862, 868, 871, 884, 885, 886, 888, 894, 897, 900, 901, 906, 907, 908, 909, 910, 911, 914, 916, 931, 932, 933, 934, 983, 984, 985, 987, 988, 989, 990, 992, 993, 1001, 1002, 1003, 1029, 1030], "proce": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "modifi": [18, 19, 118, 122, 127, 128, 130, 132], "properli": [18, 115], "enter": [18, 19, 117, 125, 127, 128, 318, 685, 722], "unsur": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129], "feel": [18, 19, 20, 21, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 993], "server": [19, 993], "appropri": [19, 67, 68, 113, 114, 121, 124, 368, 382, 385, 539, 542, 924, 925], "context": [19, 119, 121, 126, 127, 128, 318, 608, 659, 723, 734, 1015, 1026], "suitabl": [19, 116, 126], "quick": [19, 115, 136], "alwai": [19, 20, 72, 73, 116, 117, 118, 121, 122, 123, 125, 126, 129, 130, 132, 134, 149, 246, 252, 255, 368, 382, 385, 539, 542, 608, 652, 685, 701, 703, 718], "correct": [19, 20, 63, 64, 109, 110, 115, 117, 122, 126, 127, 128, 130, 246, 313, 824, 825, 828, 949, 970, 971, 972, 973, 978, 979, 980, 981, 993], "tendenc": 19, "gener": [19, 20, 21, 40, 67, 68, 72, 73, 86, 113, 114, 115, 116, 117, 118, 119, 122, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 148, 149, 172, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 560, 563, 581, 584, 585, 588, 609, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 701, 703, 736, 748, 750, 824, 838, 841, 858, 861, 912, 913, 914, 915, 918, 920, 922, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957, 993, 1031, 1035], "land": 19, "end": [19, 126, 129, 131, 148, 149, 175, 176, 177, 368, 400, 403, 993, 999], "world": 19, "come": [19, 20, 121, 136, 147, 993, 999], "fly": 19, "hard": [19, 134], "receiv": [19, 121, 127, 128, 318, 327, 328, 608, 615, 658, 1015, 1025], "respons": [19, 21], "internship": 19, "comment": [19, 130], "trigger": 19, "unansw": 19, "label": [19, 132, 133, 137, 808, 809, 812, 814, 817, 819, 822], "respond": 19, "remov": [19, 20, 21, 69, 72, 73, 118, 121, 122, 127, 129, 137, 736, 748, 750, 760, 763, 796, 798, 824, 864, 867, 884, 885, 886], "someon": [19, 149], "els": [19, 20, 69, 116, 122, 123, 129, 132, 134, 136, 137, 149, 608, 618, 629, 633, 888, 898], "strive": [19, 121, 149], "repli": 19, "newli": [19, 121, 129, 172, 173, 246, 252, 255, 608, 619], "place": [19, 72, 73, 115, 116, 117, 118, 119, 121, 122, 126, 128, 130, 137, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 318, 363, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 581, 584, 585, 588, 594, 598, 599, 603, 608, 636, 650, 651, 652, 723, 726, 735, 736, 737, 740, 745, 747, 748, 750, 824, 838, 841, 842, 845, 858, 861, 906, 907, 910, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957, 982, 983, 986, 1031, 1032, 1033, 1034, 1035, 1036], "bug": [19, 121], "serv": [19, 117, 121, 122, 125, 126, 131, 993], "suspect": 19, "behaviour": [19, 117, 118, 121, 125, 126, 129, 134], "observ": 19, "confid": 19, "noth": [19, 23, 69, 72, 73], "wrong": 19, "someth": [19, 116, 135, 136, 149], "bet": 19, "act": [19, 119, 149], "placehold": [19, 117, 125, 130, 888, 900], "sub": [19, 20, 72, 73, 115, 121, 126, 134, 135, 136, 318, 343, 344, 347, 348, 349, 350, 736, 748, 750, 824, 863, 884, 885, 886, 887, 993], "mark": [19, 121], "ii": [19, 949, 950, 953], "iii": 19, "titl": [19, 993], "issue_numb": 19, "delet": [19, 21, 69], "No": [19, 132], "wait": [19, 72, 73, 74, 75, 76], "progress": [19, 126, 133, 137], "pr": 19, "soon": [19, 126, 147, 149, 993, 999], "partial": [19, 72, 73, 1027, 1028], "solut": [19, 121, 126, 736, 784, 786], "review": [19, 116], "merg": 19, "everi": [19, 20, 21, 117, 119, 120, 121, 122, 123, 124, 126, 129, 132, 134, 136, 175, 198, 199, 202, 608, 609, 612], "shape": [19, 33, 34, 51, 52, 72, 73, 77, 78, 79, 80, 87, 88, 97, 98, 101, 102, 105, 106, 116, 117, 118, 119, 121, 127, 128, 129, 132, 134, 135, 136, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 222, 223, 226, 228, 232, 233, 237, 238, 239, 240, 241, 245, 246, 252, 255, 257, 260, 262, 263, 264, 265, 266, 318, 330, 358, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 620, 621, 623, 626, 630, 631, 632, 634, 637, 640, 645, 648, 661, 664, 665, 669, 673, 682, 685, 687, 689, 691, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 855, 856, 857, 858, 861, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 906, 907, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 923, 924, 925, 927, 928, 932, 934, 938, 939, 942, 944, 947, 949, 950, 953, 982, 983, 986, 988, 991, 993, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1029, 1030], "move": [19, 72, 73, 116, 318, 363], "within": [19, 26, 29, 30, 121, 136, 149, 175, 176, 177, 912, 918, 920], "7": [19, 21, 37, 38, 49, 50, 51, 52, 74, 75, 83, 84, 95, 96, 99, 100, 101, 102, 119, 121, 122, 126, 129, 160, 162, 163, 318, 340, 368, 369, 372, 382, 383, 384, 385, 386, 391, 393, 408, 411, 412, 415, 428, 431, 432, 435, 440, 443, 457, 460, 465, 468, 477, 480, 497, 500, 537, 538, 564, 567, 568, 569, 570, 571, 581, 584, 594, 598, 599, 603, 608, 617, 626, 636, 685, 687, 690, 692, 694, 705, 707, 723, 729, 730, 735, 736, 742, 744, 745, 747, 748, 750, 774, 776, 793, 795, 808, 809, 810, 812, 813, 814, 817, 819, 820, 822, 823, 824, 825, 826, 828, 838, 841, 842, 845, 850, 853, 863, 872, 875, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 924, 928, 929, 930, 949, 950, 953], "dai": 19, "close": [19, 118, 368, 461, 464, 564, 567, 736, 787, 789], "likewis": [19, 117, 118, 122, 126, 127, 135], "freed": 19, "flag": [19, 72, 73, 129, 134, 318, 337, 685, 701, 703], "purpos": [19, 21, 117, 119, 121, 122, 124, 125, 126, 131, 134, 368, 461, 464, 993], "remain": [19, 119, 149, 368, 382, 385, 539, 542, 560, 563, 824, 854, 857, 888, 894], "access": [19, 21, 72, 73, 127], "short": [19, 136, 723, 733], "basi": [19, 120, 135], "situat": [19, 137], "alloc": [19, 149, 175, 228, 232, 233, 237, 246, 252, 255, 318], "upon": [19, 119, 121, 129, 149], "period": 19, "prevent": [19, 129, 130, 134, 685, 687, 690, 692, 694, 705, 707, 949, 974, 977, 1031, 1032, 1033], "unabl": 19, "obvious": 19, "never": [19, 121, 126], "reflect": [19, 125], "qualiti": 19, "hypothet": 19, "frustrat": 19, "delai": 19, "busi": 19, "fine": [19, 134, 137], "becaus": [19, 117, 118, 121, 122, 123, 125, 127, 128, 129, 132, 136, 137, 149], "inact": 19, "limit": [19, 72, 73, 74, 75, 76, 119, 121, 130, 132, 135, 137, 149, 246, 281, 284, 288, 291, 608, 620, 621, 623, 824, 825, 828], "me": 19, "unfairli": 19, "definit": [19, 122, 127, 134, 736, 737, 740, 742, 744], "investig": 19, "Then": [19, 21, 134, 149], "practic": 19, "separ": [19, 121, 125, 130, 132, 134, 135], "branch": [19, 126, 149, 172, 173, 368, 400, 403], "simpli": [19, 24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 70, 71, 72, 73, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 117, 118, 119, 121, 122, 125, 126, 128, 129, 132, 136, 137, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 368, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 461, 464, 465, 466, 467, 568, 569, 570, 572, 594, 595, 596, 597, 599, 600, 601, 602, 609, 610, 611, 613, 637, 638, 639, 641, 687, 688, 689, 691, 737, 738, 739, 741, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 823, 825, 826, 827, 829, 858, 859, 860, 862, 907, 908, 909, 911, 914, 916, 931, 932, 933, 934, 983, 984, 985, 987, 988, 989, 990, 992], "role": [19, 133], "kept": [19, 72, 73, 74, 75, 76, 129, 884, 885, 886], "date": 19, "upstream": [19, 120], "complic": [19, 132], "root": [19, 21, 135, 368, 581, 584, 912, 913, 917], "merge_with_upstream": 19, "sh": 19, "name_of_your_branch": 19, "resolv": [19, 949, 966, 969, 974, 977], "clone": [19, 21, 72, 73, 318, 339, 340, 341, 342], "push": [19, 120, 130], "both": [19, 117, 118, 119, 121, 122, 126, 128, 129, 132, 134, 135, 136, 137, 148, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 304, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 465, 468, 537, 548, 551, 556, 559, 568, 571, 581, 584, 585, 588, 594, 598, 608, 636, 685, 687, 690, 723, 726, 735, 736, 737, 740, 742, 744, 748, 750, 760, 763, 799, 801, 824, 858, 861, 906, 907, 910, 929, 931, 935, 949, 954, 957, 982, 983, 986], "abort": 19, "tediou": 19, "resolut": 19, "stash": 19, "reinstat": 19, "correspond": [19, 69, 72, 73, 74, 75, 117, 118, 119, 120, 121, 122, 125, 126, 127, 246, 257, 260, 368, 400, 403, 556, 559, 736, 742, 744, 751, 753, 784, 786, 824, 830, 833, 858, 861, 912, 913, 924, 925, 926, 929, 930, 931, 935, 937, 949, 966, 969, 970, 973, 974, 977, 978, 981], "fetch": 19, "uncommit": 19, "unstag": 19, "untrack": 19, "comprehens": 19, "explan": [19, 117, 118, 126, 134], "atlassian": 19, "tutori": 19, "wrote": 19, "piec": [19, 122, 124, 125, 132], "inform": [19, 121, 130, 246, 281, 284, 288, 291, 608, 614, 685, 718], "tag": 19, "usu": 19, "describ": [19, 121, 133, 137, 949, 950, 953, 966, 969, 970, 973, 974, 977], "navig": [19, 115], "blame": 19, "revis": 19, "author": [19, 993], "eg": [19, 121], "16": [19, 47, 48, 83, 84, 101, 102, 119, 121, 135, 368, 594, 595, 597, 598, 723, 729, 736, 737, 738, 740, 748, 750, 774, 776, 914, 916, 924, 928, 949, 950, 953], "5": [19, 21, 37, 38, 39, 40, 47, 48, 51, 52, 53, 54, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 97, 98, 99, 100, 101, 102, 117, 119, 121, 123, 134, 135, 136, 160, 162, 163, 165, 175, 199, 202, 210, 213, 223, 226, 238, 240, 241, 245, 246, 267, 269, 270, 271, 318, 340, 356, 368, 369, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 393, 394, 395, 404, 407, 408, 411, 424, 427, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 581, 584, 585, 588, 594, 595, 597, 598, 599, 600, 602, 603, 608, 609, 610, 617, 626, 636, 637, 640, 641, 673, 678, 685, 687, 689, 690, 691, 723, 726, 728, 729, 735, 736, 737, 738, 740, 742, 744, 745, 747, 748, 750, 757, 759, 774, 776, 793, 795, 796, 798, 808, 819, 822, 824, 825, 826, 827, 828, 829, 830, 833, 838, 841, 842, 845, 850, 853, 854, 857, 858, 860, 861, 862, 863, 872, 875, 888, 891, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 923, 924, 926, 927, 928, 929, 930, 931, 935, 938, 939, 942, 949, 950, 953, 954, 957, 982, 983, 986, 1015, 1026], "past": 19, "l": [19, 115, 736, 737, 740, 751, 753, 760, 763, 796, 798], "filepath": [19, 72, 73], "grep": 19, "v": [19, 69, 132, 135, 136, 137, 723, 735, 993, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1035, 1037, 1038], "commit_id": 19, "handi": [19, 121], "histori": 19, "toggl": 19, "vertic": 19, "highlight": [19, 119], "previou": [19, 117, 121, 137, 149, 608, 682, 685, 692, 694, 705, 707], "shown": [19, 67, 68, 72, 73, 113, 114, 117, 119, 121, 130, 132, 134, 149, 368, 408, 411, 428, 431, 440, 443, 564, 567, 599, 603, 736, 745, 747, 824, 838, 841, 842, 845, 929, 930, 938, 939, 942], "whenev": [19, 121, 134, 135], "think": [19, 119], "interact": [19, 121, 993], "gain": [19, 131, 136, 1006], "quit": [19, 20, 118, 121, 122, 124, 125], "repeat": [19, 51, 52, 72, 73, 97, 98, 118, 119, 121, 123, 125, 126, 130, 608, 632, 824, 876, 879], "yourself": [19, 20, 121, 148], "simpler": [19, 134], "cannot": [19, 123, 127, 137], "least": [19, 119, 121, 122, 125, 736, 760, 763], "final": [19, 118, 119, 122, 125, 127, 129, 130, 132, 134, 135, 175, 204, 205, 207, 208, 608, 635, 1015, 1026], "tickbox": 19, "lower": [19, 72, 73, 119, 121, 132, 149, 175, 190, 191, 228, 232, 368, 537, 736, 737, 740, 912, 918, 920], "corner": 19, "without": [19, 72, 73, 116, 117, 122, 125, 126, 128, 130, 132, 134, 135, 136, 148, 149, 608, 663, 668, 824, 854, 857, 888, 890, 929, 930, 931, 935, 937], "span": 19, "intent": [19, 129], "larg": [19, 135, 368, 382, 385, 539, 542], "discourag": 19, "philosophi": 19, "increment": [19, 608, 651], "frequent": [19, 20], "valuabl": 19, "infrequ": 19, "earli": [19, 23, 69, 993], "wast": 19, "spot": [19, 122], "mistak": [19, 130], "propos": 19, "mountain": 19, "around": [19, 72, 73, 74, 75, 76, 117, 122, 125, 134, 149], "advoc": [19, 149], "individu": [19, 20, 122], "per": [19, 121, 135, 318, 723, 724, 725, 726, 727, 728, 729, 730, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "style": [19, 924, 927], "ve": [19, 131, 134, 912, 913, 993], "were": [19, 72, 73, 116, 121, 126, 130], "actual": [19, 115, 122, 129, 131, 134, 136, 149], "aim": [19, 131], "part": [19, 116, 120, 121, 122, 132, 133, 137, 148, 149, 175, 228, 232, 233, 237, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 1027, 1028], "subsect": 19, "session": [19, 993], "block": [19, 121, 122, 130, 131, 133, 137, 149, 318, 685, 722, 993], "smaller": [19, 132, 137, 824, 825, 828, 858, 861, 949, 966, 969, 974, 977], "edit": 19, "exact": [19, 72, 73, 132, 929, 930], "beauti": 19, "particularli": [19, 135, 149], "concern": [19, 115, 119, 126, 129, 131], "effici": [19, 117, 121, 122, 126, 129, 130, 132, 135, 149], "difficult": [19, 121, 149, 929, 930, 931, 935, 937], "undo": 19, "stress": 19, "frequenc": [19, 608, 635], "pycharm": 19, "pytest": [19, 121], "button": 19, "declar": 19, "insid": [19, 21, 116, 121, 127], "exec": 19, "rm": 19, "rf": 19, "cp": 19, "ivy_contain": 19, "bash": [19, 21], "test_ivi": [19, 121], "test_funct": [19, 121], "test_cor": 19, "test_imag": 19, "test_random_crop": 19, "header": 19, "summari": [19, 72, 73, 79, 80, 121, 246, 273, 274, 275, 310, 311, 312, 318, 331, 332, 608, 624, 628, 646, 685, 717], "q": [19, 149, 723, 735, 736, 751, 753, 780, 782], "array_api_test": 19, "test_creation_funct": 19, "test_arang": 19, "window": [19, 21, 723, 724, 725, 726, 727, 728, 729, 730, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "variou": [19, 117, 118, 124, 148], "valu": [19, 23, 51, 52, 59, 60, 69, 72, 73, 74, 75, 76, 97, 98, 117, 119, 121, 122, 126, 127, 128, 129, 130, 132, 134, 137, 149, 175, 176, 177, 190, 191, 198, 199, 202, 204, 205, 207, 208, 246, 252, 255, 273, 274, 275, 318, 330, 361, 362, 368, 369, 372, 374, 377, 382, 385, 387, 390, 396, 399, 432, 435, 449, 452, 453, 456, 465, 468, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 537, 538, 539, 542, 548, 551, 552, 555, 556, 559, 564, 567, 599, 603, 604, 607, 608, 620, 621, 623, 624, 629, 635, 636, 637, 640, 646, 649, 653, 663, 664, 665, 666, 667, 668, 684, 685, 687, 690, 692, 694, 696, 705, 707, 718, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 768, 770, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 802, 804, 824, 825, 828, 834, 835, 836, 837, 850, 853, 854, 857, 880, 882, 883, 884, 885, 886, 888, 892, 893, 894, 895, 896, 901, 904, 905, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 922, 924, 925, 926, 928, 929, 930, 931, 933, 935, 936, 937, 938, 939, 942, 944, 947, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035], "cpu": [19, 72, 73, 128, 149, 175, 204, 205, 207, 208, 241, 245, 318, 337, 338, 340, 354, 357, 359, 363, 364, 366, 367, 608, 636, 637, 640, 661, 664, 665, 912, 913, 914, 915, 917, 918, 920, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038], "gpu": [19, 101, 102, 128, 134, 149, 318, 337, 340, 353, 355, 359, 361, 366, 914, 916], "combin": [19, 72, 73, 74, 75, 76, 119, 121, 122, 125, 126, 137, 736, 742, 744], "wherebi": [20, 126, 888, 900], "broad": 20, "distribut": [20, 72, 73, 121, 128, 149, 318, 339, 343, 344, 345, 346, 723, 731, 808, 809, 812, 814, 817, 819, 822, 912, 913, 914, 915, 917, 918, 920, 1015, 1023, 1027, 1028], "across": [20, 72, 73, 117, 119, 121, 122, 126, 127, 318, 327, 328, 339, 340, 342, 343, 344, 345, 346, 350, 360, 361, 608, 616, 617, 888, 894, 924, 926], "todo": 20, "commit": [20, 121], "NOT": [20, 368, 525, 528], "static": [20, 70, 71, 72, 73, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 111, 112, 113, 114, 118, 119, 122, 149, 166, 170, 172, 173, 267, 271, 369, 373, 382, 386, 391, 395, 568, 572, 594, 595, 599, 600, 609, 613, 637, 641, 737, 741, 809, 813, 814, 818, 819, 823, 825, 829, 858, 862, 907, 911, 914, 916, 931, 932, 983, 987, 988, 992], "method": [20, 23, 24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 125, 130, 132, 133, 136, 137, 149, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 179, 180, 185, 186, 193, 194, 196, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 245, 267, 268, 269, 271, 368, 369, 370, 371, 373, 382, 383, 384, 386, 387, 390, 391, 392, 393, 395, 408, 411, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 477, 480, 497, 500, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 572, 581, 584, 585, 588, 594, 595, 596, 597, 599, 600, 601, 602, 603, 608, 609, 610, 611, 613, 624, 625, 636, 637, 638, 639, 641, 664, 665, 678, 680, 685, 687, 688, 689, 691, 705, 707, 709, 711, 722, 723, 729, 735, 736, 737, 738, 739, 741, 742, 744, 745, 747, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 838, 841, 842, 845, 850, 853, 858, 859, 860, 862, 863, 872, 875, 888, 889, 899, 900, 901, 907, 908, 909, 911, 912, 914, 916, 917, 918, 920, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 939, 942, 949, 950, 953, 954, 957, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 1015, 1026, 1027, 1028], "instanc": [20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 111, 112, 113, 114, 117, 118, 119, 121, 122, 125, 127, 129, 135, 136, 137, 150, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 207, 208, 210, 213, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 267, 268, 269, 270, 318, 327, 359, 368, 369, 370, 371, 372, 382, 383, 384, 385, 387, 390, 391, 392, 393, 394, 408, 411, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 581, 584, 585, 588, 594, 596, 597, 598, 599, 601, 602, 603, 608, 609, 610, 611, 625, 636, 637, 638, 639, 652, 669, 678, 680, 687, 688, 689, 691, 723, 726, 729, 735, 736, 737, 738, 739, 740, 742, 744, 745, 747, 748, 750, 808, 809, 810, 811, 812, 814, 815, 816, 819, 820, 821, 824, 825, 826, 827, 838, 841, 842, 845, 850, 853, 858, 859, 860, 861, 863, 872, 875, 906, 907, 908, 909, 910, 912, 917, 918, 920, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 938, 939, 942, 949, 950, 953, 954, 957, 982, 983, 984, 985, 986, 988, 989, 990, 1004, 1005], "revers": [20, 69, 74, 75, 118, 119, 137, 149, 608, 629, 824, 842, 845], "resourc": 20, "content": [20, 21, 72, 73, 129, 132, 135], "thei": [20, 72, 73, 115, 116, 119, 121, 122, 124, 126, 127, 128, 129, 130, 134, 135, 136, 137, 149, 246, 304, 884, 885, 886, 912, 913, 993, 1037, 1038], "hypothesi": 20, "cover": [20, 118, 119, 121, 122, 124, 131], "lambda": [20, 132, 135, 1031, 1034, 1036], "direct": [20, 136, 137, 148, 938, 944, 947], "bind": [20, 126], "special": [20, 74, 75, 116, 117, 118, 119, 125, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 428, 431, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603, 604, 607, 949, 954, 957, 958, 961, 962, 965, 970, 973, 974, 977, 978, 981], "aforement": 20, "categori": [20, 116, 125, 126, 127, 131, 993], "parent": [20, 134, 685, 722], "arraywithelementwis": [20, 37, 125], "containerwithmanipul": [20, 74, 75, 97], "hint": [20, 116, 117, 118, 122, 125, 129, 130, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 581, 584, 585, 588, 594, 598, 599, 603, 608, 636, 723, 726, 735, 736, 737, 740, 745, 747, 748, 750, 824, 838, 841, 842, 845, 858, 861, 906, 907, 910, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957, 982, 983, 986], "its": [20, 21, 118, 121, 130, 246, 257, 260, 318, 362, 736, 760, 763, 824, 838, 841, 854, 857, 858, 861, 872, 875], "docstr": [20, 21, 24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 115, 116, 117, 122, 126, 130, 166, 167, 168, 170, 175, 176, 177, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 210, 213, 215, 216, 220, 221, 223, 224, 226, 228, 230, 232, 233, 235, 237, 238, 240, 241, 243, 245, 246, 267, 268, 269, 270, 271, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 408, 411, 428, 431, 432, 433, 434, 435, 440, 443, 465, 466, 467, 468, 497, 500, 537, 548, 551, 564, 567, 568, 569, 570, 571, 572, 581, 584, 585, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 609, 610, 611, 613, 637, 638, 639, 641, 687, 688, 689, 691, 736, 737, 738, 739, 741, 745, 747, 748, 750, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 838, 841, 842, 845, 858, 859, 860, 861, 862, 907, 908, 909, 911, 914, 916, 929, 930, 931, 932, 933, 934, 935, 938, 939, 942, 949, 954, 957, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992], "thorough": [20, 117, 118, 121], "transpil": [20, 131, 133, 993, 999], "builder": [21, 147, 149, 993], "maco": 21, "ubuntu": 21, "uid": 21, "make_docs_without_dock": 21, "rel": [21, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 736, 748, 750, 768, 770, 777, 779, 796, 798, 824, 842, 845, 858, 861, 938, 939, 942, 944, 947, 993], "synchron": 21, "rest": [21, 133, 137], "remove_doc": 21, "_": [21, 118, 126, 129, 134, 135, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 581, 584, 585, 588, 685, 687, 690, 692, 694, 736, 748, 750, 805, 807, 824, 838, 841, 858, 861, 929, 930, 938, 939, 942, 949, 954, 957], "indic": [21, 39, 40, 72, 73, 85, 86, 130, 133, 137, 160, 165, 368, 568, 571, 608, 636, 637, 638, 639, 640, 641, 648, 661, 664, 665, 723, 724, 725, 726, 727, 728, 729, 730, 736, 802, 804, 824, 858, 861, 888, 889, 891, 893, 895, 896, 897, 899, 902, 903, 904, 905, 906, 907, 910, 912, 913, 924, 925, 926, 927, 929, 930, 936, 938, 939, 942, 944, 947, 993, 996, 998, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1027, 1028], "privat": [21, 121, 1031, 1035], "fulfil": [21, 131, 993], "autogenerated_sourc": 21, "format": [21, 72, 73, 115, 118, 127, 128, 132, 134, 135, 246, 276, 279, 318, 338, 949, 950, 953, 993], "png": [21, 135], "_imag": 21, "lastli": 21, "structur": [21, 72, 73, 74, 75, 76, 116, 122, 125, 126, 135, 136, 608, 624, 888, 901], "rst": 21, "skip": [21, 72, 73, 121, 888, 901], "read": [21, 72, 73, 993], "partial_sourc": 21, "conf": 21, "copi": [21, 31, 32, 33, 34, 72, 73, 77, 78, 79, 80, 118, 123, 127, 132, 134, 135, 148, 149, 175, 179, 180, 181, 182, 183, 193, 196, 246, 252, 253, 254, 255, 256, 318, 363, 608, 625, 679, 680, 824, 854, 857, 888, 890, 938, 944, 947], "create_rst_fil": 21, "filter": [21, 121, 723, 724, 725, 726, 727, 728, 729, 730, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "repres": [21, 121, 134, 175, 210, 213, 246, 280, 368, 378, 381, 382, 385, 391, 394, 404, 407, 440, 443, 539, 542, 577, 580, 599, 603, 685, 722, 723, 732, 736, 783, 784, 786], "overal": [21, 118, 126, 127, 128, 137], "markup": 21, "6": [21, 37, 38, 41, 42, 51, 52, 74, 75, 83, 84, 85, 86, 95, 96, 99, 100, 101, 102, 119, 121, 123, 126, 134, 135, 136, 160, 162, 163, 165, 175, 199, 202, 241, 245, 318, 340, 356, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 394, 408, 411, 412, 415, 428, 431, 432, 433, 434, 435, 440, 443, 465, 468, 477, 480, 497, 500, 537, 538, 544, 547, 564, 567, 568, 569, 570, 571, 572, 581, 584, 585, 588, 594, 598, 599, 603, 608, 617, 626, 636, 637, 640, 641, 673, 678, 685, 687, 688, 690, 723, 726, 729, 730, 735, 736, 742, 744, 745, 747, 748, 750, 774, 776, 787, 789, 793, 795, 808, 809, 811, 812, 813, 814, 816, 818, 819, 821, 822, 823, 824, 825, 826, 828, 830, 833, 838, 841, 842, 845, 850, 853, 854, 857, 858, 861, 863, 872, 875, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 924, 925, 928, 929, 930, 931, 935, 949, 950, 953, 954, 957], "extract": [21, 116], "get_functions_and_class": 21, "doctr": 21, "readm": [21, 149], "module_nam": 21, "copy_readme_to_rst": 21, "tabl": 21, "toc": 21, "tree": 21, "append": [21, 72, 73, 121, 132, 135, 368, 416, 419, 736, 748, 750, 760, 763], "append_toctree_to_rst": 21, "9": [21, 37, 38, 41, 42, 51, 52, 74, 75, 83, 84, 87, 88, 101, 102, 119, 121, 135, 136, 368, 382, 383, 384, 385, 386, 391, 394, 408, 411, 412, 415, 537, 538, 564, 567, 568, 571, 581, 584, 585, 588, 608, 636, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 705, 706, 707, 708, 723, 726, 729, 730, 736, 742, 744, 745, 747, 748, 750, 774, 776, 787, 789, 793, 795, 824, 825, 826, 828, 842, 845, 850, 853, 858, 861, 863, 912, 913, 914, 915, 916, 924, 928, 929, 930, 949, 950, 953, 1031, 1032, 1033], "index": [21, 31, 32, 72, 73, 77, 78, 122, 126, 134, 174, 175, 190, 191, 210, 211, 212, 213, 214, 318, 359, 608, 614, 636, 637, 640, 824, 868, 871, 888, 891, 892, 895, 896, 897, 902, 904, 924, 925, 926, 927, 929, 930, 931, 935, 938, 939, 942, 996, 998], "create_index_rst": 21, "14": [21, 83, 84, 99, 100, 101, 102, 119, 121, 126, 368, 391, 394, 428, 431, 568, 572, 685, 687, 690, 723, 735, 736, 748, 750, 774, 776, 907, 909, 911, 914, 916, 929, 930, 949, 950, 953], "\u03c0": [21, 368, 374, 377, 387, 390, 396, 399, 400, 403], "namespac": [21, 116, 127, 132, 137], "helper": [23, 69, 135], "abc": [23, 24, 25, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 72, 73, 134, 318, 327, 333, 608, 633, 1027, 1028, 1031, 1035], "inherit": [23, 125, 126, 134], "__delattr__": [23, 69], "self": [23, 69, 72, 73, 125, 126, 132, 134, 135, 136, 137, 166, 167, 168, 179, 180, 181, 185, 186, 187, 193, 194, 195, 199, 200, 201, 210, 211, 212, 215, 216, 217, 223, 224, 225, 228, 230, 231, 233, 235, 236, 241, 243, 244, 252, 253, 254, 257, 258, 259, 262, 263, 264, 267, 268, 269, 276, 277, 278, 281, 282, 283, 288, 289, 290, 294, 295, 296, 299, 300, 301, 305, 306, 307, 318, 369, 370, 371, 374, 375, 376, 378, 379, 380, 382, 383, 384, 387, 388, 389, 391, 392, 393, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 444, 445, 446, 449, 450, 451, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 487, 489, 490, 491, 493, 494, 495, 497, 498, 499, 501, 502, 503, 505, 506, 507, 509, 510, 511, 513, 514, 515, 517, 518, 519, 521, 522, 523, 525, 526, 527, 529, 530, 531, 533, 534, 535, 539, 540, 541, 544, 545, 546, 548, 549, 550, 552, 553, 554, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 570, 573, 574, 575, 577, 578, 579, 581, 582, 583, 585, 586, 587, 589, 591, 592, 594, 596, 597, 599, 601, 602, 604, 605, 606, 609, 610, 611, 621, 622, 637, 638, 639, 687, 688, 689, 692, 693, 697, 698, 701, 702, 705, 706, 709, 710, 713, 714, 737, 738, 739, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 762, 764, 765, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 809, 810, 811, 814, 815, 816, 819, 820, 821, 825, 826, 827, 830, 831, 832, 834, 835, 836, 838, 839, 840, 842, 843, 844, 846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 859, 860, 864, 865, 866, 868, 869, 870, 872, 873, 874, 876, 877, 878, 880, 881, 882, 907, 908, 909, 918, 919, 931, 933, 934, 939, 940, 941, 944, 945, 946, 950, 951, 952, 954, 955, 956, 958, 959, 960, 962, 963, 964, 966, 967, 968, 970, 971, 972, 974, 975, 976, 978, 979, 980, 983, 984, 985, 988, 989, 990, 993, 1031, 1035], "delattr": [23, 69], "__format__": [23, 69], "format_spec": [23, 69], "formatt": [23, 69], "__getattribute__": [23, 69], "getattr": [23, 69], "__init_subclass__": [23, 69], "subclass": [23, 69], "overridden": [23, 69], "extend": [23, 69, 117, 118, 123], "__new__": [23, 69], "accur": [23, 69, 368, 461, 464], "__reduce__": [23, 69], "pickl": [23, 69, 72, 73, 126, 135], "__reduce_ex__": [23, 69], "protocol": [23, 69], "__setattr__": [23, 126], "setattr": 23, "__sizeof__": [23, 69], "size": [23, 69, 72, 73, 74, 75, 76, 121, 134, 135, 175, 204, 205, 207, 208, 318, 360, 361, 362, 608, 664, 671, 723, 735, 736, 748, 750, 764, 766, 774, 776, 780, 782, 787, 789, 799, 801, 824, 838, 841, 858, 861, 863, 864, 867, 912, 913, 917, 918, 920, 924, 925, 927, 982, 983, 986, 988, 991, 1015, 1016, 1017], "memori": [23, 69, 128, 129, 147, 149, 318, 336, 357, 362, 364, 367, 723, 733, 993], "byte": [23, 69, 130], "__str__": [23, 69], "__subclasshook__": [23, 69], "overrid": [23, 69, 608, 661], "issubclass": [23, 69], "invok": [23, 69], "abcmeta": [23, 69], "__subclasscheck__": [23, 69], "true": [23, 33, 34, 39, 40, 47, 48, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 122, 126, 127, 129, 130, 132, 134, 135, 136, 137, 160, 161, 166, 168, 170, 172, 173, 175, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 205, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 246, 252, 253, 254, 255, 256, 257, 259, 261, 262, 264, 266, 267, 268, 269, 270, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 317, 318, 337, 354, 358, 359, 368, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 411, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 431, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 476, 477, 479, 480, 481, 483, 484, 485, 487, 488, 489, 491, 492, 493, 495, 496, 497, 499, 500, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 528, 529, 531, 532, 533, 535, 539, 541, 543, 544, 546, 548, 550, 551, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 579, 581, 583, 585, 587, 589, 590, 592, 594, 595, 597, 599, 600, 602, 604, 606, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 621, 622, 626, 633, 635, 637, 639, 641, 647, 648, 655, 669, 671, 672, 678, 680, 682, 684, 685, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 722, 723, 731, 736, 737, 739, 740, 741, 760, 762, 764, 766, 787, 788, 789, 802, 804, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 823, 824, 825, 827, 829, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 863, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 885, 886, 887, 888, 889, 898, 899, 901, 907, 909, 911, 912, 913, 918, 919, 921, 924, 925, 926, 928, 929, 930, 931, 932, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 954, 956, 957, 958, 960, 961, 962, 964, 965, 966, 968, 969, 970, 972, 973, 974, 976, 977, 978, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 1015, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "notimpl": [23, 69, 130], "normal": [23, 69, 135, 824, 868, 871, 906, 907, 910, 912, 917, 1029, 1030], "algorithm": [23, 69, 149, 723, 724, 725, 726, 727, 728, 729, 730, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "outcom": [23, 69], "cach": [23, 69, 121, 122, 318, 336, 608, 619], "arraywithactiv": 24, "softplu": [24, 25, 70, 71, 160, 170, 993], "variant": [24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 118, 119, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 594, 595, 596, 597, 599, 600, 601, 602, 609, 610, 611, 613, 637, 638, 639, 641, 687, 688, 689, 691, 737, 738, 739, 741, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 823, 825, 826, 827, 829, 858, 859, 860, 862, 907, 908, 909, 911, 914, 916, 931, 932, 933, 934, 983, 984, 985, 987, 988, 989, 990, 992], "wrap": [24, 25, 26, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 114, 115, 117, 118, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 137, 149, 150, 158, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 594, 595, 596, 597, 599, 600, 601, 602, 608, 609, 610, 611, 613, 619, 637, 638, 639, 641, 685, 687, 688, 689, 691, 721, 737, 738, 739, 741, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 823, 825, 826, 827, 829, 858, 859, 860, 862, 907, 908, 909, 911, 914, 916, 931, 932, 933, 934, 983, 984, 985, 987, 988, 989, 990, 992], "minim": [24, 25, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 65, 66, 70, 71, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 111, 112, 118, 129, 132, 166, 167, 168, 170, 179, 180, 185, 186, 193, 194, 199, 200, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 267, 268, 269, 271, 369, 370, 371, 373, 382, 383, 384, 386, 391, 392, 393, 395, 432, 433, 434, 465, 466, 467, 568, 569, 570, 572, 594, 595, 596, 597, 599, 600, 601, 602, 609, 610, 611, 613, 637, 638, 639, 641, 687, 688, 689, 691, 737, 738, 739, 741, 809, 810, 811, 813, 814, 815, 816, 818, 819, 820, 821, 823, 825, 826, 827, 829, 858, 859, 860, 862, 907, 908, 909, 911, 914, 916, 931, 932, 933, 934, 983, 984, 985, 987, 988, 989, 990, 992], "collect": [26, 72, 73, 121, 148, 160, 172, 318, 608, 685, 723, 808, 888, 901, 906, 912, 1001, 1015, 1029, 1031], "args_to_ivi": 26, "include_deriv": [26, 27, 28, 29, 30, 888, 890, 900], "keyword": [26, 27, 28, 69, 72, 73, 74, 75, 76, 116, 117, 121, 127, 128, 129, 135, 175, 210, 213, 318, 327, 328, 342, 346, 350, 608, 615, 658, 888, 894, 949, 974, 977, 1027, 1028], "variabl": [26, 27, 28, 29, 30, 72, 73, 74, 75, 117, 118, 121, 123, 126, 127, 129, 130, 135, 136, 137, 149, 608, 618, 650, 651, 652, 653, 654, 655, 657, 676, 685, 692, 694, 696, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 718, 721, 723, 734, 736, 784, 786, 884, 885, 886, 887, 906, 907, 910, 993, 1004, 1005, 1006, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "nest": [26, 27, 28, 29, 30, 72, 73, 74, 75, 76, 116, 121, 122, 125, 126, 134, 135, 136, 149, 318, 342, 346, 350, 608, 678, 685, 722, 884, 885, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036], "unchang": [26, 27, 28, 29, 30], "posit": [26, 27, 28, 37, 38, 83, 84, 117, 121, 135, 148, 174, 175, 190, 191, 246, 281, 284, 318, 342, 346, 350, 368, 369, 372, 481, 484, 485, 488, 539, 542, 560, 563, 608, 635, 736, 737, 740, 824, 838, 841, 858, 861, 912, 922, 924, 927, 982, 983, 986, 988, 991, 1004, 1005], "bool": [26, 27, 28, 29, 30, 33, 34, 72, 73, 113, 114, 119, 126, 127, 129, 130, 137, 172, 173, 175, 198, 246, 252, 255, 267, 268, 270, 273, 274, 275, 276, 279, 286, 293, 294, 295, 297, 299, 300, 302, 317, 318, 337, 338, 353, 362, 365, 368, 408, 411, 412, 415, 420, 423, 428, 431, 449, 452, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 521, 524, 525, 528, 529, 532, 548, 551, 608, 609, 612, 616, 617, 626, 629, 633, 635, 645, 647, 652, 654, 655, 656, 657, 671, 672, 683, 684, 685, 718, 722, 736, 737, 740, 764, 766, 787, 789, 802, 804, 824, 863, 884, 885, 886, 887, 888, 889, 890, 894, 898, 899, 900, 912, 913, 924, 925, 926, 938, 939, 942, 944, 947, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "deriv": [26, 27, 28, 29, 30, 127, 128, 134, 136, 175, 185, 188, 199, 202, 223, 226, 241, 245, 685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 888, 890, 900, 1027, 1031, 1035, 1037], "tupl": [26, 27, 28, 29, 30, 47, 48, 59, 60, 69, 72, 73, 116, 117, 121, 126, 127, 128, 130, 134, 135, 136, 149, 175, 179, 182, 215, 218, 246, 262, 265, 287, 313, 318, 337, 608, 635, 673, 723, 726, 729, 730, 733, 736, 768, 770, 777, 779, 787, 788, 789, 793, 795, 802, 804, 824, 830, 833, 834, 837, 842, 845, 846, 849, 858, 861, 864, 867, 868, 871, 880, 883, 884, 885, 886, 887, 888, 890, 891, 893, 895, 896, 897, 899, 900, 902, 903, 904, 905, 924, 927, 929, 930, 931, 933, 935, 936, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "kei": [26, 27, 28, 69, 72, 73, 74, 75, 76, 121, 126, 130, 135, 318, 330, 608, 614, 624, 723, 734, 735, 884, 885, 886, 888, 891, 897, 901, 1004, 1005, 1015, 1026, 1031, 1035], "word": [26, 27, 28, 175, 176, 177, 912, 918, 920, 1004, 1005], "args_to_n": [26, 129, 134], "to_ivi": [26, 72, 73, 134, 888, 901], "input": [26, 29, 30, 41, 42, 72, 73, 74, 75, 76, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 149, 150, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 267, 270, 272, 273, 274, 275, 276, 279, 280, 294, 297, 299, 302, 304, 305, 308, 313, 317, 318, 327, 328, 337, 338, 339, 340, 342, 343, 346, 350, 356, 362, 363, 368, 369, 372, 373, 374, 377, 378, 381, 382, 385, 386, 387, 390, 391, 394, 395, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 572, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 595, 598, 599, 600, 603, 604, 607, 608, 609, 612, 613, 614, 616, 617, 618, 620, 621, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 645, 647, 648, 650, 651, 652, 654, 655, 656, 657, 661, 664, 665, 671, 673, 676, 678, 679, 680, 683, 684, 685, 687, 688, 689, 690, 691, 696, 701, 703, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 813, 814, 817, 818, 819, 822, 823, 824, 825, 828, 829, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 862, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 884, 885, 886, 887, 888, 891, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 923, 924, 925, 926, 927, 928, 929, 930, 931, 935, 936, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030], "leaf": [26, 29, 30, 72, 73, 122, 126, 135, 888, 889, 898, 899], "union": [26, 29, 30, 39, 40, 47, 48, 72, 73, 116, 117, 119, 122, 125, 126, 127, 128, 129, 130, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 250, 251, 252, 255, 257, 260, 262, 265, 272, 273, 274, 275, 276, 279, 280, 281, 284, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 310, 311, 312, 313, 317, 318, 334, 335, 336, 337, 338, 340, 343, 344, 345, 346, 351, 357, 359, 361, 362, 363, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 609, 612, 616, 617, 620, 621, 623, 626, 627, 630, 631, 632, 634, 635, 636, 637, 638, 640, 645, 647, 648, 650, 651, 652, 661, 664, 665, 671, 673, 678, 679, 680, 683, 684, 685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 718, 720, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 899, 900, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 923, 924, 925, 926, 927, 928, 929, 930, 931, 935, 936, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "nativearrai": [26, 29, 30, 31, 32, 39, 40, 116, 117, 119, 122, 125, 126, 129, 130, 132, 134, 137, 150, 158, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 185, 188, 199, 202, 204, 205, 207, 208, 210, 213, 215, 216, 218, 223, 226, 228, 232, 233, 237, 241, 245, 246, 252, 255, 257, 260, 262, 265, 267, 270, 276, 279, 281, 284, 288, 291, 294, 297, 299, 302, 305, 308, 313, 318, 337, 338, 340, 356, 362, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 609, 610, 612, 616, 617, 620, 621, 623, 625, 626, 627, 630, 631, 632, 634, 635, 636, 637, 638, 640, 645, 647, 648, 650, 651, 652, 661, 664, 665, 671, 673, 678, 679, 680, 683, 684, 685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 718, 720, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 888, 890, 891, 900, 906, 907, 910, 912, 913, 923, 924, 925, 926, 927, 928, 929, 930, 931, 935, 936, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "travers": [26, 29, 30, 72, 73, 126, 132, 134, 888, 900], "lowest": [26, 29, 30, 72, 73, 122, 149, 888, 900, 912, 914, 915], "leav": [26, 29, 30, 72, 73, 74, 75, 117, 118, 119, 121, 122, 126, 127, 129, 135, 136, 824, 868, 871, 888, 889, 890, 898, 899, 900], "to_n": [26, 72, 73], "item": [26, 30, 67, 68, 69, 72, 73, 127, 132, 134, 135, 137, 246, 273, 318, 327, 328, 330, 337, 339, 341, 343, 345, 349, 608, 624, 646, 674, 675, 888, 893, 894, 895, 896, 900, 904, 905, 993, 1027, 1028], "arraywithcr": 31, "asarrai": [31, 32, 77, 78, 121, 129, 175, 723, 724, 929, 931, 935], "dtype": [31, 32, 33, 34, 63, 64, 72, 73, 77, 78, 79, 80, 109, 110, 116, 119, 121, 122, 127, 128, 130, 134, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 199, 200, 201, 202, 203, 204, 205, 206, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 260, 267, 268, 269, 270, 271, 272, 273, 274, 275, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 306, 308, 310, 311, 312, 317, 318, 358, 368, 424, 427, 608, 616, 617, 661, 679, 723, 731, 824, 838, 841, 912, 918, 920, 924, 925, 926, 938, 944, 947, 949, 966, 967, 968, 969, 970, 973, 974, 975, 976, 977, 982, 983, 986, 993, 1006, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1037, 1038], "empty_lik": [31, 32, 77, 78, 175], "from_dlpack": [31, 32, 77, 78, 175], "full_lik": [31, 32, 77, 78, 175], "fill_valu": [31, 32, 77, 78, 127, 175, 198, 199, 200, 201, 202, 203, 368, 477, 480, 497, 500], "meshgrid": [31, 32, 77, 78, 175], "xy": [31, 32, 77, 78, 175, 210, 211, 212, 213, 214], "ones_lik": [31, 32, 77, 78, 137, 175, 993], "tril": [31, 32, 77, 78, 175], "k": [31, 32, 69, 77, 78, 115, 132, 175, 190, 191, 192, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 608, 616, 723, 735, 736, 760, 763, 780, 782, 784, 786, 787, 789, 790, 792, 796, 798, 912, 917, 918, 920, 924, 927], "triu": [31, 32, 77, 78, 175], "zeros_lik": [31, 32, 77, 78, 175, 824, 825, 828, 993], "creation": [32, 72, 73, 74, 75, 76, 78, 116, 121, 127, 128, 132, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 215, 218, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245], "data_typ": [33, 34, 79, 80, 116, 121, 127, 246, 250, 251, 252, 255, 257, 260, 262, 265, 267, 270, 272, 273, 274, 275, 276, 279, 280, 281, 284, 286, 287, 288, 291, 293, 294, 297, 299, 302, 304, 305, 308, 310, 311, 312, 313, 314, 315, 316, 317], "arraywithdatatyp": 33, "astyp": [33, 34, 79, 80, 127, 129, 246], "broadcast_arrai": [33, 34, 79, 80, 246], "broadcast_to": [33, 34, 79, 80, 127, 246], "can_cast": [33, 34, 79, 80, 122, 127, 246, 271], "float32": [33, 34, 79, 80, 119, 121, 127, 175, 241, 245, 246, 250, 251, 267, 268, 269, 271, 286, 317], "float64": [33, 34, 121, 127, 246, 252, 255, 267, 268, 270, 286, 317], "as_n": [33, 34, 79, 80, 127, 246, 273, 274, 275, 276, 277, 278, 279, 318, 337, 338, 359], "finfo": [33, 34, 79, 80, 246], "iinfo": [33, 34, 79, 80, 130, 246], "is_float_dtyp": [33, 34, 79, 80, 246], "is_int_dtyp": [33, 34, 79, 80, 246, 608, 680], "result_typ": [33, 34, 79, 80, 127, 246], "arrays_and_dtyp": [33, 34, 79, 80, 246, 305, 306, 307, 308, 309], "arraywithdevic": [35, 134], "ab": [37, 38, 83, 84, 121, 124, 368, 373, 556, 559, 736, 802, 804, 993], "y": [37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 59, 60, 65, 66, 74, 75, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 101, 102, 105, 106, 111, 112, 116, 119, 123, 126, 132, 134, 160, 162, 163, 164, 165, 166, 169, 171, 175, 198, 199, 202, 210, 213, 220, 221, 223, 226, 241, 245, 246, 252, 255, 318, 338, 352, 356, 361, 368, 369, 370, 371, 372, 373, 382, 383, 384, 385, 386, 387, 390, 391, 392, 393, 394, 395, 400, 403, 408, 411, 412, 415, 424, 427, 428, 431, 432, 433, 434, 435, 436, 439, 440, 443, 457, 460, 465, 466, 467, 468, 477, 480, 497, 500, 537, 538, 544, 547, 548, 551, 564, 567, 568, 569, 570, 571, 572, 581, 584, 585, 588, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 608, 609, 610, 611, 612, 613, 616, 617, 625, 626, 633, 634, 636, 637, 638, 639, 640, 641, 671, 678, 679, 680, 685, 696, 723, 729, 730, 732, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 757, 759, 774, 776, 793, 795, 796, 798, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 838, 841, 842, 845, 850, 853, 854, 857, 858, 859, 860, 861, 862, 863, 872, 875, 888, 891, 912, 913, 914, 915, 916, 917, 918, 920, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 938, 939, 942, 949, 950, 953, 954, 957, 970, 973, 974, 977, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992], "aco": [37, 38, 83, 84, 368, 993], "acosh": [37, 38, 83, 84, 246, 286, 287, 368, 993], "x2": [37, 38, 39, 40, 47, 48, 72, 73, 83, 84, 85, 86, 93, 94, 117, 119, 175, 241, 245, 246, 313, 318, 356, 368, 382, 383, 384, 385, 386, 400, 401, 402, 403, 408, 409, 410, 411, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 444, 445, 446, 447, 448, 449, 450, 451, 452, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 493, 494, 495, 496, 497, 498, 499, 500, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 589, 590, 591, 592, 593, 608, 609, 610, 611, 612, 613, 723, 728, 736, 742, 743, 744, 760, 761, 762, 763, 774, 775, 776, 784, 785, 786, 793, 794, 795, 799, 800, 801, 924, 928], "z": [37, 38, 39, 40, 49, 50, 74, 75, 83, 84, 85, 86, 95, 96, 119, 123, 126, 132, 134, 318, 352, 368, 382, 383, 384, 385, 386, 408, 411, 428, 431, 477, 480, 497, 500, 537, 538, 608, 616, 617, 636, 637, 638, 639, 641, 671, 736, 742, 744, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 828, 888, 891, 924, 925, 949, 950, 953, 954, 957], "asin": [37, 38, 83, 84, 368, 993], "asinh": [37, 38, 83, 84, 368, 395, 993], "881": [37, 38, 83, 84, 160, 164, 368, 391, 392, 393, 394], "82": [37, 38, 391, 392], "atan": [37, 38, 83, 84, 368, 993], "atan2": [37, 38, 83, 84, 368, 993], "atanh": [37, 38, 83, 84, 368, 993], "bitwise_and": [37, 38, 83, 84, 368], "bitwise_invert": [37, 38, 83, 84, 368], "bitwise_left_shift": [37, 38, 83, 84, 368], "bitwise_or": [37, 38, 83, 84, 368], "bitwise_right_shift": [37, 38, 83, 84, 368], "bitwise_xor": [37, 38, 83, 84, 368], "ceil": [37, 38, 83, 84, 175, 176, 177, 368, 993], "cosh": [37, 38, 83, 84, 368, 993], "divid": [37, 38, 72, 73, 83, 84, 119, 125, 368, 469, 472, 608, 674, 824, 863], "equal": [37, 38, 72, 73, 83, 84, 119, 126, 127, 175, 190, 191, 198, 199, 202, 246, 252, 255, 368, 416, 419, 424, 427, 481, 484, 485, 488, 556, 559, 564, 567, 608, 609, 612, 616, 617, 736, 748, 750, 768, 770, 777, 779, 824, 825, 828, 834, 837, 863, 880, 883, 912, 918, 920, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947, 949, 958, 961, 970, 973, 974, 977, 978, 981], "erf": [37, 38, 83, 84, 368], "exp": [37, 38, 83, 84, 368, 461, 464, 517, 520, 993], "expm1": [37, 38, 83, 84, 368], "floor": [37, 38, 83, 84, 368, 424, 427, 608, 634, 993], "floor_divid": [37, 38, 83, 84, 368], "greater": [37, 38, 72, 73, 83, 84, 368, 374, 377, 387, 390, 400, 403, 416, 419, 424, 427, 465, 468, 469, 472, 556, 559, 560, 563, 568, 571, 604, 607, 736, 742, 744, 824, 864, 867, 912, 918, 920], "greater_equ": [37, 38, 83, 84, 368], "isfinit": [37, 38, 83, 84, 121, 368], "isinf": [37, 38, 83, 84, 368], "isnan": [37, 38, 83, 84, 368], "less_equ": [37, 38, 83, 84, 368], "log10": [37, 38, 83, 84, 368], "log1p": [37, 38, 83, 84, 368], "log2": [37, 38, 83, 84, 368], "logaddexp": [37, 38, 83, 84, 368], "logical_and": [37, 38, 83, 84, 368, 993], "logical_not": [37, 38, 83, 84, 368, 993], "logical_or": [37, 38, 83, 84, 368, 993], "logical_xor": [37, 38, 83, 84, 368], "multipli": [37, 38, 83, 84, 119, 123, 125, 368, 608, 626], "neg": [37, 38, 83, 84, 122, 126, 129, 160, 162, 175, 176, 177, 190, 191, 368, 481, 484, 485, 488, 539, 542, 556, 559, 560, 563, 736, 787, 789, 799, 801, 802, 804, 824, 842, 845, 858, 861, 982, 983, 986, 988, 991], "not_equ": [37, 38, 83, 84, 368], "pow": [37, 38, 83, 84, 368], "remaind": [37, 38, 72, 73, 83, 84, 368, 608, 634, 824, 863], "94": [37, 38, 83, 84, 391, 395, 568, 569], "256": [37, 38, 568, 569, 723, 729], "0001": [37, 38, 568, 569, 1031, 1032, 1033], "36": [37, 38, 568, 569, 736, 774, 776, 949, 950, 953], "67": [37, 38, 126, 368, 428, 431, 440, 443, 568, 569], "45": [37, 38, 121, 568, 569, 685, 687, 690, 736, 774, 776, 824, 863, 906, 907, 910, 949, 950, 953], "24": [37, 38, 99, 100, 368, 428, 431, 568, 569, 581, 584, 608, 626, 685, 687, 690, 736, 748, 750, 774, 776, 906, 907, 909, 910, 911, 949, 950, 953], "678": [37, 38, 568, 569], "32": [37, 38, 41, 42, 121, 135, 160, 162, 368, 428, 431, 568, 569, 687, 688, 723, 726, 729, 736, 774, 776, 924, 928, 949, 950, 953], "sin": [37, 38, 83, 84, 125, 132, 368, 608, 635, 993], "sinh": [37, 38, 83, 84, 368, 993], "sqrt": [37, 38, 83, 84, 368, 736, 802, 804], "squar": [37, 38, 83, 84, 121, 368, 581, 584, 723, 726, 736, 737, 740, 745, 747, 751, 753, 754, 756, 757, 759, 767, 783, 784, 786, 787, 789], "subtract": [37, 38, 83, 84, 119, 125, 368], "tan": [37, 38, 83, 84, 117, 118, 122, 126, 129, 132, 368, 387, 390, 391, 394, 595, 736, 748, 750, 929, 930, 938, 939, 942, 993], "56": [37, 38, 83, 84, 119, 368, 581, 584, 594, 595, 596, 597, 598, 685, 687, 690, 736, 774, 776, 949, 950, 953], "19": [37, 38, 83, 84, 119, 368, 391, 393, 395, 428, 431, 594, 595, 596, 597, 598, 736, 748, 750], "tanh": [37, 38, 83, 84, 132, 160, 368, 600, 993], "762": [37, 38, 83, 84, 160, 171, 368, 599, 601, 602, 603], "964": [37, 38, 83, 84, 160, 171, 368, 599, 601, 602, 603], "trunc": [37, 38, 83, 84, 368], "elementwis": [38, 72, 73, 84, 116, 122, 132, 137, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607], "arraywithgener": [39, 134], "all_equ": [39, 40, 85, 86, 608, 613], "equality_matrix": [39, 40, 85, 86, 608, 609, 610, 611, 612, 613], "x1": [39, 40, 83, 84, 85, 86, 117, 119, 175, 241, 245, 246, 313, 318, 356, 368, 382, 385, 386, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 448, 449, 452, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 537, 538, 539, 542, 543, 548, 551, 556, 559, 560, 563, 589, 590, 593, 608, 609, 610, 611, 612, 613, 616, 723, 728, 736, 742, 744, 760, 763, 774, 776, 784, 786, 793, 795, 799, 801, 924, 928], "mix": [39, 40, 74, 75, 95, 96, 115, 119, 121, 132, 246, 305, 308, 318, 356, 368, 382, 385, 408, 411, 428, 431, 477, 480, 497, 500, 538, 548, 551, 608, 609, 610, 625, 633, 636, 637, 640, 678, 679, 680, 723, 726, 729, 730, 735, 736, 737, 740, 793, 795, 808, 809, 812, 813, 814, 818, 819, 822, 823, 824, 825, 828, 906, 907, 910, 924, 928, 949, 950, 953, 958, 961], "gather_nd": [39, 40, 72, 73, 85, 86, 608, 641, 993], "arraywithgradi": [41, 134], "adam_step": [41, 42, 87, 88, 685, 691], "mw": [41, 42, 87, 88, 136, 685, 687, 688, 689, 690, 691, 692, 694], "vw": [41, 42, 87, 88, 136, 685, 687, 688, 689, 690, 691, 692, 694], "beta1": [41, 42, 87, 88, 136, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 705, 706, 707, 708, 1031, 1032, 1033], "beta2": [41, 42, 87, 88, 136, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 705, 706, 707, 708, 1031, 1032, 1033], "999": [41, 42, 83, 84, 87, 88, 136, 368, 599, 600, 602, 603, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 705, 706, 707, 708, 1031, 1032, 1033], "epsilon": [41, 42, 49, 50, 53, 54, 87, 88, 95, 96, 99, 100, 122, 126, 129, 136, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 705, 706, 707, 708, 736, 768, 770, 777, 779, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 906, 907, 908, 909, 910, 911, 1029, 1030, 1031, 1032, 1033], "1e": [41, 42, 49, 50, 53, 54, 87, 88, 95, 96, 99, 100, 122, 126, 129, 136, 137, 608, 644, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 705, 706, 707, 708, 736, 787, 789, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 906, 907, 908, 909, 910, 911, 993, 1031, 1032, 1033, 1034, 1036], "07": [41, 42, 49, 50, 87, 88, 95, 96, 136, 368, 568, 571, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 705, 706, 707, 708, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 1031, 1032, 1033], "dcdw": [41, 42, 87, 88, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 705, 706, 707, 708, 709, 710, 711, 712], "adam_step_delta": [41, 42, 87, 88, 685, 687, 688, 689, 690, 691], "639": [41, 42, 685, 687, 688, 690], "11": [41, 42, 74, 75, 83, 84, 101, 102, 119, 121, 126, 368, 382, 384, 385, 386, 408, 411, 564, 567, 608, 626, 636, 687, 688, 736, 748, 750, 774, 776, 808, 819, 822, 824, 842, 845, 850, 853, 912, 914, 915, 916, 924, 928, 929, 930, 949, 950, 953], "63": [41, 42, 93, 94, 368, 581, 584, 687, 688, 736, 737, 739, 740, 741, 774, 776, 949, 950, 953], "00121": [41, 42, 687, 688], "0102": [41, 42, 687, 688], "0397": [41, 42, 687, 688], "gradient": [42, 72, 73, 88, 116, 126, 135, 136, 148, 149, 318, 362, 687, 690, 692, 694, 696, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 718, 719, 720, 721, 722, 884, 885, 886, 887, 993, 1031, 1032, 1033, 1034, 1035, 1036], "arraywithimag": [43, 134], "arraywithlay": 45, "linear_algebra": [47, 48, 93, 94, 116, 134, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807], "arraywithlinearalgebra": 47, "choleski": [47, 48, 93, 94, 736, 741], "upper": [47, 48, 72, 73, 93, 94, 121, 175, 190, 191, 233, 237, 736, 737, 738, 739, 740, 741, 780, 782, 912, 918, 920], "625": [47, 48, 736, 737, 738, 740], "25": [47, 48, 49, 50, 99, 100, 126, 368, 581, 584, 585, 588, 736, 737, 738, 740, 748, 750, 757, 759, 808, 814, 815, 817, 906, 907, 909, 910, 911, 949, 950, 953], "cross": [47, 48, 74, 75, 736, 808, 809, 812, 814, 817, 819, 822, 993], "axi": [47, 48, 49, 50, 51, 52, 61, 62, 63, 64, 65, 66, 72, 73, 77, 78, 95, 96, 97, 98, 107, 108, 109, 110, 111, 112, 117, 119, 121, 122, 126, 127, 129, 130, 132, 134, 137, 148, 160, 165, 175, 204, 205, 206, 207, 208, 209, 318, 320, 323, 330, 343, 344, 345, 346, 347, 348, 349, 350, 362, 608, 626, 627, 636, 683, 736, 742, 743, 744, 748, 750, 799, 800, 801, 802, 803, 804, 808, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 830, 831, 832, 833, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 850, 851, 852, 853, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 879, 880, 883, 912, 923, 924, 925, 926, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "det": [47, 48, 74, 75, 736], "diagon": [47, 48, 74, 75, 175, 190, 191, 228, 232, 233, 237, 736, 796, 798], "offset": [47, 48, 53, 54, 99, 100, 736, 748, 749, 750, 796, 797, 798, 906, 907, 908, 909, 910, 911], "axis1": [47, 48, 51, 52, 97, 98, 736, 748, 749, 750, 824, 872, 873, 874, 875], "axis2": [47, 48, 736, 748, 749, 750], "eigh": [47, 48, 74, 75, 736], "namedtupl": [47, 48, 736, 751, 752, 753, 780, 781, 782, 787, 789, 929, 930, 931, 935], "eigvalsh": [47, 48, 74, 75, 736], "inv": [47, 48, 74, 75, 134, 736, 993], "matmul": [47, 48, 93, 94, 116, 121, 123, 132, 736, 787, 789, 993], "matrix_norm": [47, 48, 72, 73, 736], "ord": [47, 48, 72, 73, 736, 764, 765, 766, 802, 803, 804], "fro": [47, 48, 736, 764, 765, 766], "keepdim": [47, 48, 63, 64, 65, 66, 72, 73, 109, 110, 111, 112, 130, 608, 683, 736, 764, 765, 766, 802, 803, 804, 924, 925, 926, 949, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992], "matrix_rank": [47, 48, 74, 75, 736], "rtol": [47, 48, 736, 768, 769, 770, 777, 778, 779], "matrix_transpos": [47, 48, 74, 75, 134, 736], "outer": [47, 48, 74, 75, 736, 884, 885, 886, 887], "pinv": [47, 48, 74, 75, 736, 993], "qr": [47, 48, 74, 75, 736], "reduc": [47, 48, 72, 73, 134, 318, 362, 608, 631, 736, 780, 781, 782, 924, 925, 926, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "solv": [47, 48, 74, 75, 133, 148, 736], "svd": [47, 48, 74, 75, 736, 993], "full_matric": [47, 48, 736, 787, 788, 789], "svdval": [47, 48, 74, 75, 736], "tensordot": [47, 48, 74, 75, 736], "ax": [47, 48, 51, 52, 72, 73, 97, 98, 116, 119, 121, 127, 134, 318, 362, 608, 626, 736, 764, 766, 784, 786, 793, 794, 795, 802, 804, 824, 834, 837, 842, 845, 846, 847, 848, 849, 858, 861, 864, 867, 872, 875, 880, 883, 924, 925, 926, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "trace": [47, 48, 72, 73, 74, 75, 132, 149, 608, 654, 655, 657, 736], "vecdot": [47, 48, 74, 75, 736], "vector_norm": [47, 48, 72, 73, 736], "vector_to_skew_symmetric_matrix": [47, 48, 74, 75, 736, 993], "arraywithloss": 49, "binary_cross_entropi": [49, 50, 95, 96, 808, 813], "pred": [49, 50, 95, 96, 122, 126, 129, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823], "357": [49, 50, 95, 96, 808, 809, 810, 811, 812, 813, 819, 820, 822, 823], "223": [49, 50, 95, 96, 808, 809, 810, 811, 812, 813, 819, 820, 821, 823], "cross_entropi": [49, 50, 95, 96, 122, 126, 129, 808, 818, 819, 822], "3862944": [49, 50, 808, 814, 815, 817], "sparse_cross_entropi": [49, 50, 95, 96, 808, 823], "loss": [50, 96, 116, 122, 135, 136, 137, 809, 812, 814, 817, 819, 822, 993], "arraywithmanipul": 51, "clip": [51, 52, 72, 73, 97, 98, 122, 126, 129, 132, 135, 137, 368, 537, 538, 608, 620, 621, 623, 824, 829, 993], "x_min": [51, 52, 72, 73, 97, 98, 132, 137, 824, 825, 826, 827, 828, 829], "x_max": [51, 52, 72, 73, 97, 98, 132, 137, 824, 825, 826, 827, 828, 829], "roll": [51, 52, 97, 98, 117, 126, 824, 825, 826, 862], "concat": [51, 52, 72, 73, 97, 98, 318, 347, 348, 349, 350, 362, 608, 635, 824, 993], "xs": [51, 52, 97, 98, 126, 318, 341, 345, 347, 348, 349, 608, 609, 612, 617, 685, 696, 824, 830, 831, 832, 833], "constant_pad": [51, 52, 97, 98, 824], "pad_width": [51, 52, 97, 98, 824, 834, 835, 836, 837, 880, 881, 882, 883], "expand_dim": [51, 52, 97, 98, 132, 135, 824, 993], "flip": [51, 52, 97, 98, 134, 135, 137, 368, 412, 415, 824, 850, 853, 993], "permute_dim": [51, 52, 97, 98, 824], "reshap": [51, 52, 72, 73, 97, 98, 121, 129, 132, 134, 137, 824, 993], "shift": [51, 52, 97, 98, 117, 119, 368, 416, 419, 424, 427, 824, 858, 859, 860, 861, 862], "squeez": [51, 52, 97, 98, 824, 993], "stack": [51, 52, 72, 73, 97, 98, 132, 175, 228, 232, 233, 237, 736, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 767, 768, 770, 771, 773, 777, 779, 780, 782, 787, 789, 790, 792, 796, 798, 824, 888, 889, 898, 899, 993, 1015, 1024], "swapax": [51, 52, 97, 98, 824], "axis0": [51, 52, 97, 98, 824, 872, 873, 874, 875], "tile": [51, 52, 97, 98, 824, 993], "rep": [51, 52, 97, 98, 824, 876, 877, 878, 879], "zero_pad": [51, 52, 97, 98, 824, 993], "arraywithnorm": 53, "layer_norm": [53, 54, 99, 100, 906, 911], "normalized_idx": [53, 54, 99, 100, 906, 907, 908, 909, 910, 911], "05": [53, 54, 99, 100, 121, 318, 685, 687, 690, 906, 907, 908, 909, 910, 911], "scale": [53, 54, 99, 100, 126, 318, 360, 361, 685, 709, 711, 723, 731, 734, 735, 906, 907, 908, 909, 910, 911, 1015, 1023, 1026, 1031, 1034], "new_std": [53, 54, 99, 100, 906, 907, 908, 909, 910, 911, 1029, 1030], "0976": [53, 54, 906, 907, 908, 910], "3452": [53, 54, 906, 907, 908, 910], "2740": [53, 54, 906, 907, 908, 910], "1047": [53, 54, 906, 907, 908, 910], "5886": [53, 54, 906, 907, 908, 910], "2732": [53, 54, 906, 907, 908, 910], "7696": [53, 54, 906, 907, 908, 910], "7024": [53, 54, 906, 907, 908, 910], "2518": [53, 54, 906, 907, 908, 910], "001": [53, 54, 135, 136, 368, 568, 571, 685, 687, 690, 906, 907, 908, 910], "576": [53, 54, 906, 907, 908, 910], "292": [53, 54, 906, 907, 908, 910], "33": [53, 54, 83, 84, 391, 393, 736, 774, 776, 906, 907, 908, 910, 949, 950, 953], "581": [53, 54, 685, 687, 690, 906, 907, 908, 910], "891": [53, 54, 160, 164, 906, 907, 908, 910], "01": [53, 54, 137, 368, 564, 567, 568, 571, 906, 907, 908, 910], "579": [53, 54, 906, 907, 908, 910], "931": [53, 54, 906, 907, 908, 910], "norm": [54, 72, 73, 100, 116, 608, 620, 621, 623, 736, 764, 766, 802, 804, 907, 908, 909, 910, 911, 993, 1030, 1031, 1033], "arraywithrandom": [55, 134], "random": [56, 72, 73, 102, 116, 128, 137, 148, 913, 914, 915, 917, 918, 920, 922, 923, 993], "arraywithsearch": 57, "arraywithset": 59, "unique_count": [59, 60, 105, 106, 929, 932], "uc": [59, 60, 931, 933], "count": [59, 60, 119, 135, 318, 356, 736, 799, 801, 824, 842, 845, 929, 930, 931, 933, 935, 982, 983, 986, 988, 991], "arraywithsort": 61, "argsort": [61, 62, 107, 108, 938], "descend": [61, 62, 107, 108, 736, 787, 789, 790, 792, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948], "sort": [62, 72, 73, 74, 75, 76, 108, 116, 736, 751, 753, 787, 789, 790, 792, 939, 942], "arraywithstatist": 63, "einsum": [63, 64, 109, 110, 949], "equat": [63, 64, 109, 110, 736, 784, 786, 949, 950, 951, 952, 953], "max": [63, 64, 72, 73, 109, 110, 246, 281, 284, 288, 291, 368, 537, 608, 620, 621, 623, 631, 664, 665, 736, 768, 770, 777, 779, 949, 1031, 1033], "min": [63, 64, 72, 73, 109, 110, 246, 281, 284, 288, 291, 368, 538, 608, 631, 664, 665, 674, 736, 780, 782, 787, 789, 790, 792, 802, 804, 949], "prod": [63, 64, 72, 73, 109, 110, 119, 127, 608, 631, 949], "std": [63, 64, 109, 110, 119, 912, 917, 929, 930, 949], "sum": [63, 64, 72, 73, 109, 110, 122, 126, 127, 129, 132, 318, 347, 348, 349, 350, 362, 368, 382, 385, 517, 520, 608, 627, 631, 664, 665, 723, 735, 736, 787, 789, 796, 798, 802, 804, 949, 950, 953, 970, 973], "var": [63, 64, 109, 110, 113, 114, 119, 132, 884, 885, 886, 949], "statist": [64, 110, 113, 114, 116, 121, 127, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981], "arraywithutil": 65, "util": [66, 112, 116, 128, 318, 351, 983, 986, 988, 991], "add_ivy_array_instance_method": 67, "cl": [67, 68, 113, 114], "to_ignor": [67, 68, 113, 114, 888, 899], "loop": [67, 68, 113, 114, 123, 130, 149, 884, 885, 886, 887], "_wrap_funct": [67, 68, 113, 114, 122, 124], "toi": [67, 68, 113, 114], "arrayexampl": [67, 68], "hasattr": [67, 68, 113, 114, 134], "relu": [67, 68, 74, 75, 135, 136, 160, 161, 162, 993], "softmax": [67, 68, 74, 75, 160, 723, 734, 735, 993], "empti": [69, 72, 73, 74, 75, 125, 127, 128, 175, 176, 177, 685, 722, 949, 970, 973, 974, 977, 982, 983, 986, 988, 991], "dictionari": [69, 72, 73, 74, 75, 76, 135, 149, 318, 361], "map": [69, 72, 73, 74, 75, 76, 117, 121, 122, 126, 135, 148, 149, 318, 327, 888, 895, 896, 900, 901, 1015, 1026], "pair": [69, 368, 400, 403, 723, 735, 736, 742, 744], "via": [69, 116, 126, 127, 128, 129, 132, 134, 135, 148, 888, 889, 898, 899], "__delitem__": 69, "__iter__": 69, "__len__": 69, "len": [69, 134, 137, 175, 210, 213], "__reversed__": 69, "fromkei": 69, "keyerror": 69, "popitem": 69, "lifo": 69, "setdefault": 69, "insert": [69, 824, 838, 841, 888, 893, 924, 925], "lack": 69, "containerwithactiv": [70, 74, 75], "dict_in": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "queue": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 135, 318, 327, 328, 608, 663, 668], "queue_load_s": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "container_combine_method": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "list_join": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "queue_timeout": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 608], "print_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "key_length_limit": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "print_ind": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "print_line_spac": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "ivyh": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "default_key_color": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "keyword_color_dict": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "rebuild_child_contain": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "types_to_iteratively_nest": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "alphabetical_kei": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "containerbas": [70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 126], "key_chain": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 539, 541, 543, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 579, 581, 583, 585, 587, 589, 590, 592, 594, 595, 597, 599, 600, 602, 604, 606, 609, 611, 613, 621, 622, 637, 639, 641, 692, 693, 695, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 712, 713, 714, 716, 737, 739, 741, 760, 762, 809, 811, 813, 814, 816, 818, 819, 821, 823, 825, 827, 829, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 888, 901, 907, 909, 911, 914, 916, 918, 919, 921, 931, 932, 934, 939, 941, 943, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 983, 985, 987, 988, 990, 992], "to_appli": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 539, 541, 543, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 579, 581, 583, 585, 587, 589, 590, 592, 594, 595, 597, 599, 600, 602, 604, 606, 609, 611, 613, 621, 622, 637, 639, 641, 692, 693, 695, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 712, 713, 714, 716, 737, 739, 741, 760, 762, 809, 811, 813, 814, 816, 818, 819, 821, 823, 825, 827, 829, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 888, 901, 907, 909, 911, 918, 919, 921, 931, 932, 934, 939, 941, 943, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 983, 985, 987, 988, 990, 992], "prune_unappli": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 539, 541, 543, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 579, 581, 583, 585, 587, 589, 590, 592, 594, 595, 597, 599, 600, 602, 604, 606, 609, 611, 613, 621, 622, 637, 639, 641, 692, 693, 695, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 712, 713, 714, 716, 737, 739, 741, 760, 762, 809, 811, 813, 814, 816, 818, 819, 821, 823, 825, 827, 829, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 888, 901, 907, 909, 911, 918, 919, 921, 931, 932, 934, 939, 941, 943, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 983, 985, 987, 988, 990, 992], "map_sequ": [70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 404, 406, 412, 414, 432, 434, 436, 438, 440, 442, 444, 446, 448, 453, 455, 457, 459, 461, 463, 465, 467, 481, 483, 485, 487, 489, 491, 501, 503, 505, 507, 509, 511, 513, 515, 525, 527, 539, 541, 543, 544, 546, 552, 554, 564, 566, 568, 570, 572, 573, 575, 577, 579, 581, 583, 585, 587, 589, 590, 592, 594, 595, 597, 599, 600, 602, 604, 606, 609, 611, 613, 621, 622, 637, 639, 641, 692, 693, 695, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 712, 713, 714, 716, 737, 739, 741, 809, 811, 813, 814, 816, 818, 819, 821, 823, 825, 827, 829, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 872, 874, 876, 878, 880, 882, 907, 909, 911, 918, 919, 921, 931, 932, 934, 939, 941, 943, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 983, 985, 987, 988, 990, 992], "static_softplu": [70, 71, 166], "__getitem__": [72, 73, 126], "queri": [72, 73, 126, 127, 134, 318, 351, 361, 723, 734, 735, 1015, 1026], "slice": [72, 73, 608, 636, 637, 640, 888, 897], "chain": [72, 73, 125, 126, 136, 137, 149, 884, 885, 886, 888, 901, 1037, 1038], "element": [72, 73, 118, 121, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 198, 199, 202, 228, 232, 233, 237, 318, 341, 345, 349, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 616, 617, 620, 621, 623, 626, 627, 634, 648, 679, 680, 685, 722, 723, 731, 736, 742, 744, 751, 753, 760, 763, 780, 782, 787, 789, 824, 825, 828, 842, 845, 850, 853, 858, 861, 863, 864, 867, 888, 891, 912, 913, 924, 927, 928, 929, 930, 931, 935, 936, 937, 938, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 1015, 1023], "represent": [72, 73, 74, 75, 76, 148, 174, 246, 250, 251, 281, 284, 288, 291, 318, 334, 335, 368, 369, 372, 382, 385, 408, 411, 420, 423, 428, 431, 533, 536, 539, 542, 608, 614, 673, 678], "sequenc": [72, 73, 74, 75, 76, 119, 121, 127, 130, 148, 172, 173, 318, 327, 328, 608, 617, 658, 824, 863, 868, 871, 912, 914, 915, 949, 954, 957, 982, 983, 986, 988, 991, 1015, 1024, 1029, 1030, 1037, 1038], "multiprocess": [72, 73, 74, 75, 76, 135, 149, 318, 327, 608], "asynchron": [72, 73, 74, 75, 76], "dimens": [72, 73, 74, 75, 76, 119, 121, 132, 135, 160, 165, 175, 228, 232, 233, 237, 318, 349, 608, 630, 631, 632, 635, 645, 661, 683, 723, 724, 725, 726, 727, 728, 729, 730, 733, 736, 737, 740, 742, 744, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 777, 779, 780, 782, 784, 786, 787, 789, 790, 792, 796, 798, 799, 801, 802, 804, 808, 814, 817, 819, 822, 824, 830, 833, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 863, 864, 867, 868, 871, 884, 885, 886, 887, 912, 923, 924, 925, 926, 927, 929, 930, 931, 935, 937, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026], "arriv": [72, 73, 74, 75, 76], "timeout": [72, 73, 74, 75, 76, 318, 327, 328, 608, 663, 668], "maximum": [72, 73, 74, 75, 76, 119, 132, 135, 137, 318, 342, 346, 350, 362, 368, 608, 620, 621, 623, 635, 685, 705, 707, 824, 825, 828, 888, 900, 924, 925, 949, 954, 957, 962, 965, 993], "length": [72, 73, 74, 75, 76, 121, 130, 135, 175, 176, 177, 210, 213, 736, 787, 789, 790, 792, 824, 854, 857], "whitespac": [72, 73, 74, 75, 76], "indent": [72, 73, 74, 75, 76, 135], "extra": [72, 73, 74, 75, 76, 119, 124, 125, 132, 685, 696], "newlin": [72, 73, 74, 75, 76, 118], "handl": [72, 73, 74, 75, 76, 115, 117, 121, 122, 124, 126, 127, 128, 129, 136, 149, 172, 173, 318, 334, 335, 336, 337, 338, 352, 356, 357, 364, 367, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 1031, 1032, 1033, 1034, 1035, 1036], "result": [72, 73, 74, 75, 76, 116, 117, 118, 119, 121, 125, 126, 127, 129, 135, 149, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 262, 265, 305, 308, 318, 327, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 620, 621, 623, 626, 627, 630, 631, 632, 634, 636, 637, 640, 648, 661, 664, 665, 685, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 888, 891, 901, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 923, 924, 925, 926, 928, 929, 930, 937, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991, 993], "color": [72, 73, 74, 75, 76, 1040, 1041], "termcolor": [72, 73, 74, 75, 76], "rebuild": [72, 73, 74, 75, 76], "constructor": [72, 73, 74, 75, 76, 127, 128, 134, 608, 615, 1037, 1038], "param": [72, 73, 74, 75, 76, 85, 86, 132, 137, 608, 614, 636, 637, 640, 641], "alphabet": [72, 73, 74, 75, 76], "preserv": [72, 73, 74, 75, 76, 121, 137, 149, 685, 718, 824, 842, 845], "__setitem__": [72, 73, 125, 126, 134], "val": [72, 73, 129, 134, 608, 650, 651, 652, 666, 667], "after": [72, 73, 119, 121, 126, 127, 131, 246, 313, 318, 368, 581, 584, 685, 692, 694, 696, 697, 699, 705, 707, 709, 711, 713, 715, 906, 907, 910, 1031, 1032, 1033, 1034, 1035, 1036], "all_fals": [72, 73], "assert_is_bool": [72, 73], "entri": [72, 73, 175, 204, 205, 207, 208, 824, 863, 888, 901], "boolean": [72, 73, 121, 126, 175, 198, 246, 252, 255, 293, 317, 318, 353, 365, 368, 408, 411, 412, 415, 420, 423, 428, 431, 521, 524, 525, 528, 529, 532, 533, 536, 608, 609, 612, 616, 617, 647, 648, 649, 653, 654, 655, 656, 657, 669, 676, 684, 685, 701, 703, 722, 884, 885, 886, 888, 898, 949, 962, 965], "evalu": [72, 73, 126, 368, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 544, 547, 568, 571, 585, 588, 888, 889, 898, 899, 982, 983, 986, 988, 991], "assert": [72, 73, 121, 130, 134, 135, 608, 618], "prune": [72, 73, 888, 901, 902, 903], "all_key_chain": [72, 73], "include_empti": [72, 73], "all_tru": [72, 73, 126, 135], "arrays_as_list": [72, 73], "intermedi": [72, 73], "as_arrai": [72, 73, 608, 645, 671], "as_bool": [72, 73], "as_on": [72, 73], "ones": [72, 73, 74, 75, 121, 132, 134, 135, 175, 190, 191, 223, 226, 241, 245, 368, 432, 435, 608, 661, 993], "fill": [72, 73, 175, 184, 198, 199, 202, 220, 221, 223, 226, 238, 240, 241, 245, 912, 914, 915], "as_random_uniform": [72, 73], "low": [72, 73, 101, 102, 132, 912, 914, 915, 916, 918, 919, 920, 921], "uniform": [72, 73, 136, 912, 913, 914, 915, 918, 920, 1006, 1008, 1009, 1012, 1013], "boundari": [72, 73, 912, 918, 920], "interv": [72, 73, 132, 137, 175, 176, 177, 204, 205, 207, 208, 736, 799, 801, 824, 825, 828, 868, 871, 912, 914, 915, 918, 920, 982, 983, 986, 988, 991], "as_vari": [72, 73, 121], "as_zero": [72, 73], "assert_contains_sub_contain": [72, 73], "sub_cont": [72, 73], "except": [72, 73, 118, 125, 129, 130, 134, 149, 246, 262, 265, 608, 618, 629, 652, 681, 736, 777, 779, 824, 830, 833, 868, 871, 924, 927, 982, 983, 986, 988, 991], "diff": [72, 73, 126, 135], "screen": [72, 73, 135], "assert_contains_sub_structur": [72, 73], "check_shap": [72, 73], "assert_ident": [72, 73], "check_typ": [72, 73], "same_arrai": [72, 73, 135], "arrays_equ": [72, 73, 74, 75, 608], "datatyp": [72, 73, 79, 80, 175, 179, 182, 215, 218, 246, 272, 304], "assert_identical_structur": [72, 73], "at_key_chain": [72, 73], "ignore_key_error": [72, 73], "ignore_non": [72, 73], "at_kei": [72, 73], "ignor": [72, 73, 119, 121, 149, 175, 210, 213, 888, 899, 1031, 1035], "substr": [72, 73], "clip_min": [72, 73], "clip_max": [72, 73], "minimum": [72, 73, 132, 137, 318, 368, 369, 372, 608, 643, 644, 666, 667, 674, 675, 824, 825, 828, 924, 926, 949, 954, 957, 962, 965, 993], "config": [72, 73, 135, 888, 901], "duplic": [72, 73, 118, 123, 124, 130, 134, 136], "compar": [72, 73, 121, 130, 135, 608, 609, 612, 616, 617, 929, 930, 931, 935, 937, 938, 939, 942, 944, 947], "container_rightmost": [72, 73], "common_key_chain": [72, 73, 126], "properti": [72, 73, 119, 121, 122, 126, 134, 135, 136, 318, 330, 1027, 1028, 1031, 1032, 1033, 1034, 1036], "contains_sub_contain": [72, 73], "match": [72, 73, 126, 246, 252, 255, 368, 560, 563, 608, 658], "contains_sub_structur": [72, 73], "create_if_abs": [72, 73], "inplac": [72, 73, 87, 88, 115, 117, 119, 124, 125, 134, 136, 608, 618, 649, 652, 653, 676, 685, 692, 693, 694, 695, 697, 698, 699, 700, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 1004, 1005, 1031, 1032, 1033, 1034, 1035, 1036], "cutoff_at_depth": [72, 73], "depth_cutoff": [72, 73], "cutoff_at_height": [72, 73], "height_cutoff": [72, 73], "deep_copi": [72, 73, 135], "intern": [72, 73, 118, 121, 125, 126, 128, 129, 318, 685, 721, 888, 889, 898, 899, 1006, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1037, 1038], "belong": [72, 73, 136], "dev_clon": [72, 73, 318], "dev_dist": [72, 73, 318], "along": [72, 73, 116, 129, 175, 204, 205, 207, 208, 318, 343, 344, 345, 346, 347, 348, 349, 350, 362, 608, 626, 627, 636, 683, 736, 764, 766, 796, 798, 799, 801, 802, 804, 808, 814, 817, 819, 822, 824, 830, 833, 842, 845, 850, 853, 858, 861, 863, 868, 871, 876, 879, 884, 885, 886, 887, 912, 923, 924, 925, 926, 938, 939, 942, 944, 947, 949, 950, 953, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "dev_str": [72, 73], "diff_kei": [72, 73], "detect_key_diff": [72, 73], "detect_value_diff": [72, 73], "detect_shape_diff": [72, 73], "treat": [72, 73, 121, 133, 137, 172, 173], "detect": [72, 73, 117, 121, 130, 135, 136, 888, 889, 899], "container0": [72, 73], "einops_rearrang": [72, 73, 608], "axes_length": [72, 73, 608, 630, 631, 632], "rearrang": [72, 73, 608, 630, 632], "einops_reduc": [72, 73, 608], "reduct": [72, 73, 121, 127, 134, 608, 631, 664, 665, 982, 983, 986, 988, 991, 993], "One": [72, 73, 121, 127, 132, 134, 135, 608, 631, 824, 854, 857, 912, 914, 915], "callabl": [72, 73, 121, 126, 132, 150, 151, 152, 153, 154, 155, 156, 157, 158, 172, 173, 246, 286, 287, 318, 362, 608, 614, 619, 629, 631, 884, 885, 886, 887, 888, 894, 898, 899, 900], "einops_repeat": [72, 73, 608], "find_sub_contain": [72, 73], "sub_cont_to_find": [72, 73], "exsit": [72, 73], "find_sub_structur": [72, 73], "sub_struc_to_find": [72, 73], "flatten_key_chain": [72, 73, 135, 1027, 1028], "__": [72, 73, 119, 135], "above_height": [72, 73, 135], "below_depth": [72, 73, 135], "format_key_chain": [72, 73], "format_fn": [72, 73], "string": [72, 73, 123, 127, 128, 130, 132, 135, 246, 250, 251, 276, 279, 293, 317, 318, 334, 335, 336, 337, 351, 357, 363, 364, 367, 608, 628], "from_disk_as_hdf5": [72, 73, 135], "h5_obj_or_filepath": [72, 73], "slice_obj": [72, 73], "load": [72, 73, 149], "disk": [72, 73, 135], "h5py": [72, 73], "hdf5": [72, 73, 135, 1027, 1028], "h5": [72, 73], "from_disk_as_json": [72, 73, 135], "json_filepath": [72, 73], "json": [72, 73, 135], "dure": [72, 73, 122, 126, 127, 128, 129, 149, 172, 173, 318, 363, 608, 681, 685, 687, 690, 692, 694, 705, 707, 736, 760, 763, 884, 885, 886, 887, 949, 970, 973, 978, 981, 1027, 1028, 1031, 1032, 1033, 1035], "from_disk_as_pickl": [72, 73, 135], "pickle_filepath": [72, 73], "from_flat_list": [72, 73], "flat_list": [72, 73], "hierarchi": [72, 73, 135], "flat": [72, 73, 608, 664, 824, 850, 853], "popul": [72, 73, 121, 127, 128, 132, 912, 913, 949, 970, 973, 978, 981], "from_numpi": [72, 73, 135], "gather": [72, 73, 608, 637, 640], "h5_file_s": [72, 73], "batch": [72, 73, 122, 126, 135, 318, 360, 361, 608, 635, 723, 732, 736, 802, 804, 884, 885, 886, 887, 906, 907, 910, 1029, 1030], "handle_inplac": [72, 73], "prime": [72, 73], "overwritten": [72, 73, 123, 125], "has_kei": [72, 73], "query_kei": [72, 73], "somewher": [72, 73], "has_key_chain": [72, 73], "has_nan": [72, 73, 608], "include_inf": [72, 73, 608, 647, 684], "leafwis": [72, 73], "nan": [72, 73, 116, 118, 121, 174, 246, 252, 255, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 481, 484, 489, 492, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603, 604, 607, 608, 647, 684, 723, 735, 929, 930, 931, 935, 937, 949, 954, 957, 958, 961, 962, 965, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "well": [72, 73, 121, 129, 136, 137, 148, 608, 647, 736, 784, 786], "inf": [72, 73, 121, 174, 608, 647, 684, 736, 802, 804], "wise": [72, 73, 132, 137, 160, 161, 162, 163, 164, 165, 166, 169, 171, 368, 369, 372, 374, 377, 382, 385, 387, 390, 396, 399, 400, 403, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 453, 456, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 548, 551, 556, 559, 560, 563, 589, 593, 608, 634, 824, 825, 828], "identical_array_shap": [72, 73], "exclus": [72, 73, 87, 88, 121, 122, 126, 137, 175, 176, 177, 608, 626, 654, 655, 657, 685, 701, 702, 703, 704, 912, 914, 915], "identical_config": [72, 73], "identical_structur": [72, 73], "if_exist": [72, 73], "inplace_upd": [72, 73, 129, 608, 1004, 1005], "key_chains_contain": [72, 73], "sub_str": [72, 73], "join": [72, 73, 824, 830, 833, 868, 871, 993], "list_stack": [72, 73, 135], "dim": [72, 73, 127, 608, 661, 1015, 1026], "func": [72, 73, 126, 172, 173, 318, 362, 608, 619, 685, 696, 888, 901], "map_cont": [72, 73], "include_self": [72, 73], "possibi": [72, 73], "matrix": [72, 73, 175, 210, 213, 228, 232, 233, 237, 608, 609, 612, 620, 723, 732, 736, 737, 740, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 760, 763, 764, 766, 767, 768, 770, 771, 773, 777, 779, 780, 782, 784, 786, 787, 789, 790, 792, 796, 798, 805, 807, 1015, 1025], "integ": [72, 73, 121, 126, 127, 134, 175, 176, 177, 198, 246, 288, 291, 299, 302, 305, 308, 368, 369, 372, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 465, 468, 469, 472, 533, 536, 556, 559, 560, 563, 564, 567, 604, 607, 736, 767, 799, 801, 802, 804, 824, 863, 912, 914, 915, 922, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "flatten": [72, 73, 608, 635, 736, 774, 776, 802, 804, 824, 850, 853, 858, 861, 924, 925, 926, 929, 930, 931, 935, 937], "broadcast": [72, 73, 116, 118, 119, 121, 126, 127, 160, 161, 162, 163, 164, 165, 166, 169, 171, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 252, 255, 257, 260, 262, 265, 318, 363, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 453, 456, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 481, 484, 485, 488, 489, 492, 493, 496, 497, 500, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 521, 524, 525, 528, 529, 532, 533, 536, 537, 538, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 589, 593, 594, 598, 599, 603, 604, 607, 608, 620, 621, 623, 626, 630, 631, 632, 634, 637, 640, 648, 661, 664, 665, 685, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 740, 742, 744, 745, 747, 748, 750, 754, 756, 757, 759, 760, 763, 764, 766, 768, 770, 771, 773, 774, 776, 777, 779, 783, 784, 786, 787, 789, 790, 792, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 808, 809, 812, 814, 817, 819, 822, 824, 825, 828, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 854, 857, 858, 861, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 906, 907, 910, 912, 913, 914, 915, 917, 918, 920, 923, 924, 925, 926, 928, 929, 937, 938, 944, 947, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "max_depth": [72, 73, 318, 322, 325, 332, 342, 346, 350, 608, 646, 888, 900], "multi_map": [72, 73, 126], "map_nest": [72, 73, 83, 84, 93, 94, 97, 98, 400, 402, 408, 410, 416, 418, 420, 422, 424, 426, 428, 430, 449, 451, 469, 471, 473, 475, 477, 479, 493, 495, 497, 499, 517, 519, 521, 523, 529, 531, 533, 535, 548, 550, 556, 558, 560, 562, 760, 762, 830, 832, 868, 870], "leftmost": [72, 73, 888, 901], "multi_map_in_static_method": [72, 73, 126], "fn_name": [72, 73], "num_arrai": [72, 73, 121], "overwrite_at_key_chain": [72, 73], "overwrit": [72, 73, 129, 132, 318, 362], "target_dict": [72, 73], "return_dict": [72, 73], "prune_empti": [72, 73], "keep_non": [72, 73], "prune_key_chain": [72, 73], "key1": [72, 73, 136], "key2": [72, 73], "key3": [72, 73], "prune_key_from_key_chain": [72, 73], "prune_kei": [72, 73], "prune_keys_from_key_chain": [72, 73], "remove_key_length_limit": [72, 73], "remove_print_limit": [72, 73], "reshape_lik": [72, 73], "leading_shap": [72, 73], "return_cont": [72, 73], "restructur": [72, 73], "keep_orig": [72, 73], "transpos": [72, 73, 134, 137, 318, 349, 723, 725, 727, 729, 736, 771, 773, 777, 779, 993, 1015, 1017, 1019, 1021], "restructure_key_chain": [72, 73], "keychain_map": [72, 73], "set_at_key_chain": [72, 73], "set_at_kei": [72, 73], "set_framework": [72, 73, 132, 134, 135, 137], "set_ivy_backend": [72, 73], "ivy_backend": [72, 73], "attribut": [72, 73, 118, 126, 127, 133, 134, 135, 136, 246, 281, 284, 286, 287, 288, 291, 318, 358], "show_sub_contain": [72, 73], "sub_cont_or_keychain": [72, 73], "shuffl": [72, 73, 912, 993], "seed_valu": [72, 73, 912, 922], "seed": [72, 73, 74, 75, 912, 993], "shuffle_h5_fil": [72, 73], "dataset": [72, 73, 135, 147, 993], "size_ordered_arrai": [72, 73], "keychain": [72, 73], "smallest": [72, 73, 246, 281, 284, 288, 291, 368, 432, 435], "largest": [72, 73, 148, 246, 281, 284, 288, 291, 736, 787, 789], "slice_kei": [72, 73], "key_slic": [72, 73], "all_depth": [72, 73], "slice_via_kei": [72, 73], "sort_by_kei": [72, 73], "num_or_size_split": [72, 73, 132, 824, 863], "with_remaind": [72, 73, 824, 863], "constitu": [72, 73, 137], "dimension": [72, 73, 175, 176, 177, 190, 191, 210, 213, 736, 742, 744, 745, 747, 760, 763, 768, 770, 774, 776, 777, 779, 799, 801, 802, 804, 824, 863, 924, 925, 926, 927, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "evenli": [72, 73, 175, 176, 177, 204, 205, 207, 208, 824, 863], "store": [72, 73, 118, 123, 125, 126, 132, 134, 135, 136, 175, 241, 245, 608, 635, 685, 721, 736, 796, 798, 824, 863, 1027, 1028], "stop_gradi": [72, 73, 74, 75, 87, 88, 136, 318, 362, 685, 692, 693, 694, 695, 697, 698, 699, 700, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 884, 885, 886, 887, 993, 1031, 1032, 1033, 1034, 1035, 1036], "preserve_typ": [72, 73, 685, 718], "stop": [72, 73, 77, 78, 132, 149, 175, 176, 177, 178, 204, 205, 206, 207, 208, 209, 318, 333, 362, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 718, 884, 885, 886, 887, 1031, 1032, 1033, 1034, 1035, 1036], "structural_diff": [72, 73], "to_devic": [72, 73, 318, 337], "cuda": [72, 73, 132, 135, 149, 175, 204, 205, 207, 208, 318, 327, 334, 359, 608, 636, 637, 640, 661, 664, 665, 912, 913, 914, 915, 918, 920, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038], "target": [72, 73, 115, 131, 135, 136, 137, 318, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 993], "to_dict": [72, 73], "to_disk_as_hdf5": [72, 73, 135], "starting_index": [72, 73], "max_batch_s": [72, 73], "w": [72, 73, 87, 88, 132, 135, 136, 608, 617, 685, 687, 690, 692, 694, 695, 697, 699, 700, 705, 707, 708, 709, 711, 712, 713, 715, 716, 723, 724, 725, 726, 727, 728, 729, 730], "later": [72, 73, 121, 608, 619], "to_disk_as_json": [72, 73, 135], "to_disk_as_pickl": [72, 73, 135], "to_flat_list": [72, 73], "to_iter": [72, 73, 126], "leaf_keys_onli": [72, 73], "to_iterator_kei": [72, 73], "to_iterator_valu": [72, 73], "to_json": [72, 73], "to_list": [72, 73, 608, 993], "to_multi_dev": [72, 73], "multidevcontain": [72, 73, 74], "distributedarrai": [72, 73], "to_numpi": [72, 73, 135, 608, 993], "update_backend": [72, 73], "to_raw": [72, 73], "raw": [72, 73, 118], "trim_kei": [72, 73], "max_length": [72, 73], "try_kc": [72, 73], "tri": [72, 73], "arbitrari": [72, 73, 117, 121, 122, 126, 129, 136, 149, 175, 210, 213, 246, 257, 260, 305, 308, 318, 347, 348, 350], "concatten": [72, 73, 318, 347, 348, 349, 350, 362], "unstack": [72, 73, 132, 135, 608, 993], "dim_siz": [72, 73, 318], "update_config": [72, 73], "global_norm": [72, 73, 85, 86, 621, 622], "vector": [72, 73, 148, 175, 210, 213, 608, 621, 623, 723, 732, 736, 742, 744, 751, 753, 760, 763, 774, 776, 787, 789, 790, 792, 799, 801, 802, 804, 805, 807, 1015, 1025], "with_default_key_color": [72, 73], "with_entries_as_list": [72, 73], "with_ivy_backend": [72, 73], "with_key_length_limit": [72, 73, 135], "with_print_ind": [72, 73, 135], "with_print_limit": [72, 73, 135], "with_print_line_spac": [72, 73], "containerwithcr": [74, 75, 77], "containerwithdatatyp": [74, 75, 79], "containerwithdevic": [74, 75, 81], "containerwithelementwis": [74, 75, 83, 126], "containerwithgener": [74, 75, 85], "containerwithgradi": [74, 75, 87], "containerwithimag": [74, 75, 89], "containerwithlay": [74, 75, 91], "containerwithlinearalgebra": [74, 75, 93], "containerwithloss": [74, 75, 95], "containerwithnorm": [74, 75, 99], "containerwithrandom": [74, 75, 101], "containerwithsearch": [74, 75, 103], "containerwithset": [74, 75, 105], "containerwithsort": [74, 75, 107], "containerwithstatist": [74, 75, 109], "containerwithutil": [74, 75, 111], "__add__": [74, 75, 117, 118, 119, 125, 126, 134], "__radd__": [74, 75, 118, 119], "arang": [74, 75, 127, 175, 204, 205, 207, 208, 949, 950, 953, 993], "arg_info": [74, 75, 608], "arg_nam": [74, 75, 608], "argmax": [74, 75, 924, 993], "argmin": [74, 75, 924, 993], "array_equ": [74, 75, 608], "as_ivy_dev": [74, 75, 134, 318], "as_ivy_dtyp": [74, 75, 246], "as_native_dev": [74, 75, 318], "as_native_dtyp": [74, 75, 246], "assert_supports_inplac": [74, 75, 608], "cache_fn": [74, 75, 122, 608], "clear_mem_on_dev": [74, 75, 318], "clip_matrix_norm": [74, 75, 608], "closest_valid_dtyp": [74, 75, 246], "container_typ": [74, 75, 608], "conv1d": [74, 75, 723, 1015], "conv1d_transpos": [74, 75, 723], "conv2d": [74, 75, 723, 993, 1015], "conv2d_transpos": [74, 75, 723], "conv3d": [74, 75, 723, 1015], "conv3d_transpos": [74, 75, 723], "copy_arrai": [74, 75, 608], "cumprod": [74, 75, 137, 608], "cumsum": [74, 75, 608, 993], "current_backend_str": [74, 75, 608], "default_devic": [74, 75, 128, 132, 318, 356, 359, 366], "default_dtyp": [74, 75, 122, 127, 246], "default_float_dtyp": [74, 75, 127, 246], "default_int_dtyp": [74, 75, 127, 246], "depthwise_conv2d": [74, 75, 723, 993], "dev_clone_arrai": [74, 75, 318], "dev_clone_it": [74, 75, 318], "dev_clone_nest": [74, 75, 318], "dev_dist_arrai": [74, 75, 318], "dev_dist_it": [74, 75, 318], "dev_dist_nest": [74, 75, 318], "dev_unifi": [74, 75, 318], "dev_unify_arrai": [74, 75, 318], "dev_unify_it": [74, 75, 318], "dev_unify_nest": [74, 75, 318], "dev_util": [74, 75, 128, 318], "dropout": [74, 75, 135, 723, 1015, 1026], "dtype_bit": [74, 75, 246], "execute_with_gradi": [74, 75, 126, 135, 136, 137, 149, 685, 993], "ey": [74, 75, 137, 175, 723, 726, 730], "floormod": [74, 75, 608, 993], "fourier_encod": [74, 75, 608], "function_supported_dtyp": [74, 75, 246], "function_unsupported_dtyp": [74, 75, 246], "gelu": [74, 75, 160, 1001], "get_all_arrays_in_memori": [74, 75, 608], "get_all_ivy_arrays_on_dev": [74, 75, 128, 318], "get_min_bas": [74, 75, 608], "get_min_denomin": [74, 75, 608], "get_num_dim": [74, 75, 608, 993], "get_referrers_recurs": [74, 75, 608], "gpu_is_avail": [74, 75, 318], "handle_nest": [74, 75, 122, 126, 150], "handle_out_argu": [74, 75, 117, 124, 127, 128, 129, 150], "indices_wher": [74, 75, 130, 608, 993], "infer_devic": [74, 75, 117, 127, 128, 150], "infer_dtyp": [74, 75, 117, 127, 128, 150], "inplace_arrays_support": [74, 75, 608], "inplace_decr": [74, 75, 608], "inplace_incr": [74, 75, 608], "inplace_variables_support": [74, 75, 608], "inputs_to_native_arrai": [74, 75, 125, 150], "invalid_dtyp": [74, 75, 246], "is_ivy_contain": [74, 75, 608], "leaky_relu": [74, 75, 121, 160, 993], "linear": [74, 75, 118, 132, 135, 136, 137, 160, 161, 162, 163, 608, 635, 723, 731, 784, 786, 993, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "linspac": [74, 75, 132, 175, 176, 177, 993], "logspac": [74, 75, 132, 175], "lstm_updat": [74, 75, 132, 723], "match_kwarg": [74, 75, 608], "matrix_pow": [74, 75, 736], "multi_head_attent": [74, 75, 126, 129, 723], "multinomi": [74, 75, 912], "nonzero": [74, 75, 368, 382, 385, 539, 542, 924], "num_arrays_in_memori": [74, 75, 608], "num_cpu_cor": [74, 75, 128, 318], "num_gpu": [74, 75, 121, 128, 318], "num_ivy_arrays_on_dev": [74, 75, 318], "one_hot": [74, 75, 137, 608, 993], "outputs_to_ivy_arrai": [74, 75, 117, 125, 127, 128, 150], "percent_used_mem_on_dev": [74, 75, 318], "print_all_arrays_in_memori": [74, 75, 608], "print_all_ivy_arrays_on_dev": [74, 75, 318], "promote_typ": [74, 75, 246], "randint": [74, 75, 101, 102, 912, 916, 993], "random_norm": [74, 75, 121, 723, 726, 729, 730, 736, 787, 789, 912, 929, 930], "scaled_dot_product_attent": [74, 75, 723], "scatter_flat": [74, 75, 608], "scatter_nd": [74, 75, 134, 608, 993], "set_default_devic": [74, 75, 128, 318, 366], "set_default_dtyp": [74, 75, 122, 127, 246], "set_default_float_dtyp": [74, 75, 127, 246], "set_default_int_dtyp": [74, 75, 127, 246], "set_min_bas": [74, 75, 608], "set_min_denomin": [74, 75, 608], "set_queue_timeout": [74, 75, 608], "set_shape_array_mod": [74, 75, 608, 672, 682], "set_split_factor": [74, 75, 318], "set_tmp_dir": [74, 75, 608], "set_with_grad": [74, 75, 685, 722], "shape_array_mod": [74, 75, 608, 669, 682], "shape_to_tupl": [74, 75, 127, 608], "sigmoid": [74, 75, 132, 135, 136, 160, 993], "slogdet": [74, 75, 736], "split_factor": [74, 75, 318, 327], "split_func_cal": [74, 75, 318], "stable_divid": [74, 75, 122, 608], "stable_pow": [74, 75, 608], "static_aco": [74, 75], "static_acosh": [74, 75], "static_arg_info": [74, 75], "static_arg_nam": [74, 75], "static_argmax": [74, 75], "static_argmin": [74, 75], "static_arrai": [74, 75], "static_array_equ": [74, 75], "static_arrays_equ": [74, 75], "static_as_ivy_dev": [74, 75], "static_as_ivy_dtyp": [74, 75], "static_as_native_dev": [74, 75], "static_as_native_dtyp": [74, 75], "static_asin": [74, 75], "static_assert_supports_inplac": [74, 75], "static_atan": [74, 75], "static_atan2": [74, 75], "static_atanh": [74, 75], "static_bitwise_and": [74, 75], "static_bitwise_invert": [74, 75], "static_bitwise_left_shift": [74, 75], "static_bitwise_or": [74, 75], "static_bitwise_right_shift": [74, 75], "static_bitwise_xor": [74, 75], "static_cache_fn": [74, 75], "static_ceil": [74, 75], "static_clear_mem_on_dev": [74, 75], "static_clip_matrix_norm": [74, 75], "static_clip_vector_norm": [74, 75], "static_closest_valid_dtyp": [74, 75], "static_concat": [74, 75], "static_constant_pad": [74, 75], "static_container_typ": [74, 75], "static_conv1d": [74, 75], "static_conv1d_transpos": [74, 75], "static_conv2d": [74, 75], "static_conv2d_transpos": [74, 75], "static_conv3d": [74, 75], "static_conv3d_transpos": [74, 75], "static_copy_arrai": [74, 75], "static_co": [74, 75], "static_cosh": [74, 75], "static_cross": [74, 75], "static_cumprod": [74, 75], "static_cumsum": [74, 75], "static_current_backend": [74, 75], "static_current_backend_str": [74, 75], "static_default": [74, 75], "static_default_devic": [74, 75], "static_default_dtyp": [74, 75], "static_default_float_dtyp": [74, 75], "static_default_int_dtyp": [74, 75], "static_depthwise_conv2d": [74, 75], "static_det": [74, 75], "static_dev": [74, 75], "static_dev_clon": [74, 75], "static_dev_clone_arrai": [74, 75], "static_dev_clone_it": [74, 75], "static_dev_clone_nest": [74, 75], "static_dev_dist": [74, 75], "static_dev_dist_arrai": [74, 75], "static_dev_dist_it": [74, 75], "static_dev_dist_nest": [74, 75], "static_dev_unifi": [74, 75], "static_dev_unify_arrai": [74, 75], "static_dev_unify_it": [74, 75], "static_dev_unify_nest": [74, 75], "static_dev_util": [74, 75], "static_diagon": [74, 75], "static_dropout": [74, 75], "static_dtyp": [74, 75], "static_dtype_bit": [74, 75], "static_eigh": [74, 75], "static_eigvalsh": [74, 75], "static_einops_rearrang": [74, 75], "static_einops_reduc": [74, 75], "static_einops_repeat": [74, 75], "static_einsum": [74, 75], "static_empti": [74, 75], "static_equ": [74, 75], "static_erf": [74, 75], "static_execute_with_gradi": [74, 75], "static_exist": [74, 75], "static_exp": [74, 75], "static_expand_dim": [74, 75], "static_expm1": [74, 75], "static_flip": [74, 75], "static_floor": [74, 75], "static_floor_divid": [74, 75], "static_floormod": [74, 75], "static_fourier_encod": [74, 75], "static_ful": [74, 75], "static_function_supported_dtyp": [74, 75], "static_function_unsupported_dtyp": [74, 75], "static_gath": [74, 75], "static_gelu": [74, 75], "static_get_all_arrays_in_memori": [74, 75], "static_get_all_ivy_arrays_on_dev": [74, 75], "static_get_min_bas": [74, 75], "static_get_min_denomin": [74, 75], "static_get_num_dim": [74, 75], "static_get_referrers_recurs": [74, 75], "static_gpu_is_avail": [74, 75], "static_great": [74, 75], "static_greater_equ": [74, 75], "static_handle_nest": [74, 75], "static_handle_out_argu": [74, 75], "static_has_nan": [74, 75], "static_indices_wher": [74, 75], "static_infer_devic": [74, 75], "static_infer_dtyp": [74, 75], "static_inplace_arrays_support": [74, 75], "static_inplace_decr": [74, 75], "static_inplace_incr": [74, 75], "static_inplace_upd": [74, 75], "static_inplace_variables_support": [74, 75], "static_inputs_to_native_arrai": [74, 75], "static_inv": [74, 75], "static_invalid_dtyp": [74, 75], "static_is_arrai": [74, 75], "static_is_ivy_arrai": [74, 75], "static_is_ivy_contain": [74, 75], "static_is_native_arrai": [74, 75], "static_isfinit": [74, 75], "static_isinf": [74, 75], "static_isnan": [74, 75], "static_leaky_relu": [74, 75], "static_less": [74, 75], "static_less_equ": [74, 75], "static_linear": [74, 75], "static_log": [74, 75], "static_log10": [74, 75], "static_log1p": [74, 75], "static_log2": [74, 75], "static_logaddexp": [74, 75], "static_logical_and": [74, 75], "static_logical_not": [74, 75], "static_logical_or": [74, 75], "static_logical_xor": [74, 75], "static_lstm_upd": [74, 75], "static_match_kwarg": [74, 75], "static_matmul": [74, 75], "static_matrix_norm": [74, 75], "static_matrix_pow": [74, 75], "static_matrix_rank": [74, 75], "static_matrix_transpos": [74, 75], "static_max": [74, 75], "static_maximum": [74, 75], "static_mean": [74, 75], "static_min": [74, 75], "static_minimum": [74, 75], "static_multi_head_attent": [74, 75], "static_multinomi": [74, 75], "static_multiprocess": [74, 75], "static_neg": [74, 75], "static_nonzero": [74, 75], "static_not_equ": [74, 75], "static_num_arrays_in_memori": [74, 75], "static_num_cpu_cor": [74, 75], "static_num_gpu": [74, 75], "static_num_ivy_arrays_on_dev": [74, 75], "static_one_hot": [74, 75], "static_out": [74, 75], "static_outputs_to_ivy_arrai": [74, 75], "static_percent_used_mem_on_dev": [74, 75], "static_permute_dim": [74, 75], "static_pinv": [74, 75], "static_posit": [74, 75], "static_pow": [74, 75], "static_print_all_arrays_in_memori": [74, 75], "static_print_all_ivy_arrays_on_dev": [74, 75], "static_prod": [74, 75], "static_promote_typ": [74, 75], "static_qr": [74, 75], "static_queue_timeout": [74, 75], "static_random_norm": [74, 75], "static_relu": [74, 75], "static_remaind": [74, 75], "static_repeat": [74, 75], "static_reshap": [74, 75], "static_round": [74, 75], "static_scaled_dot_product_attent": [74, 75], "static_scatter_flat": [74, 75], "static_scatter_nd": [74, 75], "static_se": [74, 75], "static_set_default_devic": [74, 75], "static_set_default_dtyp": [74, 75], "static_set_default_float_dtyp": [74, 75], "static_set_default_int_dtyp": [74, 75], "static_set_min_bas": [74, 75], "static_set_min_denomin": [74, 75], "static_set_queue_timeout": [74, 75], "static_set_shape_array_mod": [74, 75], "static_set_split_factor": [74, 75], "static_set_tmp_dir": [74, 75], "static_set_with_grad": [74, 75], "static_shap": [74, 75], "static_shape_array_mod": [74, 75], "static_shape_to_tupl": [74, 75], "static_shuffl": [74, 75], "static_sigmoid": [74, 75], "static_sin": [74, 75], "static_sinh": [74, 75], "static_slogdet": [74, 75], "static_softmax": [74, 75], "static_solv": [74, 75], "static_split": [74, 75], "static_split_factor": [74, 75], "static_split_func_cal": [74, 75], "static_sqrt": [74, 75], "static_squar": [74, 75], "static_squeez": [74, 75], "static_stable_divid": [74, 75], "static_stable_pow": [74, 75], "static_stack": [74, 75], "static_std": [74, 75], "static_stop_gradi": [74, 75], "static_sum": [74, 75], "static_supports_inplac": [74, 75], "static_svd": [74, 75], "static_svdv": [74, 75], "static_swapax": [74, 75], "static_tensordot": [74, 75], "static_til": [74, 75], "static_tmp_dir": [74, 75], "static_to_devic": [74, 75], "static_to_list": [74, 75], "static_to_native_arrays_and_back": [74, 75], "static_to_numpi": [74, 75], "static_to_scalar": [74, 75], "static_total_mem_on_dev": [74, 75], "static_tpu_is_avail": [74, 75], "static_trac": [74, 75], "static_trunc": [74, 75], "static_try_else_non": [74, 75], "static_type_promote_arrai": [74, 75], "static_unique_al": [74, 75], "static_unique_invers": [74, 75], "static_unique_valu": [74, 75], "static_unset_default_devic": [74, 75], "static_unset_default_dtyp": [74, 75], "static_unset_default_float_dtyp": [74, 75], "static_unset_default_int_dtyp": [74, 75], "static_unset_shape_array_mod": [74, 75], "static_unset_with_grad": [74, 75], "static_unstack": [74, 75], "static_used_mem_on_dev": [74, 75], "static_valid_dtyp": [74, 75], "static_value_is_nan": [74, 75], "static_var": [74, 75], "static_vari": [74, 75], "static_variable_data": [74, 75], "static_vecdot": [74, 75], "static_vector_norm": [74, 75], "static_vector_to_skew_symmetric_matrix": [74, 75], "static_wher": [74, 75], "static_with_grad": [74, 75], "static_zero_pad": [74, 75], "supports_inplac": [74, 75, 608], "tmp_dir": [74, 75, 608], "to_native_arrays_and_back": [74, 75, 117, 124, 150], "to_scalar": [74, 75, 608], "total_mem_on_dev": [74, 75, 128, 318], "tpu_is_avail": [74, 75, 318], "try_else_non": [74, 75, 608], "type_promote_arrai": [74, 75, 246], "unique_al": [74, 75, 929], "unique_invers": [74, 75, 929], "unique_valu": [74, 75, 929], "unset_default_devic": [74, 75, 318], "unset_default_dtyp": [74, 75, 246], "unset_default_float_dtyp": [74, 75, 246], "unset_default_int_dtyp": [74, 75, 246], "unset_shape_array_mod": [74, 75, 608], "unset_with_grad": [74, 75, 685], "used_mem_on_dev": [74, 75, 318], "valid_dtyp": [74, 75, 246], "value_is_nan": [74, 75, 608], "variable_data": [74, 75, 685], "with_grad": [74, 75, 685, 717], "at_dev": [74, 76, 318, 331, 332], "static_arang": [77, 78, 176], "static_asarrai": [77, 78, 179], "static_empty_lik": [77, 78, 185], "static_ey": [77, 78, 190], "n_row": [77, 78, 175, 190, 191, 192], "n_col": [77, 78, 175, 190, 191, 192], "static_from_dlpack": [77, 78, 193], "static_full_lik": [77, 78, 199], "static_linspac": [77, 78, 204], "num": [77, 78, 132, 175, 204, 205, 206, 207, 208, 209], "endpoint": [77, 78, 175, 204, 205, 206, 207, 209], "static_logspac": [77, 78, 207], "static_meshgrid": [77, 78, 210], "static_native_arrai": [77, 78, 215], "static_on": [77, 78, 220], "static_ones_lik": [77, 78, 223], "static_tril": [77, 78, 228], "static_triu": [77, 78, 233], "static_zero": [77, 78, 238], "static_zeros_lik": [77, 78, 241], "int32": [79, 80, 121, 127, 175, 241, 245, 246, 267, 269, 270, 271, 286, 608, 679, 824, 838, 841, 949, 966, 969, 974, 977], "int64": [79, 80, 121, 127, 246, 267, 269, 270, 271, 286, 317, 368, 424, 427, 924, 925, 926, 949, 966, 969, 974, 977], "static_astyp": [79, 80, 252], "static_broadcast_arrai": [79, 80, 257], "static_broadcast_to": [79, 80, 262], "static_can_cast": [79, 80, 267], "from_": [79, 80, 246, 267, 270, 271], "static_finfo": [79, 80, 281], "static_iinfo": [79, 80, 288], "static_is_float_dtyp": [79, 80, 294], "dtype_in": [79, 80, 246, 250, 251, 280, 293, 294, 297, 298, 299, 302, 303, 317], "static_is_int_dtyp": [79, 80, 299], "static_result_typ": [79, 80, 305], "02": [83, 84, 391, 393, 685, 687, 690], "21": [83, 84, 368, 391, 393, 428, 431, 608, 626, 736, 748, 750, 774, 776, 808, 819, 822, 949, 950, 953], "61": [83, 84, 95, 96, 368, 391, 393, 585, 588, 808, 809, 811, 812, 813, 819, 821, 823], "static_ab": [83, 84, 369], "static_add": [83, 84, 118, 119, 126, 382], "static_asinh": [83, 84, 391], "97": [83, 84, 368, 391, 394, 395], "37": [83, 84, 101, 102, 368, 391, 394, 395, 594, 598, 914, 916], "75": [83, 84, 368, 391, 394, 395, 736, 757, 759, 774, 776], "static_divid": [83, 84, 126, 444], "static_multipli": [83, 84, 126, 539], "static_sign": [83, 84, 568], "static_subtract": [83, 84, 126, 589], "static_tan": [83, 84, 119, 126, 594], "143": [83, 84, 119, 368, 594, 595, 597, 598], "38": [83, 84, 119, 368, 594, 595, 597, 598], "static_tanh": [83, 84, 599], "76": [83, 84, 368, 440, 443, 599, 600, 685, 687, 690, 736, 793, 795, 949, 950, 953], "96": [83, 84, 368, 594, 598, 599, 600, 685, 687, 690, 736, 774, 776, 949, 950, 953], "995": [83, 84, 368, 599, 600, 602, 603], "9999": [83, 84, 599, 600], "static_all_equ": [85, 86, 609, 611], "clip_vector_norm": [85, 86, 608], "max_norm": [85, 86, 608, 620, 621, 622, 623], "static_gather_nd": [85, 86, 637], "adam_upd": [87, 88, 136, 685], "lr": [87, 88, 135, 136, 685, 692, 693, 694, 695, 697, 698, 699, 700, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 1031, 1032, 1033, 1034, 1035, 1036], "mw_tm1": [87, 88, 685, 692, 693, 694, 695, 705, 706, 707, 708], "vw_tm1": [87, 88, 685, 692, 693, 694, 695, 705, 706, 707, 708], "gradient_descent_upd": [87, 88, 685, 884, 885, 886, 887, 993], "is_vari": [87, 88, 129, 685], "lamb_upd": [87, 88, 685], "max_trust_ratio": [87, 88, 685, 705, 706, 707, 708, 1031, 1033], "decay_lambda": [87, 88, 685, 705, 706, 707, 708, 709, 710, 711, 712, 1031, 1033, 1034], "lars_upd": [87, 88, 685], "optimizer_upd": [87, 88, 685], "effective_grad": [87, 88, 685, 713, 714, 715, 716], "static_adam_step": [87, 88, 687], "87": [87, 88, 101, 102, 685, 687, 690, 691, 914, 916], "976": [87, 88, 368, 599, 603, 685, 687, 690, 691], "static_adam_upd": [87, 88, 692], "static_gradient_descent_upd": [87, 88, 697], "static_is_vari": [87, 88, 701], "static_lamb_upd": [87, 88, 705], "static_lars_upd": [87, 88, 709], "static_optimizer_upd": [87, 88, 713], "73": [93, 94, 121, 368, 581, 584, 736, 737, 739, 740, 741, 906, 907, 910], "577": [93, 94, 736, 737, 739, 740, 741], "41": [93, 94, 134, 368, 428, 431, 581, 584, 736, 737, 739, 740, 741, 949, 974, 977], "707": [93, 94, 736, 737, 739, 740, 741], "static_choleski": [93, 94, 737], "static_rol": [93, 94, 97, 98, 119, 126, 737, 741, 825, 829, 858], "511": [95, 96, 808, 809, 811, 812, 813, 819, 821, 823], "5108256": [95, 96, 814, 816], "609438": [95, 96, 814, 816], "static_binary_cross_entropi": [95, 96, 809], "static_cross_entropi": [95, 96, 814], "20397282": [95, 96, 814, 818], "83258148": [95, 96, 814, 818], "60943794": [95, 96, 814, 818], "static_sparse_cross_entropi": [95, 96, 819], "static_clip": [97, 98, 825], "658": [99, 100, 906, 907, 909, 910, 911], "04": [99, 100, 723, 735, 906, 907, 909, 910, 911], "759": [99, 100, 906, 907, 909, 910, 911], "42": [99, 100, 101, 102, 137, 160, 166, 169, 685, 687, 690, 736, 774, 776, 907, 909, 911, 912, 914, 916, 922, 949, 950, 953], "403": [99, 100, 907, 909, 911], "62": [99, 100, 101, 102, 907, 909, 911, 914, 916], "54": [99, 100, 119, 368, 436, 439, 440, 443, 581, 584, 723, 735, 736, 774, 776, 907, 909, 911, 912, 917, 949, 950, 953], "static_layer_norm": [99, 100, 907], "random_uniform": [101, 102, 121, 128, 136, 912, 993], "static_randint": [101, 102, 914], "20": [101, 102, 134, 368, 428, 431, 457, 460, 564, 567, 581, 584, 736, 748, 750, 774, 776, 793, 795, 912, 914, 915, 916, 924, 927, 928, 949, 950, 953], "40": [101, 102, 368, 440, 443, 581, 584, 736, 774, 776, 914, 916, 949, 950, 953], "52": [101, 102, 685, 687, 690, 736, 774, 776, 914, 916, 929, 930, 949, 950, 953], "95": [101, 102, 368, 568, 571, 685, 687, 690, 914, 916], "13": [101, 102, 119, 121, 126, 368, 408, 411, 428, 431, 440, 443, 581, 584, 608, 626, 685, 687, 690, 723, 735, 736, 748, 750, 774, 776, 914, 916, 924, 928, 929, 930, 949, 950, 953], "static_random_uniform": [101, 102, 918], "static_unique_count": [105, 106, 931], "classivi": [105, 106, 824, 863, 929, 931, 932, 934, 935], "static_argsort": [107, 108, 939], "static_sort": [107, 108, 944], "static_al": [111, 112, 983], "static_ani": [111, 112, 988], "add_ivy_container_instance_method": 113, "containerexampl": [113, 114], "who": [115, 131, 149], "mainli": [115, 133, 135], "under": [115, 118, 119, 120, 121, 122, 126, 131, 132, 135, 137], "hood": [115, 119, 121, 122, 126, 131, 132, 135, 137], "weed": [115, 131], "behind": [115, 121, 131, 133, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715], "tour": 115, "primari": [115, 121, 123, 129, 149], "composit": [115, 121, 123, 125, 126, 129, 132, 136, 137, 149], "nestabl": [115, 118, 119, 121, 129, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 432, 435, 465, 468, 537, 548, 551, 568, 571, 581, 584, 585, 588, 594, 598, 608, 636, 723, 726, 735, 736, 737, 740, 748, 750, 824, 858, 861, 906, 907, 910, 929, 931, 935, 949, 954, 957, 982, 983, 986], "dynam": [115, 127, 128, 129, 132, 172, 173], "runtim": [115, 121, 318], "h": [115, 126, 723, 726, 727, 728, 729, 730, 888, 891], "j": [115, 608, 616, 617, 736, 796, 798, 949, 950, 953], "n": [115, 121, 175, 210, 213, 228, 232, 233, 237, 608, 617, 723, 731, 736, 748, 750, 760, 763, 767, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 787, 789, 790, 792, 796, 798, 799, 801, 802, 804, 805, 807, 824, 834, 837, 838, 841, 846, 849, 868, 871, 880, 883, 912, 917, 918, 920, 924, 927, 949, 958, 961, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "borrow": 115, "taken": [116, 130, 137, 736, 748, 750], "constant": [116, 122, 136, 137, 149, 318, 327, 328, 824, 834, 837, 888, 894, 906, 907, 910, 1006, 1007, 1011, 1014, 1027, 1028, 1029, 1030], "compil": [116, 126, 131, 133, 149, 993, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036], "meta": [116, 125, 885, 886, 887], "overlap": 116, "sever": [116, 149, 736, 757, 759], "judgement": 116, "locat": [116, 121, 123, 128, 912, 913], "some_namespac": 116, "some_backend": 116, "another_backend": 116, "break": [116, 117, 130, 134, 149, 993], "anyth": [116, 121, 993], "refactor": 116, "ongo": 116, "subfold": [116, 121], "file_nam": [116, 121], "my_func": [116, 119], "int": [116, 117, 119, 122, 126, 127, 128, 129, 130, 137, 160, 165, 172, 173, 175, 190, 191, 198, 199, 202, 204, 205, 207, 208, 228, 232, 233, 237, 246, 262, 265, 275, 280, 281, 284, 288, 291, 299, 302, 318, 340, 343, 344, 345, 346, 354, 355, 356, 362, 363, 368, 408, 411, 412, 415, 416, 419, 420, 423, 424, 427, 428, 431, 608, 614, 626, 627, 630, 631, 632, 635, 636, 645, 661, 664, 673, 683, 685, 687, 690, 692, 694, 705, 707, 723, 724, 726, 728, 729, 730, 736, 742, 744, 748, 750, 793, 795, 796, 798, 799, 801, 802, 804, 808, 814, 817, 819, 822, 824, 830, 833, 834, 837, 838, 841, 842, 845, 846, 849, 850, 853, 858, 861, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 884, 885, 886, 887, 888, 891, 900, 906, 907, 910, 912, 913, 914, 915, 922, 924, 925, 926, 938, 939, 942, 944, 947, 949, 954, 957, 958, 961, 962, 965, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "nativedtyp": [116, 117, 127, 128, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 215, 218, 220, 221, 223, 226, 238, 240, 241, 245, 246, 251, 252, 255, 274, 275, 276, 279, 304, 317, 949, 974, 977], "nativedevic": [116, 117, 127, 128, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 198, 199, 202, 204, 205, 207, 208, 215, 218, 220, 221, 223, 226, 238, 240, 241, 245, 318, 335, 336, 337, 351, 357, 359, 361, 363, 364, 367, 608, 661, 912, 913, 914, 915, 917, 918, 920], "my": 116, "numer": [116, 136, 175, 210, 213, 246, 252, 255, 368, 369, 372, 382, 385, 432, 435, 444, 447, 461, 464, 465, 468, 469, 472, 481, 484, 485, 488, 489, 492, 493, 496, 525, 528, 529, 532, 539, 542, 544, 547, 548, 551, 556, 559, 560, 563, 568, 571, 585, 588, 589, 593, 604, 607, 608, 643, 644, 666, 667, 674, 675, 736, 742, 744, 760, 763, 774, 776, 787, 789, 793, 795, 796, 798, 799, 801, 912, 923, 924, 925, 926, 949, 954, 957, 966, 969, 974, 977, 1006], "cooler": 116, "produc": [116, 121, 318, 327, 328, 723, 735], "something_cool": 116, "category_nam": [117, 118, 122, 127, 128], "backend_nam": [117, 118, 122, 123, 124, 127, 128], "adress": 117, "conveni": [117, 127, 128, 133, 135, 136], "revisit": [117, 137], "dedic": [117, 134, 136, 685, 721, 1004, 1005], "four": [117, 119, 122, 127, 135], "float": [117, 118, 121, 122, 126, 127, 129, 134, 136, 160, 162, 174, 175, 176, 177, 184, 190, 191, 198, 199, 202, 204, 205, 207, 208, 220, 221, 238, 240, 246, 252, 255, 274, 281, 284, 294, 297, 305, 308, 318, 351, 357, 361, 364, 367, 368, 369, 372, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 428, 431, 432, 435, 436, 439, 440, 443, 444, 447, 449, 452, 457, 460, 461, 464, 465, 468, 469, 472, 473, 476, 477, 480, 493, 496, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 544, 547, 548, 551, 552, 555, 556, 559, 560, 563, 564, 567, 573, 576, 577, 580, 581, 584, 589, 593, 594, 598, 599, 603, 604, 607, 608, 620, 621, 623, 635, 643, 644, 666, 667, 674, 675, 685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 723, 726, 730, 735, 736, 737, 740, 745, 747, 751, 753, 754, 756, 757, 759, 768, 770, 777, 779, 780, 782, 784, 786, 787, 789, 802, 804, 808, 809, 812, 814, 817, 819, 822, 884, 885, 886, 887, 906, 907, 910, 912, 917, 918, 920, 929, 930, 931, 935, 937, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981], "tf": [117, 125, 127, 128, 129, 132, 137, 149, 993], "jnp": [117, 127, 128, 129, 137, 993], "jaxarrai": [117, 127, 128, 129], "wherea": [117, 119, 121, 122, 125, 127, 128, 137], "__sub__": [117, 119, 125, 126, 134], "__mul__": [117, 119, 125, 126, 134], "__div__": 117, "permit": [117, 121, 125], "dicat": 117, "addition": [117, 129], "omit": [117, 129, 929, 930, 931, 935, 937], "wrapper": [117, 124, 125, 126, 127, 129, 134], "contrast": [117, 118], "futher": 117, "respect": [117, 119, 121, 125, 126, 127, 130, 175, 210, 213, 368, 369, 372, 382, 385, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 560, 563, 589, 593, 685, 687, 690, 692, 694, 696, 697, 699, 705, 707, 709, 711, 713, 715, 736, 780, 782, 884, 885, 886, 887], "absenc": 117, "pep": 117, "484": 117, "annot": [117, 130], "dictat": [117, 119, 125, 129], "brittl": 117, "intend": [117, 949, 974, 977], "subset": [117, 118, 121, 132], "freeli": 117, "consum": [117, 121, 126, 318], "inde": [117, 149], "flexibl": 117, "technic": [117, 126, 129, 149], "original_typ": 117, "cumbersom": 117, "readabl": [117, 125, 126, 134, 135], "account": 118, "instanti": 118, "firstli": [118, 119, 122, 125, 127, 129, 135], "templat": [118, 121, 993], "spec": [118, 119], "api_specif": [118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 581, 584, 585, 588, 736, 748, 750, 824, 838, 841, 858, 861, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957], "array_api": 118, "preview": 118, "render": 118, "incorrectli": [118, 130], "onlin": [118, 993], "approxim": [118, 160, 161, 368, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 509, 512, 513, 516, 556, 559, 573, 576, 577, 580, 594, 598, 599, 603, 736, 768, 770, 777, 779], "tangent": [118, 160, 171, 368, 396, 399, 400, 403, 404, 407, 594, 598, 599, 603], "domain": [118, 368, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 513, 516, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603], "infin": [118, 174, 246, 252, 255, 368, 369, 372, 378, 381, 382, 385, 391, 394, 396, 399, 400, 403, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 469, 472, 481, 484, 485, 488, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603, 604, 607, 736, 802, 804, 949, 954, 957, 962, 965, 982, 983, 986, 988, 991], "codomain": [118, 368, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 436, 439, 440, 443, 457, 460, 461, 464, 501, 504, 505, 508, 513, 516, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603], "x_i": [118, 368, 369, 372, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 412, 415, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 481, 484, 485, 488, 489, 492, 501, 504, 505, 508, 513, 516, 525, 528, 544, 547, 564, 567, 568, 571, 573, 576, 577, 580, 581, 584, 585, 588, 594, 598, 599, 603, 604, 607, 929, 930, 931, 935, 937, 949, 954, 957, 958, 961, 962, 965, 970, 973, 974, 977, 978, 981], "assum": [118, 121, 123, 127, 134, 135, 149, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 436, 439, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 573, 576, 581, 584, 585, 588, 594, 598, 599, 603, 608, 636, 723, 726, 735, 736, 737, 740, 745, 747, 748, 750, 824, 838, 841, 842, 845, 858, 861, 906, 907, 910, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957, 982, 983, 986], "express": [118, 130, 132, 137, 368, 374, 377, 387, 390, 396, 399, 400, 403, 436, 439, 573, 576, 594, 598], "radian": [118, 368, 374, 377, 387, 390, 396, 399, 400, 403, 436, 439, 573, 576, 594, 598], "operand": [118, 368, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 400, 403, 428, 431, 432, 435, 436, 439, 440, 443, 457, 460, 461, 464, 465, 468, 501, 504, 505, 508, 513, 516, 517, 520, 539, 542, 556, 559, 560, 563, 564, 567, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603, 604, 607, 949, 950, 953, 954, 957, 962, 965, 974, 977], "whose": [118, 121, 175, 228, 232, 233, 237, 368, 378, 381, 391, 394, 404, 407, 436, 439, 440, 443, 556, 559, 573, 576, 577, 580, 594, 598, 599, 603, 608, 619, 736, 737, 740, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 768, 770, 771, 773, 774, 776, 777, 779, 780, 782, 784, 786, 787, 789, 790, 792, 796, 798, 824, 842, 845, 858, 861, 929, 930, 931, 935, 949, 950, 953], "ref": [118, 368, 424, 427, 493, 496, 539, 542, 548, 551, 560, 563, 589, 593, 824, 868, 871], "promot": [118, 122, 127, 246, 252, 255, 267, 270, 304, 305, 308, 313, 368, 374, 377, 378, 381, 382, 385, 387, 390, 391, 394, 396, 399, 404, 407, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 436, 439, 440, 443, 444, 447, 457, 460, 461, 464, 501, 504, 505, 508, 513, 516, 517, 520, 533, 536, 539, 542, 556, 559, 560, 563, 573, 576, 577, 580, 581, 584, 594, 598, 599, 603, 736, 737, 740, 742, 744, 757, 759, 760, 763, 768, 770, 774, 776, 777, 779, 784, 786, 799, 801, 802, 804, 824, 868, 871, 949, 958, 961], "But": [118, 126, 137], "needless": 118, "info": [118, 993], "renam": 118, "conform": [118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 461, 464, 465, 468, 497, 500, 537, 548, 551, 564, 567, 568, 571, 581, 584, 585, 588, 594, 598, 599, 603, 736, 745, 747, 748, 750, 824, 838, 841, 842, 845, 858, 861, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957, 982, 983, 986], "org": [118, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 581, 584, 585, 588, 685, 687, 690, 692, 694, 736, 748, 750, 824, 838, 841, 858, 861, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957], "elementwise_funct": [118, 368, 369, 372, 387, 390, 391, 394, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 581, 584, 585, 588, 736, 748, 750, 824, 858, 861, 929, 930, 938, 939, 942, 949, 954, 957], "descript": [118, 121, 126, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 581, 584, 585, 588, 594, 598, 599, 603, 608, 636, 723, 726, 735, 736, 737, 740, 745, 747, 748, 750, 802, 804, 824, 838, 841, 842, 845, 858, 861, 906, 907, 910, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957, 982, 983, 986], "simplic": [118, 136, 148, 175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 207, 208, 210, 213, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245, 246, 267, 270, 368, 369, 372, 382, 385, 387, 390, 391, 394, 408, 411, 428, 431, 432, 435, 440, 443, 465, 468, 537, 548, 551, 564, 567, 568, 571, 581, 584, 585, 588, 594, 598, 599, 603, 608, 636, 723, 726, 735, 736, 737, 740, 745, 747, 748, 750, 824, 838, 841, 842, 845, 858, 861, 906, 907, 910, 929, 930, 931, 935, 938, 939, 942, 949, 954, 957], "judgment": 118, "beyond": [118, 824, 858, 861], "text": 118, "func_nam": [118, 119, 122], "pure": [118, 134, 137, 149], "themselv": [118, 122, 126, 127, 128, 136, 888, 889], "operator_nam": 118, "succinct": 118, "contstructor": 118, "though": [118, 122, 127, 135, 149], "forward": [118, 121, 137, 148, 149, 1027, 1028, 1031, 1035], "_forward": [118, 132, 135, 136, 993], "former": 118, "trainabl": [118, 133, 135, 136, 685, 701, 703, 1004, 1005, 1027, 1028, 1037], "explicitli": [118, 122, 123, 125, 126, 129, 132, 149, 736, 751, 753, 1015, 1024, 1026, 1027, 1028], "latter": [118, 123], "implicit": [118, 121, 126, 132], "docst": 118, "eight": 119, "static_": 119, "op_nam": 119, "__r": 119, "__truediv__": [119, 125, 126], "recap": [119, 126, 136], "independ": [119, 120, 124, 126, 132, 137, 736, 742, 744, 784, 786, 912, 913], "combinatorili": 119, "variat": [119, 121], "grid": [119, 121, 148, 175, 210, 213], "vari": [119, 121, 126, 134, 929, 930, 931, 935, 937], "simplest": [119, 121], "small": [119, 122, 132, 136, 149, 368, 539, 542, 736, 768, 770, 777, 779, 906, 907, 910, 1029, 1030], "unus": [119, 129, 130, 172, 173], "18": [119, 126, 368, 428, 431, 736, 748, 750, 774, 776, 949, 950, 953], "excess": [119, 123, 134], "okai": [119, 132], "showcas": [119, 148], "demonstr": [119, 134], "replic": [119, 127], "meant": 119, "imaginari": 119, "some_flag": 119, "another_flag": 119, "jointli": 119, "three": [119, 121, 126, 131, 175, 210, 213, 993], "x0": [119, 608, 616], "procedur": 119, "sens": [119, 126, 134], "5574077": 119, "1850398": 119, "5463025": 119, "8422884": 119, "91601413": 119, "9647598": 119, "3738229": 119, "1597457": 119, "0963247": 119, "9955841": 119, "3278579": 119, "multi": [119, 126, 131, 149, 723, 734, 736, 742, 744, 993, 999, 1015, 1026], "seper": [119, 608, 635], "pars": [119, 149], "satisfi": [119, 736, 805, 807], "far": [119, 128, 133, 134, 888, 889, 899], "asid": [119, 148], "irrelev": [119, 127], "increasingli": 119, "complex": [119, 135, 136, 137, 149, 736, 751, 753, 787, 789], "rule": [119, 121, 122, 125, 126, 127, 130, 246, 252, 255, 267, 270, 305, 308, 368, 404, 407, 424, 427, 444, 447, 539, 542, 560, 563, 736, 737, 740, 742, 744, 774, 776, 784, 786], "14254655": 119, "1578213": 119, "380515": 119, "17": [119, 126, 160, 162, 736, 748, 750, 912, 917], "trivial": 119, "By": [119, 122, 126, 129, 136, 137, 608, 626, 627, 736, 799, 801, 824, 850, 853, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "non": [119, 126, 127, 132, 172, 173, 246, 252, 255, 293, 368, 525, 528, 529, 532, 723, 726, 736, 745, 747, 768, 770, 787, 789, 793, 795, 799, 801, 802, 804, 924, 925, 926, 927, 949, 954, 957, 958, 961, 962, 965, 966, 969, 978, 981, 982, 983, 986, 988, 991, 1027, 1028, 1031, 1035], "exlud": 119, "unit": [120, 121, 149, 160, 161, 162, 163, 318], "thoroughli": 120, "ci": [120, 121, 149], "failur": 120, "On": [121, 130, 133, 137], "fixtur": 121, "300": [121, 368, 564, 567], "hit": [121, 132], "action": 121, "eleg": 121, "intellig": 121, "sampl": [121, 723, 731, 912, 913, 917, 918, 920, 949, 970, 973, 978, 981, 1015, 1023], "rang": [121, 135, 136, 137, 175, 176, 177, 204, 205, 207, 208, 929, 930, 949, 966, 969, 974, 977, 993], "unexplor": 121, "known": 121, "repeatedli": [121, 126, 888, 897], "upload": 121, "artifact": 121, "parametr": 121, "statement": [121, 130, 149], "plai": [121, 137], "varieti": [121, 127, 128], "wide": 121, "valid_int_dtyp": 121, "int8": [121, 127, 246, 286, 317], "int16": [121, 127, 246, 267, 270, 286, 949, 966, 969, 974, 977], "uint8": [121, 127, 246, 267, 270, 286, 317], "uint16": [121, 127, 246, 287, 949, 966, 969, 974, 977], "uint32": [121, 127, 246, 287, 949, 966, 969, 974, 977], "uint64": [121, 127, 246, 287, 949, 966, 969, 974, 977], "custom_strategi": 121, "st": 121, "sampled_from": 121, "min_siz": 121, "max_siz": 121, "wherein": 121, "referenc": 121, "print_hypothesis_exampl": 121, "searchstrategi": 121, "randomis": 121, "simplist": 121, "intricaci": 121, "briefli": [121, 122, 135], "bound": [121, 132], "mechan": [121, 147, 149, 993], "power": [121, 134, 135, 136, 368, 424, 427, 457, 460, 556, 559, 608, 643, 666, 675, 736, 767, 1006], "math": [121, 129, 137, 993], "inclus": [121, 129, 175, 176, 177, 912, 914, 915], "width": 121, "losslessli": 121, "mostli": 121, "drawn": [121, 912, 913, 914, 915, 917, 918, 920], "one_of": 121, "datum": 121, "pipe": 121, "overload": 121, "shorthand": 121, "ndim": [121, 134, 736, 780, 782, 787, 789], "draw": [121, 912, 913, 917, 918, 920], "dtype_and_x": 121, "num_positional_arg": 121, "reject": 121, "flatmap": 121, "suppos": 121, "valid": [121, 127, 132, 246, 272, 723, 724, 725, 726, 727, 728, 729, 730, 824, 868, 871, 982, 983, 986, 988, 991, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "dataobject": 121, "test_argsort": 121, "decor": [121, 122, 124, 126, 127, 128, 129], "initialis": [121, 318], "snippet": 121, "dtype_and_valu": 121, "valid_float_dtyp": 121, "list_of_length": 121, "instance_method": 121, "alpha": [121, 160, 162], "test_leaky_relu": 121, "fw": [121, 723, 724, 725, 726, 727, 728, 729, 730], "float16": [121, 127, 246, 287, 317], "exhaust": 121, "num_posit": 121, "indirectli": 121, "advis": 121, "seri": 121, "9433925": 121, "401298464324817e": 121, "574352379": 121, "99999": 121, "2250738585072014e": 121, "308": 121, "103515625e": 121, "unpack": [121, 130, 608, 683], "seamlessli": 121, "edg": [121, 132, 137, 824, 825, 828, 834, 837, 880, 883, 993], "encount": 121, "criterion": 121, "straight": [121, 134, 993], "array_valu": 121, "valid_ax": 121, "hand": [121, 122, 130, 149], "craft": 121, "polici": [121, 148], "hoc": 121, "overview": [121, 131, 148], "array_dtyp": 121, "array_bool": 121, "na": 121, "test_concat": 121, "test_devic": 121, "array_shap": 121, "test_manipul": 121, "common_shap": 121, "test_lay": 121, "size_bound": 121, "precis": [121, 246, 281, 284, 368, 539, 542, 581, 584], "283405296074752": 121, "564049465049088": 121, "0417876997507982e": 121, "min_valu": 121, "max_valu": 121, "allow_inf": 121, "min_num_dim": 121, "wherev": 121, "reshape_shap": 121, "larger": [121, 132, 137, 246, 281, 284, 824, 825, 828, 858, 861, 949, 970, 973, 978, 981], "stand": 121, "alon": [121, 318, 357, 367], "fashion": 121, "some_sequ": 121, "06": [121, 685, 687, 690], "input_dtyp": 121, "allow_subnorm": 121, "exclude_min": 121, "960464477539063e": 121, "08": [121, 368, 391, 394, 723, 735], "coverag": 121, "allow_nan": 121, "Such": 121, "kind": [121, 149, 246, 281, 284, 288, 291, 368, 556, 559, 949, 966, 969, 974, 977], "get_shap": 121, "allow_non": 121, "max_num_dim": 121, "min_dim_s": 121, "none_or_list_of_float": 121, "200": 121, "199": [121, 368, 391, 394], "99999999999997": 121, "000000000000002": 121, "125": 121, "43759670925832": 121, "get_mean_std": 121, "probabilist": 121, "811428143185347e": 121, "89": [121, 368, 428, 431, 736, 793, 795, 949, 974, 977], "none_or_list_float": 121, "get_bound": 121, "arrays_valu": 121, "put": [121, 149], "36418": 121, "213": 121, "21716926": 121, "get_prob": 121, "unnorm": [121, 912, 913], "099609375": 121, "get_axi": 121, "number_positional_argu": 121, "mind": [121, 125, 126], "bodi": 121, "test_valu": 121, "logic": [121, 124, 125, 127, 128, 134, 318, 354, 368, 521, 524, 525, 528, 529, 532, 982, 983, 986, 988, 991, 993], "enough": [121, 134, 135, 136], "autom": [121, 993], "report": 121, "test_demo": 121, "falsifi": 121, "failing_test": 121, "traceback": 121, "123": [121, 608, 633], "assertionerror": [121, 685, 722], "shrink": 121, "prescrib": 121, "behavior": [121, 132, 149, 368, 556, 559, 560, 563, 929, 930, 931, 935, 937], "identifi": 121, "closest": [121, 246, 272, 368, 432, 435, 465, 468, 469, 472, 564, 567, 604, 607], "checkout": 121, "scratch": 121, "databas": 121, "therebi": 121, "debug": [121, 126, 135], "event": [121, 993], "test_gelu": 121, "test_fil": 121, "brief": 121, "phase": [121, 149], "reus": 121, "notabl": 121, "displai": [121, 126, 135], "verbos": [121, 132, 993, 1041], "newer": 121, "max_exampl": 121, "impact": [121, 136], "deadlin": 121, "weird": 121, "verifi": [121, 127, 128, 134, 993, 999], "truth": [121, 368, 449, 452, 473, 476, 477, 480, 493, 496, 497, 500, 548, 551], "opt": [121, 123, 129, 134], "defer": [121, 122, 125, 126, 127, 128, 129], "suffic": [121, 124], "catch": [121, 608, 629], "systemat": 121, "safeguard": 121, "inabl": 121, "fact": [121, 135], "categor": [122, 128], "mutual": [122, 126], "constitut": [122, 132, 949, 970, 973, 978, 981], "venn": 122, "diagram": 122, "light": [122, 149], "log_pr": [122, 126, 129], "array_arg": 122, "typic": 122, "whatsoev": [122, 126], "commonli": [122, 949, 970, 973, 978, 981], "outsid": [122, 128, 130, 132, 134, 137, 824, 825, 828, 868, 871], "denomin": [122, 149, 608, 634, 644, 667, 674, 675, 906, 907, 910, 1029, 1030], "divis": [122, 368, 424, 427, 444, 447, 469, 472, 560, 563, 608, 634, 644, 667, 674, 675, 685, 687, 690, 692, 694, 705, 707, 1031, 1032, 1033], "deal": [122, 149], "concurr": [122, 126], "weight": [122, 126, 136, 137, 685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 723, 732, 733, 735, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1027, 1028, 1031, 1033, 1034], "modif": 122, "group": [122, 126], "cast": [122, 127, 246, 252, 255, 267, 270, 824, 830, 833, 949, 966, 969, 974, 977, 993], "get_all_arrays_on_dev": 122, "nested_map": [122, 888], "index_nest": [122, 888], "implicit_backend": 123, "unless": [123, 128, 129, 149, 368, 539, 542, 608, 661], "__dict__": [123, 132, 134], "ivy_original_dict": [123, 132], "unmodifi": [123, 127], "moment": [123, 149, 685, 687, 690, 692, 694, 705, 707, 1031, 1032, 1033], "fallback": 123, "freedom": [123, 949, 970, 973, 978, 981], "recommend": [123, 368, 525, 528, 529, 532, 560, 563, 949, 958, 961], "achiev": [124, 130, 135, 137], "topic": [124, 134], "_data": [125, 134], "organiz": [125, 126], "bear": [125, 126, 127], "necessarili": [125, 126], "although": [125, 126], "underpin": [125, 126, 132], "programmat": [125, 126], "backup": [125, 126], "accident": [125, 126], "absent": [125, 126], "perk": [125, 126], "auto": [125, 126, 135], "throw": [125, 134], "imposs": 125, "coupl": [125, 126, 134, 136], "anywai": 125, "secondli": [125, 127], "easier": 125, "five": [126, 135], "decis": [126, 132, 134], "arbitrarili": [126, 135], "__repr__": 126, "control": [126, 127, 129, 134, 135, 148], "__getattr__": 126, "underli": [126, 368, 408, 411, 420, 423, 428, 431, 533, 536], "__contains__": 126, "__getstate__": 126, "__setstate__": 126, "unpickl": 126, "expand": [126, 608, 635, 824, 838, 841], "children": 126, "shallowest": 126, "deepest": 126, "22": [126, 368, 428, 431, 736, 748, 750, 774, 776, 924, 928, 949, 950, 953], "retain_grad": [126, 685, 696], "dy": [126, 685, 696], "dx": [126, 685, 696], "autograd": [126, 149], "grad": [126, 135, 136, 137, 993, 1031, 1035], "redund": 126, "num_head": [126, 723, 734, 1015, 1026], "mask": [126, 723, 734, 735], "to_q_fn": [126, 723, 734], "to_kv_fn": [126, 723, 734], "to_out_fn": [126, 129, 723, 734], "to_q_v": [126, 723, 734], "to_kv_v": [126, 723, 734], "to_out_v": [126, 723, 734], "measur": [126, 723, 734, 1015, 1026], "dot": [126, 723, 734, 735, 736, 793, 795, 799, 801, 1015, 1026], "product": [126, 368, 539, 542, 608, 626, 723, 734, 735, 736, 742, 744, 760, 763, 774, 776, 793, 795, 799, 801, 949, 950, 953, 966, 969, 1015, 1026], "implicitli": 126, "intuit": [126, 135, 136], "chronolog": 126, "had": [126, 129], "sequenti": [126, 136], "flow": [126, 148], "implic": 126, "slightli": [126, 132, 136], "eager": [126, 149], "bfloat16": [127, 246, 286], "all_dtyp": 127, "all_numeric_dtyp": 127, "all_int_dtyp": 127, "all_float_dtyp": 127, "fall": [127, 131, 993, 1027, 1028, 1031, 1035], "invalid": [127, 130, 736, 799, 801, 982, 983, 986, 988, 991], "thirdli": 127, "native_float32": [127, 246, 317], "importantli": [127, 134, 137, 148], "arguabl": [127, 128], "compound": 127, "overflow": [127, 368, 382, 385, 949, 974, 977], "arr": [127, 128], "scalar": [127, 132, 137, 149, 175, 199, 202, 608, 661, 680, 684, 736, 802, 804], "settabl": [127, 128], "mx": [127, 128, 129, 993], "nd": [127, 128, 129, 132, 137, 993], "deleg": 127, "idx": [128, 134, 608, 614], "tpu": [128, 318, 340, 365], "aliv": [128, 318, 352, 356, 358, 608, 642, 660, 662], "amount": [128, 318, 364, 808, 809, 812, 814, 817, 819, 822], "dual": 128, "thrown": [128, 149, 608, 652], "rare": [128, 149], "program": 129, "strictli": 129, "ration": 129, "speak": 129, "subtli": 129, "ensure_in_backend": [129, 608, 652], "x_nativ": 129, "val_n": 129, "is_ivy_arrai": [129, 134, 608], "assign": [129, 130, 134], "elif": 129, "irrespect": [129, 134, 246, 252, 255], "unspecifi": [129, 368, 556, 559, 560, 563, 736, 751, 753, 824, 868, 871], "predominantli": [129, 148], "presenc": 129, "altern": [129, 135], "_wrap_fn": 129, "maxim": [129, 132], "inner": [129, 134, 736, 751, 753, 760, 763, 884, 885, 886, 887], "third": [129, 149, 736, 787, 789, 929, 930], "leverag": 129, "equival": [129, 135, 137, 175, 176, 177, 368, 424, 427, 525, 528, 529, 532, 560, 563, 736, 768, 770, 777, 779, 784, 786, 802, 804], "input_arrai": 129, "clean": [130, 132, 133, 135], "flake8": 130, "undefin": 130, "yield": [130, 924, 928], "handler": [130, 131, 133, 137, 993], "liter": [130, 736, 802, 804], "carri": 130, "star": 130, "notimplementederror": 130, "unsuccess": 130, "exce": [130, 368, 538], "black": 130, "disobei": 130, "successfulli": 130, "accordingli": [130, 175, 210, 213, 368, 461, 464, 736, 802, 804, 924, 926, 929, 930, 931, 935, 937, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "comparison": 130, "sound": 131, "higher": [131, 132, 137, 149, 685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715], "fledg": [132, 133], "syntact": [132, 137], "clip_by_valu": [132, 137], "clamp": [132, 137], "fit": [132, 824, 850, 853], "construct": [132, 133, 136, 137, 824, 876, 879, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038], "power_seq": 132, "resid": [132, 136], "ml_framework": [132, 137, 175, 176, 177], "current_framework": [132, 137], "furthermor": 132, "concaten": [132, 135, 318, 347, 608, 635, 824, 830, 833, 993], "framework_handl": 132, "face": 132, "cprint": [132, 1040], "framework_stack": 132, "_determine_framework_from_arg": 132, "valueerror": [132, 824, 864, 867], "get_framework": 132, "neither": [132, 368, 382, 385, 539, 542, 685, 722], "illustr": [132, 148], "un": [132, 246, 293], "nn": [132, 137, 175, 210, 213, 993], "init_h": [132, 723, 733], "init_c": [132, 723, 733], "kernel": [132, 149, 723, 733], "recurrent_kernel": [132, 723, 733], "bia": [132, 136, 723, 732, 733, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025], "recurrent_bia": [132, 723, 733], "x_shape": 132, "batch_shap": [132, 134, 137, 608, 661, 723, 733, 734, 735, 736, 805, 807, 912, 913, 1015, 1024], "timestep": [132, 723, 733, 1015, 1024], "input_channel": [132, 136, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025], "x_flat": 132, "wi": 132, "wi_x": 132, "wii_x": 132, "wif_x": 132, "wig_x": 132, "wio_x": 132, "recurr": [132, 723, 733], "wh": 132, "lstm": [132, 723, 733, 1015], "ht": 132, "ct": 132, "hts_list": 132, "unrol": [132, 135, 723, 733], "wii_xt": 132, "wif_xt": 132, "wig_xt": 132, "wio_xt": 132, "zip": 132, "htm1": 132, "ctm1": 132, "wh_htm1": 132, "whi_htm1": 132, "whf_htm1": 132, "whg_htm1": 132, "who_htm1": 132, "ft": 132, "gt": 132, "ot": 132, "offici": 132, "reliabl": 132, "sacrific": 132, "hear": 132, "virtu": 132, "pure_ivi": 132, "reduce_mean": [132, 135, 136, 137, 993], "reduce_sum": [132, 993], "reduce_var": 132, "compile_graph": [132, 137], "pure_torch": 132, "cat": [132, 137], "backbon": [132, 135], "_layer": 132, "super": [132, 135, 136, 137], "random_unifrom": 132, "unclean": 132, "wx": 132, "temp": 132, "torchscript": 132, "fn": [132, 134, 150, 151, 152, 153, 154, 155, 156, 157, 158, 246, 286, 287, 318, 327, 328, 608, 614, 681, 888, 889, 894, 895, 896, 898, 899, 900, 996, 998], "example_input": [132, 172, 173], "static_argnum": [132, 172, 173], "static_argnam": [132, 172, 173], "jit": [132, 149], "frontend": 133, "primit": [133, 149], "hierarch": [133, 135, 136], "arraywithlinalg": 134, "arraywithlog": 134, "arraywithmath": 134, "arraywithmeta": 134, "arraywithreduct": 134, "is_native_arrai": [134, 608], "_shape": 134, "_size": 134, "functool": 134, "mul": 134, "_dtype": 134, "_devic": 134, "_dev_str": 134, "_pre_repr": 134, "_post_repr": 134, "mt": 134, "answer": [134, 149], "consol": 134, "typeerror": 134, "immut": 134, "behav": 134, "claim": 134, "truli": 134, "_native_wrapp": 134, "attributeerror": 134, "genuin": 134, "some_method": 134, "similarli": [134, 175, 210, 213], "rewritten": 134, "__pow__": 134, "strang": 134, "enforc": 134, "notic": 134, "appear": [134, 824, 838, 841], "invers": [134, 148, 368, 374, 377, 378, 381, 387, 390, 391, 394, 396, 399, 400, 403, 404, 407, 736, 757, 759, 777, 779], "_wrap_method": 134, "func_wrapp": [134, 150, 151, 152, 153, 154, 155, 156, 157, 158], "__name__": 134, "non_wrapped_method": 134, "_method_wrap": 134, "native_arg": 134, "native_kwarg": 134, "inner_fn": 134, "whist": 134, "unwrap": 134, "transit": 134, "needlessli": 134, "randn": 134, "_unwrap_method": 134, "method_wrap": 134, "compartment": 134, "public": [134, 608, 624], "newshap": 134, "new_shap": 134, "tidi": 134, "shorter": 134, "crystal": 134, "ton": 135, "ado": [135, 136], "incred": [135, 149], "hash": 135, "soup": 135, "walk": [135, 136], "dct": 135, "cnt": 135, "combo": [135, 993, 999], "hold": [135, 608, 664, 665], "1000": [135, 368, 581, 584], "uda": 135, "3333": 135, "6667": 135, "178": 135, "new_weight": 135, "0600": 135, "3100": 135, "2400": 135, "6900": 135, "delimit": 135, "autocomplet": 135, "midwai": 135, "agent": 135, "total_spe": 135, "total_height": 135, "total_width": 135, "ag": 135, "tot": 135, "total_": 135, "total_h": 135, "batch_siz": [135, 723, 724, 725, 726, 727, 728, 729, 730, 912, 913], "dir": 135, "adam": [135, 136, 137, 685, 687, 690, 692, 694, 705, 707, 993, 1031, 1033], "cnt0": 135, "cnt1": 135, "diff_0": 135, "diff_1": 135, "config0": 135, "config1": 135, "Not": [135, 136, 149, 174], "decod": 135, "l0": 135, "l1": [135, 736, 802, 804], "depth": [135, 136, 137, 148, 318, 342, 346, 350, 608, 646, 661, 888, 900, 1027, 1028], "clearer": 135, "truncat": 135, "decoder__l0": 135, "decoder__l1": 135, "encoder__l0": 135, "encoder__l1": 135, "height": 135, "l0__b": 135, "l0__w": 135, "l1__b": 135, "l1__w": 135, "printabl": 135, "obviou": 135, "foresight": 135, "untidili": 135, "update_ag": 135, "normalize_img": 135, "img": 135, "img_max": 135, "reduce_max": [135, 993], "img_min": 135, "reduce_min": [135, 993], "img_rang": 135, "agent_posit": 135, "agent_veloc": 135, "agent_cam_front_rgb": 135, "agent_cam_front_depth": 135, "agent_cam_rear_rgb": 135, "agent_cam_rear_depth": 135, "agent_cam_lidar": 135, "cleaner": 135, "camera": 135, "front_rgb": 135, "front_depth": 135, "rear_rgb": 135, "rear_depth": 135, "lidar": 135, "rgb": 135, "rear": 135, "veloc": 135, "cam": 135, "cam_max": 135, "cam_min": 135, "cam_rang": 135, "Of": 135, "ideal": 135, "perman": 135, "afterward": 135, "thread": 135, "incorpor": 135, "pretti": 135, "straightforward": 135, "dataload": [135, 147, 993], "_cnt": 135, "img_": 135, "_dataset_s": 135, "_batch_siz": 135, "_count": [135, 136], "__next__": 135, "filenam": 135, "img_fnam": 135, "fname": 135, "loaded_img": 135, "cv2": 135, "imread": 135, "loader": [135, 149], "batch_slic": 135, "model": [135, 136, 993], "mymodel": [135, 993], "linear0": [135, 136, 993], "linear1": [135, 136, 993], "x_in": [135, 136, 137, 993], "loss_fn": [135, 136, 137, 993], "0145": 135, "grad_fn": 135, "addbackward0": 135, "_create_vari": 136, "output_channel": [136, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025], "with_bia": [136, 1015, 1025], "_input_channel": 136, "_output_channel": 136, "_w_shape": 136, "_b_shape": 136, "_with_bia": 136, "8979": 136, "3198": 136, "0196": 136, "3126": 136, "3717": 136, "9687": 136, "6958": 136, "5122": 136, "3902": 136, "8800": 136, "5613": 136, "1982": 136, "nightmar": 136, "overcom": 136, "fc": 136, "9563": 136, "v0": 136, "v1": 136, "6440": 136, "key0": 136, "1823": 136, "8075": 136, "linear3": 136, "v2": 136, "2346": 136, "counter": 136, "hidden": [136, 723, 733, 1015, 1024], "fed": [136, 318, 362], "1300": 136, "decoupl": 136, "scheme": 136, "weight_initi": [136, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025], "glorotuniform": [136, 1006, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025], "bias_initi": [136, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025], "_w_init": 136, "_b_init": 136, "create_vari": [136, 1006], "var_shap": [136, 1006], "fan_out": [136, 1006], "fan_in": [136, 1006], "fan_mod": [136, 1006], "fan_sum": 136, "slight": 136, "misnom": 136, "saw": 136, "vanilla": [136, 884, 886], "descent": [136, 685, 697, 699, 1031, 1036], "lar": [136, 685, 705, 707, 709, 711, 1031], "lamb": [136, 685, 705, 707, 1031], "compile_on_next_step": [136, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036], "_beta1": 136, "_beta2": 136, "_epsilon": 136, "_mw": 136, "_vw": 136, "_first_pass": 136, "_should_compil": 136, "_step": [136, 1031, 1035], "new_v": 136, "_lr": 136, "isinst": [136, 137, 608, 678], "_inplac": 136, "_stop_gradi": 136, "set_stat": [136, 1031, 1032, 1033, 1034, 1035, 1036], "pre": [137, 149, 318], "captur": 137, "sparse_funct": 137, "num_class": [137, 912, 913], "num_dim": 137, "new_axi": 137, "_linear": 137, "to_backend": 137, "jax_graph": 137, "learnabl": [137, 906, 907, 910, 1029, 1030], "to_ivy_modul": [137, 1004], "thinli": 137, "whilst": 137, "to_haiku_modul": 137, "hk": 137, "loss_fn_t": 137, "transform": [137, 148, 723, 731, 732], "without_apply_rng": 137, "rng": 137, "prngkei": 137, "init": 137, "update_rul": 137, "tree_multimap": 137, "vision": [147, 993], "robot": [147, 993], "focus": 148, "field": [148, 736, 751, 753, 780, 782, 787, 789, 929, 930, 931, 935], "perfect": 148, "3d": [148, 1015, 1020, 1021], "differenti": 148, "demo": [148, 993], "orient": 148, "pose": 148, "euler": [148, 174], "quaternion": 148, "rotat": 148, "matric": [148, 175, 210, 213, 228, 232, 233, 237, 723, 732, 736, 737, 740, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 767, 768, 770, 771, 773, 777, 779, 780, 782, 784, 786, 787, 789, 790, 792, 796, 798], "angl": [148, 368, 400, 403, 440, 443, 577, 580, 599, 603], "ivy_mech": 148, "target_facing_rotation_matrix": 148, "polar_to_cartesian_coord": 148, "ordin": [148, 736, 784, 786], "warp": 148, "optic": 148, "voxel": 148, "ivy_vis": 148, "coords_to_voxel_grid": 148, "render_pixel_coord": 148, "neural": [148, 723, 993, 1001, 1015], "radianc": 148, "nerf": 148, "trajectori": 148, "motion": 148, "plan": [148, 993], "mobil": 148, "ivy_robot": 148, "sample_spline_path": 148, "rigidmobil": 148, "sample_bodi": 148, "drone": 148, "sample_link": 148, "openai": 148, "swimmer": 148, "cumul": [148, 608, 626, 627], "reward": 148, "supervis": 148, "reinforc": 148, "door": [148, 149], "intersect": 148, "cartpol": 148, "mountain_car": 148, "pendulum": 148, "reacher": 148, "condit": [148, 172, 173, 888, 898, 899, 924, 928], "learnt": 148, "ture": 148, "ntm": 148, "egospher": 148, "spatial": 148, "esm": 148, "ivy_memori": 148, "egocentr": 148, "room": 148, "inspir": 148, "doubt": 149, "grate": 149, "probe": 149, "undergo": 149, "remark": 149, "surpris": 149, "backward": [149, 368, 560, 563, 736, 799, 801, 982, 983, 986, 988, 991], "lock": 149, "contunu": 149, "minor": 149, "xla": 149, "buffer": 149, "gold": 149, "dex": 149, "lax": 149, "scan": 149, "tricki": 149, "predictor": 149, "tight": 149, "driver": 149, "schedul": 149, "dispatch": 149, "Will": 149, "ast": 149, "dynamic": 149, "cond": 149, "jacobian": 149, "checkpoint": 149, "autodiff": 149, "shine": 149, "merci": 149, "superset": 149, "cluster": 149, "compet": 149, "paradigm": 149, "parallelis": [149, 318, 327, 328], "spmd": 149, "mixtur": [149, 685, 687, 690], "expert": 149, "sophist": 149, "depart": 149, "routin": 149, "hundr": 149, "thousand": 149, "deepli": [149, 888, 890], "broadli": 149, "heavili": 149, "supplementari": 149, "Is": 149, "reusabl": 149, "fanci": 149, "fusion": 149, "lose": 149, "vmap": 149, "pmap": 149, "overhead": 149, "ineffici": 149, "eventu": 149, "supplement": 149, "backdoor": 149, "callback": 149, "record": 149, "metric": 149, "somewhat": 149, "outsourc": 149, "inputs_to_ivy_arrai": 150, "gaussian": [160, 161], "leaki": [160, 161, 162], "rectifi": [160, 162, 163], "slope": [160, 162], "39": [160, 162, 368, 391, 394, 457, 460, 685, 687, 690, 736, 774, 776, 949, 950, 953], "85": [160, 162, 368, 428, 431], "48": [160, 162, 368, 581, 584, 685, 687, 690, 736, 774, 776, 949, 950, 953], "88": [160, 162, 368, 428, 431, 736, 774, 776, 949, 950, 953], "269": [160, 164], "731": [160, 164], "214": [160, 164], "978": [160, 164], "422": [160, 165], "155": [160, 165], "0768": [160, 165], "231": [160, 165], "693": [160, 165, 368, 391, 394, 808, 819, 822], "49": [160, 165, 368, 581, 584, 949, 950, 953], "147": [160, 165], "363": [160, 165], "3461": [160, 166, 169], "6491": [160, 166, 169], "535": [160, 166, 169], "hyperbol": [160, 171, 368, 378, 381, 391, 394, 404, 407, 440, 443, 577, 580, 599, 603], "55": [160, 171, 723, 729, 736, 774, 776, 949, 950, 953], "501": [160, 171], "array_method": [166, 167, 179, 180, 185, 186, 193, 194, 199, 200, 210, 211, 215, 216, 223, 224, 228, 230, 233, 235, 241, 243, 252, 253, 257, 258, 262, 263, 267, 268, 276, 277, 281, 282, 288, 289, 294, 295, 299, 300, 305, 306, 369, 370, 374, 375, 378, 379, 382, 383, 387, 388, 391, 392, 396, 397, 400, 401, 404, 405, 408, 409, 412, 413, 416, 417, 420, 421, 424, 425, 428, 429, 432, 433, 436, 437, 440, 441, 444, 445, 449, 450, 453, 454, 457, 458, 461, 462, 465, 466, 469, 470, 473, 474, 477, 478, 481, 482, 485, 486, 489, 490, 493, 494, 497, 498, 501, 502, 505, 506, 509, 510, 513, 514, 517, 518, 521, 522, 525, 526, 529, 530, 533, 534, 539, 540, 544, 545, 548, 549, 552, 553, 556, 557, 560, 561, 564, 565, 568, 569, 573, 574, 577, 578, 581, 582, 585, 586, 589, 591, 594, 596, 599, 601, 604, 605, 609, 610, 637, 638, 687, 688, 737, 738, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 757, 758, 760, 761, 764, 765, 768, 769, 771, 772, 774, 775, 777, 778, 780, 781, 784, 785, 787, 788, 790, 791, 793, 794, 796, 797, 799, 800, 802, 803, 805, 806, 809, 810, 814, 815, 819, 820, 825, 826, 830, 831, 834, 835, 838, 839, 842, 843, 846, 847, 850, 851, 854, 855, 858, 859, 864, 865, 868, 869, 872, 873, 876, 877, 880, 881, 907, 908, 931, 933, 939, 940, 944, 945, 950, 951, 954, 955, 958, 959, 962, 963, 966, 967, 970, 971, 974, 975, 978, 979, 983, 984, 988, 989], "container_method": [166, 168, 170, 176, 178, 179, 181, 183, 185, 187, 189, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 207, 209, 210, 212, 214, 215, 217, 219, 220, 222, 223, 225, 227, 228, 229, 231, 233, 234, 236, 238, 239, 241, 242, 244, 252, 254, 256, 257, 259, 261, 262, 264, 266, 267, 269, 271, 276, 278, 281, 283, 285, 288, 290, 292, 294, 296, 298, 299, 301, 303, 305, 307, 309, 369, 371, 373, 374, 376, 378, 380, 382, 384, 386, 387, 389, 391, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 539, 541, 543, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 573, 575, 577, 579, 581, 583, 585, 587, 589, 590, 592, 594, 595, 597, 599, 600, 602, 604, 606, 609, 611, 613, 621, 622, 637, 639, 641, 687, 689, 691, 692, 693, 695, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 712, 713, 714, 716, 737, 739, 741, 760, 762, 809, 811, 813, 814, 816, 818, 819, 821, 823, 825, 827, 829, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 907, 909, 911, 914, 916, 918, 919, 921, 931, 932, 934, 939, 941, 943, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 983, 985, 987, 988, 990, 992], "faster": [172, 173], "invoc": [172, 173], "718281828459045": 174, "newaxi": 174, "alia": 174, "pi": 174, "141592653589793": 174, "mathemat": [174, 368, 382, 385, 400, 403, 461, 464, 539, 542, 736, 802, 804], "half": [175, 176, 177, 912, 914, 915, 918, 920], "chosen": [175, 176, 177, 368, 400, 403, 924, 928], "distanc": [175, 176, 177], "adjac": [175, 176, 177], "creation_funct": [175, 176, 177, 179, 182, 184, 185, 188, 190, 191, 193, 196, 198, 199, 202, 204, 205, 220, 221, 223, 226, 228, 232, 233, 237, 238, 240, 241, 245], "interpret": [175, 179, 182, 215, 218], "nativeshap": [175, 184, 198, 220, 221, 238, 240, 608, 665, 671, 673, 723, 725, 727, 729, 824, 854, 857, 912, 914, 915, 917, 918, 920], "uniniti": [175, 184, 185, 188], "elsewher": [175, 190, 191, 924, 928], "row": [175, 190, 191, 736, 784, 786, 787, 789, 912, 913, 924, 927], "column": [175, 190, 191, 736, 751, 753, 780, 782, 784, 786, 787, 789], "__dlpack__": [175, 193, 196, 318, 363], "interchang": [175, 193, 196, 824, 872, 875], "coordin": [175, 210, 213, 368, 400, 403], "cartesian": [175, 210, 213], "ij": [175, 210, 213, 949, 950, 953], "rank": [175, 210, 213, 608, 683, 736, 742, 744, 768, 770, 780, 782, 784, 786, 796, 798, 799, 801, 802, 804, 824, 834, 837, 838, 841, 868, 871, 880, 883, 924, 927, 982, 983, 986, 988, 991], "ni": [175, 210, 213], "xi": [175, 210, 213], "n1": [175, 210, 213], "n2": [175, 210, 213], "n3": [175, 210, 213], "xv": [175, 210, 213], "yv": [175, 210, 213], "triangular": [175, 228, 232, 233, 237, 736, 737, 740, 780, 782], "innermost": [175, 228, 232, 233, 237, 736, 737, 740, 745, 747, 748, 750, 751, 753, 754, 756, 757, 759, 768, 770, 771, 773, 777, 779, 780, 782, 784, 786, 787, 789, 790, 792, 796, 798], "mxn": [175, 228, 232, 233, 237, 736, 748, 750, 768, 770, 771, 773, 777, 779, 780, 782, 790, 792, 796, 798], "y1": [175, 241, 245], "y2": [175, 241, 245], "x3": [175, 241, 245, 318, 356], "y3": [175, 241, 245], "defaultdtyp": [246, 247], "defaultfloatdtyp": [246, 248], "float_dtyp": [246, 274, 311], "defaultintdtyp": [246, 249], "incompat": [246, 262, 265], "occur": [246, 267, 270, 924, 925, 926, 929, 930, 931, 935, 937], "data_type_funct": [246, 267, 270], "floatdtyp": [246, 274], "int_dtyp": [246, 275, 312], "intdtyp": [246, 275], "followng": [246, 281, 284], "occupi": [246, 281, 284, 288, 291, 608, 664, 665], "ep": [246, 281, 284, 736, 768, 770, 777, 779], "smallest_norm": [246, 281, 284], "encapsul": [246, 288, 291], "type1": [246, 304], "type2": [246, 304], "ret1": [246, 313], "ret2": [246, 313], "native_bool": [246, 317], "native_float16": [246, 317], "native_float64": [246, 317], "native_int8": [246, 317], "native_int16": [246, 317], "native_int32": [246, 317], "native_int64": [246, 317], "native_uint8": [246, 317], "native_uint64": [246, 317], "noinspect": [247, 248, 249, 319, 686], "pyshadowingnam": [247, 248, 249, 319, 686], "defaultdevic": [318, 319], "__enter__": 318, "_dev": 318, "__exit__": 318, "exc_typ": 318, "exc_val": 318, "exc_tb": 318, "exit": 318, "devcloneditem": [318, 340], "multidevitem": [318, 320, 323], "devclonedit": 318, "multidevit": [318, 321, 324, 327, 328, 332], "devclonednest": 318, "multidevnest": [318, 322, 325], "devdistitem": 318, "devdistit": 318, "devdistnest": 318, "devmanag": [318, 326], "dev_mapp": 318, "da_dim_s": 318, "safety_factor": 318, "min_dev_dim_s": 318, "max_dev_dim_step_ratio": 318, "min_unit_dev_tune_step": 318, "min_sf_tune_step": 318, "starting_split_factor": 318, "max_split_factor_step_s": 318, "tune_dev_alloc": 318, "tune_dev_split": 318, "mapper": [318, 327, 328], "receivess": 318, "ratio": [318, 685, 705, 707, 1031, 1033], "safe": [318, 327], "oom": 318, "tune": 318, "da_tune_step": 318, "ds_tune_step": 318, "to_clon": 318, "to_distribut": 318, "multidevic": [318, 327], "parallel": [318, 327, 328], "mutlidevic": [318, 327], "repeated_config_check": 318, "tune_step": 318, "devmapp": [318, 328], "ret_fn": [318, 327, 328], "queue_class": [318, 327, 328], "worker_class": [318, 327, 328], "worker": [318, 327, 328], "used_dev": [318, 327], "sf": [318, 327], "devmappermultiproc": 318, "multidev": [318, 329, 330, 331, 350], "profil": 318, "save_dir": [318, 333], "deviceic": [318, 339], "spread": [318, 350], "139740789224448": [318, 352], "physic": [318, 354], "x4": [318, 356], "process_specif": [318, 357, 367], "percentag": [318, 357], "ram": [318, 357, 364, 367], "attr_onli": [318, 358], "chunk": [318, 360, 361, 362], "max_chunk_s": [318, 362], "chunk_siz": [318, 362], "input_ax": [318, 362], "output_ax": [318, 362], "feed": [318, 362], "fist": [318, 362], "stream": [318, 363], "caveat": [318, 363], "portabl": [318, 363, 993], "gb": [318, 364, 367], "reset": [318, 366, 608, 682], "magnitud": [368, 369, 372, 382, 385, 539, 542, 736, 787, 789, 790, 792], "princip": [368, 374, 377, 387, 390, 396, 399], "cosin": [368, 374, 377, 378, 381, 436, 439, 440, 443], "x1_i": [368, 382, 385, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 589, 593], "x2_i": [368, 382, 385, 400, 403, 408, 411, 416, 419, 420, 423, 424, 427, 428, 431, 444, 447, 449, 452, 469, 472, 473, 476, 477, 480, 493, 496, 497, 500, 517, 520, 521, 524, 529, 532, 533, 536, 539, 542, 548, 551, 556, 559, 560, 563, 589, 593], "finit": [368, 382, 385, 400, 403, 481, 484, 539, 542, 556, 559, 560, 563], "nor": [368, 382, 385, 539, 542, 685, 722], "nearest": [368, 382, 385, 539, 542, 564, 567], "2019": [368, 382, 385, 461, 464, 539, 542], "commut": [368, 382, 385], "sine": [368, 387, 390, 391, 394, 573, 576, 577, 580], "57": [368, 387, 390, 391, 394, 428, 431, 440, 443], "524": [368, 387, 390], "644": [368, 387, 390], "201": [368, 387, 390, 564, 567], "305": [368, 387, 390], "412": [368, 387, 390], "44": [368, 391, 394, 564, 567, 581, 584, 585, 588, 736, 774, 776, 924, 928, 949, 950, 953], "809": [368, 391, 394], "569": [368, 391, 394], "733": [368, 391, 394], "68": [368, 391, 394, 906, 907, 910], "99": [368, 391, 394, 949, 950, 953], "quotient": [368, 400, 403], "notat": [368, 400, 403, 949, 950, 953], "denot": [368, 400, 403, 685, 722], "quadrant": [368, 400, 403], "3\u03c0": [368, 400, 403], "549": [368, 404, 407], "bitwis": [368, 408, 411, 420, 423, 428, 431, 533, 536], "AND": [368, 408, 411, 521, 524, 982, 983, 986], "binari": [368, 408, 411, 420, 423, 428, 431, 533, 536, 808, 809, 812], "invert": [368, 412, 415], "arithmet": [368, 424, 427, 949, 958, 961], "propag": [368, 424, 427, 949, 954, 957, 958, 961, 962, 965, 970, 973, 974, 977, 978, 981], "thu": [368, 424, 427, 556, 559, 560, 563, 736, 751, 753], "lh": [368, 424, 427], "rh": [368, 424, 427], "xor": [368, 428, 431, 533, 536], "78": [368, 428, 431, 568, 571, 736, 774, 776, 949, 950, 953], "91": [368, 428, 431, 736, 774, 776, 949, 950, 953], "23": [368, 428, 431, 568, 571, 723, 729, 736, 748, 750, 924, 928], "66": [368, 428, 431, 736, 774, 776, 949, 950, 953], "77": [368, 428, 431, 736, 774, 776, 949, 950, 953], "79": [368, 428, 431], "98": [368, 428, 431, 736, 774, 776, 924, 928, 949, 950, 953], "26": [368, 428, 431, 685, 687, 690, 723, 730, 736, 748, 750, 774, 776, 793, 795, 949, 950, 953], "34": [368, 428, 431, 581, 584], "51": [368, 428, 431], "27": [368, 428, 431, 440, 443, 581, 584, 723, 735, 736, 774, 776, 949, 950, 953], "74": [368, 428, 431], "59": [368, 428, 431], "416": [368, 436, 439], "122": [368, 440, 443], "368": [368, 440, 443], "670": [368, 440, 443], "202": [368, 440, 443, 564, 567], "548": [368, 440, 443], "1490": [368, 440, 443], "dividend": [368, 444, 447, 560, 563], "divisor": [368, 444, 447, 560, 563, 685, 687, 690, 692, 694, 705, 707, 949, 970, 973, 978, 981, 1031, 1032, 1033], "gauss": [368, 453, 456], "exponenti": [368, 453, 456, 457, 460, 517, 520, 556, 559], "logarithm": [368, 457, 460, 501, 504, 505, 508, 509, 512, 513, 516, 517, 520, 736, 783], "72": [368, 457, 460, 685, 687, 690, 736, 774, 776, 949, 950, 953], "fdlibm": [368, 461, 464], "compliant": [368, 461, 464, 525, 528, 529, 532, 949, 954, 957, 958, 961, 962, 965], "greatest": [368, 465, 468, 469, 472], "out_i": [368, 481, 484, 485, 488, 489, 492], "threshold": [368, 537, 538], "y_i": [368, 544, 547], "expon": [368, 556, 559, 608, 675], "versu": [368, 556, 559], "odd": [368, 556, 559], "modulu": [368, 560, 563], "primarili": [368, 560, 563], "5654": [368, 564, 567], "034": [368, 564, 567], "433": [368, 564, 567], "343": [368, 564, 567], "30": [368, 564, 567, 736, 774, 776, 949, 950, 953, 1006, 1012], "81": [368, 564, 567, 585, 588, 949, 950, 953], "527": [368, 564, 567], "301": [368, 564, 567], "124": [368, 568, 571], "46": [368, 568, 571], "indistinguish": [368, 581, 584], "infinit": [368, 581, 584], "83": [368, 581, 584], "32455532": [368, 581, 584], "89897949": [368, 581, 584], "50": [368, 581, 584, 736, 774, 776, 924, 927, 949, 950, 953], "31": [368, 581, 584], "169": [368, 581, 584], "47": [368, 581, 584], "93": [368, 581, 584], "35": [368, 581, 584, 723, 735, 736, 742, 744, 924, 928, 949, 950, 953], "09": [368, 585, 588, 723, 735], "546": [368, 594, 598], "842": [368, 594, 598], "916": [368, 594, 598, 808, 809, 812], "996": [368, 594, 598], "328": [368, 594, 598], "real": [368, 599, 603], "462": [368, 599, 603], "604": [368, 599, 603], "984": [368, 599, 603], "997": [368, 599, 603], "decim": [368, 604, 607], "inspect": [608, 614, 997, 998], "downscal": [608, 620, 621, 623], "60": [608, 626, 736, 774, 776, 949, 950, 953], "default_v": [608, 629], "catch_except": [608, 629], "rev": [608, 629], "with_cal": [608, 629], "arrang": [608, 630], "mod": [608, 634], "max_freq": [608, 635], "num_band": [608, 635], "pad": [608, 635, 723, 724, 725, 726, 727, 728, 729, 730, 824, 834, 837, 880, 883, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "fourier": [608, 635], "band": [608, 635], "linearli": [608, 635, 736, 784, 786], "oppos": [608, 635], "geometr": [608, 635], "seen_set": [608, 646], "local_set": [608, 646], "decrement": [608, 650], "is_arrai": 608, "allow_dupl": [608, 658], "forkserv": [608, 659], "spawn": [608, 659], "hot": [608, 661], "scatter": [608, 661, 664, 665], "tmp_dr": [608, 670], "temporari": [608, 670], "min_denomin": [608, 674], "stabil": [608, 674, 675, 938, 939, 942, 944, 947], "_min_denomin": [608, 674], "min_bas": [608, 675], "_min_bas": [608, 675, 906, 907, 910, 1029, 1030], "100000023841858": [608, 678], "200000047683716": [608, 678], "299999952316284": [608, 678], "400000095367432": [608, 678], "599999904632568": [608, 678], "101": [608, 679], "gradienttrack": [685, 686], "delta": [685, 687, 690], "cost": [685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 884, 885, 886, 887], "ws": [685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715], "en": [685, 687, 690, 692, 694], "wikipedia": [685, 687, 690, 692, 694], "wiki": [685, 687, 690, 692, 694], "stochastic_gradient_desc": [685, 687, 690, 692, 694], "dc": [685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715], "dw": [685, 687, 690, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715], "averag": [685, 687, 690, 692, 694, 705, 707, 884, 885, 886], "forget": [685, 687, 690, 692, 694, 705, 707, 1031, 1032, 1033], "004": [685, 687, 690], "009": [685, 687, 690], "86": [685, 687, 690], "28": [685, 687, 690, 723, 726, 729, 730, 736, 774, 776, 949, 950, 953], "0125": [685, 687, 690], "601": [685, 687, 690], "025": [685, 687, 690], "992": [685, 687, 690], "209": [685, 687, 690, 929, 930], "271": [685, 687, 690], "0717": [685, 687, 690], "142": [685, 687, 690], "182": [685, 687, 690], "624": [685, 687, 690, 912, 918, 920], "744": [685, 687, 690], "626": [685, 687, 690], "65": [685, 687, 690, 736, 774, 776, 949, 950, 953], "024": [685, 687, 690], "096": [685, 687, 690], "216": [685, 687, 690], "384": [685, 687, 690], "rate": [685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715, 884, 885, 886, 887, 1015, 1026, 1031, 1032, 1033, 1034, 1035, 1036], "ws_new": [685, 692, 694, 697, 699, 705, 707, 709, 711, 713, 715], "retain": [685, 696], "trust": [685, 705, 707, 1031, 1033], "decai": [685, 705, 707, 709, 711, 1031, 1033, 1034], "layerwis": [685, 709, 711, 1031, 1034], "with_grads_stack": [685, 722], "stride": [723, 724, 725, 726, 727, 728, 729, 730, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "data_format": [723, 724, 725, 726, 727, 728, 729, 730, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "nwc": [723, 724, 725, 1015, 1016, 1017], "dilat": [723, 724, 725, 726, 727, 728, 729, 730, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "convolut": [723, 724, 725, 726, 727, 728, 729, 730, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "d_in": [723, 724, 725, 726, 727, 728, 729], "d_out": [723, 724, 725, 726, 727, 728, 729], "slide": [723, 724, 725, 726, 727, 728, 729, 730, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "ncw": [723, 724, 725, 1015, 1016, 1017], "wio": [723, 724], "output_shap": [723, 725, 727, 729, 1015, 1017, 1019, 1021], "nhwc": [723, 726, 727, 730, 1015, 1018, 1019, 1022], "fh": [723, 726, 727, 728, 729, 730], "nchw": [723, 726, 727, 730, 1015, 1018, 1019, 1022], "hwio": [723, 726], "unequ": [723, 726], "unsqueez": [723, 726, 730], "ndhwc": [723, 728, 729, 1015, 1020, 1021], "volum": [723, 728], "fd": [723, 728, 729], "ncdhw": [723, 728, 729, 1015, 1020, 1021], "dhwio": [723, 728], "258": [723, 729], "128": [723, 729, 736, 774, 776], "depthwis": [723, 730, 1015, 1022], "333": [723, 730], "inp": [723, 730], "prob": [723, 731, 912, 913, 1015, 1023], "randomli": [723, 731, 1015, 1023], "bernoulli": [723, 731], "out_featur": [723, 731, 732], "incom": [723, 732], "outer_batch_shap": [723, 732], "inner_batch_shap": [723, 732], "in_featur": [723, 732], "cell": [723, 733, 1015, 1024], "num_queri": [723, 734, 735], "x_feat_dim": [723, 734], "num_kei": [723, 734, 735], "cont_feat_dim": [723, 734], "numhead": [723, 734], "feat_dim": [723, 734, 735], "out_feat_dim": [723, 734], "score": [723, 735], "03": [723, 735, 906, 907, 910], "decomposit": [736, 737, 740, 780, 782, 787, 789], "symmetr": [736, 737, 740, 751, 753, 754, 756, 805, 807], "u": [736, 737, 740, 787, 789], "vif": [736, 742, 744], "92": [736, 745, 747], "293": [736, 745, 747], "46997": [736, 745, 747], "eigendecomposit": [736, 751, 753], "qlq\u1d40": [736, 751, 753], "orthogon": [736, 751, 753], "eig": [736, 751, 753], "eigenvalu": [736, 751, 753, 754, 756], "eigenvector": [736, 751, 753], "prepend": [736, 760, 763], "singular": [736, 768, 770, 777, 779, 787, 789, 790, 792], "toler": [736, 768, 770, 777, 779], "largest_singular_valu": [736, 768, 770, 777, 779], "array_lik": [736, 774, 776], "84": [736, 774, 776, 949, 950, 953], "105": [736, 774, 776, 808, 809, 812], "112": [736, 774, 776, 949, 950, 953], "104": [736, 774, 776, 949, 950, 953], "120": [736, 774, 776], "moor": [736, 777, 779], "penros": [736, 777, 779], "pseudo": [736, 777, 779], "orthonorm": [736, 780, 782, 787, 789], "2d": [736, 783, 1015, 1018, 1019, 1022], "logdet": [736, 783], "coeffici": [736, 784, 786], "usvh": [736, 787, 789], "vh": [736, 787, 789], "hermitian": [736, 787, 789], "et": [736, 787, 789], "cetera": [736, 787, 789], "adjoint": [736, 787, 789], "reconstruct": [736, 787, 789, 929, 930, 936], "reconstructed_x": [736, 787, 789], "contract": [736, 793, 795, 949, 950, 953], "doubl": [736, 793, 795], "singleton": [736, 802, 804, 824, 864, 867, 924, 926, 949, 954, 957, 958, 961, 962, 965, 966, 969, 970, 973, 974, 977, 978, 981, 982, 983, 986, 988, 991], "manhattan": [736, 802, 804], "l2": [736, 802, 804], "euclidean": [736, 802, 804], "mathbf": [736, 805, 807], "mathbb": [736, 805, 807], "skew": [736, 805, 807], "entropi": [808, 809, 812, 814, 817, 819, 822], "predict": [808, 809, 812, 814, 817, 819, 822], "smooth": [808, 809, 812, 814, 817, 819, 822], "discret": [808, 814, 817], "35667497": [808, 814, 817], "spars": [808, 819, 822], "logit": [808, 819, 822], "793291": [808, 819, 822], "512926": [808, 819, 822], "before_1": [824, 834, 837, 880, 883], "after_1": [824, 834, 837, 880, 883], "before_n": [824, 834, 837, 880, 883], "after_n": [824, 834, 837, 880, 883], "manipulation_funct": [824, 838, 841], "reorder": [824, 842, 845], "permut": [824, 846, 849, 872, 875], "repetit": [824, 850, 853, 876, 879], "restor": [824, 858, 861], "famili": [824, 868, 871], "intxx": [824, 868, 871], "floatxx": [824, 868, 871], "fomaml_step": 884, "inner_cost_fn": [884, 885, 886], "outer_cost_fn": [884, 885, 886], "inner_grad_step": [884, 885, 886, 887], "inner_learning_r": [884, 885, 886, 887], "inner_optimization_step": [884, 885, 886, 887], "inner_batch_fn": [884, 885, 886], "outer_batch_fn": [884, 885, 886], "average_across_step": [884, 885, 886], "inner_v": [884, 885, 886], "keep_inner_v": [884, 885, 886], "outer_v": [884, 885, 886], "keep_outer_v": [884, 885, 886], "return_inner_v": [884, 885, 886, 887], "num_task": [884, 885, 886, 887], "maml": [884, 885, 886], "recev": [884, 885, 886], "0x7f50605f3790": [884, 885, 886, 887], "maml_step": 884, "rece": [884, 886], "reptile_step": 884, "cost_fn": [884, 887], "reptil": [884, 887], "receivng": [884, 887], "all_nested_indic": 888, "include_nest": [888, 889], "_index": [888, 889, 899], "_base": [888, 889, 898, 899], "copy_nest": 888, "to_mut": [888, 890, 900], "mutabl": [888, 890, 900], "insert_into_nest_at_index": 888, "insert_into_nest_at_indic": 888, "map_nest_at_index": 888, "map_nest_at_indic": 888, "multi_index_nest": 888, "nested_ani": 888, "check_nest": [888, 898, 899], "conditon": [888, 898, 899], "nested_indices_wher": 888, "stop_after_n_found": [888, 899], "_depth": [888, 900], "_tuple_check_fn": [888, 900], "_list_check_fn": [888, 900], "_dict_check_fn": [888, 900], "nested_multi_map": 888, "nest0": [888, 901], "ivy_arrai": [888, 901], "funciton": [888, 901], "prune_nest_at_index": 888, "prune_nest_at_indic": 888, "set_nest_at_index": 888, "set_nest_at_indic": 888, "mini": [906, 907, 910, 1029, 1030], "gamma": [906, 907, 910], "beta": [906, 907, 910], "894": [906, 907, 910], "772": [906, 907, 910], "796": [906, 907, 910], "population_s": [912, 913], "num_sampl": [912, 913], "home": [912, 913, 917], "uniformli": [912, 914, 915, 918, 920], "highest": [912, 914, 915], "parameter": [912, 917, 918, 920], "6444774682897879": [912, 917], "811": [912, 917], "508": [912, 917], "564": [912, 917], "7268672": [912, 917], "968": [912, 917], "175": [912, 917, 929, 930], "064": [912, 917], "40935726": [912, 917], "556": [912, 917], "26431865": [912, 918, 920], "475": [912, 918, 920], "878": [912, 918, 920], "861": [912, 918, 920], "89150229": [912, 918, 920], "89629126": [912, 918, 920], "94198485": [912, 918, 920], "91405606": [912, 918, 920], "72848724": [912, 918, 920], "7550739": [912, 918, 920], "00109": [912, 918, 920], "occurr": [924, 925, 926, 929, 930], "43": [924, 928], "x_j": [929, 930, 931, 935, 937], "impli": [929, 930, 931, 935, 937], "inverse_indic": [929, 930, 936], "aggreg": [929, 930], "fourth": [929, 930], "607": [929, 930], "735": [929, 930], "667": [929, 930], "381": [929, 930], "857": [929, 930], "0396": [929, 930], "166": [929, 930], "58": [929, 930], "828": [929, 930], "144": [929, 930], "40501155": [929, 930], "77361575": [929, 930], "97776199": [929, 930], "36831157": [929, 930], "89148434": [929, 930], "9512272": [929, 930], "67542176": [929, 930], "41985657": [929, 930], "23478023": [929, 930], "1141": [929, 930], "8101": [929, 930], "9298": [929, 930], "8460": [929, 930], "2119": [929, 930], "3519": [929, 930], "6252": [929, 930], "4033": [929, 930], "7443": [929, 930], "2577": [929, 930], "3707": [929, 930], "0545": [929, 930], "3238": [929, 930], "5944": [929, 930], "0775": [929, 930], "4327": [929, 930], "176": [929, 930], "889": [929, 930], "763": [929, 930], "071": [929, 930], "262": [929, 930], "456": [929, 930], "114": [929, 930], "349": [929, 930], "615": [929, 930], "594": [929, 930], "335": [929, 930], "212": [929, 930], "457": [929, 930], "827": [929, 930], "set_funct": [929, 931, 935], "ascend": [938, 939, 942], "einstein": [949, 950, 953], "summat": [949, 950, 953], "seq": [949, 950, 953], "jk": [949, 950, 953], "ik": [949, 950, 953], "126": [949, 950, 953], "510": [949, 950, 953], "108": [949, 950, 953], "117": [949, 950, 953], "sentinel": [949, 954, 957, 962, 965], "unsign": [949, 966, 969, 974, 977], "degre": [949, 970, 973, 978, 981], "bessel": [949, 970, 973, 978, 981], "8164966": [949, 970, 973], "varianc": [949, 978, 981], "unbias": [949, 978, 981], "simplicit": [982, 983, 986], "grow": 993, "ai": 993, "got": 993, "colab": 993, "sharp": 993, "weekli": 993, "immedi": 993, "favorit": 993, "jax_concat": 993, "tf_concat": 993, "np_concat": 993, "mx_concat": 993, "torch_concat": 993, "prompt": 993, "get_devic": 993, "reduce_prod": 993, "gradient_imag": 993, "linalg": 993, "bilinear_resampl": 993, "stack_imag": 993, "neural_net": 993, "ecosystem": [993, 999], "popular": [993, 999], "acceler": 993, "articl": 993, "lenton2021ivi": 993, "inter": 993, "lenton": 993, "daniel": 993, "pardo": 993, "fabio": 993, "falck": 993, "fabian": 993, "jame": 993, "stephen": 993, "clark": 993, "ronald": 993, "journal": 993, "arxiv": 993, "preprint": 993, "2102": 993, "02886": 993, "2021": 993, "add_array_spec": 996, "fn_array_spec": 996, "geglu": 1001, "native_modul": [1004, 1005], "native_module_class": [1004, 1005], "firstlayersiren": 1006, "kaimingnorm": [1006, 1010], "negative_slop": 1006, "Ones": 1006, "siren": 1006, "w0": [1006, 1012], "filter_s": [1015, 1016, 1017], "1d": [1015, 1016, 1017], "conv1dtranspos": 1015, "filter_shap": [1015, 1018, 1019, 1020, 1021, 1022], "conv2dtranspos": 1015, "conv3dtranspos": 1015, "depthwiseconv2d": 1015, "num_channel": [1015, 1022], "bernoul": [1015, 1023], "num_lay": [1015, 1024], "return_sequ": [1015, 1024], "return_st": [1015, 1024], "get_initial_st": [1015, 1024], "dens": [1015, 1025], "multiheadattent": 1015, "query_dim": [1015, 1026], "head_dim": [1015, 1026], "dropout_r": [1015, 1026], "context_dim": [1015, 1026], "with_to_q_fn": [1015, 1026], "with_to_kv_fn": [1015, 1026], "with_to_out_fn": [1015, 1026], "build_mod": [1015, 1026, 1027, 1028], "on_init": [1015, 1026, 1027, 1028], "__call__": [1015, 1026, 1027, 1028], "store_var": [1027, 1028], "arg_stateful_idx": [1027, 1028], "kwarg_stateful_idx": [1027, 1028], "fallback_to_non_compil": [1027, 1028, 1031, 1035], "with_partial_v": [1027, 1028], "initialz": [1027, 1028], "from_cal": [1027, 1028], "check_submod_ret": [1027, 1028], "get_mod_kei": [1027, 1028], "top_mod": [1027, 1028], "mod_depth": [1027, 1028], "mod_height": [1027, 1028], "mod_with_top_mod_key_chain": [1027, 1028], "save_weight": [1027, 1028], "weights_path": [1027, 1028], "show_mod_in_top_mod": [1027, 1028], "upper_depth": [1027, 1028], "lower_depth": [1027, 1028], "show_structur": [1027, 1028], "show_v_in_top_v": [1027, 1028], "sub_mod": [1027, 1028], "show_v": [1027, 1028], "track_submod_call_ord": [1027, 1028], "track_submod_ret": [1027, 1028], "v_with_top_v_key_chain": [1027, 1028], "layernorm": 1029, "normalized_shap": [1029, 1030], "elementwise_affin": [1029, 1030], "trail": [1029, 1030], "affin": [1029, 1030], "init_on_first_step": [1031, 1035], "ignore_miss": [1031, 1035], "overriden": [1031, 1035], "sgd": 1031, "stochast": [1031, 1036], "sub_modul": [1037, 1038]}, "objects": {"ivy": [[23, 0, 0, "-", "Array"], [69, 0, 0, "-", "Container"], [0, 0, 0, "-", "backend_handler"], [150, 0, 0, "-", "func_wrapper"], [996, 0, 0, "-", "inspection"], [1000, 0, 0, "-", "stateful"], [1040, 0, 0, "-", "verbosity"]], "ivy.Array": [[23, 1, 1, "", "__delattr__"], [23, 1, 1, "", "__format__"], [23, 1, 1, "", "__getattribute__"], [23, 1, 1, "", "__init_subclass__"], [23, 1, 1, "", "__new__"], [23, 1, 1, "", "__reduce__"], [23, 1, 1, "", "__reduce_ex__"], [23, 1, 1, "", "__setattr__"], [23, 1, 1, "", "__sizeof__"], [23, 1, 1, "", "__str__"], [23, 1, 1, "", "__subclasshook__"]], "ivy.Container": [[69, 1, 1, "", "__delattr__"], [69, 1, 1, "", "__delitem__"], [69, 1, 1, "", "__format__"], [69, 1, 1, "", "__getattribute__"], [69, 1, 1, "", "__init_subclass__"], [69, 1, 1, "", "__iter__"], [69, 1, 1, "", "__len__"], [69, 1, 1, "", "__new__"], [69, 1, 1, "", "__reduce__"], [69, 1, 1, "", "__reduce_ex__"], [69, 1, 1, "", "__reversed__"], [69, 1, 1, "", "__sizeof__"], [69, 1, 1, "", "__str__"], [69, 1, 1, "", "__subclasshook__"], [69, 1, 1, "", "clear"], [69, 1, 1, "", "fromkeys"], [69, 1, 1, "", "get"], [69, 1, 1, "", "items"], [69, 1, 1, "", "keys"], [69, 1, 1, "", "pop"], [69, 1, 1, "", "popitem"], [69, 1, 1, "", "setdefault"], [69, 1, 1, "", "update"], [69, 1, 1, "", "values"]], "ivy.array": [[24, 0, 0, "-", "activations"], [26, 0, 0, "-", "conversions"], [31, 0, 0, "-", "creation"], [33, 0, 0, "-", "data_type"], [35, 0, 0, "-", "device"], [37, 0, 0, "-", "elementwise"], [39, 0, 0, "-", "general"], [41, 0, 0, "-", "gradients"], [43, 0, 0, "-", "image"], [45, 0, 0, "-", "layers"], [47, 0, 0, "-", "linear_algebra"], [49, 0, 0, "-", "losses"], [51, 0, 0, "-", "manipulation"], [53, 0, 0, "-", "norms"], [55, 0, 0, "-", "random"], [57, 0, 0, "-", "searching"], [59, 0, 0, "-", "set"], [61, 0, 0, "-", "sorting"], [63, 0, 0, "-", "statistical"], [65, 0, 0, "-", "utility"], [67, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[25, 2, 1, "", "ArrayWithActivations"]], "ivy.array.activations.ArrayWithActivations": [[25, 3, 1, "", "softplus"]], "ivy.array.array_methods": [[370, 1, 1, "", "abs"], [375, 1, 1, "", "acos"], [379, 1, 1, "", "acosh"], [688, 1, 1, "", "adam_step"], [383, 1, 1, "", "add"], [984, 1, 1, "", "all"], [610, 1, 1, "", "all_equal"], [989, 1, 1, "", "any"], [940, 1, 1, "", "argsort"], [180, 1, 1, "", "asarray"], [388, 1, 1, "", "asin"], [392, 1, 1, "", "asinh"], [253, 1, 1, "", "astype"], [397, 1, 1, "", "atan"], [401, 1, 1, "", "atan2"], [405, 1, 1, "", "atanh"], [810, 1, 1, "", "binary_cross_entropy"], [409, 1, 1, "", "bitwise_and"], [413, 1, 1, "", "bitwise_invert"], [417, 1, 1, "", "bitwise_left_shift"], [421, 1, 1, "", "bitwise_or"], [425, 1, 1, "", "bitwise_right_shift"], [429, 1, 1, "", "bitwise_xor"], [258, 1, 1, "", "broadcast_arrays"], [263, 1, 1, "", "broadcast_to"], [268, 1, 1, "", "can_cast"], [433, 1, 1, "", "ceil"], [738, 1, 1, "", "cholesky"], [826, 1, 1, "", "clip"], [831, 1, 1, "", "concat"], [835, 1, 1, "", "constant_pad"], [437, 1, 1, "", "cos"], [441, 1, 1, "", "cosh"], [743, 1, 1, "", "cross"], [815, 1, 1, "", "cross_entropy"], [746, 1, 1, "", "det"], [749, 1, 1, "", "diagonal"], [445, 1, 1, "", "divide"], [277, 1, 1, "", "dtype"], [752, 1, 1, "", "eigh"], [755, 1, 1, "", "eigvalsh"], [951, 1, 1, "", "einsum"], [186, 1, 1, "", "empty_like"], [450, 1, 1, "", "equal"], [454, 1, 1, "", "erf"], [458, 1, 1, "", "exp"], [839, 1, 1, "", "expand_dims"], [462, 1, 1, "", "expm1"], [282, 1, 1, "", "finfo"], [843, 1, 1, "", "flip"], [466, 1, 1, "", "floor"], [470, 1, 1, "", "floor_divide"], [194, 1, 1, "", "from_dlpack"], [200, 1, 1, "", "full_like"], [638, 1, 1, "", "gather_nd"], [474, 1, 1, "", "greater"], [478, 1, 1, "", "greater_equal"], [289, 1, 1, "", "iinfo"], [758, 1, 1, "", "inv"], [295, 1, 1, "", "is_float_dtype"], [300, 1, 1, "", "is_int_dtype"], [482, 1, 1, "", "isfinite"], [486, 1, 1, "", "isinf"], [490, 1, 1, "", "isnan"], [908, 1, 1, "", "layer_norm"], [494, 1, 1, "", "less"], [498, 1, 1, "", "less_equal"], [502, 1, 1, "", "log"], [506, 1, 1, "", "log10"], [510, 1, 1, "", "log1p"], [514, 1, 1, "", "log2"], [518, 1, 1, "", "logaddexp"], [522, 1, 1, "", "logical_and"], [526, 1, 1, "", "logical_not"], [530, 1, 1, "", "logical_or"], [534, 1, 1, "", "logical_xor"], [761, 1, 1, "", "matmul"], [765, 1, 1, "", "matrix_norm"], [769, 1, 1, "", "matrix_rank"], [772, 1, 1, "", "matrix_transpose"], [955, 1, 1, "", "max"], [959, 1, 1, "", "mean"], [211, 1, 1, "", "meshgrid"], [963, 1, 1, "", "min"], [540, 1, 1, "", "multiply"], [216, 1, 1, "", "native_array"], [545, 1, 1, "", "negative"], [549, 1, 1, "", "not_equal"], [224, 1, 1, "", "ones_like"], [775, 1, 1, "", "outer"], [847, 1, 1, "", "permute_dims"], [778, 1, 1, "", "pinv"], [553, 1, 1, "", "positive"], [557, 1, 1, "", "pow"], [967, 1, 1, "", "prod"], [781, 1, 1, "", "qr"], [561, 1, 1, "", "remainder"], [851, 1, 1, "", "repeat"], [855, 1, 1, "", "reshape"], [306, 1, 1, "", "result_type"], [859, 1, 1, "", "roll"], [565, 1, 1, "", "round"], [569, 1, 1, "", "sign"], [574, 1, 1, "", "sin"], [578, 1, 1, "", "sinh"], [167, 1, 1, "", "softplus"], [785, 1, 1, "", "solve"], [945, 1, 1, "", "sort"], [820, 1, 1, "", "sparse_cross_entropy"], [582, 1, 1, "", "sqrt"], [586, 1, 1, "", "square"], [865, 1, 1, "", "squeeze"], [869, 1, 1, "", "stack"], [971, 1, 1, "", "std"], [591, 1, 1, "", "subtract"], [975, 1, 1, "", "sum"], [788, 1, 1, "", "svd"], [791, 1, 1, "", "svdvals"], [873, 1, 1, "", "swapaxes"], [596, 1, 1, "", "tan"], [601, 1, 1, "", "tanh"], [794, 1, 1, "", "tensordot"], [877, 1, 1, "", "tile"], [797, 1, 1, "", "trace"], [230, 1, 1, "", "tril"], [235, 1, 1, "", "triu"], [605, 1, 1, "", "trunc"], [933, 1, 1, "", "unique_counts"], [979, 1, 1, "", "var"], [800, 1, 1, "", "vecdot"], [803, 1, 1, "", "vector_norm"], [806, 1, 1, "", "vector_to_skew_symmetric_matrix"], [881, 1, 1, "", "zero_pad"], [243, 1, 1, "", "zeros_like"]], "ivy.array.conversions": [[27, 1, 1, "", "args_to_ivy"], [28, 1, 1, "", "args_to_native"], [29, 1, 1, "", "to_ivy"], [30, 1, 1, "", "to_native"]], "ivy.array.creation": [[32, 2, 1, "", "ArrayWithCreation"]], "ivy.array.creation.ArrayWithCreation": [[32, 3, 1, "", "asarray"], [32, 3, 1, "", "empty_like"], [32, 3, 1, "", "from_dlpack"], [32, 3, 1, "", "full_like"], [32, 3, 1, "", "meshgrid"], [32, 3, 1, "", "native_array"], [32, 3, 1, "", "ones_like"], [32, 3, 1, "", "tril"], [32, 3, 1, "", "triu"], [32, 3, 1, "", "zeros_like"]], "ivy.array.data_type": [[34, 2, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_type.ArrayWithDataTypes": [[34, 3, 1, "", "astype"], [34, 3, 1, "", "broadcast_arrays"], [34, 3, 1, "", "broadcast_to"], [34, 3, 1, "", "can_cast"], [34, 3, 1, "", "dtype"], [34, 3, 1, "", "finfo"], [34, 3, 1, "", "iinfo"], [34, 3, 1, "", "is_float_dtype"], [34, 3, 1, "", "is_int_dtype"], [34, 3, 1, "", "result_type"]], "ivy.array.device": [[36, 2, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[38, 2, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[38, 3, 1, "", "abs"], [38, 3, 1, "", "acos"], [38, 3, 1, "", "acosh"], [38, 3, 1, "", "add"], [38, 3, 1, "", "asin"], [38, 3, 1, "", "asinh"], [38, 3, 1, "", "atan"], [38, 3, 1, "", "atan2"], [38, 3, 1, "", "atanh"], [38, 3, 1, "", "bitwise_and"], [38, 3, 1, "", "bitwise_invert"], [38, 3, 1, "", "bitwise_left_shift"], [38, 3, 1, "", "bitwise_or"], [38, 3, 1, "", "bitwise_right_shift"], [38, 3, 1, "", "bitwise_xor"], [38, 3, 1, "", "ceil"], [38, 3, 1, "", "cos"], [38, 3, 1, "", "cosh"], [38, 3, 1, "", "divide"], [38, 3, 1, "", "equal"], [38, 3, 1, "", "erf"], [38, 3, 1, "", "exp"], [38, 3, 1, "", "expm1"], [38, 3, 1, "", "floor"], [38, 3, 1, "", "floor_divide"], [38, 3, 1, "", "greater"], [38, 3, 1, "", "greater_equal"], [38, 3, 1, "", "isfinite"], [38, 3, 1, "", "isinf"], [38, 3, 1, "", "isnan"], [38, 3, 1, "", "less"], [38, 3, 1, "", "less_equal"], [38, 3, 1, "", "log"], [38, 3, 1, "", "log10"], [38, 3, 1, "", "log1p"], [38, 3, 1, "", "log2"], [38, 3, 1, "", "logaddexp"], [38, 3, 1, "", "logical_and"], [38, 3, 1, "", "logical_not"], [38, 3, 1, "", "logical_or"], [38, 3, 1, "", "logical_xor"], [38, 3, 1, "", "multiply"], [38, 3, 1, "", "negative"], [38, 3, 1, "", "not_equal"], [38, 3, 1, "", "positive"], [38, 3, 1, "", "pow"], [38, 3, 1, "", "remainder"], [38, 3, 1, "", "round"], [38, 3, 1, "", "sign"], [38, 3, 1, "", "sin"], [38, 3, 1, "", "sinh"], [38, 3, 1, "", "sqrt"], [38, 3, 1, "", "square"], [38, 3, 1, "", "subtract"], [38, 3, 1, "", "tan"], [38, 3, 1, "", "tanh"], [38, 3, 1, "", "trunc"]], "ivy.array.general": [[40, 2, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[40, 3, 1, "", "all_equal"], [40, 3, 1, "", "gather_nd"]], "ivy.array.gradients": [[42, 2, 1, "", "ArrayWithGradients"]], "ivy.array.gradients.ArrayWithGradients": [[42, 3, 1, "", "adam_step"]], "ivy.array.image": [[44, 2, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[46, 2, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[48, 2, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[48, 3, 1, "", "cholesky"], [48, 3, 1, "", "cross"], [48, 3, 1, "", "det"], [48, 3, 1, "", "diagonal"], [48, 3, 1, "", "eigh"], [48, 3, 1, "", "eigvalsh"], [48, 3, 1, "", "inv"], [48, 3, 1, "", "matmul"], [48, 3, 1, "", "matrix_norm"], [48, 3, 1, "", "matrix_rank"], [48, 3, 1, "", "matrix_transpose"], [48, 3, 1, "", "outer"], [48, 3, 1, "", "pinv"], [48, 3, 1, "", "qr"], [48, 3, 1, "", "solve"], [48, 3, 1, "", "svd"], [48, 3, 1, "", "svdvals"], [48, 3, 1, "", "tensordot"], [48, 3, 1, "", "trace"], [48, 3, 1, "", "vecdot"], [48, 3, 1, "", "vector_norm"], [48, 3, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.array.losses": [[50, 2, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[50, 3, 1, "", "binary_cross_entropy"], [50, 3, 1, "", "cross_entropy"], [50, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[52, 2, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[52, 3, 1, "", "clip"], [52, 3, 1, "", "concat"], [52, 3, 1, "", "constant_pad"], [52, 3, 1, "", "expand_dims"], [52, 3, 1, "", "flip"], [52, 3, 1, "", "permute_dims"], [52, 3, 1, "", "repeat"], [52, 3, 1, "", "reshape"], [52, 3, 1, "", "roll"], [52, 3, 1, "", "squeeze"], [52, 3, 1, "", "stack"], [52, 3, 1, "", "swapaxes"], [52, 3, 1, "", "tile"], [52, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[54, 2, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[54, 3, 1, "", "layer_norm"]], "ivy.array.random": [[56, 2, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[58, 2, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[60, 2, 1, "", "ArrayWithSet"]], "ivy.array.set.ArrayWithSet": [[60, 3, 1, "", "unique_counts"]], "ivy.array.sorting": [[62, 2, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[62, 3, 1, "", "argsort"], [62, 3, 1, "", "sort"]], "ivy.array.statistical": [[64, 2, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[64, 3, 1, "", "einsum"], [64, 3, 1, "", "max"], [64, 3, 1, "", "mean"], [64, 3, 1, "", "min"], [64, 3, 1, "", "prod"], [64, 3, 1, "", "std"], [64, 3, 1, "", "sum"], [64, 3, 1, "", "var"]], "ivy.array.utility": [[66, 2, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[66, 3, 1, "", "all"], [66, 3, 1, "", "any"]], "ivy.array.wrapping": [[68, 1, 1, "", "add_ivy_array_instance_methods"]], "ivy.backend_handler": [[0, 2, 1, "", "ContextManager"], [2, 1, 1, "", "choose_random_backend"], [3, 1, 1, "", "clear_backend_stack"], [4, 1, 1, "", "current_backend"], [5, 1, 1, "", "get_backend"], [6, 1, 1, "", "set_backend"], [7, 1, 1, "", "try_import_ivy_jax"], [8, 1, 1, "", "try_import_ivy_mxnet"], [9, 1, 1, "", "try_import_ivy_numpy"], [10, 1, 1, "", "try_import_ivy_tf"], [11, 1, 1, "", "try_import_ivy_torch"], [12, 1, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[0, 3, 1, "", "__init__"]], "ivy.container": [[70, 0, 0, "-", "activations"], [72, 0, 0, "-", "base"], [74, 0, 0, "-", "container"], [77, 0, 0, "-", "creation"], [79, 0, 0, "-", "data_type"], [81, 0, 0, "-", "device"], [83, 0, 0, "-", "elementwise"], [85, 0, 0, "-", "general"], [87, 0, 0, "-", "gradients"], [89, 0, 0, "-", "image"], [91, 0, 0, "-", "layers"], [93, 0, 0, "-", "linear_algebra"], [95, 0, 0, "-", "losses"], [97, 0, 0, "-", "manipulation"], [99, 0, 0, "-", "norms"], [101, 0, 0, "-", "random"], [103, 0, 0, "-", "searching"], [105, 0, 0, "-", "set"], [107, 0, 0, "-", "sorting"], [109, 0, 0, "-", "statistical"], [111, 0, 0, "-", "utility"], [113, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[71, 2, 1, "", "ContainerWithActivations"]], "ivy.container.activations.ContainerWithActivations": [[71, 3, 1, "", "softplus"], [71, 3, 1, "", "static_softplus"]], "ivy.container.base": [[73, 2, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[73, 3, 1, "", "__getitem__"], [73, 3, 1, "", "__init__"], [73, 3, 1, "", "__setitem__"], [73, 3, 1, "", "all_false"], [73, 3, 1, "", "all_key_chains"], [73, 3, 1, "", "all_true"], [73, 3, 1, "", "arrays_as_lists"], [73, 3, 1, "", "as_arrays"], [73, 3, 1, "", "as_bools"], [73, 3, 1, "", "as_ones"], [73, 3, 1, "", "as_random_uniform"], [73, 3, 1, "", "as_variables"], [73, 3, 1, "", "as_zeros"], [73, 3, 1, "", "assert_contains_sub_container"], [73, 3, 1, "", "assert_contains_sub_structure"], [73, 3, 1, "", "assert_identical"], [73, 3, 1, "", "assert_identical_structure"], [73, 3, 1, "", "at_key_chain"], [73, 3, 1, "", "at_key_chains"], [73, 3, 1, "", "at_keys"], [73, 3, 1, "", "clip"], [73, 3, 1, "", "combine"], [73, 3, 1, "", "common_key_chains"], [73, 4, 1, "", "config"], [73, 3, 1, "", "contains_sub_container"], [73, 3, 1, "", "contains_sub_structure"], [73, 3, 1, "", "copy"], [73, 3, 1, "", "create_if_absent"], [73, 3, 1, "", "cutoff_at_depth"], [73, 3, 1, "", "cutoff_at_height"], [73, 3, 1, "", "deep_copy"], [73, 4, 1, "", "dev"], [73, 3, 1, "", "dev_clone"], [73, 3, 1, "", "dev_dist"], [73, 4, 1, "", "dev_str"], [73, 3, 1, "", "diff"], [73, 3, 1, "", "dtype"], [73, 3, 1, "", "einops_rearrange"], [73, 3, 1, "", "einops_reduce"], [73, 3, 1, "", "einops_repeat"], [73, 3, 1, "", "find_sub_container"], [73, 3, 1, "", "find_sub_structure"], [73, 3, 1, "", "flatten_key_chain"], [73, 3, 1, "", "flatten_key_chains"], [73, 3, 1, "", "format_key_chains"], [73, 3, 1, "", "from_disk_as_hdf5"], [73, 3, 1, "", "from_disk_as_json"], [73, 3, 1, "", "from_disk_as_pickled"], [73, 3, 1, "", "from_flat_list"], [73, 3, 1, "", "from_numpy"], [73, 3, 1, "", "gather"], [73, 3, 1, "", "gather_nd"], [73, 3, 1, "", "h5_file_size"], [73, 3, 1, "", "handle_inplace"], [73, 3, 1, "", "has_key"], [73, 3, 1, "", "has_key_chain"], [73, 3, 1, "", "has_nans"], [73, 3, 1, "", "identical"], [73, 3, 1, "", "identical_array_shapes"], [73, 3, 1, "", "identical_configs"], [73, 3, 1, "", "identical_structure"], [73, 3, 1, "", "if_exists"], [73, 3, 1, "", "inplace_update"], [73, 4, 1, "", "ivy"], [73, 3, 1, "", "key_chains_containing"], [73, 3, 1, "", "list_join"], [73, 3, 1, "", "list_stack"], [73, 3, 1, "", "map"], [73, 3, 1, "", "map_conts"], [73, 3, 1, "", "matrix_norm"], [73, 4, 1, "", "max_depth"], [73, 3, 1, "", "maximum"], [73, 3, 1, "", "minimum"], [73, 3, 1, "", "multi_map"], [73, 3, 1, "", "multi_map_in_static_method"], [73, 3, 1, "", "num_arrays"], [73, 3, 1, "", "overwrite_at_key_chain"], [73, 3, 1, "", "overwrite_at_key_chains"], [73, 3, 1, "", "prune_empty"], [73, 3, 1, "", "prune_key_chain"], [73, 3, 1, "", "prune_key_chains"], [73, 3, 1, "", "prune_key_from_key_chains"], [73, 3, 1, "", "prune_keys"], [73, 3, 1, "", "prune_keys_from_key_chains"], [73, 3, 1, "", "reduce"], [73, 3, 1, "", "remove_key_length_limit"], [73, 3, 1, "", "remove_print_limit"], [73, 3, 1, "", "reshape_like"], [73, 3, 1, "", "restructure"], [73, 3, 1, "", "restructure_key_chains"], [73, 3, 1, "", "set_at_key_chain"], [73, 3, 1, "", "set_at_key_chains"], [73, 3, 1, "", "set_at_keys"], [73, 3, 1, "", "set_framework"], [73, 3, 1, "", "set_ivy_backend"], [73, 4, 1, "", "shape"], [73, 4, 1, "", "shapes"], [73, 3, 1, "", "show"], [73, 3, 1, "", "show_sub_container"], [73, 3, 1, "", "shuffle"], [73, 3, 1, "", "shuffle_h5_file"], [73, 3, 1, "", "size_ordered_arrays"], [73, 3, 1, "", "slice_keys"], [73, 3, 1, "", "slice_via_key"], [73, 3, 1, "", "sort_by_key"], [73, 3, 1, "", "split"], [73, 3, 1, "", "stop_gradients"], [73, 3, 1, "", "structural_diff"], [73, 3, 1, "", "to_device"], [73, 3, 1, "", "to_dict"], [73, 3, 1, "", "to_disk_as_hdf5"], [73, 3, 1, "", "to_disk_as_json"], [73, 3, 1, "", "to_disk_as_pickled"], [73, 3, 1, "", "to_flat_list"], [73, 3, 1, "", "to_iterator"], [73, 3, 1, "", "to_iterator_keys"], [73, 3, 1, "", "to_iterator_values"], [73, 3, 1, "", "to_ivy"], [73, 3, 1, "", "to_jsonable"], [73, 3, 1, "", "to_list"], [73, 3, 1, "", "to_multi_dev"], [73, 3, 1, "", "to_native"], [73, 3, 1, "", "to_numpy"], [73, 3, 1, "", "to_raw"], [73, 3, 1, "", "trim_key"], [73, 3, 1, "", "try_kc"], [73, 3, 1, "", "unify"], [73, 3, 1, "", "unstack"], [73, 3, 1, "", "update_config"], [73, 3, 1, "", "vector_norm"], [73, 3, 1, "", "with_default_key_color"], [73, 3, 1, "", "with_entries_as_lists"], [73, 3, 1, "", "with_ivy_backend"], [73, 3, 1, "", "with_key_length_limit"], [73, 3, 1, "", "with_print_indent"], [73, 3, 1, "", "with_print_limit"], [73, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[75, 2, 1, "", "Container"], [76, 2, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[75, 3, 1, "", "__add__"], [75, 3, 1, "", "__init__"], [75, 3, 1, "", "__radd__"], [75, 3, 1, "", "arange"], [75, 3, 1, "", "arg_info"], [75, 3, 1, "", "arg_names"], [75, 3, 1, "", "argmax"], [75, 3, 1, "", "argmin"], [75, 3, 1, "", "array"], [75, 3, 1, "", "array_equal"], [75, 3, 1, "", "arrays_equal"], [75, 3, 1, "", "as_ivy_dev"], [75, 3, 1, "", "as_ivy_dtype"], [75, 3, 1, "", "as_native_dev"], [75, 3, 1, "", "as_native_dtype"], [75, 3, 1, "", "assert_supports_inplace"], [75, 3, 1, "", "cache_fn"], [75, 3, 1, "", "clear_mem_on_dev"], [75, 3, 1, "", "clip_matrix_norm"], [75, 3, 1, "", "closest_valid_dtype"], [75, 3, 1, "", "container_types"], [75, 3, 1, "", "conv1d"], [75, 3, 1, "", "conv1d_transpose"], [75, 3, 1, "", "conv2d"], [75, 3, 1, "", "conv2d_transpose"], [75, 3, 1, "", "conv3d"], [75, 3, 1, "", "conv3d_transpose"], [75, 3, 1, "", "copy_array"], [75, 3, 1, "", "cross"], [75, 3, 1, "", "cumprod"], [75, 3, 1, "", "cumsum"], [75, 3, 1, "", "current_backend"], [75, 3, 1, "", "current_backend_str"], [75, 3, 1, "", "default"], [75, 3, 1, "", "default_device"], [75, 3, 1, "", "default_dtype"], [75, 3, 1, "", "default_float_dtype"], [75, 3, 1, "", "default_int_dtype"], [75, 3, 1, "", "depthwise_conv2d"], [75, 3, 1, "", "det"], [75, 3, 1, "", "dev_clone_array"], [75, 3, 1, "", "dev_clone_iter"], [75, 3, 1, "", "dev_clone_nest"], [75, 3, 1, "", "dev_dist_array"], [75, 3, 1, "", "dev_dist_iter"], [75, 3, 1, "", "dev_dist_nest"], [75, 3, 1, "", "dev_unify"], [75, 3, 1, "", "dev_unify_array"], [75, 3, 1, "", "dev_unify_iter"], [75, 3, 1, "", "dev_unify_nest"], [75, 3, 1, "", "dev_util"], [75, 3, 1, "", "diagonal"], [75, 3, 1, "", "dropout"], [75, 3, 1, "", "dtype_bits"], [75, 3, 1, "", "eigh"], [75, 3, 1, "", "eigvalsh"], [75, 3, 1, "", "empty"], [75, 3, 1, "", "execute_with_gradients"], [75, 3, 1, "", "exists"], [75, 3, 1, "", "eye"], [75, 3, 1, "", "floormod"], [75, 3, 1, "", "fourier_encode"], [75, 3, 1, "", "full"], [75, 3, 1, "", "function_supported_dtypes"], [75, 3, 1, "", "function_unsupported_dtypes"], [75, 3, 1, "", "gelu"], [75, 3, 1, "", "get_all_arrays_in_memory"], [75, 3, 1, "", "get_all_ivy_arrays_on_dev"], [75, 3, 1, "", "get_min_base"], [75, 3, 1, "", "get_min_denominator"], [75, 3, 1, "", "get_num_dims"], [75, 3, 1, "", "get_referrers_recursive"], [75, 3, 1, "", "gpu_is_available"], [75, 3, 1, "", "handle_nestable"], [75, 3, 1, "", "handle_out_argument"], [75, 3, 1, "", "indices_where"], [75, 3, 1, "", "infer_device"], [75, 3, 1, "", "infer_dtype"], [75, 3, 1, "", "inplace_arrays_supported"], [75, 3, 1, "", "inplace_decrement"], [75, 3, 1, "", "inplace_increment"], [75, 3, 1, "", "inplace_variables_supported"], [75, 3, 1, "", "inputs_to_native_arrays"], [75, 3, 1, "", "inv"], [75, 3, 1, "", "invalid_dtype"], [75, 3, 1, "", "is_ivy_container"], [75, 3, 1, "", "leaky_relu"], [75, 3, 1, "", "linear"], [75, 3, 1, "", "linspace"], [75, 3, 1, "", "logspace"], [75, 3, 1, "", "lstm_update"], [75, 3, 1, "", "match_kwargs"], [75, 3, 1, "", "matrix_power"], [75, 3, 1, "", "matrix_rank"], [75, 3, 1, "", "matrix_transpose"], [75, 3, 1, "", "multi_head_attention"], [75, 3, 1, "", "multinomial"], [75, 3, 1, "", "multiprocessing"], [75, 3, 1, "", "nonzero"], [75, 3, 1, "", "num_arrays_in_memory"], [75, 3, 1, "", "num_cpu_cores"], [75, 3, 1, "", "num_gpus"], [75, 3, 1, "", "num_ivy_arrays_on_dev"], [75, 3, 1, "", "one_hot"], [75, 3, 1, "", "ones"], [75, 3, 1, "", "outer"], [75, 3, 1, "", "outputs_to_ivy_arrays"], [75, 3, 1, "", "percent_used_mem_on_dev"], [75, 3, 1, "", "pinv"], [75, 3, 1, "", "print_all_arrays_in_memory"], [75, 3, 1, "", "print_all_ivy_arrays_on_dev"], [75, 3, 1, "", "promote_types"], [75, 3, 1, "", "qr"], [75, 3, 1, "", "queue_timeout"], [75, 3, 1, "", "randint"], [75, 3, 1, "", "random_normal"], [75, 3, 1, "", "relu"], [75, 3, 1, "", "scaled_dot_product_attention"], [75, 3, 1, "", "scatter_flat"], [75, 3, 1, "", "scatter_nd"], [75, 3, 1, "", "seed"], [75, 3, 1, "", "set_default_device"], [75, 3, 1, "", "set_default_dtype"], [75, 3, 1, "", "set_default_float_dtype"], [75, 3, 1, "", "set_default_int_dtype"], [75, 3, 1, "", "set_min_base"], [75, 3, 1, "", "set_min_denominator"], [75, 3, 1, "", "set_queue_timeout"], [75, 3, 1, "", "set_shape_array_mode"], [75, 3, 1, "", "set_split_factor"], [75, 3, 1, "", "set_tmp_dir"], [75, 3, 1, "", "set_with_grads"], [75, 3, 1, "", "shape_array_mode"], [75, 3, 1, "", "shape_to_tuple"], [75, 3, 1, "", "sigmoid"], [75, 3, 1, "", "slogdet"], [75, 3, 1, "", "softmax"], [75, 3, 1, "", "solve"], [75, 3, 1, "", "split_factor"], [75, 3, 1, "", "split_func_call"], [75, 3, 1, "", "stable_divide"], [75, 3, 1, "", "stable_pow"], [75, 3, 1, "", "static_acos"], [75, 3, 1, "", "static_acosh"], [75, 3, 1, "", "static_arg_info"], [75, 3, 1, "", "static_arg_names"], [75, 3, 1, "", "static_argmax"], [75, 3, 1, "", "static_argmin"], [75, 3, 1, "", "static_array"], [75, 3, 1, "", "static_array_equal"], [75, 3, 1, "", "static_arrays_equal"], [75, 3, 1, "", "static_as_ivy_dev"], [75, 3, 1, "", "static_as_ivy_dtype"], [75, 3, 1, "", "static_as_native_dev"], [75, 3, 1, "", "static_as_native_dtype"], [75, 3, 1, "", "static_asin"], [75, 3, 1, "", "static_assert_supports_inplace"], [75, 3, 1, "", "static_atan"], [75, 3, 1, "", "static_atan2"], [75, 3, 1, "", "static_atanh"], [75, 3, 1, "", "static_bitwise_and"], [75, 3, 1, "", "static_bitwise_invert"], [75, 3, 1, "", "static_bitwise_left_shift"], [75, 3, 1, "", "static_bitwise_or"], [75, 3, 1, "", "static_bitwise_right_shift"], [75, 3, 1, "", "static_bitwise_xor"], [75, 3, 1, "", "static_cache_fn"], [75, 3, 1, "", "static_ceil"], [75, 3, 1, "", "static_clear_mem_on_dev"], [75, 3, 1, "", "static_clip_matrix_norm"], [75, 3, 1, "", "static_clip_vector_norm"], [75, 3, 1, "", "static_closest_valid_dtype"], [75, 3, 1, "", "static_concat"], [75, 3, 1, "", "static_constant_pad"], [75, 3, 1, "", "static_container_types"], [75, 3, 1, "", "static_conv1d"], [75, 3, 1, "", "static_conv1d_transpose"], [75, 3, 1, "", "static_conv2d"], [75, 3, 1, "", "static_conv2d_transpose"], [75, 3, 1, "", "static_conv3d"], [75, 3, 1, "", "static_conv3d_transpose"], [75, 3, 1, "", "static_copy_array"], [75, 3, 1, "", "static_cos"], [75, 3, 1, "", "static_cosh"], [75, 3, 1, "", "static_cross"], [75, 3, 1, "", "static_cumprod"], [75, 3, 1, "", "static_cumsum"], [75, 3, 1, "", "static_current_backend"], [75, 3, 1, "", "static_current_backend_str"], [75, 3, 1, "", "static_default"], [75, 3, 1, "", "static_default_device"], [75, 3, 1, "", "static_default_dtype"], [75, 3, 1, "", "static_default_float_dtype"], [75, 3, 1, "", "static_default_int_dtype"], [75, 3, 1, "", "static_depthwise_conv2d"], [75, 3, 1, "", "static_det"], [75, 3, 1, "", "static_dev"], [75, 3, 1, "", "static_dev_clone"], [75, 3, 1, "", "static_dev_clone_array"], [75, 3, 1, "", "static_dev_clone_iter"], [75, 3, 1, "", "static_dev_clone_nest"], [75, 3, 1, "", "static_dev_dist"], [75, 3, 1, "", "static_dev_dist_array"], [75, 3, 1, "", "static_dev_dist_iter"], [75, 3, 1, "", "static_dev_dist_nest"], [75, 3, 1, "", "static_dev_unify"], [75, 3, 1, "", "static_dev_unify_array"], [75, 3, 1, "", "static_dev_unify_iter"], [75, 3, 1, "", "static_dev_unify_nest"], [75, 3, 1, "", "static_dev_util"], [75, 3, 1, "", "static_diagonal"], [75, 3, 1, "", "static_dropout"], [75, 3, 1, "", "static_dtype"], [75, 3, 1, "", "static_dtype_bits"], [75, 3, 1, "", "static_eigh"], [75, 3, 1, "", "static_eigvalsh"], [75, 3, 1, "", "static_einops_rearrange"], [75, 3, 1, "", "static_einops_reduce"], [75, 3, 1, "", "static_einops_repeat"], [75, 3, 1, "", "static_einsum"], [75, 3, 1, "", "static_empty"], [75, 3, 1, "", "static_equal"], [75, 3, 1, "", "static_erf"], [75, 3, 1, "", "static_execute_with_gradients"], [75, 3, 1, "", "static_exists"], [75, 3, 1, "", "static_exp"], [75, 3, 1, "", "static_expand_dims"], [75, 3, 1, "", "static_expm1"], [75, 3, 1, "", "static_flip"], [75, 3, 1, "", "static_floor"], [75, 3, 1, "", "static_floor_divide"], [75, 3, 1, "", "static_floormod"], [75, 3, 1, "", "static_fourier_encode"], [75, 3, 1, "", "static_full"], [75, 3, 1, "", "static_function_supported_dtypes"], [75, 3, 1, "", "static_function_unsupported_dtypes"], [75, 3, 1, "", "static_gather"], [75, 3, 1, "", "static_gelu"], [75, 3, 1, "", "static_get_all_arrays_in_memory"], [75, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [75, 3, 1, "", "static_get_min_base"], [75, 3, 1, "", "static_get_min_denominator"], [75, 3, 1, "", "static_get_num_dims"], [75, 3, 1, "", "static_get_referrers_recursive"], [75, 3, 1, "", "static_gpu_is_available"], [75, 3, 1, "", "static_greater"], [75, 3, 1, "", "static_greater_equal"], [75, 3, 1, "", "static_handle_nestable"], [75, 3, 1, "", "static_handle_out_argument"], [75, 3, 1, "", "static_has_nans"], [75, 3, 1, "", "static_indices_where"], [75, 3, 1, "", "static_infer_device"], [75, 3, 1, "", "static_infer_dtype"], [75, 3, 1, "", "static_inplace_arrays_supported"], [75, 3, 1, "", "static_inplace_decrement"], [75, 3, 1, "", "static_inplace_increment"], [75, 3, 1, "", "static_inplace_update"], [75, 3, 1, "", "static_inplace_variables_supported"], [75, 3, 1, "", "static_inputs_to_native_arrays"], [75, 3, 1, "", "static_inv"], [75, 3, 1, "", "static_invalid_dtype"], [75, 3, 1, "", "static_is_array"], [75, 3, 1, "", "static_is_ivy_array"], [75, 3, 1, "", "static_is_ivy_container"], [75, 3, 1, "", "static_is_native_array"], [75, 3, 1, "", "static_isfinite"], [75, 3, 1, "", "static_isinf"], [75, 3, 1, "", "static_isnan"], [75, 3, 1, "", "static_leaky_relu"], [75, 3, 1, "", "static_less"], [75, 3, 1, "", "static_less_equal"], [75, 3, 1, "", "static_linear"], [75, 3, 1, "", "static_log"], [75, 3, 1, "", "static_log10"], [75, 3, 1, "", "static_log1p"], [75, 3, 1, "", "static_log2"], [75, 3, 1, "", "static_logaddexp"], [75, 3, 1, "", "static_logical_and"], [75, 3, 1, "", "static_logical_not"], [75, 3, 1, "", "static_logical_or"], [75, 3, 1, "", "static_logical_xor"], [75, 3, 1, "", "static_lstm_update"], [75, 3, 1, "", "static_match_kwargs"], [75, 3, 1, "", "static_matmul"], [75, 3, 1, "", "static_matrix_norm"], [75, 3, 1, "", "static_matrix_power"], [75, 3, 1, "", "static_matrix_rank"], [75, 3, 1, "", "static_matrix_transpose"], [75, 3, 1, "", "static_max"], [75, 3, 1, "", "static_maximum"], [75, 3, 1, "", "static_mean"], [75, 3, 1, "", "static_min"], [75, 3, 1, "", "static_minimum"], [75, 3, 1, "", "static_multi_head_attention"], [75, 3, 1, "", "static_multinomial"], [75, 3, 1, "", "static_multiprocessing"], [75, 3, 1, "", "static_negative"], [75, 3, 1, "", "static_nonzero"], [75, 3, 1, "", "static_not_equal"], [75, 3, 1, "", "static_num_arrays_in_memory"], [75, 3, 1, "", "static_num_cpu_cores"], [75, 3, 1, "", "static_num_gpus"], [75, 3, 1, "", "static_num_ivy_arrays_on_dev"], [75, 3, 1, "", "static_one_hot"], [75, 3, 1, "", "static_outer"], [75, 3, 1, "", "static_outputs_to_ivy_arrays"], [75, 3, 1, "", "static_percent_used_mem_on_dev"], [75, 3, 1, "", "static_permute_dims"], [75, 3, 1, "", "static_pinv"], [75, 3, 1, "", "static_positive"], [75, 3, 1, "", "static_pow"], [75, 3, 1, "", "static_print_all_arrays_in_memory"], [75, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [75, 3, 1, "", "static_prod"], [75, 3, 1, "", "static_promote_types"], [75, 3, 1, "", "static_qr"], [75, 3, 1, "", "static_queue_timeout"], [75, 3, 1, "", "static_random_normal"], [75, 3, 1, "", "static_relu"], [75, 3, 1, "", "static_remainder"], [75, 3, 1, "", "static_repeat"], [75, 3, 1, "", "static_reshape"], [75, 3, 1, "", "static_round"], [75, 3, 1, "", "static_scaled_dot_product_attention"], [75, 3, 1, "", "static_scatter_flat"], [75, 3, 1, "", "static_scatter_nd"], [75, 3, 1, "", "static_seed"], [75, 3, 1, "", "static_set_default_device"], [75, 3, 1, "", "static_set_default_dtype"], [75, 3, 1, "", "static_set_default_float_dtype"], [75, 3, 1, "", "static_set_default_int_dtype"], [75, 3, 1, "", "static_set_min_base"], [75, 3, 1, "", "static_set_min_denominator"], [75, 3, 1, "", "static_set_queue_timeout"], [75, 3, 1, "", "static_set_shape_array_mode"], [75, 3, 1, "", "static_set_split_factor"], [75, 3, 1, "", "static_set_tmp_dir"], [75, 3, 1, "", "static_set_with_grads"], [75, 3, 1, "", "static_shape"], [75, 3, 1, "", "static_shape_array_mode"], [75, 3, 1, "", "static_shape_to_tuple"], [75, 3, 1, "", "static_shuffle"], [75, 3, 1, "", "static_sigmoid"], [75, 3, 1, "", "static_sin"], [75, 3, 1, "", "static_sinh"], [75, 3, 1, "", "static_slogdet"], [75, 3, 1, "", "static_softmax"], [75, 3, 1, "", "static_solve"], [75, 3, 1, "", "static_split"], [75, 3, 1, "", "static_split_factor"], [75, 3, 1, "", "static_split_func_call"], [75, 3, 1, "", "static_sqrt"], [75, 3, 1, "", "static_square"], [75, 3, 1, "", "static_squeeze"], [75, 3, 1, "", "static_stable_divide"], [75, 3, 1, "", "static_stable_pow"], [75, 3, 1, "", "static_stack"], [75, 3, 1, "", "static_std"], [75, 3, 1, "", "static_stop_gradient"], [75, 3, 1, "", "static_sum"], [75, 3, 1, "", "static_supports_inplace"], [75, 3, 1, "", "static_svd"], [75, 3, 1, "", "static_svdvals"], [75, 3, 1, "", "static_swapaxes"], [75, 3, 1, "", "static_tensordot"], [75, 3, 1, "", "static_tile"], [75, 3, 1, "", "static_tmp_dir"], [75, 3, 1, "", "static_to_device"], [75, 3, 1, "", "static_to_list"], [75, 3, 1, "", "static_to_native_arrays_and_back"], [75, 3, 1, "", "static_to_numpy"], [75, 3, 1, "", "static_to_scalar"], [75, 3, 1, "", "static_total_mem_on_dev"], [75, 3, 1, "", "static_tpu_is_available"], [75, 3, 1, "", "static_trace"], [75, 3, 1, "", "static_trunc"], [75, 3, 1, "", "static_try_else_none"], [75, 3, 1, "", "static_type_promote_arrays"], [75, 3, 1, "", "static_unique_all"], [75, 3, 1, "", "static_unique_inverse"], [75, 3, 1, "", "static_unique_values"], [75, 3, 1, "", "static_unset_default_device"], [75, 3, 1, "", "static_unset_default_dtype"], [75, 3, 1, "", "static_unset_default_float_dtype"], [75, 3, 1, "", "static_unset_default_int_dtype"], [75, 3, 1, "", "static_unset_shape_array_mode"], [75, 3, 1, "", "static_unset_with_grads"], [75, 3, 1, "", "static_unstack"], [75, 3, 1, "", "static_used_mem_on_dev"], [75, 3, 1, "", "static_valid_dtype"], [75, 3, 1, "", "static_value_is_nan"], [75, 3, 1, "", "static_var"], [75, 3, 1, "", "static_variable"], [75, 3, 1, "", "static_variable_data"], [75, 3, 1, "", "static_vecdot"], [75, 3, 1, "", "static_vector_norm"], [75, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [75, 3, 1, "", "static_where"], [75, 3, 1, "", "static_with_grads"], [75, 3, 1, "", "static_zero_pad"], [75, 3, 1, "", "stop_gradient"], [75, 3, 1, "", "supports_inplace"], [75, 3, 1, "", "svd"], [75, 3, 1, "", "svdvals"], [75, 3, 1, "", "tensordot"], [75, 3, 1, "", "tmp_dir"], [75, 3, 1, "", "to_native_arrays_and_back"], [75, 3, 1, "", "to_scalar"], [75, 3, 1, "", "total_mem_on_dev"], [75, 3, 1, "", "tpu_is_available"], [75, 3, 1, "", "trace"], [75, 3, 1, "", "try_else_none"], [75, 3, 1, "", "type_promote_arrays"], [75, 3, 1, "", "unique_all"], [75, 3, 1, "", "unique_inverse"], [75, 3, 1, "", "unique_values"], [75, 3, 1, "", "unset_default_device"], [75, 3, 1, "", "unset_default_dtype"], [75, 3, 1, "", "unset_default_float_dtype"], [75, 3, 1, "", "unset_default_int_dtype"], [75, 3, 1, "", "unset_shape_array_mode"], [75, 3, 1, "", "unset_with_grads"], [75, 3, 1, "", "used_mem_on_dev"], [75, 3, 1, "", "valid_dtype"], [75, 3, 1, "", "value_is_nan"], [75, 3, 1, "", "variable"], [75, 3, 1, "", "variable_data"], [75, 3, 1, "", "vecdot"], [75, 3, 1, "", "vector_to_skew_symmetric_matrix"], [75, 3, 1, "", "where"], [75, 3, 1, "", "with_grads"], [75, 3, 1, "", "zeros"]], "ivy.container.container.MultiDevContainer": [[76, 3, 1, "", "__init__"], [76, 3, 1, "", "at_dev"], [76, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[371, 1, 1, "", "abs"], [376, 1, 1, "", "acos"], [380, 1, 1, "", "acosh"], [689, 1, 1, "", "adam_step"], [693, 1, 1, "", "adam_update"], [384, 1, 1, "", "add"], [985, 1, 1, "", "all"], [611, 1, 1, "", "all_equal"], [990, 1, 1, "", "any"], [941, 1, 1, "", "argsort"], [181, 1, 1, "", "asarray"], [389, 1, 1, "", "asin"], [393, 1, 1, "", "asinh"], [254, 1, 1, "", "astype"], [398, 1, 1, "", "atan"], [402, 1, 1, "", "atan2"], [406, 1, 1, "", "atanh"], [811, 1, 1, "", "binary_cross_entropy"], [410, 1, 1, "", "bitwise_and"], [414, 1, 1, "", "bitwise_invert"], [418, 1, 1, "", "bitwise_left_shift"], [422, 1, 1, "", "bitwise_or"], [426, 1, 1, "", "bitwise_right_shift"], [430, 1, 1, "", "bitwise_xor"], [259, 1, 1, "", "broadcast_arrays"], [264, 1, 1, "", "broadcast_to"], [269, 1, 1, "", "can_cast"], [434, 1, 1, "", "ceil"], [739, 1, 1, "", "cholesky"], [827, 1, 1, "", "clip"], [622, 1, 1, "", "clip_vector_norm"], [832, 1, 1, "", "concat"], [836, 1, 1, "", "constant_pad"], [438, 1, 1, "", "cos"], [442, 1, 1, "", "cosh"], [816, 1, 1, "", "cross_entropy"], [446, 1, 1, "", "divide"], [278, 1, 1, "", "dtype"], [952, 1, 1, "", "einsum"], [187, 1, 1, "", "empty_like"], [451, 1, 1, "", "equal"], [455, 1, 1, "", "erf"], [459, 1, 1, "", "exp"], [840, 1, 1, "", "expand_dims"], [463, 1, 1, "", "expm1"], [283, 1, 1, "", "finfo"], [844, 1, 1, "", "flip"], [467, 1, 1, "", "floor"], [471, 1, 1, "", "floor_divide"], [195, 1, 1, "", "from_dlpack"], [201, 1, 1, "", "full_like"], [639, 1, 1, "", "gather_nd"], [698, 1, 1, "", "gradient_descent_update"], [475, 1, 1, "", "greater"], [479, 1, 1, "", "greater_equal"], [290, 1, 1, "", "iinfo"], [296, 1, 1, "", "is_float_dtype"], [301, 1, 1, "", "is_int_dtype"], [702, 1, 1, "", "is_variable"], [483, 1, 1, "", "isfinite"], [487, 1, 1, "", "isinf"], [491, 1, 1, "", "isnan"], [706, 1, 1, "", "lamb_update"], [710, 1, 1, "", "lars_update"], [909, 1, 1, "", "layer_norm"], [495, 1, 1, "", "less"], [499, 1, 1, "", "less_equal"], [503, 1, 1, "", "log"], [507, 1, 1, "", "log10"], [511, 1, 1, "", "log1p"], [515, 1, 1, "", "log2"], [519, 1, 1, "", "logaddexp"], [523, 1, 1, "", "logical_and"], [527, 1, 1, "", "logical_not"], [531, 1, 1, "", "logical_or"], [535, 1, 1, "", "logical_xor"], [762, 1, 1, "", "matmul"], [956, 1, 1, "", "max"], [960, 1, 1, "", "mean"], [212, 1, 1, "", "meshgrid"], [964, 1, 1, "", "min"], [541, 1, 1, "", "multiply"], [217, 1, 1, "", "native_array"], [546, 1, 1, "", "negative"], [550, 1, 1, "", "not_equal"], [225, 1, 1, "", "ones_like"], [714, 1, 1, "", "optimizer_update"], [848, 1, 1, "", "permute_dims"], [554, 1, 1, "", "positive"], [558, 1, 1, "", "pow"], [968, 1, 1, "", "prod"], [919, 1, 1, "", "random_uniform"], [562, 1, 1, "", "remainder"], [852, 1, 1, "", "repeat"], [856, 1, 1, "", "reshape"], [307, 1, 1, "", "result_type"], [860, 1, 1, "", "roll"], [566, 1, 1, "", "round"], [570, 1, 1, "", "sign"], [575, 1, 1, "", "sin"], [579, 1, 1, "", "sinh"], [168, 1, 1, "", "softplus"], [946, 1, 1, "", "sort"], [821, 1, 1, "", "sparse_cross_entropy"], [583, 1, 1, "", "sqrt"], [587, 1, 1, "", "square"], [866, 1, 1, "", "squeeze"], [870, 1, 1, "", "stack"], [373, 1, 1, "", "static_abs"], [691, 1, 1, "", "static_adam_step"], [695, 1, 1, "", "static_adam_update"], [386, 1, 1, "", "static_add"], [987, 1, 1, "", "static_all"], [613, 1, 1, "", "static_all_equal"], [992, 1, 1, "", "static_any"], [178, 1, 1, "", "static_arange"], [943, 1, 1, "", "static_argsort"], [183, 1, 1, "", "static_asarray"], [395, 1, 1, "", "static_asinh"], [256, 1, 1, "", "static_astype"], [813, 1, 1, "", "static_binary_cross_entropy"], [261, 1, 1, "", "static_broadcast_arrays"], [266, 1, 1, "", "static_broadcast_to"], [271, 1, 1, "", "static_can_cast"], [741, 1, 1, "", "static_cholesky"], [829, 1, 1, "", "static_clip"], [818, 1, 1, "", "static_cross_entropy"], [448, 1, 1, "", "static_divide"], [189, 1, 1, "", "static_empty_like"], [192, 1, 1, "", "static_eye"], [285, 1, 1, "", "static_finfo"], [197, 1, 1, "", "static_from_dlpack"], [203, 1, 1, "", "static_full_like"], [641, 1, 1, "", "static_gather_nd"], [700, 1, 1, "", "static_gradient_descent_update"], [292, 1, 1, "", "static_iinfo"], [298, 1, 1, "", "static_is_float_dtype"], [303, 1, 1, "", "static_is_int_dtype"], [704, 1, 1, "", "static_is_variable"], [708, 1, 1, "", "static_lamb_update"], [712, 1, 1, "", "static_lars_update"], [911, 1, 1, "", "static_layer_norm"], [206, 1, 1, "", "static_linspace"], [209, 1, 1, "", "static_logspace"], [214, 1, 1, "", "static_meshgrid"], [543, 1, 1, "", "static_multiply"], [219, 1, 1, "", "static_native_array"], [222, 1, 1, "", "static_ones"], [227, 1, 1, "", "static_ones_like"], [716, 1, 1, "", "static_optimizer_update"], [916, 1, 1, "", "static_randint"], [921, 1, 1, "", "static_random_uniform"], [309, 1, 1, "", "static_result_type"], [862, 1, 1, "", "static_roll"], [572, 1, 1, "", "static_sign"], [170, 1, 1, "", "static_softplus"], [948, 1, 1, "", "static_sort"], [823, 1, 1, "", "static_sparse_cross_entropy"], [590, 1, 1, "", "static_subtract"], [595, 1, 1, "", "static_tan"], [600, 1, 1, "", "static_tanh"], [229, 1, 1, "", "static_tril"], [234, 1, 1, "", "static_triu"], [932, 1, 1, "", "static_unique_counts"], [239, 1, 1, "", "static_zeros"], [242, 1, 1, "", "static_zeros_like"], [972, 1, 1, "", "std"], [592, 1, 1, "", "subtract"], [976, 1, 1, "", "sum"], [874, 1, 1, "", "swapaxes"], [597, 1, 1, "", "tan"], [602, 1, 1, "", "tanh"], [878, 1, 1, "", "tile"], [231, 1, 1, "", "tril"], [236, 1, 1, "", "triu"], [606, 1, 1, "", "trunc"], [934, 1, 1, "", "unique_counts"], [980, 1, 1, "", "var"], [882, 1, 1, "", "zero_pad"], [244, 1, 1, "", "zeros_like"]], "ivy.container.creation": [[78, 2, 1, "", "ContainerWithCreation"]], "ivy.container.creation.ContainerWithCreation": [[78, 3, 1, "", "asarray"], [78, 3, 1, "", "empty_like"], [78, 3, 1, "", "from_dlpack"], [78, 3, 1, "", "full_like"], [78, 3, 1, "", "meshgrid"], [78, 3, 1, "", "native_array"], [78, 3, 1, "", "ones_like"], [78, 3, 1, "", "static_arange"], [78, 3, 1, "", "static_asarray"], [78, 3, 1, "", "static_empty_like"], [78, 3, 1, "", "static_eye"], [78, 3, 1, "", "static_from_dlpack"], [78, 3, 1, "", "static_full_like"], [78, 3, 1, "", "static_linspace"], [78, 3, 1, "", "static_logspace"], [78, 3, 1, "", "static_meshgrid"], [78, 3, 1, "", "static_native_array"], [78, 3, 1, "", "static_ones"], [78, 3, 1, "", "static_ones_like"], [78, 3, 1, "", "static_tril"], [78, 3, 1, "", "static_triu"], [78, 3, 1, "", "static_zeros"], [78, 3, 1, "", "static_zeros_like"], [78, 3, 1, "", "tril"], [78, 3, 1, "", "triu"], [78, 3, 1, "", "zeros_like"]], "ivy.container.data_type": [[80, 2, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_type.ContainerWithDataTypes": [[80, 3, 1, "", "astype"], [80, 3, 1, "", "broadcast_arrays"], [80, 3, 1, "", "broadcast_to"], [80, 3, 1, "", "can_cast"], [80, 3, 1, "", "dtype"], [80, 3, 1, "", "finfo"], [80, 3, 1, "", "iinfo"], [80, 3, 1, "", "is_float_dtype"], [80, 3, 1, "", "is_int_dtype"], [80, 3, 1, "", "result_type"], [80, 3, 1, "", "static_astype"], [80, 3, 1, "", "static_broadcast_arrays"], [80, 3, 1, "", "static_broadcast_to"], [80, 3, 1, "", "static_can_cast"], [80, 3, 1, "", "static_finfo"], [80, 3, 1, "", "static_iinfo"], [80, 3, 1, "", "static_is_float_dtype"], [80, 3, 1, "", "static_is_int_dtype"], [80, 3, 1, "", "static_result_type"]], "ivy.container.device": [[82, 2, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[84, 2, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[84, 3, 1, "", "abs"], [84, 3, 1, "", "acos"], [84, 3, 1, "", "acosh"], [84, 3, 1, "", "add"], [84, 3, 1, "", "asin"], [84, 3, 1, "", "asinh"], [84, 3, 1, "", "atan"], [84, 3, 1, "", "atan2"], [84, 3, 1, "", "atanh"], [84, 3, 1, "", "bitwise_and"], [84, 3, 1, "", "bitwise_invert"], [84, 3, 1, "", "bitwise_left_shift"], [84, 3, 1, "", "bitwise_or"], [84, 3, 1, "", "bitwise_right_shift"], [84, 3, 1, "", "bitwise_xor"], [84, 3, 1, "", "ceil"], [84, 3, 1, "", "cos"], [84, 3, 1, "", "cosh"], [84, 3, 1, "", "divide"], [84, 3, 1, "", "equal"], [84, 3, 1, "", "erf"], [84, 3, 1, "", "exp"], [84, 3, 1, "", "expm1"], [84, 3, 1, "", "floor"], [84, 3, 1, "", "floor_divide"], [84, 3, 1, "", "greater"], [84, 3, 1, "", "greater_equal"], [84, 3, 1, "", "isfinite"], [84, 3, 1, "", "isinf"], [84, 3, 1, "", "isnan"], [84, 3, 1, "", "less"], [84, 3, 1, "", "less_equal"], [84, 3, 1, "", "log"], [84, 3, 1, "", "log10"], [84, 3, 1, "", "log1p"], [84, 3, 1, "", "log2"], [84, 3, 1, "", "logaddexp"], [84, 3, 1, "", "logical_and"], [84, 3, 1, "", "logical_not"], [84, 3, 1, "", "logical_or"], [84, 3, 1, "", "logical_xor"], [84, 3, 1, "", "multiply"], [84, 3, 1, "", "negative"], [84, 3, 1, "", "not_equal"], [84, 3, 1, "", "positive"], [84, 3, 1, "", "pow"], [84, 3, 1, "", "remainder"], [84, 3, 1, "", "round"], [84, 3, 1, "", "sign"], [84, 3, 1, "", "sin"], [84, 3, 1, "", "sinh"], [84, 3, 1, "", "sqrt"], [84, 3, 1, "", "square"], [84, 3, 1, "", "static_abs"], [84, 3, 1, "", "static_add"], [84, 3, 1, "", "static_asinh"], [84, 3, 1, "", "static_divide"], [84, 3, 1, "", "static_multiply"], [84, 3, 1, "", "static_sign"], [84, 3, 1, "", "static_subtract"], [84, 3, 1, "", "static_tan"], [84, 3, 1, "", "static_tanh"], [84, 3, 1, "", "subtract"], [84, 3, 1, "", "tan"], [84, 3, 1, "", "tanh"], [84, 3, 1, "", "trunc"]], "ivy.container.general": [[86, 2, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[86, 3, 1, "", "all_equal"], [86, 3, 1, "", "clip_vector_norm"], [86, 3, 1, "", "gather_nd"], [86, 3, 1, "", "static_all_equal"], [86, 3, 1, "", "static_gather_nd"]], "ivy.container.gradients": [[88, 2, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[88, 3, 1, "", "adam_step"], [88, 3, 1, "", "adam_update"], [88, 3, 1, "", "gradient_descent_update"], [88, 3, 1, "", "is_variable"], [88, 3, 1, "", "lamb_update"], [88, 3, 1, "", "lars_update"], [88, 3, 1, "", "optimizer_update"], [88, 3, 1, "", "static_adam_step"], [88, 3, 1, "", "static_adam_update"], [88, 3, 1, "", "static_gradient_descent_update"], [88, 3, 1, "", "static_is_variable"], [88, 3, 1, "", "static_lamb_update"], [88, 3, 1, "", "static_lars_update"], [88, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[90, 2, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[92, 2, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[94, 2, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[94, 3, 1, "", "cholesky"], [94, 3, 1, "", "matmul"], [94, 3, 1, "", "static_cholesky"]], "ivy.container.losses": [[96, 2, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[96, 3, 1, "", "binary_cross_entropy"], [96, 3, 1, "", "cross_entropy"], [96, 3, 1, "", "sparse_cross_entropy"], [96, 3, 1, "", "static_binary_cross_entropy"], [96, 3, 1, "", "static_cross_entropy"], [96, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[98, 2, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[98, 3, 1, "", "clip"], [98, 3, 1, "", "concat"], [98, 3, 1, "", "constant_pad"], [98, 3, 1, "", "expand_dims"], [98, 3, 1, "", "flip"], [98, 3, 1, "", "permute_dims"], [98, 3, 1, "", "repeat"], [98, 3, 1, "", "reshape"], [98, 3, 1, "", "roll"], [98, 3, 1, "", "squeeze"], [98, 3, 1, "", "stack"], [98, 3, 1, "", "static_clip"], [98, 3, 1, "", "static_roll"], [98, 3, 1, "", "swapaxes"], [98, 3, 1, "", "tile"], [98, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[100, 2, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[100, 3, 1, "", "layer_norm"], [100, 3, 1, "", "static_layer_norm"]], "ivy.container.random": [[102, 2, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[102, 3, 1, "", "random_uniform"], [102, 3, 1, "", "static_randint"], [102, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[104, 2, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[106, 2, 1, "", "ContainerWithSet"]], "ivy.container.set.ContainerWithSet": [[106, 3, 1, "", "static_unique_counts"], [106, 3, 1, "", "unique_counts"]], "ivy.container.sorting": [[108, 2, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[108, 3, 1, "", "argsort"], [108, 3, 1, "", "sort"], [108, 3, 1, "", "static_argsort"], [108, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[110, 2, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[110, 3, 1, "", "einsum"], [110, 3, 1, "", "max"], [110, 3, 1, "", "mean"], [110, 3, 1, "", "min"], [110, 3, 1, "", "prod"], [110, 3, 1, "", "std"], [110, 3, 1, "", "sum"], [110, 3, 1, "", "var"]], "ivy.container.utility": [[112, 2, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[112, 3, 1, "", "all"], [112, 3, 1, "", "any"], [112, 3, 1, "", "static_all"], [112, 3, 1, "", "static_any"]], "ivy.container.wrapping": [[114, 1, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[151, 1, 1, "", "handle_nestable"], [152, 1, 1, "", "handle_out_argument"], [153, 1, 1, "", "infer_device"], [154, 1, 1, "", "infer_dtype"], [155, 1, 1, "", "inputs_to_ivy_arrays"], [156, 1, 1, "", "inputs_to_native_arrays"], [157, 1, 1, "", "outputs_to_ivy_arrays"], [158, 1, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[160, 0, 0, "-", "activations"], [172, 0, 0, "-", "compilation"], [174, 0, 0, "-", "constants"], [175, 0, 0, "-", "creation"], [246, 0, 0, "-", "data_type"], [318, 0, 0, "-", "device"], [368, 0, 0, "-", "elementwise"], [608, 0, 0, "-", "general"], [685, 0, 0, "-", "gradients"], [723, 0, 0, "-", "layers"], [736, 0, 0, "-", "linear_algebra"], [808, 0, 0, "-", "losses"], [824, 0, 0, "-", "manipulation"], [884, 0, 0, "-", "meta"], [888, 0, 0, "-", "nest"], [906, 0, 0, "-", "norms"], [912, 0, 0, "-", "random"], [924, 0, 0, "-", "searching"], [929, 0, 0, "-", "set"], [938, 0, 0, "-", "sorting"], [949, 0, 0, "-", "statistical"], [982, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[161, 1, 1, "", "gelu"], [162, 1, 1, "", "leaky_relu"], [163, 1, 1, "", "relu"], [164, 1, 1, "", "sigmoid"], [165, 1, 1, "", "softmax"], [169, 1, 1, "", "softplus"], [171, 1, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[173, 1, 1, "", "compile"]], "ivy.functional.ivy.constants": [[174, 5, 1, "", "e"], [174, 5, 1, "", "inf"], [174, 5, 1, "", "nan"], [174, 5, 1, "", "newaxis"], [174, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[177, 1, 1, "", "arange"], [175, 1, 1, "", "array"], [182, 1, 1, "", "asarray"], [184, 1, 1, "", "empty"], [188, 1, 1, "", "empty_like"], [191, 1, 1, "", "eye"], [196, 1, 1, "", "from_dlpack"], [198, 1, 1, "", "full"], [202, 1, 1, "", "full_like"], [205, 1, 1, "", "linspace"], [208, 1, 1, "", "logspace"], [213, 1, 1, "", "meshgrid"], [218, 1, 1, "", "native_array"], [221, 1, 1, "", "ones"], [226, 1, 1, "", "ones_like"], [232, 1, 1, "", "tril"], [237, 1, 1, "", "triu"], [240, 1, 1, "", "zeros"], [245, 1, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[246, 2, 1, "", "DefaultDtype"], [246, 2, 1, "", "DefaultFloatDtype"], [246, 2, 1, "", "DefaultIntDtype"], [250, 1, 1, "", "as_ivy_dtype"], [251, 1, 1, "", "as_native_dtype"], [255, 1, 1, "", "astype"], [260, 1, 1, "", "broadcast_arrays"], [265, 1, 1, "", "broadcast_to"], [270, 1, 1, "", "can_cast"], [272, 1, 1, "", "closest_valid_dtype"], [273, 1, 1, "", "default_dtype"], [274, 1, 1, "", "default_float_dtype"], [275, 1, 1, "", "default_int_dtype"], [279, 1, 1, "", "dtype"], [280, 1, 1, "", "dtype_bits"], [284, 1, 1, "", "finfo"], [286, 1, 1, "", "function_supported_dtypes"], [287, 1, 1, "", "function_unsupported_dtypes"], [291, 1, 1, "", "iinfo"], [293, 1, 1, "", "invalid_dtype"], [297, 1, 1, "", "is_float_dtype"], [302, 1, 1, "", "is_int_dtype"], [304, 1, 1, "", "promote_types"], [308, 1, 1, "", "result_type"], [310, 1, 1, "", "set_default_dtype"], [311, 1, 1, "", "set_default_float_dtype"], [312, 1, 1, "", "set_default_int_dtype"], [313, 1, 1, "", "type_promote_arrays"], [314, 1, 1, "", "unset_default_dtype"], [315, 1, 1, "", "unset_default_float_dtype"], [316, 1, 1, "", "unset_default_int_dtype"], [317, 1, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[246, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[246, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[246, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[318, 2, 1, "", "DefaultDevice"], [320, 2, 1, "", "DevClonedItem"], [321, 2, 1, "", "DevClonedIter"], [322, 2, 1, "", "DevClonedNest"], [323, 2, 1, "", "DevDistItem"], [324, 2, 1, "", "DevDistIter"], [325, 2, 1, "", "DevDistNest"], [318, 2, 1, "", "DevManager"], [327, 2, 1, "", "DevMapper"], [328, 2, 1, "", "DevMapperMultiProc"], [318, 2, 1, "", "MultiDev"], [330, 2, 1, "", "MultiDevItem"], [331, 2, 1, "", "MultiDevIter"], [332, 2, 1, "", "MultiDevNest"], [333, 2, 1, "", "Profiler"], [334, 1, 1, "", "as_ivy_dev"], [335, 1, 1, "", "as_native_dev"], [336, 1, 1, "", "clear_mem_on_dev"], [337, 1, 1, "", "default_device"], [338, 1, 1, "", "dev"], [339, 1, 1, "", "dev_clone"], [340, 1, 1, "", "dev_clone_array"], [341, 1, 1, "", "dev_clone_iter"], [342, 1, 1, "", "dev_clone_nest"], [343, 1, 1, "", "dev_dist"], [344, 1, 1, "", "dev_dist_array"], [345, 1, 1, "", "dev_dist_iter"], [346, 1, 1, "", "dev_dist_nest"], [347, 1, 1, "", "dev_unify"], [348, 1, 1, "", "dev_unify_array"], [349, 1, 1, "", "dev_unify_iter"], [350, 1, 1, "", "dev_unify_nest"], [351, 1, 1, "", "dev_util"], [352, 1, 1, "", "get_all_ivy_arrays_on_dev"], [353, 1, 1, "", "gpu_is_available"], [354, 1, 1, "", "num_cpu_cores"], [355, 1, 1, "", "num_gpus"], [356, 1, 1, "", "num_ivy_arrays_on_dev"], [357, 1, 1, "", "percent_used_mem_on_dev"], [358, 1, 1, "", "print_all_ivy_arrays_on_dev"], [359, 1, 1, "", "set_default_device"], [360, 1, 1, "", "set_split_factor"], [361, 1, 1, "", "split_factor"], [362, 1, 1, "", "split_func_call"], [363, 1, 1, "", "to_device"], [364, 1, 1, "", "total_mem_on_dev"], [365, 1, 1, "", "tpu_is_available"], [366, 1, 1, "", "unset_default_device"], [367, 1, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[318, 3, 1, "", "__enter__"], [318, 3, 1, "", "__exit__"], [318, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[318, 3, 1, "", "__init__"], [318, 3, 1, "", "da_tune_step"], [318, 4, 1, "", "dim_size"], [318, 3, 1, "", "ds_tune_step"], [318, 3, 1, "", "map"], [318, 3, 1, "", "repeated_config_check"], [318, 4, 1, "", "tune_step"], [318, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[327, 3, 1, "", "__init__"], [327, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[328, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[318, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[330, 3, 1, "", "__init__"], [330, 3, 1, "", "items"], [330, 3, 1, "", "keys"], [330, 4, 1, "", "shape"], [330, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[331, 3, 1, "", "__init__"], [331, 3, 1, "", "at_dev"], [331, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[332, 3, 1, "", "__init__"], [332, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[333, 3, 1, "", "__init__"], [333, 3, 1, "", "start"], [333, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[372, 1, 1, "", "abs"], [377, 1, 1, "", "acos"], [381, 1, 1, "", "acosh"], [385, 1, 1, "", "add"], [390, 1, 1, "", "asin"], [394, 1, 1, "", "asinh"], [399, 1, 1, "", "atan"], [403, 1, 1, "", "atan2"], [407, 1, 1, "", "atanh"], [411, 1, 1, "", "bitwise_and"], [415, 1, 1, "", "bitwise_invert"], [419, 1, 1, "", "bitwise_left_shift"], [423, 1, 1, "", "bitwise_or"], [427, 1, 1, "", "bitwise_right_shift"], [431, 1, 1, "", "bitwise_xor"], [435, 1, 1, "", "ceil"], [439, 1, 1, "", "cos"], [443, 1, 1, "", "cosh"], [447, 1, 1, "", "divide"], [452, 1, 1, "", "equal"], [456, 1, 1, "", "erf"], [460, 1, 1, "", "exp"], [464, 1, 1, "", "expm1"], [468, 1, 1, "", "floor"], [472, 1, 1, "", "floor_divide"], [476, 1, 1, "", "greater"], [480, 1, 1, "", "greater_equal"], [484, 1, 1, "", "isfinite"], [488, 1, 1, "", "isinf"], [492, 1, 1, "", "isnan"], [496, 1, 1, "", "less"], [500, 1, 1, "", "less_equal"], [504, 1, 1, "", "log"], [508, 1, 1, "", "log10"], [512, 1, 1, "", "log1p"], [516, 1, 1, "", "log2"], [520, 1, 1, "", "logaddexp"], [524, 1, 1, "", "logical_and"], [528, 1, 1, "", "logical_not"], [532, 1, 1, "", "logical_or"], [536, 1, 1, "", "logical_xor"], [537, 1, 1, "", "maximum"], [538, 1, 1, "", "minimum"], [542, 1, 1, "", "multiply"], [547, 1, 1, "", "negative"], [551, 1, 1, "", "not_equal"], [555, 1, 1, "", "positive"], [559, 1, 1, "", "pow"], [563, 1, 1, "", "remainder"], [567, 1, 1, "", "round"], [571, 1, 1, "", "sign"], [576, 1, 1, "", "sin"], [580, 1, 1, "", "sinh"], [584, 1, 1, "", "sqrt"], [588, 1, 1, "", "square"], [593, 1, 1, "", "subtract"], [598, 1, 1, "", "tan"], [603, 1, 1, "", "tanh"], [607, 1, 1, "", "trunc"]], "ivy.functional.ivy.general": [[612, 1, 1, "", "all_equal"], [614, 1, 1, "", "arg_info"], [615, 1, 1, "", "arg_names"], [616, 1, 1, "", "array_equal"], [617, 1, 1, "", "arrays_equal"], [618, 1, 1, "", "assert_supports_inplace"], [619, 1, 1, "", "cache_fn"], [620, 1, 1, "", "clip_matrix_norm"], [623, 1, 1, "", "clip_vector_norm"], [624, 1, 1, "", "container_types"], [625, 1, 1, "", "copy_array"], [626, 1, 1, "", "cumprod"], [627, 1, 1, "", "cumsum"], [628, 1, 1, "", "current_backend_str"], [629, 1, 1, "", "default"], [630, 1, 1, "", "einops_rearrange"], [631, 1, 1, "", "einops_reduce"], [632, 1, 1, "", "einops_repeat"], [633, 1, 1, "", "exists"], [634, 1, 1, "", "floormod"], [635, 1, 1, "", "fourier_encode"], [636, 1, 1, "", "gather"], [640, 1, 1, "", "gather_nd"], [642, 1, 1, "", "get_all_arrays_in_memory"], [643, 1, 1, "", "get_min_base"], [644, 1, 1, "", "get_min_denominator"], [645, 1, 1, "", "get_num_dims"], [646, 1, 1, "", "get_referrers_recursive"], [647, 1, 1, "", "has_nans"], [648, 1, 1, "", "indices_where"], [649, 1, 1, "", "inplace_arrays_supported"], [650, 1, 1, "", "inplace_decrement"], [651, 1, 1, "", "inplace_increment"], [652, 1, 1, "", "inplace_update"], [653, 1, 1, "", "inplace_variables_supported"], [654, 1, 1, "", "is_array"], [655, 1, 1, "", "is_ivy_array"], [656, 1, 1, "", "is_ivy_container"], [657, 1, 1, "", "is_native_array"], [658, 1, 1, "", "match_kwargs"], [659, 1, 1, "", "multiprocessing"], [660, 1, 1, "", "num_arrays_in_memory"], [661, 1, 1, "", "one_hot"], [662, 1, 1, "", "print_all_arrays_in_memory"], [663, 1, 1, "", "queue_timeout"], [664, 1, 1, "", "scatter_flat"], [665, 1, 1, "", "scatter_nd"], [666, 1, 1, "", "set_min_base"], [667, 1, 1, "", "set_min_denominator"], [668, 1, 1, "", "set_queue_timeout"], [669, 1, 1, "", "set_shape_array_mode"], [670, 1, 1, "", "set_tmp_dir"], [671, 1, 1, "", "shape"], [672, 1, 1, "", "shape_array_mode"], [673, 1, 1, "", "shape_to_tuple"], [674, 1, 1, "", "stable_divide"], [675, 1, 1, "", "stable_pow"], [676, 1, 1, "", "supports_inplace"], [677, 1, 1, "", "tmp_dir"], [678, 1, 1, "", "to_list"], [679, 1, 1, "", "to_numpy"], [680, 1, 1, "", "to_scalar"], [681, 1, 1, "", "try_else_none"], [682, 1, 1, "", "unset_shape_array_mode"], [683, 1, 1, "", "unstack"], [684, 1, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[685, 2, 1, "", "GradientTracking"], [690, 1, 1, "", "adam_step"], [694, 1, 1, "", "adam_update"], [696, 1, 1, "", "execute_with_gradients"], [699, 1, 1, "", "gradient_descent_update"], [703, 1, 1, "", "is_variable"], [707, 1, 1, "", "lamb_update"], [711, 1, 1, "", "lars_update"], [715, 1, 1, "", "optimizer_update"], [717, 1, 1, "", "set_with_grads"], [718, 1, 1, "", "stop_gradient"], [719, 1, 1, "", "unset_with_grads"], [720, 1, 1, "", "variable"], [721, 1, 1, "", "variable_data"], [722, 1, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[685, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[724, 1, 1, "", "conv1d"], [725, 1, 1, "", "conv1d_transpose"], [726, 1, 1, "", "conv2d"], [727, 1, 1, "", "conv2d_transpose"], [728, 1, 1, "", "conv3d"], [729, 1, 1, "", "conv3d_transpose"], [730, 1, 1, "", "depthwise_conv2d"], [731, 1, 1, "", "dropout"], [732, 1, 1, "", "linear"], [733, 1, 1, "", "lstm_update"], [734, 1, 1, "", "multi_head_attention"], [735, 1, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[740, 1, 1, "", "cholesky"], [744, 1, 1, "", "cross"], [747, 1, 1, "", "det"], [750, 1, 1, "", "diagonal"], [753, 1, 1, "", "eigh"], [756, 1, 1, "", "eigvalsh"], [759, 1, 1, "", "inv"], [763, 1, 1, "", "matmul"], [766, 1, 1, "", "matrix_norm"], [767, 1, 1, "", "matrix_power"], [770, 1, 1, "", "matrix_rank"], [773, 1, 1, "", "matrix_transpose"], [776, 1, 1, "", "outer"], [779, 1, 1, "", "pinv"], [782, 1, 1, "", "qr"], [783, 1, 1, "", "slogdet"], [786, 1, 1, "", "solve"], [789, 1, 1, "", "svd"], [792, 1, 1, "", "svdvals"], [795, 1, 1, "", "tensordot"], [798, 1, 1, "", "trace"], [801, 1, 1, "", "vecdot"], [804, 1, 1, "", "vector_norm"], [807, 1, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[812, 1, 1, "", "binary_cross_entropy"], [817, 1, 1, "", "cross_entropy"], [822, 1, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[828, 1, 1, "", "clip"], [833, 1, 1, "", "concat"], [837, 1, 1, "", "constant_pad"], [841, 1, 1, "", "expand_dims"], [845, 1, 1, "", "flip"], [849, 1, 1, "", "permute_dims"], [853, 1, 1, "", "repeat"], [857, 1, 1, "", "reshape"], [861, 1, 1, "", "roll"], [863, 1, 1, "", "split"], [867, 1, 1, "", "squeeze"], [871, 1, 1, "", "stack"], [875, 1, 1, "", "swapaxes"], [879, 1, 1, "", "tile"], [883, 1, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[885, 1, 1, "", "fomaml_step"], [886, 1, 1, "", "maml_step"], [887, 1, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[889, 1, 1, "", "all_nested_indices"], [890, 1, 1, "", "copy_nest"], [891, 1, 1, "", "index_nest"], [892, 1, 1, "", "insert_into_nest_at_index"], [893, 1, 1, "", "insert_into_nest_at_indices"], [894, 1, 1, "", "map"], [895, 1, 1, "", "map_nest_at_index"], [896, 1, 1, "", "map_nest_at_indices"], [897, 1, 1, "", "multi_index_nest"], [898, 1, 1, "", "nested_any"], [899, 1, 1, "", "nested_indices_where"], [900, 1, 1, "", "nested_map"], [901, 1, 1, "", "nested_multi_map"], [902, 1, 1, "", "prune_nest_at_index"], [903, 1, 1, "", "prune_nest_at_indices"], [904, 1, 1, "", "set_nest_at_index"], [905, 1, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[910, 1, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[913, 1, 1, "", "multinomial"], [915, 1, 1, "", "randint"], [917, 1, 1, "", "random_normal"], [920, 1, 1, "", "random_uniform"], [922, 1, 1, "", "seed"], [923, 1, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[925, 1, 1, "", "argmax"], [926, 1, 1, "", "argmin"], [927, 1, 1, "", "nonzero"], [928, 1, 1, "", "where"]], "ivy.functional.ivy.set": [[930, 1, 1, "", "unique_all"], [935, 1, 1, "", "unique_counts"], [936, 1, 1, "", "unique_inverse"], [937, 1, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[942, 1, 1, "", "argsort"], [947, 1, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[953, 1, 1, "", "einsum"], [957, 1, 1, "", "max"], [961, 1, 1, "", "mean"], [965, 1, 1, "", "min"], [969, 1, 1, "", "prod"], [973, 1, 1, "", "std"], [977, 1, 1, "", "sum"], [981, 1, 1, "", "var"]], "ivy.functional.ivy.utility": [[986, 1, 1, "", "all"], [991, 1, 1, "", "any"]], "ivy.inspection": [[997, 1, 1, "", "add_array_specs"], [998, 1, 1, "", "fn_array_spec"]], "ivy.stateful": [[1001, 0, 0, "-", "activations"], [1004, 0, 0, "-", "converters"], [1006, 0, 0, "-", "initializers"], [1015, 0, 0, "-", "layers"], [1027, 0, 0, "-", "module"], [1029, 0, 0, "-", "norms"], [1031, 0, 0, "-", "optimizers"], [1037, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[1002, 2, 1, "", "GEGLU"], [1003, 2, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[1002, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[1003, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[1005, 1, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[1006, 2, 1, "", "Constant"], [1008, 2, 1, "", "FirstLayerSiren"], [1009, 2, 1, "", "GlorotUniform"], [1006, 2, 1, "", "KaimingNormal"], [1011, 2, 1, "", "Ones"], [1012, 2, 1, "", "Siren"], [1006, 2, 1, "", "Uniform"], [1014, 2, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[1006, 3, 1, "", "__init__"], [1006, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[1008, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[1009, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[1006, 3, 1, "", "__init__"], [1006, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[1011, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[1012, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[1006, 3, 1, "", "__init__"], [1006, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[1014, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[1016, 2, 1, "", "Conv1D"], [1017, 2, 1, "", "Conv1DTranspose"], [1018, 2, 1, "", "Conv2D"], [1019, 2, 1, "", "Conv2DTranspose"], [1020, 2, 1, "", "Conv3D"], [1021, 2, 1, "", "Conv3DTranspose"], [1022, 2, 1, "", "DepthwiseConv2D"], [1023, 2, 1, "", "Dropout"], [1024, 2, 1, "", "LSTM"], [1025, 2, 1, "", "Linear"], [1026, 2, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[1016, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[1017, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[1018, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[1019, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[1020, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[1021, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[1022, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[1023, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[1024, 3, 1, "", "__init__"], [1024, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[1025, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[1026, 3, 1, "", "__init__"]], "ivy.stateful.module": [[1028, 2, 1, "", "Module"]], "ivy.stateful.module.Module": [[1028, 3, 1, "", "__init__"], [1028, 3, 1, "", "build"], [1028, 4, 1, "", "build_mode"], [1028, 4, 1, "", "built"], [1028, 3, 1, "", "check_submod_rets"], [1028, 3, 1, "", "get_mod_key"], [1028, 3, 1, "", "mod_depth"], [1028, 3, 1, "", "mod_height"], [1028, 3, 1, "", "mod_with_top_mod_key_chain"], [1028, 3, 1, "", "save_weights"], [1028, 3, 1, "", "show_mod_in_top_mod"], [1028, 3, 1, "", "show_structure"], [1028, 3, 1, "", "show_v_in_top_v"], [1028, 3, 1, "", "sub_mods"], [1028, 3, 1, "", "track_submod_call_order"], [1028, 3, 1, "", "track_submod_rets"], [1028, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[1030, 2, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[1030, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[1032, 2, 1, "", "Adam"], [1033, 2, 1, "", "LAMB"], [1034, 2, 1, "", "LARS"], [1035, 2, 1, "", "Optimizer"], [1036, 2, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[1032, 3, 1, "", "__init__"], [1032, 3, 1, "", "set_state"], [1032, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[1033, 3, 1, "", "__init__"], [1033, 3, 1, "", "set_state"], [1033, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[1034, 3, 1, "", "__init__"], [1034, 3, 1, "", "set_state"], [1034, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[1035, 3, 1, "", "__init__"], [1035, 3, 1, "", "set_state"], [1035, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[1036, 3, 1, "", "__init__"], [1036, 3, 1, "", "set_state"], [1036, 4, 1, "", "state"]], "ivy.stateful.sequential": [[1038, 2, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[1038, 3, 1, "", "__init__"]], "ivy.verbosity": [[1041, 1, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"backend": [0, 116, 123, 132, 149], "handler": [0, 132], "choose_random_backend": 2, "clear_backend_stack": 3, "current_backend": 4, "get_backend": 5, "set_backend": 6, "try_import_ivy_jax": 7, "try_import_ivy_mxnet": 8, "try_import_ivy_numpi": 9, "try_import_ivy_tf": 10, "try_import_ivy_torch": 11, "unset_backend": 12, "background": [13, 993], "ml": 14, "explos": 14, "standard": 15, "skeptic": 15, "complimentari": 15, "vs": [15, 149], "competit": 15, "do": [15, 121], "work": [15, 21], "The": [15, 19, 134, 149], "arrai": [15, 23, 117, 120, 125, 134, 167, 180, 186, 194, 200, 211, 216, 224, 230, 235, 243, 253, 258, 263, 268, 277, 282, 289, 295, 300, 306, 370, 375, 379, 383, 388, 392, 397, 401, 405, 409, 413, 417, 421, 425, 429, 433, 437, 441, 445, 450, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 494, 498, 502, 506, 510, 514, 518, 522, 526, 530, 534, 540, 545, 549, 553, 557, 561, 565, 569, 574, 578, 582, 586, 591, 596, 601, 605, 610, 638, 688, 738, 743, 746, 749, 752, 755, 758, 761, 765, 769, 772, 775, 778, 781, 785, 788, 791, 794, 797, 800, 803, 806, 810, 815, 820, 826, 831, 835, 839, 843, 847, 851, 855, 859, 865, 869, 873, 877, 881, 908, 933, 940, 945, 951, 955, 959, 963, 967, 971, 975, 979, 984, 989], "api": [15, 20, 116, 120, 126, 132, 134, 136, 137], "why": [16, 121], "unifi": [16, 134], "No": [16, 18], "more": 16, "re": 16, "implement": 16, "infinit": 16, "shelf": 16, "life": 16, "contribut": [17, 993], "set": [18, 59, 105, 123, 929], "up": 18, "clone": 18, "ivi": [18, 116, 119, 121, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 167, 168, 169, 170, 177, 178, 180, 181, 182, 183, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 253, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 277, 278, 279, 282, 283, 284, 285, 289, 290, 291, 292, 295, 296, 297, 298, 300, 301, 302, 303, 306, 307, 308, 309, 370, 371, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 392, 393, 394, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 421, 422, 423, 425, 426, 427, 429, 430, 431, 433, 434, 435, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 454, 455, 456, 458, 459, 460, 462, 463, 464, 466, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 480, 482, 483, 484, 486, 487, 488, 490, 491, 492, 494, 495, 496, 498, 499, 500, 502, 503, 504, 506, 507, 508, 510, 511, 512, 514, 515, 516, 518, 519, 520, 522, 523, 524, 526, 527, 528, 530, 531, 532, 534, 535, 536, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 610, 611, 612, 613, 622, 623, 638, 639, 640, 641, 688, 689, 690, 691, 693, 694, 695, 698, 699, 700, 702, 703, 704, 706, 707, 708, 710, 711, 712, 714, 715, 716, 738, 739, 740, 741, 743, 744, 746, 747, 749, 750, 752, 753, 755, 756, 758, 759, 761, 762, 763, 765, 766, 769, 770, 772, 773, 775, 776, 778, 779, 781, 782, 785, 786, 788, 789, 791, 792, 794, 795, 797, 798, 800, 801, 803, 804, 806, 807, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 822, 823, 826, 827, 828, 829, 831, 832, 833, 835, 836, 837, 839, 840, 841, 843, 844, 845, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 865, 866, 867, 869, 870, 871, 873, 874, 875, 877, 878, 879, 881, 882, 883, 908, 909, 910, 911, 915, 916, 919, 920, 921, 932, 933, 934, 935, 940, 941, 942, 943, 945, 946, 947, 948, 951, 952, 953, 955, 956, 957, 959, 960, 961, 963, 964, 965, 967, 968, 969, 971, 972, 973, 975, 976, 977, 979, 980, 981, 984, 985, 986, 987, 989, 990, 991, 992], "pycharm": 18, "virtual": 18, "environ": 18, "docker": [18, 19, 21], "us": [18, 21, 135], "miniconda": [18, 21], "venv": [18, 21], "interpret": 18, "window": 18, "maco": 18, "ubuntu": 18, "github": 18, "codespac": 18, "pre": [18, 130], "commit": [18, 19, 130], "basic": 19, "get": 19, "help": 19, "todo": 19, "list": 19, "issu": 19, "manag": 19, "your": 19, "fork": 19, "who": 19, "To": 19, "ask": 19, "With": 19, "command": 19, "line": 19, "browser": 19, "pull": 19, "request": 19, "small": 19, "often": 19, "run": 19, "test": [19, 120, 121], "local": 19, "open": 20, "task": 20, "function": [20, 117, 121, 122, 124, 126, 127, 128, 132, 137, 149], "format": [20, 130], "frontend": [20, 137], "build": [21, 132], "doc": 21, "dockerless": 21, "document": 21, "pipelin": [21, 149], "make_doc": 21, "sh": 21, "entrypoint": 21, "_make_doc": 21, "generate_src_rst_fil": 21, "py": 21, "sphinx": 21, "correct_built_html_fil": 21, "remove_fil": 21, "data": [22, 33, 79, 121, 127, 135, 149, 246, 929, 930, 931, 935, 937], "class": [22, 134, 1000], "activ": [24, 70, 160, 1001], "arraywithactiv": 25, "convers": 26, "args_to_ivi": 27, "args_to_n": 28, "to_ivi": 29, "to_n": 30, "creation": [31, 77, 175], "arraywithcr": 32, "type": [33, 79, 122, 127, 149, 246], "arraywithdatatyp": 34, "devic": [35, 81, 117, 128, 318], "arraywithdevic": 36, "elementwis": [37, 83, 368], "arraywithelementwis": 38, "gener": [39, 85, 121, 608], "arraywithgener": 40, "gradient": [41, 87, 685], "arraywithgradi": 42, "imag": [43, 89], "arraywithimag": 44, "layer": [45, 91, 723, 1015], "arraywithlay": 46, "linear": [47, 93, 732, 736, 1025], "algebra": [47, 93, 736], "arraywithlinearalgebra": 48, "loss": [49, 95, 808], "arraywithloss": 50, "manipul": [51, 97, 824], "arraywithmanipul": 52, "norm": [53, 99, 906, 1029], "arraywithnorm": 54, "random": [55, 101, 912], "arraywithrandom": 56, "search": [57, 103, 924], "arraywithsearch": 58, "arraywithset": 60, "sort": [61, 107, 938, 944, 945, 946, 947], "arraywithsort": 62, "statist": [63, 109, 949], "arraywithstatist": 64, "util": [65, 111, 982], "arraywithutil": 66, "wrap": [67, 113, 124], "add_ivy_array_instance_method": 68, "contain": [69, 74, 75, 126, 135, 168, 170, 178, 181, 183, 187, 189, 192, 195, 197, 201, 203, 206, 209, 212, 214, 217, 219, 222, 225, 227, 229, 231, 234, 236, 239, 242, 244, 254, 256, 259, 261, 264, 266, 269, 271, 278, 283, 285, 290, 292, 296, 298, 301, 303, 307, 309, 371, 373, 376, 380, 384, 386, 389, 393, 395, 398, 402, 406, 410, 414, 418, 422, 426, 430, 434, 438, 442, 446, 448, 451, 455, 459, 463, 467, 471, 475, 479, 483, 487, 491, 495, 499, 503, 507, 511, 515, 519, 523, 527, 531, 535, 541, 543, 546, 550, 554, 558, 562, 566, 570, 572, 575, 579, 583, 587, 590, 592, 595, 597, 600, 602, 606, 611, 613, 622, 639, 641, 689, 691, 693, 695, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 739, 741, 762, 811, 813, 816, 818, 821, 823, 827, 829, 832, 836, 840, 844, 848, 852, 856, 860, 862, 866, 870, 874, 878, 882, 909, 911, 916, 919, 921, 932, 934, 941, 943, 946, 948, 952, 956, 960, 964, 968, 972, 976, 980, 985, 987, 990, 992], "containerwithactiv": 71, "base": 72, "containerbas": 73, "multidevcontain": 76, "containerwithcr": 78, "containerwithdatatyp": 80, "containerwithdevic": 82, "containerwithelementwis": 84, "containerwithgener": 86, "containerwithgradi": 88, "containerwithimag": 90, "containerwithlay": 92, "containerwithlinearalgebra": 94, "containerwithloss": 96, "containerwithmanipul": 98, "containerwithnorm": 100, "containerwithrandom": 102, "containerwithsearch": 104, "containerwithset": 106, "containerwithsort": 108, "containerwithstatist": 110, "containerwithutil": 112, "add_ivy_container_instance_method": 114, "deep": 115, "dive": 115, "navig": 116, "code": 116, "categor": 116, "submodul": 116, "design": [116, 131, 993], "argument": [117, 127, 128, 129], "exampl": [117, 119, 130], "out": [117, 129], "dtype": [117, 276, 277, 278, 279], "number": 117, "oper": [117, 134, 149], "integ": 117, "sequenc": 117, "nestabl": [117, 122, 126], "docstr": [118, 119], "tan": [119, 594, 596, 597, 598], "roll": [119, 858, 859, 860, 861], "add": [119, 382, 383, 384, 385], "hypothesi": 121, "import": 121, "strategi": 121, "integr": 121, "we": 121, "need": 121, "helper": 121, "how": 121, "write": 121, "effect": 121, "bonu": 121, "extend": 121, "featur": 121, "self": 121, "consist": 121, "explicit": 121, "test_array_funct": 121, "primari": 122, "composit": 122, "mix": 122, "standalon": 122, "conveni": 122, "nativ": 125, "handl": 125, "instanc": [126, 134], "method": [126, 134, 135], "static": 126, "special": 126, "modul": [127, 128, 136, 1027, 1028], "other": [127, 128], "inplac": 129, "updat": 129, "copi": 129, "lint": 130, "check": [130, 149], "hook": 130, "automat": 130, "reformat": 130, "befor": 130, "block": 132, "framework": [132, 133, 1000], "graph": [132, 137], "compil": [132, 137, 172, 173], "monkei": 134, "patch": 134, "construct": 135, "represent": 135, "recurs": 135, "built": 135, "ins": 135, "access": 135, "save": 135, "load": 135, "comparison": 135, "custom": [135, 149], "case": 135, "compartment": 135, "configur": 135, "network": [135, 137], "weight": 135, "state": [136, 149], "initi": [136, 1006], "optim": [136, 1031, 1035], "transpil": 137, "role": 137, "convert": [137, 1004], "model": [137, 144, 149], "builder": 139, "ecosystem": 140, "gym": [141, 148], "mech": 142, "memori": [143, 148], "robot": [145, 148], "vision": [146, 148], "extens": [147, 993], "appli": 148, "librari": 148, "mechan": 148, "faq": 149, "maintain": 149, "version": 149, "dynam": 149, "size": 149, "shape": [149, 671, 929, 930, 931, 935, 937], "control": 149, "flow": 149, "auto": 149, "differenti": 149, "replica": 149, "parallel": 149, "support": 149, "altern": 149, "structur": 149, "func": 150, "wrapper": 150, "handle_nest": 151, "handle_out_argu": 152, "infer_devic": 153, "infer_dtyp": 154, "inputs_to_ivy_arrai": 155, "inputs_to_native_arrai": 156, "outputs_to_ivy_arrai": 157, "to_native_arrays_and_back": 158, "gelu": [161, 1003], "leaky_relu": 162, "relu": 163, "sigmoid": 164, "softmax": 165, "softplu": [166, 167, 168, 169], "static_softplu": 170, "tanh": [171, 599, 601, 602, 603], "constant": 174, "note": [175, 193, 196], "arang": [176, 177], "static_arang": 178, "asarrai": [179, 180, 181, 182], "static_asarrai": 183, "empti": 184, "empty_lik": [185, 186, 187, 188], "static_empty_lik": 189, "ey": [190, 191], "static_ey": 192, "from_dlpack": [193, 194, 195, 196], "static_from_dlpack": 197, "full": 198, "full_lik": [199, 200, 201, 202], "static_full_lik": 203, "linspac": [204, 205], "static_linspac": 206, "logspac": [207, 208], "static_logspac": 209, "meshgrid": [210, 211, 212, 213], "static_meshgrid": 214, "native_arrai": [215, 216, 217, 218], "static_native_arrai": 219, "ones": [220, 221], "static_on": 222, "ones_lik": [223, 224, 225, 226], "static_ones_lik": 227, "tril": [228, 230, 231, 232], "static_tril": 229, "triu": [233, 235, 236, 237], "static_triu": 234, "zero": [238, 240, 1014], "static_zero": 239, "zeros_lik": [241, 243, 244, 245], "static_zeros_lik": 242, "as_ivy_dtyp": 250, "as_native_dtyp": 251, "astyp": [252, 253, 254, 255], "static_astyp": 256, "broadcast_arrai": [257, 258, 259, 260], "static_broadcast_arrai": 261, "broadcast_to": [262, 263, 264, 265], "static_broadcast_to": 266, "can_cast": [267, 268, 269, 270], "static_can_cast": 271, "closest_valid_dtyp": 272, "default_dtyp": 273, "default_float_dtyp": 274, "default_int_dtyp": 275, "dtype_bit": 280, "finfo": [281, 282, 283, 284], "static_finfo": 285, "function_supported_dtyp": 286, "function_unsupported_dtyp": 287, "iinfo": [288, 289, 290, 291], "static_iinfo": 292, "invalid_dtyp": 293, "is_float_dtyp": [294, 295, 296, 297], "static_is_float_dtyp": 298, "is_int_dtyp": [299, 300, 301, 302], "static_is_int_dtyp": 303, "promote_typ": 304, "result_typ": [305, 306, 307, 308], "static_result_typ": 309, "set_default_dtyp": 310, "set_default_float_dtyp": 311, "set_default_int_dtyp": 312, "type_promote_arrai": 313, "unset_default_dtyp": 314, "unset_default_float_dtyp": 315, "unset_default_int_dtyp": 316, "valid_dtyp": 317, "devcloneditem": 320, "devclonedit": 321, "devclonednest": 322, "devdistitem": 323, "devdistit": 324, "devdistnest": 325, "devmapp": 327, "devmappermultiproc": 328, "multidevitem": 330, "multidevit": 331, "multidevnest": 332, "profil": 333, "as_ivy_dev": 334, "as_native_dev": 335, "clear_mem_on_dev": 336, "default_devic": 337, "dev": 338, "dev_clon": 339, "dev_clone_arrai": 340, "dev_clone_it": 341, "dev_clone_nest": 342, "dev_dist": 343, "dev_dist_arrai": 344, "dev_dist_it": 345, "dev_dist_nest": 346, "dev_unifi": 347, "dev_unify_arrai": 348, "dev_unify_it": 349, "dev_unify_nest": 350, "dev_util": 351, "get_all_ivy_arrays_on_dev": 352, "gpu_is_avail": 353, "num_cpu_cor": 354, "num_gpu": 355, "num_ivy_arrays_on_dev": 356, "percent_used_mem_on_dev": 357, "print_all_ivy_arrays_on_dev": 358, "set_default_devic": 359, "set_split_factor": 360, "split_factor": 361, "split_func_cal": 362, "to_devic": 363, "total_mem_on_dev": 364, "tpu_is_avail": 365, "unset_default_devic": 366, "used_mem_on_dev": 367, "ab": [369, 370, 371, 372], "static_ab": 373, "aco": [374, 375, 376, 377], "acosh": [378, 379, 380, 381], "static_add": 386, "asin": [387, 388, 389, 390], "asinh": [391, 392, 393, 394], "static_asinh": 395, "atan": [396, 397, 398, 399], "atan2": [400, 401, 402, 403], "atanh": [404, 405, 406, 407], "bitwise_and": [408, 409, 410, 411], "bitwise_invert": [412, 413, 414, 415], "bitwise_left_shift": [416, 417, 418, 419], "bitwise_or": [420, 421, 422, 423], "bitwise_right_shift": [424, 425, 426, 427], "bitwise_xor": [428, 429, 430, 431], "ceil": [432, 433, 434, 435], "co": [436, 437, 438, 439], "cosh": [440, 441, 442, 443], "divid": [444, 445, 446, 447], "static_divid": 448, "equal": [449, 450, 451, 452], "erf": [453, 454, 455, 456], "exp": [457, 458, 459, 460], "expm1": [461, 462, 463, 464], "floor": [465, 466, 467, 468], "floor_divid": [469, 470, 471, 472], "greater": [473, 474, 475, 476], "greater_equ": [477, 478, 479, 480], "isfinit": [481, 482, 483, 484], "isinf": [485, 486, 487, 488], "isnan": [489, 490, 491, 492], "less": [493, 494, 495, 496], "less_equ": [497, 498, 499, 500], "log": [501, 502, 503, 504], "log10": [505, 506, 507, 508], "log1p": [509, 510, 511, 512], "log2": [513, 514, 515, 516], "logaddexp": [517, 518, 519, 520], "logical_and": [521, 522, 523, 524], "logical_not": [525, 526, 527, 528], "logical_or": [529, 530, 531, 532], "logical_xor": [533, 534, 535, 536], "maximum": 537, "minimum": 538, "multipli": [539, 540, 541, 542], "static_multipli": 543, "neg": [544, 545, 546, 547], "not_equ": [548, 549, 550, 551], "posit": [552, 553, 554, 555], "pow": [556, 557, 558, 559], "remaind": [560, 561, 562, 563], "round": [564, 565, 566, 567], "sign": [568, 569, 570, 571], "static_sign": 572, "sin": [573, 574, 575, 576], "sinh": [577, 578, 579, 580], "sqrt": [581, 582, 583, 584], "squar": [585, 586, 587, 588], "subtract": [589, 591, 592, 593], "static_subtract": 590, "static_tan": 595, "static_tanh": 600, "trunc": [604, 605, 606, 607], "all_equ": [609, 610, 611, 612], "static_all_equ": 613, "arg_info": 614, "arg_nam": 615, "array_equ": 616, "arrays_equ": 617, "assert_supports_inplac": 618, "cache_fn": 619, "clip_matrix_norm": 620, "clip_vector_norm": [621, 622, 623], "container_typ": 624, "copy_arrai": 625, "cumprod": 626, "cumsum": 627, "current_backend_str": 628, "default": 629, "einops_rearrang": 630, "einops_reduc": 631, "einops_repeat": 632, "exist": 633, "floormod": 634, "fourier_encod": 635, "gather": 636, "gather_nd": [637, 638, 639, 640], "static_gather_nd": 641, "get_all_arrays_in_memori": 642, "get_min_bas": 643, "get_min_denomin": 644, "get_num_dim": 645, "get_referrers_recurs": 646, "has_nan": 647, "indices_wher": 648, "inplace_arrays_support": 649, "inplace_decr": 650, "inplace_incr": 651, "inplace_upd": 652, "inplace_variables_support": 653, "is_arrai": 654, "is_ivy_arrai": 655, "is_ivy_contain": 656, "is_native_arrai": 657, "match_kwarg": 658, "multiprocess": 659, "num_arrays_in_memori": 660, "one_hot": 661, "print_all_arrays_in_memori": 662, "queue_timeout": 663, "scatter_flat": 664, "scatter_nd": 665, "set_min_bas": 666, "set_min_denomin": 667, "set_queue_timeout": 668, "set_shape_array_mod": 669, "set_tmp_dir": 670, "shape_array_mod": 672, "shape_to_tupl": 673, "stable_divid": 674, "stable_pow": 675, "supports_inplac": 676, "tmp_dir": 677, "to_list": 678, "to_numpi": 679, "to_scalar": 680, "try_else_non": 681, "unset_shape_array_mod": 682, "unstack": 683, "value_is_nan": 684, "adam_step": [687, 688, 689, 690], "static_adam_step": 691, "adam_upd": [692, 693, 694], "static_adam_upd": 695, "execute_with_gradi": 696, "gradient_descent_upd": [697, 698, 699], "static_gradient_descent_upd": 700, "is_vari": [701, 702, 703], "static_is_vari": 704, "lamb_upd": [705, 706, 707], "static_lamb_upd": 708, "lars_upd": [709, 710, 711], "static_lars_upd": 712, "optimizer_upd": [713, 714, 715], "static_optimizer_upd": 716, "set_with_grad": 717, "stop_gradi": 718, "unset_with_grad": 719, "variabl": 720, "variable_data": 721, "with_grad": 722, "conv1d": [724, 1016], "conv1d_transpos": 725, "conv2d": [726, 1018], "conv2d_transpos": 727, "conv3d": [728, 1020], "conv3d_transpos": 729, "depthwise_conv2d": 730, "dropout": [731, 1023], "lstm_updat": 733, "multi_head_attent": 734, "scaled_dot_product_attent": 735, "choleski": [737, 738, 739, 740], "static_choleski": 741, "cross": [742, 743, 744], "det": [745, 746, 747], "diagon": [748, 749, 750], "eigh": [751, 752, 753], "eigvalsh": [754, 755, 756], "inv": [757, 758, 759], "matmul": [760, 761, 762, 763], "matrix_norm": [764, 765, 766], "matrix_pow": 767, "matrix_rank": [768, 769, 770], "matrix_transpos": [771, 772, 773], "outer": [774, 775, 776], "pinv": [777, 778, 779], "qr": [780, 781, 782], "slogdet": 783, "solv": [784, 785, 786], "svd": [787, 788, 789], "svdval": [790, 791, 792], "tensordot": [793, 794, 795], "trace": [796, 797, 798], "vecdot": [799, 800, 801], "vector_norm": [802, 803, 804], "vector_to_skew_symmetric_matrix": [805, 806, 807], "binary_cross_entropi": [809, 810, 811, 812], "static_binary_cross_entropi": 813, "cross_entropi": [814, 815, 816, 817], "static_cross_entropi": 818, "sparse_cross_entropi": [819, 820, 821, 822], "static_sparse_cross_entropi": 823, "clip": [825, 826, 827, 828], "static_clip": 829, "concat": [830, 831, 832, 833], "constant_pad": [834, 835, 836, 837], "expand_dim": [838, 839, 840, 841], "flip": [842, 843, 844, 845], "permute_dim": [846, 847, 848, 849], "repeat": [850, 851, 852, 853], "reshap": [854, 855, 856, 857], "static_rol": 862, "split": 863, "squeez": [864, 865, 866, 867], "stack": [868, 869, 870, 871], "swapax": [872, 873, 874, 875], "tile": [876, 877, 878, 879], "zero_pad": [880, 881, 882, 883], "meta": 884, "fomaml_step": 885, "maml_step": 886, "reptile_step": 887, "nest": 888, "all_nested_indic": 889, "copy_nest": 890, "index_nest": 891, "insert_into_nest_at_index": 892, "insert_into_nest_at_indic": 893, "map": 894, "map_nest_at_index": 895, "map_nest_at_indic": 896, "multi_index_nest": 897, "nested_ani": 898, "nested_indices_wher": 899, "nested_map": 900, "nested_multi_map": 901, "prune_nest_at_index": 902, "prune_nest_at_indic": 903, "set_nest_at_index": 904, "set_nest_at_indic": 905, "layer_norm": [907, 908, 909, 910], "static_layer_norm": 911, "multinomi": 913, "randint": [914, 915], "static_randint": 916, "random_norm": 917, "random_uniform": [918, 919, 920], "static_random_uniform": 921, "seed": 922, "shuffl": 923, "argmax": 925, "argmin": 926, "nonzero": 927, "where": 928, "depend": [929, 930, 931, 935, 937], "output": [929, 930, 931, 935, 937], "unique_al": 930, "unique_count": [931, 933, 934, 935], "static_unique_count": 932, "unique_invers": 936, "unique_valu": 937, "argsort": [939, 940, 941, 942], "static_argsort": 943, "static_sort": 948, "einsum": [950, 951, 952, 953], "max": [954, 955, 956, 957], "mean": [958, 959, 960, 961], "min": [962, 963, 964, 965], "prod": [966, 967, 968, 969], "std": [970, 971, 972, 973], "sum": [974, 975, 976, 977], "var": [978, 979, 980, 981], "all": [983, 984, 985, 986], "static_al": 987, "ani": [988, 989, 990, 991], "static_ani": 992, "content": 993, "overview": 993, "quick": 993, "start": 993, "roadmap": [993, 999], "citat": 993, "inspect": 996, "add_array_spec": 997, "fn_array_spec": 998, "geglu": 1002, "to_ivy_modul": 1005, "firstlayersiren": 1008, "glorotuniform": 1009, "Ones": 1011, "siren": 1012, "conv1dtranspos": 1017, "conv2dtranspos": 1019, "conv3dtranspos": 1021, "depthwiseconv2d": 1022, "lstm": 1024, "multiheadattent": 1026, "layernorm": 1030, "adam": 1032, "lamb": 1033, "lar": 1034, "sgd": 1036, "sequenti": [1037, 1038], "verbos": 1040, "cprint": 1041}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})